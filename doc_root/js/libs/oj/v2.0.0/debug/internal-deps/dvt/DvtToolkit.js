/**
 * Copyright (c) 2014, 2016, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 */
"use strict";
define([], function() {
  // Internal use only.  All APIs and functionality are subject to change at any time.

  // Create DvtObj so that it will be able to export the classes as needed.
  var D = window;
  var DvtObj = function(){};
  DvtObj['owner'] = D;
  D['DvtObj'] = DvtObj;

// Copyright (c) 2008, 2015, Oracle and/or its affiliates. All rights reserved.

/**
 * Base object for HTML toolkit derivative objects.
 * @class The base object for HTML toolkit derivative objects.
 * @constructor
 */
var DvtObj = this ? this.DvtObj : null;

// If DvtObj not defined on this, look for it on the window. Used in JET.
if (!DvtObj)
  DvtObj = window ? window.DvtObj : null;

// If still not defined, then create
if (!DvtObj) {
  DvtObj = function() {};

  // Assign the window to the owner field of DvtObj if a window is present.  This allows the code
  // in createSubclass to expose the class names on the window, which is needed when loading the
  // script inside of a function body.
  if (typeof(window) != 'undefined')
    DvtObj[DvtObj._OWNER_KEY] = window;
}

DvtObj._GET_FUNCTION_NAME_REGEXP = /function\s+([\S^]+)\s*\(/;

/**
 * @const
 * @private
 */
DvtObj._OWNER_KEY = 'owner';

DvtObj.prototype = {};
DvtObj.prototype.constructor = DvtObj;


/**
 *  Provides inheritance by subclassing a class from a given base class.
 *  @param  {class} extendingClass  The class to be extended from the base class.
 *  @param  {class} baseClass  The base class
 *  @param  {string} typeName The type of the extending class
 */
DvtObj.createSubclass = function(extendingClass, baseClass, typeName) {
  if (extendingClass === undefined || extendingClass === null) {
    return;
  }

  // Expose the classes on the owner, which will usually be the window object.
  if (DvtObj[DvtObj._OWNER_KEY])
    DvtObj[DvtObj._OWNER_KEY][typeName] = extendingClass;

  if (baseClass === undefined) {
    // assume Object
    baseClass = Object;
  }

  if (extendingClass == baseClass) {
    return;
  }

  // use a temporary constructor to get our superclass as our prototype
  // without out having to initialize the superclass
  var tempConstructor = DvtObj._tempSubclassConstructor;

  tempConstructor.prototype = baseClass.prototype;
  extendingClass.prototype = new tempConstructor();

  extendingClass.prototype.constructor = extendingClass;
  extendingClass.superclass = baseClass.prototype;

  if (typeName)
    extendingClass._typeName = typeName;
};


/**  @private  */
DvtObj._tempSubclassConstructor = function() {};

DvtObj.getTypeName = function(clazz) {
  var typeName = clazz._typeName;
  if (typeName == null) {
    var constructorText = clazz.toString();
    var matches = DvtObj._GET_FUNCTION_NAME_REGEXP.exec(constructorText);

    typeName = matches[1];

    clazz._typeName = typeName;
  }

  return typeName;
};

DvtObj.prototype.getTypeName = function() {
  return DvtObj.getTypeName(this.constructor);
};


/*-------------------------------------------------------------------*/
/*   clone()                                                         */
/*-------------------------------------------------------------------*/
/**
  *  Returns a copy of this object.  Abstract method, subclasses
  *   must implement.
  *  @type {DvtObj}
  */
DvtObj.prototype.clone = function()
{
  return null;
};


/*-------------------------------------------------------------------*/
/*   mergeProps()                                                    */
/*-------------------------------------------------------------------*/
/**
  *   Merge properties in the current object into the supplied object.
  *   Abstract method, subclasses must implement. Used internally by clone().
  *   @param {DvtObj}
  *   @private
  */
DvtObj.prototype.mergeProps = function(obj)
{
};

/**
  * Creates a callback function
  *
  * @param {object} thisPtr the object that should be "this" when the function is called
  * @param {function} func the function to create the callback for
  *
  * @return {function} the callback function
  */
DvtObj.createCallback = function(thisPtr, func) {
  return function() {
    return func.apply(thisPtr, arguments);
  };
};


//:
/**
 * Define a constant value such that the advanced closure compiler will not simply do an inline replace of the
 * value everywhere it's referenced.  The compiled code should then contain abbreviated references to the constant
 * instead of the literal value, which should help decrease overall code size.
 * @param {object} constValue value to define for the constant
 * @return {object}
 */
DvtObj.defineConstant = function(constValue) {
  return constValue;
};
// Copyright (c) 2008, 2016, Oracle and/or its affiliates. All rights reserved.
/*-------------------------------------------------------------------------*/
/*   DvtArrayUtils         Miscellaneous array utility functions           */
/*-------------------------------------------------------------------------*/
/**
  *  @class  DvtArrayUtils  A static class providing miscellaneous array utility
  *  functions.
  */
var DvtArrayUtils = new Object();

DvtObj.createSubclass(DvtArrayUtils, DvtObj, 'DvtArrayUtils');

//  Factor scaling operation types for toFloat()


/**
  * Factor operation for DvtArrayUtils.toFloat() - no scaling of converted float.
  * @final
  */
DvtArrayUtils.NONE = 0;


/**
  * Factor operation for DvtArrayUtils.toFloat() - add factor to converted float.
  * @final
  */
DvtArrayUtils.ADD = 1;


/**
  * Factor operation for DvtArrayUtils.toFloat() - subtract factor from converted float.
  * @final
  */
DvtArrayUtils.SUB = 2;


/**
  * Factor operation for DvtArrayUtils.toFloat() - divide converted float by factor.
  * @final
  */
DvtArrayUtils.DIV = 3;


/**
  * Factor operation for DvtArrayUtils.toFloat() - multiply converted float by factor.
  * @final
  */
DvtArrayUtils.MULT = 4;


/**
  *  Factor operation for DvtArrayUtils.toFloat() - set converted float to mod(factor).
  * @final
  */
DvtArrayUtils.MOD = 5;



DvtArrayUtils.argsToArray = function(args)
{
  if (args)
  {
    var array = new Array(args.length);
    if (args.length > 0)
    {
      for (var i = 0; i < args.length; i++)
      {
        array[i] = args[i];
      }
    }
    return array;
  }
  return args;
};


/*--------------------------------------------------------------------*/
/*  isArray()          Cross-browser array detection                  */
/*--------------------------------------------------------------------*/
/**
  *   Test if the specified object is an instance of Array (cross-browser safe).
  * @base DvtArrayUtils
  *   @param {Object}  obj
  *   @type {Boolean}
  *   @return true if the object is an Array.
  */
DvtArrayUtils.isArray = function(obj)
{
  // check for undefined explicitly because the second clauses will blow up in Rhino
  return typeof obj != 'undefined' && Object.prototype.toString.apply(obj) === '[object Array]';
};


/*--------------------------------------------------------------------*/
/*  toFloat()                                                         */
/*--------------------------------------------------------------------*/
/**
  *  Converts an array from string values to floats.  If optional 'factor'
  *  argument is supplied, the array values are scaled by this factor using
  *  the factorType  operator. e.g. <p><code>
  *  &nbsp; &nbsp; &nbsp;  DvtArrayUtils.toFloat(ar, 0.01, DvtArrayUtils.MULT) ;<p></code>
  *  converts an array of percentage value strings to an array of floats converted
  *  to dcimal percentages (between zero and 1).
  *  @param {Array} ar
  *  @param {number} factor
  *  @param {number} factorType
  *  @type {Array}
  *  @return the Array that was supplied as the first argument.
  */
DvtArrayUtils.toFloat = function(ar, factor, factorType)
{
  if (! DvtArrayUtils.isArray(ar)) {
    return ar;
  }

  if (! factor) {
    factorType = DvtArrayUtils.NONE;
  }

  factorType = (factorType === null || isNaN(factorType)) ? DvtArrayUtils.NONE : factorType;

  if (factorType !== DvtArrayUtils.NONE) {
    if ((typeof factor) !== 'number') {
      factor = parseFloat(factor);
    }
    if (isNaN(factor)) {
      factorType = DvtArrayUtils.NONE;
    }
  }

  var len = ar.length;
  var i;

  if (factorType === DvtArrayUtils.NONE) {
    for (i = 0; i < len; i++) {
      ar[i] = parseFloat(ar[i]);
    }
  }
  else {
    for (i = 0; i < len; i++) {
      var v = parseFloat(ar[i]);

      switch (factorType) {
        case DvtArrayUtils.MULT: v *= factor;
        break;
        case DvtArrayUtils.ADD: v += factor;
        break;
        case DvtArrayUtils.SUB: v -= factor;
        break;
        case DvtArrayUtils.DIV: v /= factor;
        break;
        case DvtArrayUtils.MOD: v %= factor;
        break;
      }
      ar[i] = v;
    }

  }

  return ar;
};


/*--------------------------------------------------------------------*/
/*   copy()       Performs a shallow copy of the array. (Much faster  */
/*                than Array.concat().                                */
/*--------------------------------------------------------------------*/
/**
  *  Create a shallow copy of the supplied array.
  *  @param {Array} ar The array to be copied.
  *  @type {Array}
  *  @return A shallow copy of the supplied array.
  */
DvtArrayUtils.copy = function(ar)
{
  var arRet;

  if (ar) {
    arRet = [];
    var len = ar.length;

    for (var i = 0; i < len; i++) {
      arRet.push(ar[i]);
    }
  }
  return arRet;
};


/**
  *  Returns the index of the first occurrence of an item in an array.
  *  @param {Array} array  The array to be searched.
  *  @param {Object} item  The item to be found.
  *  @type {number}
  */
DvtArrayUtils.getIndex = function(array, item) 
{
  if (array) {
    if (array.indexOf)
      return array.indexOf(item);

    for (var i = 0; i < array.length; i++) {
      if (array[i] === item) {
        return i;
      }
    }
  }
  return -1;
};

/**
  *  Returns the index of the last occurrence of an item in an array.
  *  @param {Array} array  The array to be searched.
  *  @param {Object} item  The item to be found.
  *  @type {number}
  */
DvtArrayUtils.getLastIndex = function(array, item) 
{
  if (array.lastIndexOf)
    return array.lastIndexOf(item);

  for (var i = array.length - 1; i >= 0; i--) {
    if (array[i] === item) {
      return i;
    }
  }
  return -1;
};

/**
 * Returns true if the two arrays have the same contents.
 * @param {array} a
 * @param {array} b
 */
DvtArrayUtils.equals = function(a, b) {
  if (!a && b)
    return false;
  else if (a && !b)
    return false;
  else if (!a && !b)
    return true;
  else // a && b
  {
    if (a.length != b.length)
      return false;

    // Compare the individual items
    for (var i = 0; i <= a.length; i++) {
      if (a[i] !== b[i])
        return false;
    }

    // Everything matched, return true
    return true;
  }
};

/**
 * Returns true if the specified map has any of the specified array items.
 * @param {Object} map The boolean map within which to look for the items.
 * @param {array} items The array of items to look for.
 * @return {boolean}
 */
DvtArrayUtils.hasAnyMapItem = function(map, items) {
  // Return false if either array is empty
  if (!map || !items)
    return false;

  // Look for each of the items
  for (var i = 0; i < items.length; i++) {
    if (map[items[i]])
      return true;
  }

  // No match found, return false
  return false;
};

/**
 * Returns true if the specified map has all of the specified array items.
 * @param {Object} map The boolean map within which to look for the items.
 * @param {array} items The array of items to look for.
 * @return {boolean}
 */
DvtArrayUtils.hasAllMapItems = function(map, items) {
  // Return true if the items array is empty
  if (!map || !items)
    return false;

  // Look for each of the items
  for (var i = 0; i < items.length; i++) {
    if (!map[items[i]])
      return false;
  }

  // No missing items found, return true
  return true;
};

/**
 * Returns true if the specified array has any of the specified items.
 * @param {array} array The array within which to look for the items.
 * @param {array} items The array of items to look for.
 * @return {boolean}
 */
DvtArrayUtils.hasAnyItem = function(array, items) {
  return DvtArrayUtils.hasAnyMapItem(DvtArrayUtils.createBooleanMap(array), items);
};

/**
 * Returns true if the specified array has all of the specified items.
 * @param {array} array The array within which to look for the items.
 * @param {array} items The array of items to look for.
 * @return {boolean}
 */
DvtArrayUtils.hasAllItems = function(array, items) {
  return DvtArrayUtils.hasAllMapItems(DvtArrayUtils.createBooleanMap(array), items);
};

/**
 * Creates and returns a map whose keys are the items in the specified array. This map will return true if index by an
 * item in the array.
 * @param {array} array
 * @return {object}
 */
DvtArrayUtils.createBooleanMap = function(array) {
  if (!array)
    return null;

  var ret = {};
  for (var i = 0; i < array.length; i++) {
    ret[array[i]] = true;
  }
  return ret;
};

/**
 * Applies a function against an accumulator and each value of the array (from left-to-right) to reduce it to a single value.
 * @param {array} array The array to apply reduce function to
 * @param {function} callback The function to apply
 * @return {Object}
 */
DvtArrayUtils.reduce = function(array, callback) {
  if (array.reduce)
    return array.reduce(callback);

  var len = array.length;
  var val = array[0];
  for (var i = 1; i < len; i++)
    val = callback(val, array[i], i, array);
  return val;
};

/**
 * Creates a new array with the results of calling a provided function on every element in this array.
 * @param {array} array The array to apply map function to
 * @param {function} callback The function to apply
 * @return {array}
 */
DvtArrayUtils.map = function(array, callback) {
  if (array.map)
    return array.map(callback);

  var len = array.length;
  var ar = [];
  for (var i = 0; i < len; i++)
    ar[i] = callback(array[i], i, array);

  return ar;
};

/**
 * Executes a provided function once per array element
 * @param {array} array The array to apply map function to
 * @param {function} callback The function to apply
 */
DvtArrayUtils.forEach = function(array, callback) {
  if (array.map) {
    array.forEach(callback);
  } else {
    var len = array.length;
    for (var i = 0; i < len; i++)
      callback(array[i], i, array);
  }
};
// Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.
/*-------------------------------------------------------------------------*/
/*   DvtStringUtils         Miscellaneous string utility functions         */
/*-------------------------------------------------------------------------*/
/**
  *  @class  DvtStringUtils  A static class providing miscellaneous string utility
  *  functions.
  */
var DvtStringUtils = {};

DvtObj.createSubclass(DvtStringUtils, DvtObj, 'DvtStringUtils');

/**
 * Perform a check to see if native String APIs is available, since they are much faster.
 * @private
 */
DvtStringUtils._hasTrim = 'hello'.trim != null;

/**
 * Perform a check to see if native String APIs is available, since they are much faster.
 * @private
 */
DvtStringUtils._hasEndsWith = 'hello'.endsWith != null;

/**
 * Removes leading and trailing whitespace from a string.
 * @param {string} s  The string to be trimmed.
 * @return {string} A string with leading and trailing whitespace removed.
 */
DvtStringUtils.trim = function(s)
{
  if (DvtStringUtils._hasTrim)
    return s.trim();
  else
    return s.replace(/^\s+|\s+$/g, '');
};


/**
 * Returns true if the specified string ends with the specified suffix.
 * @param {string} s The string to check.
 * @param {string} suffix The suffix that the search string should end with.
 * @return {boolean}
 */
DvtStringUtils.endsWith = function(s, suffix)
{
  if (DvtStringUtils._hasEndsWith)
    return s.endsWith(suffix);
  else
    return (s.match(suffix + '$') == suffix);
};

/**
 * Returns a processed aria label where all supported HTML formatting characters are removed.
 * @param {string} label
 * @return {string}
 */
DvtStringUtils.processAriaLabel = function(label) {
  var ret = label;

  // Make all brackets consistent to simplify later searches
  ret = ret.replace(/(<|&#60;)/g, '&lt;');
  ret = ret.replace(/(>|&#62;)/g, '&gt;');

  // Strip out bold and italic tags
  ret = ret.replace(/&lt;b&gt;/g, '');
  ret = ret.replace(/&lt;\/b&gt;/g, '');
  ret = ret.replace(/&lt;i&gt;/g, '');
  ret = ret.replace(/&lt;\/i&gt;/g, '');

  // Replace logical newlines sequences with semicolons
  ret = ret.replace(/\n/g, '; ');
  ret = ret.replace(/&#92;n/g, '; ');
  ret = ret.replace(/&lt;br&gt;/g, '; ');
  ret = ret.replace(/&lt;br\/&gt;/g, '; ');

  return ret;
};
// Copyright (c) 2008, 2016, Oracle and/or its affiliates. All rights reserved.
/**
 * Context object corresponding to an SVG document. The constructor creates a SVG document inside the specified
 * container.
 * @param {Element} container The div element under which the SVG document will be created.
 * @param {string} id
 * @param {Element=} referenceDiv An optional div element to use as a reference point for calculating the absolute
 *                                 position of the stage.
 * @extends {DvtObj}
 * @class DvtContext
 * @constructor
 * @export
 */
var DvtContext = function(container, id, referenceDiv) {
  // Create the SVG document and add to the container
  var svgId = id ? id + '_svg' : null;
  this._root = DvtToolkitUtils.createSvgDocument(svgId);
  container.appendChild(this._root);//@HTMLUpdateOK

  // Save a reference to the svg element's parent div for updating the active descendent needed for accessibility
  this._parentDiv = container;

  // Store a reference to the div used for calculating the absolute position of the stage.
  this._referenceDiv = referenceDiv;

  // Create the impl factory, defs, and stage
  this._implFactory = new DvtSvgImplFactory(this);
  this._defs = this._implFactory.newDefs();
  DvtToolkitUtils.appendChildElem(this._root, this._defs);

  this._keyboardFocusArray = [];
  this._keyboardFocusIndex = 0;

  this.Init(this._implFactory, this._root, id);

  // Add the stage element
  DvtToolkitUtils.appendChildElem(this._root, this._stage.getElem());
};

DvtObj.createSubclass(DvtContext, DvtObj, 'DvtContext');


/**
 * @const
 * @private
 */
DvtContext._DATATIP_POPUP_STYLE_CLASS = 'OraDVTDatatipPopup';
/**
 * @const
 * @private
 */
DvtContext._TOOLTIP_POPUP_STYLE_CLASS = 'OraDVTTooltipPopup';

/** @private @const */
DvtContext._DEFAULT_FONT_FAMILY = '\'Helvetica Neue\', Helvetica, Arial, sans-serif';

/** @private */
DvtContext._DEFAULT_FONT_FAMILIES = {'\'Helvetica Neue\', Helvetica, Arial, sans-serif': true,
  '"Helvetica Neue", Helvetica, Arial, sans-serif': true,
  '"Helvetica Neue",Helvetica,Arial,sans-serif': true};

/** @private @const */
DvtContext._DEFAULT_FONT_SIZE = '12px';

/** @private */
DvtContext._id = 0;

/**
  * Initializes this context object with the platform dependent objects.
  * @param  {DvtSvgImplFactory} implFactory
  * @param  {DOMElement} root
  * @param  {string} id
  * @protected
  */
DvtContext.prototype.Init = function(implFactory, root, id) {
  this._implFactory = implFactory;

  var stageId = (id ? id : '_dvt' + DvtContext._id) + '_stage';
  this._stage = new DvtStage(this, root, stageId);     // TODO use naming utils
  DvtContext._id++;

  // Apply the default font properties to the stage for inheritance
  DvtToolkitUtils.setAttrNullNS(this._stage.getElem(), 'font-family', this.getDefaultFontFamily());
  DvtToolkitUtils.setAttrNullNS(this._stage.getElem(), 'font-size', this.getDefaultFontSize());

  this._tooltipManagers = new Object();
  this._customTooltipManagers = new Object();

  this._scheduler = null;

  //: map of DvtClipPath objects stored by id
  this._globalDefsMap = {};
};

/**
 * Returns the default CSS font family that is applied to the stage.
 * @return {string}
 */
DvtContext.prototype.getDefaultFontFamily = function() {
  return DvtContext._DEFAULT_FONT_FAMILY;
};

/**
 * Returns true if the specified fontFamily is equal to the default (or one of its syntactic equivalents)
 * @param {string} fontFamily
 * @return {boolean} true if the fontFamily is the default, false otherwise
 */
DvtContext.prototype.isDefaultFontFamily = function(fontFamily) {
  return DvtContext._DEFAULT_FONT_FAMILIES[fontFamily] == true;
};

/**
 * Returns the default CSS font size that is applied to the stage.
 * @return {string}
 */
DvtContext.prototype.getDefaultFontSize = function() {
  return DvtContext._DEFAULT_FONT_SIZE;
};

/**
 *  Returns a platform dependent implementation factory of the one and only
 *  implementation factory object.
 *  @return {DvtSvgImplFactory}
 */
DvtContext.prototype.getImplFactory = function() {
  return this._implFactory;
};


/**
 *  Returns a platform dependent implementation of the one and only
 *  stage.
 *  @return {DvtStage}
 *  @export
 */
DvtContext.prototype.getStage = function() {
  return this._stage;
};

/**
 * Returns true if this DvtContext is ready to support component rendering.  This will be false when the SVG document
 * is not attached to a visible subtree of the DOM.
 * @return {boolean}
 * @export
 */
DvtContext.prototype.isReadyToRender = function() {
  // Check if the parent div is connected to the DOM and not hidden via display:none. This indicates that
  // we can perform measurement, which is a pre-requisite for us to render.
  var ancestor = this._parentDiv;
  while (ancestor && ancestor != document) {
    if (ancestor.style && ancestor.style.display == 'none')
      return false;

    ancestor = ancestor.parentNode;
  }

  // The ancestor will be the document if all parents are connected.
  return ancestor == document;
};

/**
 * Returns the SVG document corresponding to this context instance.
 * @return {Element}
 * @export
 */
DvtContext.prototype.getSvgDocument = function() {
  return this._root;
};


/**
 * Specifies the reading direction for the context.  This is used by DvtAgent.isRightToLeft(context) overriding the
 * reading direction from the DOM when specified.
 * @param {string} dir The reading direction string, such as "rtl" or "ltr".
 * @export
 */
DvtContext.prototype.setReadingDirection = function(dir) {
  this._readingDirection = dir;
};


/**
 * Returns the reading direction for the context, if specified.  Component developers should use DvtAgent.isRightToLeft
 * instead, as that function will determine the reading direction from the DOM when not specified on the context.
 * @return {string} The reading direction string if specified on the context, null otherwise.
 */
DvtContext.prototype.getReadingDirection = function() {
  return this._readingDirection;
};


/**
  * Adds a reference count for the global def element with the given id
  * @param {string} id The id of the global def element
  */
DvtContext.prototype.increaseGlobalDefReference = function(id) {
  // The id of the element must be valid to continue
  if (id == null)
    return;

  if (this._globalDefsMap[id])
    this._globalDefsMap[id] = this._globalDefsMap[id]++;
  else
    this._globalDefsMap[id] = 1;
};


/**
  * Removes a reference count for the global def element with the given id
  * @param {string} id The id of the global def element
  */
DvtContext.prototype.decreaseGlobalDefReference = function(id) {
  // The id of the element must be valid to continue
  if (id == null)
    return;

  // Update the reference count for this clip path id
  var refCount = this._globalDefsMap[id];
  if (refCount) {
    if (refCount == 1)
      delete this._globalDefsMap[id];
    else
      this._globalDefsMap[id] = refCount--;
  }

  // If no longer referenced, remove the clip path from the defs
  if (!this._globalDefsMap[id])
    this.removeDefsById(id);
};

/**
 * Returns a platform dependent implementation of the one and only
 * tooltip manager.
 * @param {string} id
 * @return {DvtTooltipManager}
 */
DvtContext.prototype.getTooltipManager = function(id) {
  if (!id)
    id = '_dvtTooltip';
  var stageId = this.getStage().getId();
  id = id + stageId;
  var manager = this._tooltipManagers[id];
  if (!manager) {
    this._tooltipManagers[id] = this._implFactory.newTooltipManager(id);
  }
  return this._tooltipManagers[id];
};

/**
 * Hides tooltips shown by tooltip managers registered with the context
 * @export
 */
DvtContext.prototype.hideTooltips = function() {
  for (var id in this._tooltipManagers) {
    this._tooltipManagers[id].hideTooltip();
  }
};

/**
  * Get the single scheduler instance for this context.
  * @return {DvtScheduler}
  */
DvtContext.prototype.getScheduler = function() {
  if (!this._scheduler)
  {
    this._scheduler = new DvtScheduler(this);
  }

  return this._scheduler;
};


/**
  * Obtain document utils singleton.
  * @return {Object}
  */
DvtContext.prototype.getDocumentUtils = function() {
  return this._implFactory.getDocumentUtils();
};


/**
 * Returns the specified page coordinates relative to the stage.
 * @param {number} pageX
 * @param {number} pageY
 * @return {DvtPoint}
 */
DvtContext.prototype.pageToStageCoords = function(pageX, pageY) {
  var stagePos = this.getStageAbsolutePosition();
  var xPos = pageX - stagePos.x;
  var yPos = pageY - stagePos.y;
  return new DvtPoint(xPos, yPos);
};


/**
 * Returns the specified stage coordinates relative to the page.
 * @param {number} stageX The x coordinate, relative to the stage.
 * @param {number} stageY The y coordinate, relative to the stage.
 * @return {DvtPoint}
 */
DvtContext.prototype.stageToPageCoords = function(stageX, stageY) {
  var stagePos = this.getStageAbsolutePosition();
  var xPos = stageX + stagePos.x;
  var yPos = stageY + stagePos.y;
  return new DvtPoint(xPos, yPos);
};


/**
 * Returns the coordinates of the stage, relative to the page.  This is an expensive operation which is optimized by
 * using a cache, managed by DvtEventManager.
 * @return {DvtPoint}
 */
DvtContext.prototype.getStageAbsolutePosition = function() {
  // If a cached value is available, use it
  if (this._stageAbsolutePosition)
    return this._stageAbsolutePosition;


  // Use a reference element at the same position at the SVG whenever possible.  The browser functions used in DvtAgent's
  // getElementPosition do not always return the correct values for SVG elements, especially in Firefox.  Note that we
  // can ensure the presence of a parent div at the same coordinates across all our supported frameworks, so this
  // issue will never occur in the real product.
  var referenceElem = this._referenceDiv;
  if (!referenceElem) {
    var svgRoot = this.getStage().getImpl().getSVGRoot();
    referenceElem = svgRoot.parentNode ? svgRoot.parentNode : svgRoot;
  }

  // Note: As mentioned above, this returns the wrong position in Firefox for SVG elements.
  var svgPos = DvtAgent.getElementPosition(referenceElem);

  this._stageAbsolutePosition = new DvtPoint(parseInt(svgPos.x), parseInt(svgPos.y));
  return this._stageAbsolutePosition;
};

/**
 * Clears the cached value for the stage position.
 */
DvtContext.prototype.clearStageAbsolutePosition = function() {
  this._stageAbsolutePosition = null;
};

/**
 * Returns true if the SVG for this context is fully offscreen.
 * @return {boolean}
 */
DvtContext.prototype.isOffscreen = function() {
  // Note: This code ignores the FF bug in getBoundingClientRect, which is supposed to be fixed in FF33. This should be
  // okay as the current behavior only returns sizes larger than the actual.
  var referenceElem = this.getStage().getImpl().getSVGRoot();
  var rect = referenceElem.getBoundingClientRect();
  return rect.bottom < 0 || rect.right < 0 ||
         rect.top > (window.innerHeight || document.documentElement.clientHeight) ||
         rect.left > (window.innerWidth || document.documentElement.clientWidth);
};

/**
 * Returns the DvtCustomTooltipManager for the given id.
 * @param {string} id
 * @return {DvtCustomTooltipManager}
 */
DvtContext.prototype.getCustomTooltipManager = function(id)
{
  if (!id)
    id = '_dvtCustomTooltip';
  var stageId = this.getStage().getId();
  id = id + stageId;
  var manager = this._customTooltipManagers[id];
  if (!manager) {
    this._customTooltipManagers[id] = new DvtCustomTooltipManager(this, id);
  }
  return this._customTooltipManagers[id];
};


/**
 * Append element(s) to the application global <defs> element.
 * @param {object} elem
 */
DvtContext.prototype.appendDefs = function(elem)
{
  DvtToolkitUtils.appendChildElem(this._defs, elem);
};


/**
  *   @return {DOM_Element}  the global <defs> DOM element
  */
DvtContext.prototype.getDefs = function()
{
  return this._defs;
};


/**
  *   @return {DvtSvgImplFactory}  the platform implementation factory.
  */
DvtContext.prototype.getImplFactory = function()
{
  return this._implFactory;
};


/**
  * Removes the specified element from the global <defs> element.
  * @param {object} elem
  */
DvtContext.prototype.removeDefs = function(elem)
{
  this._defs.removeChild(elem);
};


/**
  * Removes the element with the specified id from the global <defs> element.
  * @param {string} id
  */
DvtContext.prototype.removeDefsById = function(id)
{
  var defs = this._defs.childNodes;
  var len = defs.length;
  for (var i = 0; i < len; i++) {
    var def = defs[i];
    if (def.id === id) {
      this._defs.removeChild(def);
      return;
    }
  }
};

/**
 * Returns the value of the attribute on the root element
 * @param {string} attrName Attribute name
 * @return {string} value of the attribute
 */
DvtContext.prototype.getRootAttribute = function(attrName) {
  return DvtToolkitUtils.getAttrNullNS(this._root, attrName);
};


/**
 * Clears all unique seeds used for filter, clip path, gradient, and af component id generation.
 * Should only be called by Junit tests.
 * @export
 */
DvtContext.resetUniqueSeeds = function() {
  if (DvtAgent.isEnvironmentBrowser())
    return;

  if (typeof DvtAfComponent != 'undefined')
    DvtAfComponent._uniqueSeed = 0;
  DvtSvgFilterUtils._counter = 0;
  DvtClipPath._uniqueSeed = 0;
  DvtSvgShapeUtils._uniqueSeed = 0;
  DvtMask._uniqueSeed = 0;
  DvtAgent._bInitialized = false;
};

/**
 * Clears all caches used for text and af components.
 * Should only be called by Junit tests.
 * @export
 */
DvtContext.resetCaches = function() {
  if (DvtAgent.isEnvironmentBrowser())
    return;

  if (typeof DvtAfComponent != 'undefined')
    DvtAfStyleUtils.resetStyles();
  DvtOutputText._cache = null;
  DvtTextUtils._cachedTextDimensions = {};
  DvtMarkerUtils._cache = {};

  if (typeof(DvtLedGaugeRenderer) != 'undefined')
    DvtLedGaugeRenderer._cache = null;
};

/**
 * Sets the wai-aria active-descendent to be the given displayable.
 * @param {DvtDisplayable} displayable The new active displayable.
 */
DvtContext.prototype.setActiveElement = function(displayable) {
  if (!DvtAgent.isEnvironmentBrowser())
    return;

  // Clear the id of the current active element.  This field is only set if a temp id was applied earlier.
  if (this._activeElement) {
    DvtToolkitUtils.removeAttrNullNS(this._activeElement.getElem(), 'id');
    this._activeElement = null;
  }

  // Get the ID of the elem. If it doesn't have an ID, create one for it.
  var elem = displayable.getElem();
  var id = DvtToolkitUtils.getAttrNullNS(elem, 'id');
  if (!id) {
    id = displayable.getId();
    if (id) {
      // Apply the existing id
      DvtToolkitUtils.setAttrNullNS(elem, 'id', id);
    }
    else {
      // Generate a temporary id
      id = DvtEventManager._getActiveElementId();
      DvtToolkitUtils.setAttrNullNS(elem, 'id', id);
      this._activeElement = displayable;
    }
  }

  // Ensure that aria properties have been written to the DOM
  displayable.applyAriaProperties();

  // Update the active descendant to point to the displayable
  if (this._role == 'application')
    this._parentDiv.setAttribute('aria-activedescendant', id);
};

/**
 * Sets the wai-aria label property on the containing div.
 * @param {string} ariaLabel
 */
DvtContext.prototype.setAriaLabel = function(ariaLabel) {
  // Don't overwrite application set aria-label
  if (!this._parentDiv.getAttribute('aria-label')) {
    if (ariaLabel)
      this._parentDiv.setAttribute('aria-label', DvtStringUtils.processAriaLabel(ariaLabel));
    else
      this._parentDiv.removeAttribute('aria-label');
  }
};

/**
 * Sets the wai-aria role property on the containing div.
 * @param {string} role
 */
DvtContext.prototype.setAriaRole = function(role) {
  if (role)
    this._parentDiv.setAttribute('role', role);
  else
    this._parentDiv.removeAttribute('role');

  this._role = role;
};

/**
 * Sets the callback to be invoked when the tooltip is attached. Used in JET to support JET components in the custom
 * tooltips.
 * @param {function} callback
 * @export
 */
DvtContext.prototype.setTooltipAttachedCallback = function(callback) {
  this._tooltipAttachedCallback = callback;
};

/**
 * Returns the callback to be invoked when the tooltip is attached. Used in JET to support JET components in the custom
 * tooltips.
 * @return {?function}
 */
DvtContext.prototype.getTooltipAttachedCallback = function() {
  return this._tooltipAttachedCallback;
};

/**
 * Sets the style class to use for the tooltip popup div
 * @param {String} styleClass The tooltip popup div style class
 * @export
 */
DvtContext.prototype.setTooltipStyleClass = function(styleClass) {
  this._tooltipStyleClass = styleClass;
};

/**
 * Returns the style class to use for the tooltip popup div
 * @return {String}
 */
DvtContext.prototype.getTooltipStyleClass = function() {
  return this._tooltipStyleClass ? this._tooltipStyleClass : DvtContext._TOOLTIP_POPUP_STYLE_CLASS;
};

/**
 * Sets the style class to use for the datatip popup div
 * @param {String} styleClass The datatip popup div style class
 * @export
 */
DvtContext.prototype.setDatatipStyleClass = function(styleClass) {
  this._datatipStyleClass = styleClass;
};

/**
 * Returns the style class to use for the datatip popup div
 * @return {String}
 */
DvtContext.prototype.getDatatipStyleClass = function() {
  return this._datatipStyleClass ? this._datatipStyleClass : DvtContext._DATATIP_POPUP_STYLE_CLASS;
};


/**
 * Sets an array of keyboard listeners that are connected through tabbing. The context will initially focus on
 * the first component in the array. Shift the focus to the next/previous component using nextKeyboardFocus() and
 * previousKeyboardFocus().
 * @param {array} displayables Array of keyboard listeners.
 */
DvtContext.prototype.setKeyboardFocusArray = function(displayables) {
  this._keyboardFocusArray = displayables;
  this._keyboardFocusIndex = 0;

  if (displayables.length > 0) {
    var wrappingDiv = this._root.parentNode;
    wrappingDiv._currentObj = this._keyboardFocusArray[this._keyboardFocusIndex];
  }
};

/**
 * Returns the component of the current Keyboard Focus.
 * @return {DvtDisplayable} The current component.
 */
DvtContext.prototype.getCurrentKeyboardFocus = function() {
  if (this._keyboardFocusArray.length <= this._keyboardFocusIndex) {
    return null;
  }
  else {
    return this._keyboardFocusArray[this._keyboardFocusIndex];
  }
};

/**
 * Sets the current Keyboard Focus.
 * @param {DvtDisplayable} newKeyboardFocus component that the current keyboard focus will be set to.
 * @return {boolean} Whether the Focus was successfully set.
 */
DvtContext.prototype.setCurrentKeyboardFocus = function(newKeyboardFocus) {
  var newFocusIndex = DvtArrayUtils.getIndex(this._keyboardFocusArray, newKeyboardFocus);
  if (newFocusIndex == -1) {
    return false;
  }
  var currentObj = this._keyboardFocusArray[newFocusIndex];
  this._keyboardFocusIndex = newFocusIndex;
  var wrappingDiv = this._root.parentNode;
  wrappingDiv._currentObj = currentObj;
  return true;
};


/**
 * Shifts the keyboard focus to the next component and returns the component.
 * @return {DvtDisplayable} The next component.
 */
DvtContext.prototype.nextKeyboardFocus = function() {
  var currentObj = this._keyboardFocusArray[this._keyboardFocusIndex + 1];
  if (currentObj) {
    this._keyboardFocusIndex++;
    var wrappingDiv = this._root.parentNode;
    wrappingDiv._currentObj = currentObj;
    return currentObj;
  }
  else
    return null;
};

/**
 * Shifts the keyboard focus to the previous component and returns the component.
 * @return {DvtDisplayable} The next component.
 */
DvtContext.prototype.previousKeyboardFocus = function() {
  var currentObj = this._keyboardFocusArray[this._keyboardFocusIndex - 1];
  if (currentObj) {
    this._keyboardFocusIndex--;
    var wrappingDiv = this._root.parentNode;
    wrappingDiv._currentObj = currentObj;
    return currentObj;
  }
  else
    return null;
};

/**
 * Returns a number converter if it's set by the consuming framework layer. Supported options
 * are limited to minimumFractionDigits and maximumFractionDigits.
 * @param {object} options containing the minimumFractionDigits and maximumFractionDigits.
 * @return {object} the converter or null
 */
DvtContext.prototype.getNumberConverter = function(options) {
  var localeHelpers = this.getLocaleHelpers();
  if (localeHelpers['numberConverterFactory'])
    return localeHelpers['numberConverterFactory']['createConverter'](options);

  return null;
};

/**
 * Returns the localeHelpers object or an empty object if none are defined.
 * @return {object}
 */
DvtContext.prototype.getLocaleHelpers = function() {
  return this._localeHelpers ? this._localeHelpers : {};
};

/**
 * Sets the localeHelpers object, which may contain isoToDateConverter, dateToIsoConverter, and numberConverterFactory.
 * @param {object} helpers
 * @export
 */
DvtContext.prototype.setLocaleHelpers = function(helpers) {
  this._localeHelpers = helpers;
};

/**
 * Polyfill for requestAnimationFrame.
 * @param {function} callback The function that will be executed.
 * @return {number} A long integer value that uniquely identifies the entry in the callback list. This can be passed to
 *                  DvtContext.cancelAnimationFrame to cancel the request.
 */
DvtContext.requestAnimationFrame = function(callback) {
  if (window.requestAnimationFrame)
    return window.requestAnimationFrame(callback);
  else
    return window.setTimeout(callback, 1000 / 30);
};

/**
 * Polyfill for cancelAnimationFrame.
 * @param {number} requestId A long integer value that uniquely identifies the entry in the callback list.
 */
DvtContext.cancelAnimationFrame = function(requestId) {
  if (window.cancelAnimationFrame)
    window.cancelAnimationFrame(requestId);
  else
    clearTimeout(requestId);
};
/**
 * A base class for shape fills, strokes, shadows, etc.
 * {@link DvtLockable}.
 * @extends {DvtObj}
 * @class DvtLockable  A base class for shape fills, strokes,shadows, etc.
 * @constructor  Do not create/use directly.
 */
var DvtLockable = function() {
  this._Init();
};

DvtObj.createSubclass(DvtLockable, DvtObj, 'DvtLockable');


/**
 * @private
 */
DvtLockable.prototype._Init = function() {
  this._bLocked = false;
};


/**
 *  Returns true if the fill object is immutable, else false.
 *  @type {Boolean}
 */
DvtLockable.prototype.isLocked = function() {
  return this._bLocked;
};


/**
 *  Makes the property set immutable.  The only way to change the object's
 *  properties once it is immutable is to clone it and apply property changes
 *  to the cloned object.  This method should not be called by application code
 *  and should only be used by toolkit code.
 *  @private
 */
DvtLockable.prototype.__lock = function() {
  this._bLocked = true;
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class representing an item that can be scheduled to run with a scheduler.
  * @extends {DvtObj}
  * @class DvtScheduled
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  * @param {DvtScheduler}  scheduler  scheduler used to run this item
  * @param {number}  duration  length of time to run item, in seconds
  * @param {number}  delay  time to delay start of item, in seconds
  * @param {function}  easing  easing function to use with this item
  */
var DvtScheduled = function(context, scheduler, duration, delay, easing)
{
  this.Init(context, scheduler, duration, delay, easing);
};

DvtObj.createSubclass(DvtScheduled, DvtObj, 'DvtScheduled');


/**
  * @private
  * State: initialize.
  */
DvtScheduled._STATE_INITIALIZE = 0;


/**
  * @private
  * State: begin.
  */
DvtScheduled._STATE_BEGIN = 1;


/**
  * @private
  * State: run.
  */
DvtScheduled._STATE_RUN = 2;


/**
  * @protected
  * Calculate the percent progress of the given value between the min and max.
  *
  * @param {number}  val  current value
  * @param {number}  min  minimum value
  * @param {number}  max  maximum value
  * @type {number}
  */
DvtScheduled.CalcProgress = function(val, min, max)
{
  var diff = (max - min);
  if (diff == 0)
  {
    return 0.5;
  }
  else
  {
    var ret = ((val - min) / diff);
    if (ret > 1)
    {
      ret = 1;
    }
    return ret;
  }
};


/**
  * @protected
  */
DvtScheduled.prototype.Init = function(context, scheduler, duration, delay, easing)
{
  this._context = context;

  this._scheduler = scheduler;
  this.setDuration(duration); //in seconds
  this.setDelay(delay); //in seconds
  this.setEasing(easing);

  this._bRunning = false;
  this._startTime = null;
  this._progress = 0;
  this._state = DvtScheduled._STATE_INITIALIZE;

  this._onInit = null;
  this._onInitObj = null;
  this._onStart = null;
  this._onStartObj = null;
  this._onEnd = null;
  this._onEndObj = null;
  this._onStep = null;
  this._onStepObj = null;
};


/**
  * Get the duration of this item, in seconds.
  *
  * @type {number}
  */
DvtScheduled.prototype.getDuration = function()
{
  return this._duration;
};


/**
  * Set the duration of this item.
  *
  * @param {number}  duration  duration of this item, in seconds
  */
DvtScheduled.prototype.setDuration = function(duration)
{
  this._duration = (duration ? duration : 0.5);
};


/**
  * Get the delay for the start of this item, in seconds.
  *
  * @type {number}
  */
DvtScheduled.prototype.getDelay = function()
{
  return this._delay;
};


/**
  * Set the delay for the start of this item.
  *
  * @param {number}  delay  delay for the start of this item, in seconds
  */
DvtScheduled.prototype.setDelay = function(delay)
{
  this._delay = (delay ? delay : 0);
};


/**
  * Get the easing function for this animation.
  *
  * @type {function}
  */
DvtScheduled.prototype.getEasing = function()
{
  return this._easing;
};


/**
  * Set the easing function for this animation.
  *
  * @param {function}  easing  easing function
  */
DvtScheduled.prototype.setEasing = function(easing)
{
  this._easing = (easing ? easing : DvtEasing.cubicInOut);
};


/**
  * Set the function to call when this item initializes.
  *
  * @param {function}  onInit  function to call when this item initializes
  * @param {object}  onInitObj  optional reference to object instance on which the
  *        function is defined
  */
DvtScheduled.prototype.setOnInit = function(onInit, onInitObj)
{
  this._onInit = onInit;
  if (onInitObj)
  {
    this._onInitObj = onInitObj;
  }
  else
  {
    this._onInitObj = null;
  }
};


/**
  * Get the function to call when this item initializes.
  * Returns an array of two elements:
  * [0] the function
  * [1] optional reference to object instance on which the function is defined
  *
  * @type {array}
  */
DvtScheduled.prototype.getOnInit = function()
{
  return [this._onInit, this._onInitObj];
};


/**
  * Set the function to call when this item starts.
  *
  * @param {function}  onStart  function to call when this item starts
  * @param {object}  onStartObj  optional reference to object instance on which the
  *        function is defined
  */
DvtScheduled.prototype.setOnStart = function(onStart, onStartObj)
{
  this._onStart = onStart;
  if (onStartObj)
  {
    this._onStartObj = onStartObj;
  }
  else
  {
    this._onStartObj = null;
  }
};


/**
  * Get the function to call when this item starts.
  * Returns an array of two elements:
  * [0] the function
  * [1] optional reference to object instance on which the function is defined
  *
  * @type {array}
  */
DvtScheduled.prototype.getOnStart = function()
{
  return [this._onStart, this._onStartObj];
};


/**
  * Set the function to call when this item ends.
  *
  * @param {function}  onEnd  function to call when this item ends
  * @param {object}  onEndObj  optional reference to object instance on which the
  *        function is defined
  */
DvtScheduled.prototype.setOnEnd = function(onEnd, onEndObj)
{
  this._onEnd = onEnd;
  if (onEndObj)
  {
    this._onEndObj = onEndObj;
  }
  else
  {
    this._onEndObj = null;
  }
};


/**
  * Get the function to call when this item ends.
  * Returns an array of two elements:
  * [0] the function
  * [1] optional reference to object instance on which the function is defined
  *
  * @type {array}
  */
DvtScheduled.prototype.getOnEnd = function()
{
  return [this._onEnd, this._onEndObj];
};


/**
  * Set the function to call at each step of this item.
  *
  * @param {function}  onStep  function to call at each step of this item
  * @param {object}  onStepObj  optional reference to object instance on which the
  *        function is defined
  */
DvtScheduled.prototype.setOnStep = function(onStep, onStepObj)
{
  this._onStep = onStep;
  if (onStepObj)
  {
    this._onSepObj = onStepObj;
  }
  else
  {
    this._onStepObj = null;
  }
};


/**
  * Get the function to call at each step of this item.
  * Returns an array of two elements:
  * [0] the function
  * [1] optional reference to object instance on which the function is defined
  *
  * @type {array}
  */
DvtScheduled.prototype.getOnStep = function()
{
  return [this._onStep, this._onStepObj];
};


/**
  * Determine if this item is running.
  *
  * @type {boolean}
  */
DvtScheduled.prototype.isRunning = function()
{
  return this._bRunning;
};


/**
  * Play this item.
  * @param {boolean} bImmediate true to begin the animation immediately.  This should generally be false when used by
  *                             components, so that the animation is started after the browser rendering is complete.
  */
DvtScheduled.prototype.play = function(bImmediate)
{
  if (bImmediate)
    this._play();
  else // Play after a quick timeout allowing the browser to render the bulk of the DOM and any subsequent components.
    DvtContext.requestAnimationFrame(DvtObj.createCallback(this, this._play));
};

/**
 * Called by play with an optional timeout to enable the animation to run more smoothly.
 * @private
 */
DvtScheduled.prototype._play = function() {
  if (!this._bRunning)
  {
    this._bRunning = true;
    this.ProcessPlay();
    this._scheduler.addScheduled(this);
  }

  // If offscreen, stop the animation immediately and jump to end
  if (this._context.isOffscreen())
    this.stop(true);
};

/**
  * Stop this item.
  *
  * @param {boolean}  bJumpToEnd  true to jump to 100% progress,
  *        false to stop at current progress
  */
DvtScheduled.prototype.stop = function(bJumpToEnd)
{
  this._scheduler.removeScheduled(this);
  if (bJumpToEnd)
  {
    this.ProcessStep(1);
  }
  this.ProcessEnd();
};


/**
  * Pause this item.
  */
DvtScheduled.prototype.pause = function()
{
  this._bRunning = false;
  //this._scheduler.removeScheduled(this);
};


/**
  * Reset this item.
  */
DvtScheduled.prototype.reset = function()
{
  this._state = DvtScheduled._STATE_INITIALIZE;
};


/**
  * Process this item for the given timestamp.
  *
  * @param {number}  time  current timestamp, in milliseconds
  */
DvtScheduled.prototype.processTime = function(time)
{
  if (!this._bRunning)
  {
    return;
  }

  var elapsedTime = time - this._startTime;
  if (elapsedTime < 0)
  {
    return false;
  }

  var duration = 1000 * this.GetTotalDuration();
  var progress = 1;
  if (duration != 0)
  {
    progress = elapsedTime / duration;
  }
  if (progress > 1)
  {
    progress = 1;
  }
  this.ProcessStep(progress);

  var bDone = (progress >= 1);
  if (bDone)
  {
    this.ProcessEnd();
  }
  return bDone;
};


/**
  * @protected
  * Get the total duration of this item, in seconds.
  *
  * @type {number}
  */
DvtScheduled.prototype.GetTotalDuration = function()
{
  return this._delay + this._duration;
};


/**
  * @protected
  * Process when this item is played.
  */
DvtScheduled.prototype.ProcessPlay = function()
{
  if (this._state == DvtScheduled._STATE_INITIALIZE)
  {
    this.ProcessInitialize();
  }

  if (this._state == DvtScheduled._STATE_BEGIN)
  {
    this._startTime = new Date().getTime();
    this.ProcessStart();
  }
  else
  {
    var elapsedTime = this._progress * 1000 * this.GetTotalDuration();
    this._startTime = new Date().getTime() - elapsedTime;
  }

  this._state = DvtScheduled._STATE_RUN;
};


/**
  * @protected
  * Process initialization of this item when it starts to play.
  */
DvtScheduled.prototype.ProcessInitialize = function()
{
  if (this._onInit)
  {
    this._onInit.call(this._onInitObj);
  }
  this.Initialize();
  this._state = DvtScheduled._STATE_BEGIN;
};


/**
  * @protected
  * Process the start of this item after it initializes.
  */
DvtScheduled.prototype.ProcessStart = function()
{
  this._bRunning = true;
  this._progress = 0;
  this.Start();
  if (this._onStart)
  {
    this._onStart.call(this._onStartObj);
  }
};


/**
  * @protected
  * Process a step of this item as it plays.
  *
  * @param {number}  progress  percent progress of this item
  */
DvtScheduled.prototype.ProcessStep = function(progress)
{
  this._progress = progress;
  var prog = progress;
  if (this._delay > 0)
  {
    prog = DvtScheduled.CalcProgress(progress, this._delay / this.GetTotalDuration(), 1);
  }
  if (prog >= 0)
  {
    if (this._easing)
    {
      prog = this._easing(prog);
    }
    this.Step(prog);

    if (this._onStep)
    {
      this._onStep.call(this._onStepObj, prog);
    }
  }
};


/**
  * @protected
  * Process when this item stops.
  */
DvtScheduled.prototype.ProcessEnd = function()
{
  //only process end if still running
  if (this._bRunning)
  {
    this._bRunning = false;
    this._progress = 1;
    this.End();
    this._state = DvtScheduled._STATE_BEGIN;
    if (this._onEnd)
    {
      this._onEnd.call(this._onEndObj);
    }
  }
};


/**
  * @protected
  * Initialize this item.
  */
DvtScheduled.prototype.Initialize = function()
{
  //do nothing; subclasses should implement
};


/**
  * @protected
  * Start playing this item.
  */
DvtScheduled.prototype.Start = function()
{
  //do nothing; subclasses should implement
};


/**
  * @protected
  * Step this item.
  *
  * @param {number}  progress  percent progress of this item
  */
DvtScheduled.prototype.Step = function(progress)
{
  //do nothing; subclasses should implement
};


/**
  * @protected
  * End this item.
  */
DvtScheduled.prototype.End = function()
{
  //do nothing; subclasses should implement
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class representing a scheduling service.
  * @extends {DvtObj}
  * @class DvtScheduler
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  */
var DvtScheduler = function(context)
{
  this.Init(context);
};

DvtObj.createSubclass(DvtScheduler, DvtObj, 'DvtScheduler');


/**
  * @protected
  */
DvtScheduler.prototype.Init = function(context)
{
  this._scheduledItems = new Array();
  this._bRunning = false;
};

/**
  * @protected
  * Handle a timer tick.
  */
DvtScheduler.prototype.HandleTimer = function()
{
  var time = new Date().getTime();
  for (var i = 0; i < this._scheduledItems.length; i++)
  {
    var scheduled = this._scheduledItems[i];
    if (scheduled.processTime(time))
      this.removeScheduled(scheduled);
  }

  if (this._scheduledItems.length < 1)
    this.pause();
  else
    this._animationRequestId = DvtContext.requestAnimationFrame(DvtObj.createCallback(this, this.HandleTimer));

  // Private flag for animation testing. Do not remove.
  DvtScheduler._frameCount++;
};


/**
  * Add a scheduled item to be run.
  *
  * @param {DvtScheduled}  scheduled  item to add
  */
DvtScheduler.prototype.addScheduled = function(scheduled)
{
  var i = DvtArrayUtils.getIndex(this._scheduledItems, scheduled);
  if (i < 0)
  {
    this._scheduledItems.push(scheduled);
  }

  this.play();
};


/**
  * Remove a scheduled item.
  *
  * @param {DvtScheduled}  scheduled  item to remove
  */
DvtScheduler.prototype.removeScheduled = function(scheduled)
{
  var i = DvtArrayUtils.getIndex(this._scheduledItems, scheduled);
  if (i >= 0)
  {
    this._scheduledItems.splice(i, 1);
  }
};

/**
  * Play the scheduler.
  */
DvtScheduler.prototype.play = function()
{
  if (!this._bRunning)
  {
    for (var i = 0; i < this._scheduledItems.length; i++)
    {
      var scheduled = this._scheduledItems[i];
      if (!scheduled.isRunning())
      {
        scheduled.play();
      }
    }

    this._bRunning = true;

    this._animationRequestId = DvtContext.requestAnimationFrame(DvtObj.createCallback(this, this.HandleTimer));
  }
};


/**
  * Pause the scheduler.
  */
DvtScheduler.prototype.pause = function()
{
  if (this._bRunning)
  {
    this._bRunning = false;

    if (this._animationRequestId)
      DvtContext.cancelAnimationFrame(this._animationRequestId);

    for (var i = 0; i < this._scheduledItems.length; i++)
    {
      var scheduled = this._scheduledItems[i];
      if (scheduled.isRunning())
      {
        scheduled.pause();
      }
    }
  }
};
// Copyright (c) 2011, 2016, Oracle and/or its affiliates. All rights reserved.
/**
 * Class representing an animator that animates a property change.
 * @extends {DvtScheduled}
 * @class DvtAnimator
 * @constructor
 *
 * @param {DvtContext}  context  platform specific context object
 * @param {number}  duration  length of animation, in seconds
 * @param {number}  delay  time to delay start of animation, in seconds
 * @param {function}  easing  easing function to use with this animation
 */
var DvtAnimator = function(context, duration, delay, easing) {
  this.Init(context, duration, delay, easing);
};

DvtObj.createSubclass(DvtAnimator, DvtScheduled, 'DvtAnimator');


/**
 * Property type: number.
 */
DvtAnimator.TYPE_NUMBER = 'typeNumber';


/**
 * Property type: matrix.
 */
DvtAnimator.TYPE_MATRIX = 'typeMatrix';


/**
 * Property type: array of numbers.
 */
DvtAnimator.TYPE_NUMBER_ARRAY = 'typeNumberArray';


/**
 * Property type: color.
 */
DvtAnimator.TYPE_COLOR = 'typeColor';


/**
 * Property type: array of colors.
 */
DvtAnimator.TYPE_COLOR_ARRAY = 'typeColorArray';


/**
 * Property type: grow polyline points.
 */
DvtAnimator.TYPE_GROW_POLYLINE = 'typeGrowPolyline';


/**
 * Property type: rectangle.
 */
DvtAnimator.TYPE_RECTANGLE = 'typeRectangle';


/**
 * Property type: point.
 */
DvtAnimator.TYPE_POINT = 'typePoint';


/**
 * Property type: path.
 */
DvtAnimator.TYPE_PATH = 'typePath';


/**
 * Property type: grow path points.
 */
DvtAnimator.TYPE_GROW_PATH = 'typeGrowPath';


/**
 * Property type: fill.
 */
DvtAnimator.TYPE_FILL = 'typeFill';


/**
 * Property type: stroke.
 */
DvtAnimator.TYPE_STROKE = 'typeStroke';


/**
 * Property type: polyline.
 */
DvtAnimator.TYPE_POLYLINE = 'typePolyline';

DvtAnimator._KEY_PREFIX = 'dvtAnimPropMap_';


/**
 * @protected
 */
DvtAnimator.prototype.Init = function(context, duration, delay, easing) {
  DvtAnimator.superclass.Init.call(this, context, context.getScheduler(), duration, delay, easing);

  this._context = context;
  this._props = {};
};


/**
 * Add a property to animate.
 *
 * @param {string}  type  type of property
 * @param {object}  obj  object being animated
 * @param {function}  getter  getter function for property being animated
 * @param {function}  setter  setter function for property being animated
 * @param  destVal  destination value to animate to
 */
DvtAnimator.prototype.addProp = function(type, obj, getter, setter, destVal) {
  var item = this.GetPropItem(obj, getter);
  if (item) {
    item.destVal = destVal;
  }
  else {
    var item = new DvtAnimatorPropItem(type, obj, getter, setter, destVal);
    //map keys must be strings, so always generate a string key for objects
    //and functions
    var keyObj = DvtAnimator.GetKey(obj);
    if (!this._props[keyObj]) {
      this._props[keyObj] = {};
    }
    this._props[keyObj][DvtAnimator.GetKey(getter)] = item;
  }
};


/**
 * Removes a property to animate.
 *
 * @param {object}  obj  object being animated
 * @param {function}  getter  getter function for property being animated
 */
DvtAnimator.prototype.removeProp = function(obj, getter) {
  var item = this.GetPropItem(obj, getter);
  if (item) {
    var destVal = item.destVal;
    delete this._props[DvtAnimator.GetKey(obj)][DvtAnimator.GetKey(getter)];
    return destVal;
  }
  return null;
};


/**
 * Get the destination value for a property being animated.
 *
 * @param {object}  obj  object being animated
 * @param {function}  getter  getter function for property being animated
 * @param {boolean} callGetter (optional) If no destination value is found, indicates whether the getter should be called directly rather than returning null
 */
DvtAnimator.prototype.getDestVal = function(obj, getter, callGetter) {
  var item = this.GetPropItem(obj, getter);
  if (item) {
    return item.destVal;
  }
  //if not part of the animation, return null
  return callGetter ? getter.call(obj) : null;
};


/**
 * @protected
 * Get the index of the given property in the storage array,
 * or -1 if the property is not found.
 *
 * @param {object}  obj  object being animated
 * @param {function}  getter  getter function for property being animated
 */
DvtAnimator.prototype.GetPropItem = function(obj, getter) {
  var keyObj = DvtAnimator.GetKey(obj);
  if (this._props[keyObj]) {
    return this._props[keyObj][DvtAnimator.GetKey(getter)];
  }
  return null;
};


/**
 * @protected
 * Get the key to use for the given obj in the prop map.
 */
DvtAnimator.GetKey = function(obj) {
  if (!obj._dvtAnimPropMapKey) {
    obj._dvtAnimPropMapKey = DvtAnimator._KEY_PREFIX + Math.random();//@RandomNumberOk
  }
  return obj._dvtAnimPropMapKey;
};


/**
 * @protected
 * @override
 */
DvtAnimator.prototype.Initialize = function() {
  for (var keyObj in this._props) {
    for (var keyGetter in this._props[keyObj]) {
      var item = this._props[keyObj][keyGetter];
      item.startVal = item.getter.call(item.obj);
    }
  }
};


/**
 * @protected
 * @override
 */
DvtAnimator.prototype.Step = function(progress) {
  for (var keyObj in this._props) {
    for (var keyGetter in this._props[keyObj]) {
      var item = this._props[keyObj][keyGetter];
      var type = item.type;
      var obj = item.obj;
      var setter = item.setter;
      var destVal = item.destVal;

      var startVal = item.startVal;
      var interpVal = DvtInterpolator.interpolate(this._context, type, startVal, destVal, progress);
      setter.call(obj, interpVal);
    }
  }
};

// Nested class begin //////////////////////////////////////

var DvtAnimatorPropItem = function(type, obj, getter, setter, destVal) {
  this.type = type;
  this.obj = obj;
  this.getter = getter;
  this.setter = setter;
  this.destVal = destVal;
  this.startVal = null;
};

DvtObj.createSubclass(DvtAnimatorPropItem, DvtObj, 'DvtAnimatorPropItem');

// Nested class end ////////////////////////////////////////
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Abstract base class representing something that can be played, like an animation.
  * @extends {DvtObj}
  * @class DvtPlayable
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  */
var DvtPlayable = function(context)
{
  this.Init(context);
};

DvtObj.createSubclass(DvtPlayable, DvtObj, 'DvtPlayable');


/**
  * Append a function to the end of the given playable's current onEnd function.
  *
  * @param {DvtPlayable}  playable  playable to append onEnd function to
  * @param {function}  onEnd  new function to append to current onEnd function
  * @param {object}  onEndObj  optional reference to object instance on which the new
  *        onEnd function is defined
  */
DvtPlayable.appendOnEnd = function(playable, onEnd, onEndObj)
{
  if (!playable || !onEnd)
  {
    return;
  }

  var arOnEnd = playable.getOnEnd();
  if (!arOnEnd || !arOnEnd[0])
  {
    playable.setOnEnd(onEnd, onEndObj);
  }
  else
  {
    var newOnEnd = function() 
        {
      arOnEnd[0].call(arOnEnd[1]);
      onEnd.call(onEndObj);
    };
    playable.setOnEnd(newOnEnd);
  }
};


/**
  * Prepend a function to the start of the given playable's current onEnd function.
  *
  * @param {DvtPlayable}  playable  playable to prepend onEnd function to
  * @param {function}  onEnd  new function to prepend to current onEnd function
  * @param {object}  onEndObj  optional reference to object instance on which the new
  *        onEnd function is defined
  */
DvtPlayable.prependOnEnd = function(playable, onEnd, onEndObj)
{
  if (!playable || !onEnd)
  {
    return;
  }

  var arOnEnd = playable.getOnEnd();
  if (!arOnEnd || !arOnEnd[0])
  {
    playable.setOnEnd(onEnd, onEndObj);
  }
  else
  {
    var newOnEnd = function() 
        {
      onEnd.call(onEndObj);
      arOnEnd[0].call(arOnEnd[1]);
    };
    playable.setOnEnd(newOnEnd);
  }
};


/**
  * Append a function to the end of the given playable's current onStart function.
  *
  * @param {DvtPlayable}  playable  playable to append onStart function to
  * @param {function}  onStart  new function to append to current onStart function
  * @param {object}  onStartObj  optional reference to object instance on which the new
  *        onStart function is defined
  */
DvtPlayable.appendOnStart = function(playable, onStart, onStartObj)
{
  if (!playable || !onStart || !playable.getOnStart || !playable.setOnStart)
  {
    return;
  }

  var arOnStart = playable.getOnStart();
  if (!arOnStart || !arOnStart[0])
  {
    playable.setOnStart(onStart, onStartObj);
  }
  else
  {
    var newOnStart = function() 
        {
      arOnStart[0].call(arOnStart[1]);
      onStart.call(onStartObj);
    };
    playable.setOnStart(newOnStart);
  }
};


/**
  * Prepend a function to the start of the given playable's current onStart function.
  *
  * @param {DvtPlayable}  playable  playable to prepend onStart function to
  * @param {function}  onStart  new function to prepend to current onStart function
  * @param {object}  onStartObj  optional reference to object instance on which the new
  *        onStart function is defined
  */
DvtPlayable.prependOnStart = function(playable, onStart, onStartObj)
{
  if (!playable || !onStart || !playable.getOnStart || !playable.setOnStart)
  {
    return;
  }

  var arOnStart = playable.getOnStart();
  if (!arOnStart || !arOnStart[0])
  {
    playable.setOnStart(onStart, onStartObj);
  }
  else
  {
    var newOnStart = function() 
        {
      onStart.call(onStartObj);
      arOnStart[0].call(arOnStart[1]);
    };
    playable.setOnStart(newOnStart);
  }
};


/**
  * Append a function to the end of the given playable's current onInit function.
  *
  * @param {DvtPlayable}  playable  playable to append onInit function to
  * @param {function}  onInit  new function to append to current onInit function
  * @param {object}  onInitObj  optional reference to object instance on which the new
  *        onInit function is defined
  */
DvtPlayable.appendOnInit = function(playable, onInit, onInitObj)
{
  if (!playable || !onInit || !playable.getOnInit || !playable.setOnInit)
  {
    return;
  }

  var arOnInit = playable.getOnInit();
  if (!arOnInit || !arOnInit[0])
  {
    playable.setOnInit(onInit, onInitObj);
  }
  else
  {
    var newOnInit = function() 
        {
      arOnInit[0].call(arOnInit[1]);
      onInit.call(onInitObj);
    };
    playable.setOnInit(newOnInit);
  }
};


/**
  * Prepend a function to the start of the given playable's current onInit function.
  *
  * @param {DvtPlayable}  playable  playable to prepend onInit function to
  * @param {function}  onInit  new function to prepend to current onInit function
  * @param {object}  onInitObj  optional reference to object instance on which the new
  *        onInit function is defined
  */
DvtPlayable.prependOnInit = function(playable, onInit, onInitObj)
{
  if (!playable || !onInit || !playable.getOnInit || !playable.setOnInit)
  {
    return;
  }

  var arOnInit = playable.getOnInit();
  if (!arOnInit || !arOnInit[0])
  {
    playable.setOnInit(onInit, onInitObj);
  }
  else
  {
    var newOnInit = function() 
        {
      onInit.call(onInitObj);
      arOnInit[0].call(arOnInit[1]);
    };
    playable.setOnInit(newOnInit);
  }
};


/**
  * @protected
  */
DvtPlayable.prototype.Init = function(context)
{
  this.Context = context;
  this._onEnd = null;
  this._onEndObj = null;
};

/**
  * Set the function to call when this playable ends.
  *
  * @param {function}  onEnd  function to call when this playable ends
  * @param {object}  onEndObj  optional reference to object instance on which the
  *        onEnd function is defined
  */
DvtPlayable.prototype.setOnEnd = function(onEnd, onEndObj)
{
  this._onEnd = onEnd;
  if (onEndObj)
  {
    this._onEndObj = onEndObj;
  }
  else
  {
    this._onEndObj = null;
  }
  this.OnEndUpdated();
};


/**
  * Get the function to call when this playable ends.
  * Returns an array of two elements:
  * [0] the function
  * [1] optional reference to object instance on which the function is defined
  *
  * @type {array}
  */
DvtPlayable.prototype.getOnEnd = function()
{
  return [this._onEnd, this._onEndObj];
};


/**
  * @protected
  * Called when the onEnd funciton on this playable is set.
  */
DvtPlayable.prototype.OnEndUpdated = function()
{
  //subclasses must override
};

/**
  * Returns the duration of this animation, in seconds.
  * @type {number}
  */
DvtPlayable.prototype.getDuration = function()
{
  //subclasses must override
  return 0;
};

/**
 * Initializes the start and end states of the animation.  This should be called prior to deferring the animation on a
 * timeout or request animation frame.
 */
DvtPlayable.prototype.initialize = function() {
  //subclasses must override if they are supporting the bImmediate flag in play()
};

/**
  * Play this item.
  * @param {boolean} bImmediate true to begin the animation immediately.  This should generally be false when used by
  *                             components, so that the animation is started after the browser rendering is complete.
  */
DvtPlayable.prototype.play = function(bImmediate)
{
  //subclasses must override
};

/**
  * Stop this playable.
  */
DvtPlayable.prototype.stop = function(bJumpToEnd)
{
  //subclasses must override
};


/**
  * Pause this playable.
  */
DvtPlayable.prototype.pause = function()
{
  //subclasses must override
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class representing a set of DvtPlayables that are played at the same time.
  * The playables should be passed into the constructor as either:
  * 1) individual arguments, for example:
  *    new DvtParallelPlayable(context, playable1, playable2, ...), or
  * 2) a single Array, for example:
  *    new DvtParallelPlayable(context, [playable1, playable2, ...]);
  * @extends {DvtPlayable}
  * @class DvtParallelPlayable
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  */
var DvtParallelPlayable = function(context)
{
  var arPlayables;
  if (arguments && arguments.length > 1 && arguments[1] instanceof Array)
  {
    arPlayables = arguments[1];
  }
  else
  {
    arPlayables = DvtArrayUtils.argsToArray(arguments);
    //remove the context from the arPlayables array
    arPlayables.splice(0, 1);
  }

  this.Init(context, arPlayables);
};

DvtObj.createSubclass(DvtParallelPlayable, DvtPlayable, 'DvtParallelPlayable');


/**
  * @protected
  * @override
  */
DvtParallelPlayable.prototype.Init = function(context, arPlayables)
{
  DvtParallelPlayable.superclass.Init.call(this, context);

  this._runningCounter = 0;
  this._arPlayables = arPlayables ? arPlayables : [];
  this._bStarted = false;
};


/**
  * Get the list of playables.
  * @return {array}
  */
DvtParallelPlayable.prototype.getPlayables = function()
{
  return this._arPlayables;
};

/**
 * @override
 */
DvtParallelPlayable.prototype.getDuration = function()
{
  var duration = 0;
  for (var i = 0; i < this._arPlayables.length; i++) {
    var playable = this._arPlayables[i];
    if (playable instanceof DvtPlayable)
      duration = Math.max(duration, playable.getDuration());
  }
  return duration;
};

/**
 * @override
 */
DvtParallelPlayable.prototype.initialize = function() {
  for (var i = 0; i < this._arPlayables.length; i++)
  {
    if (this._arPlayables[i] instanceof DvtPlayable)
      this._arPlayables[i].initialize();
  }
};

/**
  * @override
  */
DvtParallelPlayable.prototype.play = function(bImmediate)
{
  if (this._arPlayables.length > 0)
  {
    if (bImmediate)
      this._play();
    else {
      // Play after a quick timeout allowing the browser to render the bulk of the DOM and any subsequent components.
      this.initialize();
      DvtContext.requestAnimationFrame(DvtObj.createCallback(this, this._play));
    }
  }
  else {
    // The onEnd listener should still be called.
    DvtContext.requestAnimationFrame(DvtObj.createCallback(this, this.DoEnd));
  }
};

/**
 * Called by play with an optional timeout to enable the animation to run more smoothly.
 * @private
 */
DvtParallelPlayable.prototype._play = function() {
  var playable;
  for (var i = 0; i < this._arPlayables.length; i++)
  {
    playable = this._arPlayables[i];
    if (playable instanceof DvtPlayable)
    {
      if (!this._bStarted)
      {
        this._runningCounter++;

        //call internal onEnd function when each Playable ends
        DvtPlayable.appendOnEnd(playable, this.OnPlayableEnd, this);
      }

      // Perform the animation immediately since this is not part of a slow component render operation.
      playable.play(true);
    }
  }

  this._bStarted = true;
};

/**
  * @override
  */
DvtParallelPlayable.prototype.stop = function(bJumpToEnd)
{
  var playable;
  for (var i = 0; i < this._arPlayables.length; i++)
  {
    playable = this._arPlayables[i];
    if (playable instanceof DvtPlayable)
    {
      playable.stop(bJumpToEnd);
    }
  }
};


/**
  * @override
  */
DvtParallelPlayable.prototype.pause = function()
{
  for (var i = 0; i < this._arPlayables.length; i++)
  {
    var playable = this._arPlayables[i];
    if (playable instanceof DvtPlayable)
    {
      playable.pause();
    }
  }
};


/**
  * @protected
  * Called after each playable ends.
  */
DvtParallelPlayable.prototype.OnPlayableEnd = function()
{
  //decrement the count of running playables
  this._runningCounter--;

  //if no more running, call the onEnd function for this ParallelPlayable
  if (this._runningCounter < 1)
  {
    this.DoEnd();
  }
};


/**
  * @protected
  * Called after all the playables have finished.
  */
DvtParallelPlayable.prototype.DoEnd = function()
{
  if (this._onEnd)
  {
    this._onEnd.call(this._onEndObj);
  }
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class representing a set of DvtPlayables that are played one after another.
  * The playables should be passed into the constructor as either:
  * 1) individual arguments, for example:
  *    new DvtParallelPlayable(context, playable1, playable2, ...), or
  * 2) a single Array, for example:
  *    new DvtParallelPlayable(context, [playable1, playable2, ...]);
  * @extends {DvtPlayable}
  * @class DvtParallelPlayable
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  */
var DvtSequentialPlayable = function(context)
{
  var arPlayables;
  if (arguments && arguments.length > 1 && arguments[1] instanceof Array)
  {
    arPlayables = arguments[1];
  }
  else
  {
    arPlayables = DvtArrayUtils.argsToArray(arguments);
    //remove the context from the arPlayables array
    arPlayables.splice(0, 1);
  }

  this.Init(context, arPlayables);
};

DvtObj.createSubclass(DvtSequentialPlayable, DvtPlayable, 'DvtSequentialPlayable');


/**
  * @protected
  * @override
  */
DvtSequentialPlayable.prototype.Init = function(context, arPlayables)
{
  DvtSequentialPlayable.superclass.Init.call(this, context);

  this._arPlayables = arPlayables ? arPlayables : [];
  this._currIndex = -1;
  this._bStarted = false;
};

/**
  * Get the list of playables.
  * @type {Array}
  */
DvtSequentialPlayable.prototype.getPlayables = function()
{
  return this._arPlayables;
};

/**
 * @override
 */
DvtSequentialPlayable.prototype.getDuration = function()
{
  var duration = 0;
  for (var i = 0; i < this._arPlayables.length; i++) {
    var playable = this._arPlayables[i];
    if (playable instanceof DvtPlayable)
      duration += playable.getDuration();
  }
  return duration;
};

/**
 * @override
 */
DvtSequentialPlayable.prototype.initialize = function() {
  if (this._arPlayables.length > 0 && this._arPlayables[0] instanceof DvtPlayable)
    this._arPlayables[0].initialize();
};

/**
  * @override
  */
DvtSequentialPlayable.prototype.play = function(bImmediate)
{
  if (this._arPlayables && this._arPlayables.length > 0)
  {
    if (bImmediate)
      this._play();
    else {
      // Play after a quick timeout allowing the browser to render the bulk of the DOM and any subsequent components.
      this.initialize();
      DvtContext.requestAnimationFrame(DvtObj.createCallback(this, this._play));
    }
  }
  else {
    // The onEnd listener should still be called.
    DvtContext.requestAnimationFrame(DvtObj.createCallback(this, this.DoEnd));
  }
};

/**
 * Called by play with an optional timeout to enable the animation to run more smoothly.
 * @private
 */
DvtSequentialPlayable.prototype._play = function() {
  if (this._bStarted)
  {
    var currPlayable = this._arPlayables[this._currIndex];
    if (currPlayable instanceof DvtPlayable)
    {
      // Perform the animation immediately since this is not part of a slow component render operation.
      currPlayable.play(true);
    }
    return;
  }

  var firstPlayable;
  if (this._arPlayables[0] instanceof DvtPlayable)
    firstPlayable = this._arPlayables[0];

  var lastPlayable;
  if (this._arPlayables[this._arPlayables.length - 1] instanceof DvtPlayable)
    lastPlayable = this._arPlayables[this._arPlayables.length - 1];

  var playable;
  for (var i = 0; i < this._arPlayables.length - 1; i++)
  {
    playable = this._arPlayables[i];
    if (playable instanceof DvtPlayable)
    {
      //at the end of each playable, play the next one
      DvtPlayable.appendOnEnd(playable, this.DoSequenceStep, this);
    }
  }

  //call the onEnd function for this DvtSequentialPlayable at the very
  //end of the sequence
  //if (playable)
  //  DvtPlayable.appendOnEnd(playable, this.DoEnd, this);
  if (lastPlayable)
    DvtPlayable.appendOnEnd(lastPlayable, this.DoEnd, this);

  this._bStarted = true;
  this._currIndex = 0;

  // Perform the animation immediately since this is not part of a slow component render operation.
  if (firstPlayable)
    firstPlayable.play(true);
};

/**
  * @protected
  * Called after each playable, except the last one, ends.
  */
DvtSequentialPlayable.prototype.DoSequenceStep = function()
{
  var playable = this._arPlayables[++this._currIndex];
  if (playable instanceof DvtPlayable)
  {
    // Perform the animation immediately since this is not part of a slow component render operation.
    playable.play(true);
  }
  else
  {
    this.DoSequenceStep();
  }
};


/**
  * @override
  */
DvtSequentialPlayable.prototype.stop = function(bJumpToEnd)
{
  if (this._arPlayables)
  {
    var playable;
    for (var i = this._currIndex; i < this._arPlayables.length; i++)
    {
      playable = this._arPlayables[i];
      if (playable && playable instanceof DvtPlayable)
      {
        playable.stop(bJumpToEnd);
      }
    }
  }
};


/**
  * @override
  */
DvtSequentialPlayable.prototype.pause = function()
{
  if (this._arPlayables)
  {
    var playable = this._arPlayables[this._currIndex];
    if (playable instanceof DvtPlayable)
    {
      playable.pause();
    }
  }
};


/**
  * @protected
  * Called after the last playable has finished.
  */
DvtSequentialPlayable.prototype.DoEnd = function()
{
  if (this._onEnd)
  {
    this._onEnd.call(this._onEndObj);
  }
};
/**
 * Animation handler for black box animations.
 * @class DvtBlackBoxAnimationHandler
 */
var DvtBlackBoxAnimationHandler = function() {};

DvtObj.createSubclass(DvtBlackBoxAnimationHandler, DvtObj, 'DvtBlackBoxAnimationHandler');

// Black Box Animation Types
DvtBlackBoxAnimationHandler.ALPHA_FADE = 'alphaFade';
DvtBlackBoxAnimationHandler.CONVEYOR_FROM_RIGHT = 'conveyorFromRight';
DvtBlackBoxAnimationHandler.CONVEYOR_FROM_LEFT = 'conveyorFromLeft';
DvtBlackBoxAnimationHandler.CUBE_TO_RIGHT = 'cubeToRight';
DvtBlackBoxAnimationHandler.CUBE_TO_LEFT = 'cubeToLeft';
DvtBlackBoxAnimationHandler.FLIP_RIGHT = 'flipRight';
DvtBlackBoxAnimationHandler.FLIP_LEFT = 'flipLeft';
DvtBlackBoxAnimationHandler.TRANSITION_TO_RIGHT = 'transitionToRight';
DvtBlackBoxAnimationHandler.TRANSITION_TO_LEFT = 'transitionToLeft';
DvtBlackBoxAnimationHandler.SLIDE_TO_RIGHT = 'slideToRight';
DvtBlackBoxAnimationHandler.SLIDE_TO_LEFT = 'slideToLeft';
DvtBlackBoxAnimationHandler.ZOOM = 'zoom';


/**
 * Returns true if the specified animation type should be handled by a black box animation.
 * @param {string} type The animation type.
 * @return {boolean}
 */
DvtBlackBoxAnimationHandler.isSupported = function(type) {
  return (type == DvtBlackBoxAnimationHandler.ALPHA_FADE ||
          type == DvtBlackBoxAnimationHandler.CONVEYOR_FROM_RIGHT ||
          type == DvtBlackBoxAnimationHandler.CONVEYOR_FROM_LEFT ||
          type == DvtBlackBoxAnimationHandler.CUBE_TO_RIGHT ||
          type == DvtBlackBoxAnimationHandler.CUBE_TO_LEFT ||
          type == DvtBlackBoxAnimationHandler.FLIP_RIGHT ||
          type == DvtBlackBoxAnimationHandler.FLIP_LEFT ||
          type == DvtBlackBoxAnimationHandler.TRANSITION_TO_RIGHT ||
          type == DvtBlackBoxAnimationHandler.TRANSITION_TO_LEFT ||
          type == DvtBlackBoxAnimationHandler.SLIDE_TO_RIGHT ||
          type == DvtBlackBoxAnimationHandler.SLIDE_TO_LEFT ||
          type == DvtBlackBoxAnimationHandler.ZOOM);
};


/**
 * Creates and returns the specified black box animation for the displayables.
 * @param {DvtContext} context The platform specific context object.
 * @param {string} type The animation type.
 * @param {object} objs The displayable or array of displayables.
 * @param {DvtRectangle} bounds The bounds of the objects to animate.
 * @param {number} duration The duration of the animation
 * @return {DvtPlayable} The animation from the old object to the new object.
 */
DvtBlackBoxAnimationHandler.getInAnimation = function(context, type, objs, bounds, duration) {
  if (type == DvtBlackBoxAnimationHandler.ALPHA_FADE)
    return new DvtAnimFadeIn(context, objs, duration);
  else if (type == DvtBlackBoxAnimationHandler.CONVEYOR_FROM_RIGHT)
    return new DvtAnimConveyorIn(context, objs, DvtBaseAnimation.DIR_E, duration);
  else if (type == DvtBlackBoxAnimationHandler.CONVEYOR_FROM_LEFT)
    return new DvtAnimConveyorIn(context, objs, DvtBaseAnimation.DIR_W, duration);
  else if (type == DvtBlackBoxAnimationHandler.CUBE_TO_RIGHT)
    return new DvtAnimCubeIn(context, objs, DvtBaseAnimation.AXIS_Y, DvtBaseAnimation.ROT_DIR_CLOCKWISE, duration);
  else if (type == DvtBlackBoxAnimationHandler.CUBE_TO_LEFT)
    return new DvtAnimCubeIn(context, objs, DvtBaseAnimation.AXIS_Y, DvtBaseAnimation.ROT_DIR_COUNTERCLOCKWISE, duration);
  else if (type == DvtBlackBoxAnimationHandler.FLIP_RIGHT)
    return new DvtAnimFlipIn(context, objs, DvtBaseAnimation.AXIS_Y, DvtBaseAnimation.ROT_DIR_CLOCKWISE, duration);
  else if (type == DvtBlackBoxAnimationHandler.FLIP_LEFT)
    return new DvtAnimFlipIn(context, objs, DvtBaseAnimation.AXIS_Y, DvtBaseAnimation.ROT_DIR_COUNTERCLOCKWISE, duration);
  else if (type == DvtBlackBoxAnimationHandler.TRANSITION_TO_RIGHT)
    return new DvtAnimScaleFadeIn(context, objs, bounds, DvtBaseAnimation.DIR_NW, 0.5, duration);
  else if (type == DvtBlackBoxAnimationHandler.TRANSITION_TO_LEFT)
    return new DvtAnimScaleFadeIn(context, objs, bounds, DvtBaseAnimation.DIR_NE, 0.5, duration);
  else if (type == DvtBlackBoxAnimationHandler.SLIDE_TO_RIGHT) {
    DvtBlackBoxAnimationHandler._offsetObjects(objs, -bounds.w, 0);
    return new DvtAnimMoveBy(context, objs, new DvtPoint(bounds.w, 0), duration);
  }
  else if (type == DvtBlackBoxAnimationHandler.SLIDE_TO_LEFT) {
    DvtBlackBoxAnimationHandler._offsetObjects(objs, bounds.w, 0);
    return new DvtAnimMoveBy(context, objs, new DvtPoint(-bounds.w, 0), duration);
  }
  else if (type == DvtBlackBoxAnimationHandler.ZOOM)
    return new DvtAnimScaleFadeIn(context, objs, bounds, DvtBaseAnimation.DIR_C, 0.5, duration);
  else
    return null;
};


/**
 * Creates and returns the specified black box animation between the old displayable and
 * the new displayable.
 * @param {DvtContext} context The platform specific context object.
 * @param {string} type The animation type.
 * @param {object} outObjs The displayable or array of displayables to animate out.
 * @param {object} inObjs The displayable or array of displayables to animate in.
 * @param {DvtRectangle} bounds The bounds of the objects to animate.
 * @param {number} duration The duration of the animation (in seconds).
 * @return {DvtPlayable} The animation from the old object to the new object.
 */
DvtBlackBoxAnimationHandler.getCombinedAnimation = function(context, type, outObjs, inObjs, bounds, duration) {
  if (type == DvtBlackBoxAnimationHandler.ALPHA_FADE)
    return new DvtCombinedAnimFade(context, outObjs, inObjs, duration);
  else if (type == DvtBlackBoxAnimationHandler.CONVEYOR_FROM_RIGHT)
    return new DvtCombinedAnimConveyor(context, outObjs, inObjs, DvtBaseAnimation.DIR_W, DvtBaseAnimation.DIR_E, duration);
  else if (type == DvtBlackBoxAnimationHandler.CONVEYOR_FROM_LEFT)
    return new DvtCombinedAnimConveyor(context, outObjs, inObjs, DvtBaseAnimation.DIR_E, DvtBaseAnimation.DIR_W, duration);
  else if (type == DvtBlackBoxAnimationHandler.CUBE_TO_RIGHT)
    return new DvtCombinedAnimCube(context, outObjs, inObjs, DvtBaseAnimation.AXIS_Y, DvtBaseAnimation.ROT_DIR_CLOCKWISE, duration);
  else if (type == DvtBlackBoxAnimationHandler.CUBE_TO_LEFT)
    return new DvtCombinedAnimCube(context, outObjs, inObjs, DvtBaseAnimation.AXIS_Y, DvtBaseAnimation.ROT_DIR_COUNTERCLOCKWISE, duration);
  else if (type == DvtBlackBoxAnimationHandler.FLIP_RIGHT)
    return new DvtCombinedAnimFlip(context, outObjs, inObjs, DvtBaseAnimation.AXIS_Y, DvtBaseAnimation.ROT_DIR_CLOCKWISE, duration);
  else if (type == DvtBlackBoxAnimationHandler.FLIP_LEFT)
    return new DvtCombinedAnimFlip(context, outObjs, inObjs, DvtBaseAnimation.AXIS_Y, DvtBaseAnimation.ROT_DIR_COUNTERCLOCKWISE, duration);
  else if (type == DvtBlackBoxAnimationHandler.TRANSITION_TO_RIGHT)
    return new DvtCombinedAnimScaleFade(context, outObjs, inObjs, bounds, DvtBaseAnimation.DIR_SE, DvtBaseAnimation.DIR_NW, 0.5, duration);
  else if (type == DvtBlackBoxAnimationHandler.TRANSITION_TO_LEFT)
    return new DvtCombinedAnimScaleFade(context, outObjs, inObjs, bounds, DvtBaseAnimation.DIR_SW, DvtBaseAnimation.DIR_NE, 0.5, duration);
  else if (type == DvtBlackBoxAnimationHandler.SLIDE_TO_RIGHT) {
    DvtBlackBoxAnimationHandler._offsetObjects(inObjs, -bounds.w, 0);
    return new DvtCombinedAnimMoveBy(context, outObjs, inObjs, new DvtPoint(bounds.w, 0), new DvtPoint(bounds.w, 0), duration);
  }
  else if (type == DvtBlackBoxAnimationHandler.SLIDE_TO_LEFT) {
    DvtBlackBoxAnimationHandler._offsetObjects(inObjs, bounds.w, 0);
    return new DvtCombinedAnimMoveBy(context, outObjs, inObjs, new DvtPoint(-bounds.w, 0), new DvtPoint(-bounds.w, 0), duration);
  }
  else if (type == DvtBlackBoxAnimationHandler.ZOOM)
    return new DvtCombinedAnimScaleFade(context, outObjs, inObjs, bounds, DvtBaseAnimation.DIR_C, DvtBaseAnimation.DIR_C, 0.5, duration);
  else
    return null;
};


/**
 * Adjusts the objects by the specified offset.
 * @param {object} objs The displayable or array of displayables.
 * @param {number} offsetX The x offset to add.
 * @param {number} offsetY The y offset to add.
 @private
 */
DvtBlackBoxAnimationHandler._offsetObjects = function(objs, offsetX, offsetY) {
  if (objs.length) {
    for (var i = 0; i < objs.length; i++)
      DvtBlackBoxAnimationHandler._offsetObjects(objs[i], offsetX, offsetY);
  }
  else if (objs) {
    // Adjust the displayable
    objs.setTranslate(objs.getTranslateX() + offsetX, objs.getTranslateY() + offsetY);
  }
};
/**
 * Animation handler for data objects.
 * @param {DvtContext} context The platform specific context object.
 * @param {DvtContainer} deleteContainer The container where deletes should be moved for animation.
 * @class DvtDataAnimationHandler
 * @constructor
 */
var DvtDataAnimationHandler = function(context, deleteContainer) {
  this.Init(context, deleteContainer);
};

DvtObj.createSubclass(DvtDataAnimationHandler, DvtObj, 'DvtDataAnimationHandler');

// TODO Document the expected interface for animatable objects:
// getId()
// animateUpdate(oldObj)
// animateDelete()
// animateInsert()

/**
 * The percentage of overlap for animation phases when overlap is enabled.
 * @const
 * @private
 */
DvtDataAnimationHandler._OVERLAP_RATIO = 0.4;


/**
 * Initializes the handler.
 * @param {DvtContext} context The platform specific context object.
 * @param {DvtContainer} deleteContainer The container where deletes should be moved for animation.
 * @protected
 */
DvtDataAnimationHandler.prototype.Init = function(context, deleteContainer) {
  this._context = context;
  this._deleteContainer = deleteContainer;
  this._playables = [];
};


/**
 * Returns the DvtContext associated with this animation handler.
 * @return {DvtContext}
 */
DvtDataAnimationHandler.prototype.getCtx = function() {
  return this._context;
};


/**
 * Constructs an animation between two lists of logical objects.  This function
 * delegates the specific animation behavior to the logical objects.  The animation
 * can be retrieved using getAnimation().
 * @param {array} oldList The list to animate from.
 * @param {array} newList The list to animate to.
 */
DvtDataAnimationHandler.prototype.constructAnimation = function(oldList, newList) {
  if (!newList || this._context.isOffscreen())
    return;

  // Copy the new objects list, since we will modify it
  newList = newList.slice(0);

  // Loop through the two lists and diff the changes.
  // Note: This implementation considers changes in order to be updates.
  if (oldList) {
    for (var oldIndex = 0; oldIndex < oldList.length; oldIndex++) {
      var oldItem = oldList[oldIndex];
      if (!oldItem) // oldItem must exist for update or delete
        continue;

      // Loop through the new list looking for a match
      var oldId = oldItem.getId();
      var bMatchFound = false;
      for (var newIndex = 0; newIndex < newList.length; newIndex++) {
        var newItem = newList[newIndex];
        if (!newItem) // newItem must exist for update
          continue;

        var newId = newItem.getId();
        if ((oldId === newId) || (oldId && oldId.equals && oldId.equals(newId))) {
          // Match found, remove the item from the new list since it's handled
          newItem.animateUpdate(this, oldItem);
          newList.splice(newIndex, 1);
          bMatchFound = true;
          break;
        }
      }

      // If no match found, it was a delete.  Pass in the delete container so that
      // the object can choose whether to move to the new container.
      if (!bMatchFound) {
        oldItem.animateDelete(this, this._deleteContainer);
      }
    }
  }

  // All remaining objects in newList are inserts
  for (var i = 0; i < newList.length; i++) {
    if (newList[i]) // must be valid object for insert
      newList[i].animateInsert(this);
  }
};


/**
 * Adds the specified playable to this handler's animation.
 * @param {DvtPlayable} playable The playable to add to this animation.
 * @param {number} index The relative ordering of the animation, beginning at 0.
 */
DvtDataAnimationHandler.prototype.add = function(playable, index) {
  if (!playable)
    return;

  if (!index)
    index = 0;

  // Make sure the playables array is large enough
  while (this._playables.length <= index)
    this._playables.push(new Array());

  // Add the playable to the array
  this._playables[index].push(playable);
};


/**
 * Returns the animation constructed by this handler.
 * @param {boolean=} bOverlap true if the animation phases should be slightly overlapped.  This produces a smoother
 *                             result as long as the objects in each phase are distinct.
 * @return {DvtPlayable} The animation constructed by this handler.
 */
DvtDataAnimationHandler.prototype.getAnimation = function(bOverlap) {
  // Construct a parallel playable for each phase of the animation
  var playables = [];
  for (var i = 0; i < this._playables.length; i++) {
    // Construct and add the playable for this index in the sequence
    if (this._playables[i].length > 0) {
      var playable = new DvtParallelPlayable(this._context, this._playables[i]);
      playables.push(playable);
    }
  }

  if (bOverlap) {
    // Overlap the animation phases for a smoother effect
    var phases = [];
    var startTime = 0;
    for (var phaseIndex = 0; phaseIndex < playables.length; phaseIndex++) {
      if (startTime > 0) {
        // Create the overlap using a sequential playable with empty custom animation for the delay. This is the easiest
        // way to force a delay without introducing delay onto Playable itself.
        var delayPlayable = new DvtCustomAnimation(this._context, null, startTime);
        phases.push(new DvtSequentialPlayable(this._context, [delayPlayable, playables[phaseIndex]]));
      }
      else
        phases.push(playables[phaseIndex]);

      // Update the startTime for the next phase
      startTime += (1 - DvtDataAnimationHandler._OVERLAP_RATIO) * playables[phaseIndex].getDuration();
    }
    return new DvtParallelPlayable(this._context, phases);
  }
  else
    return new DvtSequentialPlayable(this._context, playables);
};


/**
 * Returns the number of playables in this animation.
 * @return {Number} the number of playables in this animation.
 */
DvtDataAnimationHandler.prototype.getNumPlayables = function()
{
  return this._playables.length;
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class defining easing functions for animations.
  * @extends {DvtObj}
  * @class DvtEasing
  * @constructor
  */
var DvtEasing = function()
{
  this.Init();
};

DvtObj.createSubclass(DvtEasing, DvtObj, 'DvtEasing');


/**
  * Linear easing function.
  * Returns the percent progress of the animation after applying the easing function.
  * @param {number}  progress  percent progress of the animation
  * @type {number}
  */
DvtEasing.linear = function(progress)
{
  return progress;
};


/**
  * Quadratic easing function that starts slow and speeds up at the beginning.
  * Returns the percent progress of the animation after applying the easing function.
  * @param {number}  progress  percent progress of the animation
  * @type {number}
  */
DvtEasing.quadraticIn = function(progress)
{
  return DvtEasing.PolyIn(progress, 2);
};


/**
  * Quadratic easing function that starts fast and slows down at the end.
  * Returns the percent progress of the animation after applying the easing function.
  * @param {number}  progress  percent progress of the animation
  * @type {number}
  */
DvtEasing.quadraticOut = function(progress)
{
  return DvtEasing.PolyOut(progress, 2);
};


/**
  * Quadratic easing function that starts slow, speeds up, and then slows down at the end.
  * Returns the percent progress of the animation after applying the easing function.
  * @param {number}  progress  percent progress of the animation
  * @type {number}
  */
DvtEasing.quadraticInOut = function(progress)
{
  return DvtEasing.PolyInOut(progress, 2);
};


/**
  * Cubic easing function that starts slow and speeds up at the beginning.
  * Returns the percent progress of the animation after applying the easing function.
  * @param {number}  progress  percent progress of the animation
  * @type {number}
  */
DvtEasing.cubicIn = function(progress)
{
  return DvtEasing.PolyIn(progress, 3);
};


/**
  * Cubic easing function that starts fast and slows down at the end.
  * Returns the percent progress of the animation after applying the easing function.
  * @param {number}  progress  percent progress of the animation
  * @type {number}
  */
DvtEasing.cubicOut = function(progress)
{
  return DvtEasing.PolyOut(progress, 3);
};


/**
  * Cubic easing function that starts slow, speeds up, and then slows down at the end.
  * Returns the percent progress of the animation after applying the easing function.
  * @param {number}  progress  percent progress of the animation
  * @type {number}
  */
DvtEasing.cubicInOut = function(progress)
{
  return DvtEasing.PolyInOut(progress, 3);
};


/**
  * Cubic easing function that starts fast and slows down at the end,
  * overshooting the target and then coming back.
  * Returns the percent progress of the animation after applying the easing function.
  * @param {number}  progress  percent progress of the animation
  * @param {number}  overshoot  value to overshoot, with higher values
  *        overshooting more (value of 0 means no overshoot,
  *        default value of 1.7 overshoots by about 10%)
  * @type {number}
  */
DvtEasing.backOut = function(progress, overshoot)
{
  //t = progress, s = overshoot
  //(s+1)*t^3 - s*t^2
  if (!overshoot)
  {
    overshoot = 1.70158;
  }
  progress = 1 - progress;
  return 1 - progress * progress * ((overshoot + 1) * progress - overshoot);
};


/**
  * Cubic easing function that starts slow and speeds up at the beginning,
  * overshooting the starting value in the opposite direction and then
  * proceeding forward.
  * Returns the percent progress of the animation after applying the easing function.
  * @param {number}  progress  percent progress of the animation
  * @param {number}  overshoot  value to overshoot, with higher values
  *        overshooting more (value of 0 means no overshoot,
  *        default value of 1.7 overshoots by about 10%)
  * @type {number}
  */
DvtEasing.backIn = function(progress, overshoot)
{
  //t = progress, s = overshoot
  //(s+1)*t^3 - s*t^2
  if (!overshoot)
  {
    overshoot = 1.70158;
  }
  return progress * progress * ((overshoot + 1) * progress - overshoot);
};


/**
  * Easing function that oscillates at the start with an exponentially
  * decaying sine wave.
  *
  * @param {number}  progress  percent progress of the animation
  * @param {number}  amplitude  amplitude of the sine wave
  * @param {number}  period  period of the sine wave
  * @type {number}
  */
DvtEasing.elasticIn = function(progress, amplitude, period)
{
  if (progress <= 0 || progress >= 1)
  {
    return progress;
  }
  if (!period)
  {
    period = 0.45;
  }
  var s;
  if (!amplitude || amplitude < 1)
  {
    amplitude = 1;
    s = period / 4;
  }
  else
  {
    s = period / (2 * Math.PI) * Math.asin(1 / amplitude);
  }
  return -(amplitude * Math.pow(2, 10 * (progress -= 1)) * Math.sin((progress - s) * (2 * Math.PI) / period));
};


/**
  * Easing function that oscillates at the end with an exponentially
  * decaying sine wave.
  *
  * @param {number}  progress  percent progress of the animation
  * @param {number}  amplitude  amplitude of the sine wave
  * @param {number}  period  period of the sine wave
  * @type {number}
  */
DvtEasing.elasticOut = function(progress, amplitude, period) {
  return 1 - DvtEasing.elasticIn(1 - progress, amplitude, period);
};


/**
  * @protected
  * Polynomial easing function that starts slow and speeds up at the beginning.
  * Returns the percent progress of the animation after applying the easing function.
  * @param {number}  progress  percent progress of the animation
  * @param {number}  exp  exponent of the polynomial
  * @type {number}
  */
DvtEasing.PolyIn = function(progress, exp)
{
  if (progress < 0)
  {
    return 0;
  }
  if (progress > 1)
  {
    return 1;
  }
  else
  {
    return Math.pow(progress, exp);
  }
};


/**
  * @protected
  * Polynomial easing function that starts fast and slows down at the end.
  * Returns the percent progress of the animation after applying the easing function.
  * @param {number}  progress  percent progress of the animation
  * @param {number}  exp  exponent of the polynomial
  * @type {number}
  */
DvtEasing.PolyOut = function(progress, exp)
{
  if (progress < 0)
  {
    return 0;
  }
  if (progress > 1)
  {
    return 1;
  }
  else
  {
    return 1 - Math.pow(1 - progress, exp);
  }
};


/**
  * @protected
  * Polynomial easing function that starts slow, speeds up, and then slows down at the end.
  * Returns the percent progress of the animation after applying the easing function.
  * @param {number}  progress  percent progress of the animation
  * @param {number}  exp  exponent of the polynomial
  * @type {number}
  */
DvtEasing.PolyInOut = function(progress, exp)
{
  if (progress < 0)
  {
    return 0;
  }
  if (progress > 1)
  {
    return 1;
  }
  if (progress < .5)
  {
    return .5 * Math.pow(2 * progress, exp);
  }
  else
  {
    return .5 * (2 - Math.pow(2 * (1 - progress), exp));
  }
};


/**
  * @protected
  */
DvtEasing.prototype.Init = function()
{
};
// Copyright (c) 2011, 2015, Oracle and/or its affiliates. All rights reserved.
/**
  * Class defining interpolation functions for animations.
  * @extends {DvtObj}
  * @class DvtInterpolator
  * @constructor
  */
var DvtInterpolator = function()
{
  this.Init();
};

DvtObj.createSubclass(DvtInterpolator, DvtObj, 'DvtInterpolator');


/**
  * Add an interpolator function to use for a given type of value.
  * @param {string}  type  type of value to use interpolator for
  * @param {function}  func  interpolator function
  */
DvtInterpolator.addInterpolator = function(type, func) {
  DvtInterpolator._map[type] = func;
};


/**
  * Remove an interpolator function.
  * @param {string}  type  type of value to remove interpolator for
  */
DvtInterpolator.removeInterpolator = function(type) {
  delete DvtInterpolator._map[type];
};


/**
  * Interpolate a value between the original and destination values for the
  * given percent progress.
  * @param {DvtContext}  context  platform specific context object
  * @param {string}  type  type of value being interpolated
  * @param  origVal  original property value
  * @param  destVal  destination property value
  * @param {number}  progress  percent progress to interpolate
  */
DvtInterpolator.interpolate = function(context, type, origVal, destVal, progress)
{
  //don't pin progress, so that we can do elastic type easing functions,
  //like backIn and backOut for popIn and popOut anims
  /*if (progress <= 0)
  {
    return origVal;
  }

  if (progress >= 1)
  {
    return destVal;
  }*/

  var interpolatorFunc = DvtInterpolator._getInterpolator(type);
  if (interpolatorFunc) {
    return interpolatorFunc(context, origVal, destVal, progress);
  }

  return destVal;
};


/**
  * @private
  * Get the interpolator to use for the given type of value.
  * @param {string}  type  type of value to interpolate
  * @type {function}
  */
DvtInterpolator._getInterpolator = function(type) {
  return DvtInterpolator._map[type];
};


/**
  * Interpolate a number between the original and destination values for the
  * given percent progress.
  * @param {DvtContext}  context  platform specific context object
  * @param {number}  origVal  original property value
  * @param {number}  destVal  destination property value
  * @param {number}  progress  percent progress to interpolate
  * @type {number}
  * @protected
  */
DvtInterpolator.InterpolateNumber = function(context, origVal, destVal, progress)
{
  //return (origVal + progress * (destVal - origVal));
  return DvtMath.interpolateNumber(origVal, destVal, progress);
};


/**
  * Interpolate an array of numbers between the original and destination
  * values for the given percent progress.
  * @param {DvtContext}  context  platform specific context object
  * @param {number}  origVal  original property value
  * @param {number}  destVal  destination property value
  * @param {number}  progress  percent progress to interpolate
  * @type {array}
  * @protected
  */
DvtInterpolator.InterpolateNumberArray = function(context, origVal, destVal, progress)
{
  var origLength = origVal.length;
  var destLength = destVal.length;
  var array = [];
  for (var i = 0; i < Math.max(origLength, destLength); i++)
  {
    //if one array is shorter than the other, use the last actual value
    //from the shorter array to interpolate with all the extra elements
    //in the longer array
    var n1;
    var n2;
    if (i < origLength)
    {
      n1 = origVal[i];
    }
    else
    {
      n1 = origVal[origLength - 1];
    }
    if (i < destLength)
    {
      n2 = destVal[i];
    }
    else
    {
      n2 = destVal[destLength - 1];
    }
    array.push(DvtInterpolator.InterpolateNumber(context, n1, n2, progress));
  }
  return array;
};


/**
  * Interpolate a matrix between the original and destination values for the
  * given percent progress.
  * @param {DvtContext}  context  platform specific context object
  * @param {DvtMatrix}  origVal  original property value
  * @param {DvtMatrix}  destVal  destination property value
  * @param {number}  progress  percent progress to interpolate
  * @type {DvtMatrix}
  * @protected
  */
DvtInterpolator.InterpolateMatrix = function(context, origVal, destVal, progress)
{
  var newA = DvtInterpolator.InterpolateNumber(context, origVal.getA(), destVal.getA(), progress);
  var newB = DvtInterpolator.InterpolateNumber(context, origVal.getB(), destVal.getB(), progress);
  var newC = DvtInterpolator.InterpolateNumber(context, origVal.getC(), destVal.getC(), progress);
  var newD = DvtInterpolator.InterpolateNumber(context, origVal.getD(), destVal.getD(), progress);
  var newTx = DvtInterpolator.InterpolateNumber(context, origVal.getTx(), destVal.getTx(), progress);
  var newTy = DvtInterpolator.InterpolateNumber(context, origVal.getTy(), destVal.getTy(), progress);

  return new DvtMatrix(newA, newB, newC, newD, newTx, newTy);
};


/**
  * Interpolate a color between the original and destination values for the
  * given percent progress.
  * @param {DvtContext}  context  platform specific context object
  * @param {number}  origVal  original property value
  * @param {number}  destVal  destination property value
  * @param {number}  progress  percent progress to interpolate
  * @protected
  */
DvtInterpolator.InterpolateColor = function(context, origVal, destVal, progress)
{
  return DvtColorUtils.interpolateColor(origVal, destVal, progress);
};


/**
  * Interpolate an array of colors between the original and destination
  * values for the given percent progress.
  * @param {DvtContext}  context  platform specific context object
  * @param {number}  origVal  original property value
  * @param {number}  destVal  destination property value
  * @param {number}  progress  percent progress to interpolate
  * @type {array}
  * @protected
  */
DvtInterpolator.InterpolateColorArray = function(context, origVal, destVal, progress)
{
  var origLength = origVal.length;
  var destLength = destVal.length;
  var array = [];
  for (var i = 0; i < Math.max(origLength, destLength); i++)
  {
    //if one array is shorter than the other, use the last actual value
    //from the shorter array to interpolate with all the extra elements
    //in the longer array
    var n1;
    var n2;
    if (i < origLength)
    {
      n1 = origVal[i];
    }
    else
    {
      n1 = origVal[origLength - 1];
    }
    if (i < destLength)
    {
      n2 = destVal[i];
    }
    else
    {
      n2 = destVal[destLength - 1];
    }
    array.push(DvtInterpolator.InterpolateColor(context, n1, n2, progress));
  }
  return array;
};


/**
  * Interpolate an array of polyline points between the original and
  * destination values for the given percent progress.
  * @param {DvtContext}  context  platform specific context object
  * @param {number}  origVal  original property value
  * @param {number}  destVal  destination property value
  * @param {number}  progress  percent progress to interpolate
  * @type {array}
  * @protected
  */
DvtInterpolator.InterpolateGrowPolyline = function(context, origVal, destVal, progress)
{
  if (progress === 0)
  {
    return [destVal[0], destVal[1]];
  }
  else if (progress === 1)
  {
    return destVal;
  }

  var destLength = destVal.length;
  var array = [destVal[0], destVal[1]];
  var totalLength = DvtInterpolator.CalcPolylineLength(destVal);
  var partialLength = progress * totalLength;
  var accumLength = 0;
  var currSegLength;
  for (var i = 2; i < destLength - 1; i += 2)
  {
    var x1 = destVal[i - 2];
    var y1 = destVal[i - 1];
    var x2 = destVal[i];
    var y2 = destVal[i + 1];

    currSegLength = DvtInterpolator.CalcPolylineLength([x1, y1, x2, y2]);

    if (accumLength + currSegLength > partialLength)
    {
      var ratio = (partialLength - accumLength) / currSegLength;
      var diffX = x2 - x1;
      var diffY = y2 - y1;
      array.push(x1 + ratio * diffX);
      array.push(y1 + ratio * diffY);
      break;
    }
    else
    {
      accumLength += currSegLength;

      array.push(x2);
      array.push(y2);
    }
  }
  return array;
};


/**
  * Interpolate an array of path commands between the original and
  * destination values for the given percent progress.
  * @param {DvtContext}  context  platform specific context object
  * @param {number}  origVal  original property value
  * @param {number}  destVal  destination property value
  * @param {number}  progress  percent progress to interpolate
  * @type {array}
  * @protected
  */
DvtInterpolator.InterpolateGrowPath = function(context, origVal, destVal, progress)
{
  if (progress === 0)
  {
    return [destVal[0], destVal[1]];
  }
  else if (progress === 1)
  {
    return destVal;
  }

  var destLength = destVal.length;
  var array = [];
  var totalLength = DvtInterpolator.CalcPathLength(destVal);
  var partialLength = progress * totalLength;
  var accumLength = 0;
  var currSegLength;
  var x1;
  var y1;
  var cpx1;
  var cpy1;
  var cpx2;
  var cpy2;
  var prevX;
  var prevY;
  for (var i = 0; i < destLength; i++)
  {
    var cmd = destVal[i];
    var segArray;
    switch (cmd)
    {
      case 'M':
        x1 = destVal[++i];
        y1 = destVal[++i];
        prevX = x1;
        prevY = y1;
        segArray = [prevX, prevY, prevX, prevY];
        break;
      case 'L':
        x1 = destVal[++i];
        y1 = destVal[++i];
        segArray = [prevX, prevY, x1, y1];
        break;
      case 'Q':
        cpx1 = destVal[++i];
        cpy1 = destVal[++i];
        x1 = destVal[++i];
        y1 = destVal[++i];
        segArray = [prevX, prevY, x1, y1];
        break;
      case 'C':
        cpx1 = destVal[++i];
        cpy1 = destVal[++i];
        cpx2 = destVal[++i];
        cpy2 = destVal[++i];
        x1 = destVal[++i];
        y1 = destVal[++i];
        segArray = [prevX, prevY, x1, y1];
        break;
    }

    currSegLength = DvtInterpolator.CalcPolylineLength(segArray);

    if (accumLength + currSegLength > partialLength)
    {
      var ratio = (partialLength - accumLength) / currSegLength;

      array.push(cmd);
      switch (cmd)
      {
        case 'Q':
          array.push(prevX + ratio * (cpx1 - prevX),
                     prevY + ratio * (cpy1 - prevY));
          break;
        case 'C':
          array.push(prevX + ratio * (cpx1 - prevX),
                     prevY + ratio * (cpy1 - prevY),
                     prevX + ratio * (cpx2 - prevX),
                     prevY + ratio * (cpy2 - prevY));
          break;
      }
      array.push(prevX + ratio * (x1 - prevX),
                 prevY + ratio * (y1 - prevY));
      break;
    }
    else
    {
      accumLength += currSegLength;

      array.push(cmd);
      switch (cmd)
      {
        case 'Q':
          array.push(cpx1, cpy1);
          break;
        case 'C':
          array.push(cpx1, cpy1, cpx2, cpy2);
          break;
      }
      array.push(x1);
      array.push(y1);
    }
    prevX = x1;
    prevY = y1;
  }
  return array;
};

DvtInterpolator.CalcPolylineLength = function(arPoints)
{
  var length = 0;
  var oldX;
  var oldY;
  var xx;
  var yy;
  for (var i = 0; i < arPoints.length; i += 2)
  {
    xx = arPoints[i];
    yy = arPoints[i + 1];

    if (i > 0)
    {
      if (xx === oldX)
      {
        length += (Math.abs(yy - oldY));
      }
      else if (yy === oldY)
      {
        length += (Math.abs(xx - oldX));
      }
      else
      {
        var diffX = Math.abs(xx - oldX);
        var diffY = Math.abs(yy - oldY);
        length += Math.sqrt((diffX * diffX) + (diffY * diffY));
      }
    }

    oldX = xx;
    oldY = yy;
  }
  return length;
};

DvtInterpolator.CalcPathLength = function(arPoints)
{
  var length = 0;
  var oldX;
  var oldY;
  var xx;
  var yy;
  var cmd;
  for (var i = 0; i < arPoints.length; )
  {
    cmd = arPoints[i];
    switch (cmd)
    {
      case 'M':
        xx = arPoints[i + 1];
        yy = arPoints[i + 2];
        oldX = xx;
        oldY = yy;
        i += 3;
        continue;
        break;
      case 'L':
        xx = arPoints[i + 1];
        yy = arPoints[i + 2];
        i += 3;
        break;
      case 'Q':
        xx = arPoints[i + 3];
        yy = arPoints[i + 4];
        i += 5;
        break;
      case 'C':
        xx = arPoints[i + 5];
        yy = arPoints[i + 6];
        i += 7;
        break;
    }

    if (i > 0)
    {
      if (xx === oldX)
      {
        length += (Math.abs(yy - oldY));
      }
      else if (yy === oldY)
      {
        length += (Math.abs(xx - oldX));
      }
      else
      {
        var diffX = Math.abs(xx - oldX);
        var diffY = Math.abs(yy - oldY);
        length += Math.sqrt((diffX * diffX) + (diffY * diffY));
      }
    }

    oldX = xx;
    oldY = yy;
  }
  return length;
};


/**
  * Interpolate a rectangle between the original and destination values for
  * the given percent progress.
  * @param {DvtContext}  context  platform specific context object
  * @param {DvtRectangle}  origVal  original property value
  * @param {DvtRectangle}  destVal  destination property value
  * @param {number}  progress  percent progress to interpolate
  * @type {DvtRectangle}
  * @protected
  */
DvtInterpolator.InterpolateRectangle = function(context, origVal, destVal, progress)
{
  var newX = DvtInterpolator.InterpolateNumber(context, origVal.x, destVal.x, progress);
  var newY = DvtInterpolator.InterpolateNumber(context, origVal.y, destVal.y, progress);
  var newW = DvtInterpolator.InterpolateNumber(context, origVal.w, destVal.w, progress);
  var newH = DvtInterpolator.InterpolateNumber(context, origVal.h, destVal.h, progress);

  return new DvtRectangle(newX, newY, newW, newH);
};


/**
  * Interpolate a point between the original and destination values for
  * the given percent progress.
  * @param {DvtContext}  context  platform specific context object
  * @param {DvtPoint}  origVal  original property value
  * @param {DvtPoint}  destVal  destination property value
  * @param {number}  progress  percent progress to interpolate
  * @type {DvtPoint}
  * @protected
  */
DvtInterpolator.InterpolatePoint = function(context, origVal, destVal, progress)
{
  var newX = DvtInterpolator.InterpolateNumber(context, origVal.x, destVal.x, progress);
  var newY = DvtInterpolator.InterpolateNumber(context, origVal.y, destVal.y, progress);

  return new DvtPoint(newX, newY);
};


/**
  * Interpolate a path between the original and destination
  * values for the given percent progress.
  * @param {DvtContext}  context  platform specific context object
  * @param {number}  origVal  original property value
  * @param {number}  destVal  destination property value
  * @param {number}  progress  percent progress to interpolate
  * @type {array}
  * @protected
  */
DvtInterpolator.InterpolatePath = function(context, origVal, destVal, progress)
{
  var origLength = origVal.length;
  var destLength = destVal.length;
  //TO DO:
  //for now, if the paths are not of equal length, just return the dest val
  if (origLength != destLength)
  {
    return destVal;
  }

  var array = [];
  var i = 0;
  var j = 0;
  for (; i < origLength && j < destLength; )
  {
    var n1 = origVal[i];
    var n2 = destVal[j];
    var bNumberN1 = !isNaN(n1);
    var bNumberN2 = !isNaN(n2);
    if (!bNumberN1 && !bNumberN2)
    {
      if (n1 === n2)
      {
        array.push(n1);
      }
      //TO DO: handle case where commands are different
    }
    else if (bNumberN1 && bNumberN2)
    {
      array.push(DvtInterpolator.InterpolateNumber(context, n1, n2, progress));
    }
    i++;
    j++;
  }
  return array;
};


/**
  * Interpolate a fill between the original and destination values for the
  * given percent progress.
  * @param {DvtContext}  context  platform specific context object
  * @param {number}  origVal  original property value
  * @param {number}  destVal  destination property value
  * @param {number}  progress  percent progress to interpolate
  * @protected
  */
DvtInterpolator.InterpolateFill = function(context, origVal, destVal, progress)
{
  if (origVal instanceof DvtSolidFill && destVal instanceof DvtSolidFill) {
    var color = DvtInterpolator.InterpolateColor(context, origVal.getColor(), destVal.getColor(), progress);
    var alpha = DvtInterpolator.InterpolateNumber(context, origVal.getAlpha(), destVal.getAlpha(), progress);
    return new DvtSolidFill(color, alpha);
  }

  return destVal;
};


/**
  * Interpolate a stroke between the original and destination values for the
  * given percent progress.
  * @param {DvtContext}  context  platform specific context object
  * @param {number}  origVal  original property value
  * @param {number}  destVal  destination property value
  * @param {number}  progress  percent progress to interpolate
  * @protected
  */
DvtInterpolator.InterpolateStroke = function(context, origVal, destVal, progress)
{
  if (origVal instanceof DvtSolidStroke && destVal instanceof DvtSolidStroke) {
    var color = DvtInterpolator.InterpolateColor(context, origVal.getColor(), destVal.getColor(), progress);
    var alpha = DvtInterpolator.InterpolateNumber(context, origVal.getAlpha(), destVal.getAlpha(), progress);
    var width = DvtInterpolator.InterpolateNumber(context, origVal.getWidth(), destVal.getWidth(), progress);
    //clone the destVal because it may have other properties set that
    //we can't interpolate between
    var stroke = destVal.clone();
    stroke.setColor(color);
    stroke.setAlpha(alpha);
    stroke.setWidth(width);
    return stroke;
  }

  return destVal;
};


/**
  * Interpolate an array of polyline coordinates between the original and
  * destination values for the given percent progress.
  * @param {DvtContext}  context  platform specific context object
  * @param {number}  origVal  original property value
  * @param {number}  destVal  destination property value
  * @param {number}  progress  percent progress to interpolate
  * @type {array}
  * @protected
  */
DvtInterpolator.InterpolatePolyline = function(context, origVal, destVal, progress)
{
  var origLength = origVal.length;
  var destLength = destVal.length;
  var array = [];
  for (var i = 0; i < Math.max(origLength, destLength); i++)
  {
    //if one array is shorter than the other, use the last actual coords
    //from the shorter array to interpolate with all the extra coords
    //in the longer array
    //: use the last coordinate pair, not just the last
    //element in the array
    var endOffset = 2;
    if (i % 2 == 1) {
      endOffset = 1;
    }
    var n1;
    var n2;
    if (i < origLength)
    {
      n1 = origVal[i];
    }
    else
    {
      n1 = origVal[origLength - endOffset];
    }
    if (i < destLength)
    {
      n2 = destVal[i];
    }
    else
    {
      n2 = destVal[destLength - endOffset];
    }
    array.push(DvtInterpolator.InterpolateNumber(context, n1, n2, progress));
  }

  //trim the array to remove redundant coords at the end
  if (destLength < origLength) {
    var arLength = array.length;
    var lastX = array[arLength - 2];
    var lastY = array[arLength - 1];
    for (var i = arLength - 4; i >= 0; i -= 2) {
      var currX = array[i];
      var currY = array[i + 1];
      if (currX == lastX && currY == lastY) {
        array.splice(i, 2);
      }
      else {
        break;
      }
    }
  }

  return array;
};


/**
  * @protected
  */
DvtInterpolator.prototype.Init = function()
{
};


//need to define the map after the functions are defined above
/**
  * @private
  */
DvtInterpolator._map = {};
DvtInterpolator._map[DvtAnimator.TYPE_NUMBER] = DvtInterpolator.InterpolateNumber;
DvtInterpolator._map[DvtAnimator.TYPE_MATRIX] = DvtInterpolator.InterpolateMatrix;
DvtInterpolator._map[DvtAnimator.TYPE_NUMBER_ARRAY] = DvtInterpolator.InterpolateNumberArray;
DvtInterpolator._map[DvtAnimator.TYPE_COLOR] = DvtInterpolator.InterpolateColor;
DvtInterpolator._map[DvtAnimator.TYPE_COLOR_ARRAY] = DvtInterpolator.InterpolateColorArray;
DvtInterpolator._map[DvtAnimator.TYPE_GROW_POLYLINE] = DvtInterpolator.InterpolateGrowPolyline;
DvtInterpolator._map[DvtAnimator.TYPE_RECTANGLE] = DvtInterpolator.InterpolateRectangle;
DvtInterpolator._map[DvtAnimator.TYPE_POINT] = DvtInterpolator.InterpolatePoint;
DvtInterpolator._map[DvtAnimator.TYPE_PATH] = DvtInterpolator.InterpolatePath;
DvtInterpolator._map[DvtAnimator.TYPE_GROW_PATH] = DvtInterpolator.InterpolateGrowPath;
DvtInterpolator._map[DvtAnimator.TYPE_FILL] = DvtInterpolator.InterpolateFill;
DvtInterpolator._map[DvtAnimator.TYPE_STROKE] = DvtInterpolator.InterpolateStroke;
DvtInterpolator._map[DvtAnimator.TYPE_POLYLINE] = DvtInterpolator.InterpolatePolyline;
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class representing a timer.
  * @extends {DvtObj}
  * @class DvtTimer
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  * @param {number}  interval  interval between timer ticks, in milliseconds
  * @param {function}  callback  function to call for each timer tick
  * @param {object}  callbackObj  optional object instance that callback function is defined on
  * @param {number}  repeatCount  optional number of times for timer to repeat;
  *        timer repeats indefinitely if 0 or undefined
  */
var DvtTimer = function(context, interval, callback, callbackObj, repeatCount)
{
  this.Init(context, interval, callback, callbackObj, repeatCount);
};

DvtObj.createSubclass(DvtTimer, DvtObj, 'DvtTimer');


/**
  * @protected
  */
DvtTimer.prototype.Init = function(context, interval, callback, callbackObj, repeatCount)
{
  this._interval = interval; //in ms
  this._callback = callback;
  this._callbackObj = callbackObj;

  this._repeatCount = repeatCount;
  this._bRunning = false;
  this._numIterations = 0;
};


/**
  * Start this timer.
  */
DvtTimer.prototype.start = function()
{
  if (!this._bRunning)
  {
    this._bRunning = true;
    this.StartTimer();
  }
};


/**
  * Stop this timer.
  */
DvtTimer.prototype.stop = function()
{
  if (this._bRunning)
  {
    this._bRunning = false;
    this.StopTimer();
  }
};


/**
 * Reset this timer.
 */
DvtTimer.prototype.reset = function()
{
  if (this._bRunning) {
    this.stop();
  }

  this._numIterations = 0;
};


/**
  * Determine if this timer is running.
  * @type {boolean}
  */
DvtTimer.prototype.isRunning = function()
{
  return this._bRunning;
};


/**
  * @protected
  * Handle a timer tick.
  */
DvtTimer.prototype.HandleTimer = function()
{
  if (this._callback)
  {
    this._callback.call(this._callbackObj);

    if (this._repeatCount)
    {
      this._numIterations++;
      if (this._numIterations >= this._repeatCount)
      {
        this.stop();
      }
    }
  }
};


/**
  * Set the interval between timer ticks, in milliseconds.
  * @param {number}  interval  interval between timer ticks, in milliseconds
  */
DvtTimer.prototype.setInterval = function(interval)
{
  var i = interval;
  if (i < 0)
  {
    i = 0;
  }
  var oldBRunning = this._bRunning;
  if (oldBRunning)
  {
    this.stop();
  }
  this._interval = i;
  if (oldBRunning)
  {
    this.start();
  }
};


/**
  * Get the interval between timer ticks.
  * @type {number}
  */
DvtTimer.prototype.getInterval = function()
{
  return this._interval;
};


/**
 * Starts the internal timer implementation.  Called when the timer is started.
 * @protected
 */
DvtTimer.prototype.StartTimer = function()
{
  var timer = this;
  var timerCallback = this.HandleTimer;
  this._timerId = window.setInterval(function() {timerCallback.call(timer)}, this.getInterval());
};


/**
 * Stops the internal timer implementation.  Called when the timer is stopped.
 * @protected
  */
DvtTimer.prototype.StopTimer = function()
{
  if (this._timerId)
  {
    window.clearInterval(this._timerId);
    this._timerId = null;
  }
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Abstract base class representing an animation.
  * @extends {DvtPlayable}
  * @class DvtBaseAnimation
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  * @param objs  a single DvtContainer or Array of DvtContainers to animate
  * @param {number}  duration  length of animation, in seconds
  * @param {number}  delay  time to delay start of animation, in seconds
  */
var DvtBaseAnimation = function(context, objs, duration, delay)
{
  this.Init(context, objs, duration, delay);
};

DvtObj.createSubclass(DvtBaseAnimation, DvtPlayable, 'DvtBaseAnimation');


/**
  * Easing: linear.
  */
DvtBaseAnimation.EASING_LINEAR = 1;


/**
  * Easing: cubic in and out.
  */
DvtBaseAnimation.EASING_CUBIC_IN_OUT = 2;


/**
  * Easing: cubic in.
  */
DvtBaseAnimation.EASING_CUBIC_IN = 3;


/**
  * Easing: cubic out.
  */
DvtBaseAnimation.EASING_CUBIC_OUT = 4;


/**
  * Easing: quadratic in and out.
  */
DvtBaseAnimation.EASING_QUADRATIC_IN_OUT = 5;


/**
  * Easing: quadratic in.
  */
DvtBaseAnimation.EASING_QUADRATIC_IN = 6;


/**
  * Easing: quadratic out.
  */
DvtBaseAnimation.EASING_QUADRATIC_OUT = 7;


/**
  * Easing: bounce in.
  */
DvtBaseAnimation.EASING_BOUNCE_IN = 8;


/**
  * Easing: bounce out.
  */
DvtBaseAnimation.EASING_BOUNCE_OUT = 9;


/**
  * Easing: elastic in.
  */
DvtBaseAnimation.EASING_ELASTIC_IN = 10;


/**
  * Easing: elastic out.
  */
DvtBaseAnimation.EASING_ELASTIC_OUT = 11;


/**
  * Direction: center.
  */
DvtBaseAnimation.DIR_C = 1;


/**
  * Direction: north.
  */
DvtBaseAnimation.DIR_N = 2;


/**
  * Direction: northeast.
  */
DvtBaseAnimation.DIR_NE = 3;


/**
  * Direction: east.
  */
DvtBaseAnimation.DIR_E = 4;


/**
  * Direction: southeast.
  */
DvtBaseAnimation.DIR_SE = 5;


/**
  * Direction: south.
  */
DvtBaseAnimation.DIR_S = 6;


/**
  * Direction: southwest.
  */
DvtBaseAnimation.DIR_SW = 7;


/**
  * Direction: west.
  */
DvtBaseAnimation.DIR_W = 8;


/**
  * Direction: northwest.
  */
DvtBaseAnimation.DIR_NW = 9;


//axis constants
/**
 * Axis: x-axis
 */
DvtBaseAnimation.AXIS_X = 1;


/**
 * Axis: y-axis
 */
DvtBaseAnimation.AXIS_Y = 2;


//rotation directions
/**
 * Rotation direction: clockwise
 */
DvtBaseAnimation.ROT_DIR_CLOCKWISE = 1;


/**
 * Rotation direction: counter-clockwise
 */
DvtBaseAnimation.ROT_DIR_COUNTERCLOCKWISE = 2;


/**
  * @protected
  * Get the easing function corresponding to the given constant.
  * @param easing  constant representing the easing function
  * @type {function}
  */
DvtBaseAnimation.GetEasingFunction = function(easing)
{
  switch (easing)
  {
    case DvtBaseAnimation.EASING_LINEAR:
      return DvtEasing.linear;
    case DvtBaseAnimation.EASING_CUBIC_IN:
      return DvtEasing.cubicIn;
    case DvtBaseAnimation.EASING_CUBIC_OUT:
      return DvtEasing.cubicOut;
    case DvtBaseAnimation.EASING_QUADRATIC_IN_OUT:
      return DvtEasing.quadraticInOut;
    case DvtBaseAnimation.EASING_QUADRATIC_IN:
      return DvtEasing.quadraticIn;
    case DvtBaseAnimation.EASING_QUADRATIC_OUT:
      return DvtEasing.quadraticOut;
    case DvtBaseAnimation.EASING_BOUNCE_IN:
      return DvtEasing.backIn;
    case DvtBaseAnimation.EASING_BOUNCE_OUT:
      return DvtEasing.backOut;
    case DvtBaseAnimation.EASING_ELASTIC_IN:
      return DvtEasing.elasticIn;
    case DvtBaseAnimation.EASING_ELASTIC_OUT:
      return DvtEasing.elasticOut;
    case DvtBaseAnimation.EASING_CUBIC_IN_OUT:
    default:
      return DvtEasing.cubicInOut;
  }
};


/**
  * @protected
  * Get the point corresponding to the given compass direction
  * on the given bounding box.
  * @param {DvtRectangle}  boundsRect  bounding box
  * @param direction  constant representing the compass direction
  * @type {DvtPoint}
  */
DvtBaseAnimation.GetCompassPoint = function(boundsRect, direction)
{
  switch (direction)
  {
    case DvtBaseAnimation.DIR_N:
      return new DvtPoint(boundsRect.x + 0.5 * boundsRect.w, boundsRect.y);
    case DvtBaseAnimation.DIR_NE:
      return new DvtPoint(boundsRect.x + boundsRect.w, boundsRect.y);
    case DvtBaseAnimation.DIR_E:
      return new DvtPoint(boundsRect.x + boundsRect.w, boundsRect.y + 0.5 * boundsRect.h);
    case DvtBaseAnimation.DIR_SE:
      return new DvtPoint(boundsRect.x + boundsRect.w, boundsRect.y + boundsRect.h);
    case DvtBaseAnimation.DIR_S:
      return new DvtPoint(boundsRect.x + 0.5 * boundsRect.w, boundsRect.y + boundsRect.h);
    case DvtBaseAnimation.DIR_SW:
      return new DvtPoint(boundsRect.x, boundsRect.y + boundsRect.h);
    case DvtBaseAnimation.DIR_W:
      return new DvtPoint(boundsRect.x, boundsRect.y + 0.5 * boundsRect.h);
    case DvtBaseAnimation.DIR_NW:
      return new DvtPoint(boundsRect.x, boundsRect.y);
    case DvtBaseAnimation.DIR_C:
    default:
      return new DvtPoint(boundsRect.x + 0.5 * boundsRect.w, boundsRect.y + 0.5 * boundsRect.h);
  }
};


/**
  * @protected
  * Get the point to position the given object rectangle so that it aligns to the
  * boundary rectangle in the compass direction.
  * @param {DvtRectangle}  objRect  object bounding box
  * @param {DvtRectangle}  boundsRect  bounding box
  * @param direction  constant representing the compass direction
  * @type {DvtPoint}
  */
DvtBaseAnimation.GetAlignCompassPoint = function(objRect, boundsRect, direction)
{
  var compassPoint = DvtBaseAnimation.GetCompassPoint(boundsRect, direction);
  switch (direction)
  {
    case DvtBaseAnimation.DIR_N:
      return new DvtPoint(compassPoint.x - 0.5 * objRect.w, compassPoint.y);
    case DvtBaseAnimation.DIR_NE:
      return new DvtPoint(compassPoint.x - objRect.w, compassPoint.y);
    case DvtBaseAnimation.DIR_E:
      return new DvtPoint(compassPoint.x - objRect.w, compassPoint.y - 0.5 * objRect.h);
    case DvtBaseAnimation.DIR_SE:
      return new DvtPoint(compassPoint.x - objRect.w, compassPoint.y - objRect.h);
    case DvtBaseAnimation.DIR_S:
      return new DvtPoint(compassPoint.x - 0.5 * objRect.w, compassPoint.y - objRect.h);
    case DvtBaseAnimation.DIR_SW:
      return new DvtPoint(compassPoint.x, compassPoint.y - objRect.h);
    case DvtBaseAnimation.DIR_W:
      return new DvtPoint(compassPoint.x, compassPoint.y - 0.5 * objRect.h);
    case DvtBaseAnimation.DIR_NW:
      return new DvtPoint(compassPoint.x, compassPoint.y);
    case DvtBaseAnimation.DIR_C:
    default:
      return new DvtPoint(compassPoint.x - 0.5 * objRect.w, compassPoint.y - 0.5 * objRect.h);
  }
};


/**
  * @protected
  * @override
  */
DvtBaseAnimation.prototype.Init = function(context, objs, duration, delay)
{
  DvtBaseAnimation.superclass.Init.call(this, context);

  this._context = context;

  if (objs instanceof Array)
  {
    this._arObjects = objs;
  }
  else
  {
    this._arObjects = [objs];
  }

  this._duration = (duration ? duration : .5);
  this._delay = (delay ? delay : 0);
  this._easing = DvtBaseAnimation.EASING_CUBIC_IN_OUT;
  this._bInitialized = false;

  this._bSaveAndRestoreOriginalMatrices = false;
  this._origMatrixArray = null;
  this._bHideObjectsOnEnd = false;

  this.CreateAnimator(context);
};


/**
  * @protected
  * Get the platform dependent context object.
  * @type {DvtContext}
  */
DvtBaseAnimation.prototype.GetContext = function()
{
  return this._context;
};


/**
 * Determine if this animation is running.
 * @type {boolean}
 */
DvtBaseAnimation.prototype.isRunning = function()
{
  if (this._animator) {
    return this._animator.isRunning();
  }
  return false;
};

/**
 * @override
 */
DvtBaseAnimation.prototype.initialize = function() {
  if (!this._bInitialized)
  {
    //initialize the desired end results of the animation before the start
    //states because the end results may depend on the object states
    //before the start states are applied
    this._initializeEndStates(this._arObjects);
    //initialize the display objects appropriately for the start of the animation
    this._initializeStartStates(this._arObjects);

    this.InitializePlay();

    this._bInitialized = true;
  }
};

/**
  * @override
  */
DvtBaseAnimation.prototype.play = function(bImmediate)
{
  // Initialize the start and end states.
  this.initialize();

  if (this._animator)
    this._animator.play(bImmediate);
};


/**
  * @override
  */
DvtBaseAnimation.prototype.stop = function(bJumpToEnd)
{
  if (this._animator)
    this._animator.stop(bJumpToEnd);
};


/**
  * @override
  */
DvtBaseAnimation.prototype.pause = function()
{
  if (this._animator)
    this._animator.pause();
};

/**
  * @override
  */
DvtBaseAnimation.prototype.getDuration = function()
{
  return this._duration;
};

/**
  * Set the duration of this animation.
  * @param {number}  duration  duration of this animation, in seconds
  */
DvtBaseAnimation.prototype.setDuration = function(duration)
{
  this._duration = (duration ? duration : 0);

  if (this._animator)
    this._animator.setDuration(this._duration);
};


/**
  * Get the delay for the start of this animation, in seconds.
  * @type {number}
  */
DvtBaseAnimation.prototype.getDelay = function()
{
  return this._delay;
};


/**
  * Set the delay for the start of this animation.
  * @param {number}  delay  delay for the start of this animation, in seconds
  */
DvtBaseAnimation.prototype.setDelay = function(delay)
{
  this._delay = (delay ? delay : 0);

  if (this._animator)
    this._animator.setDelay(this._delay);
};


/**
  * Get the easing function for this animation.
  * Returns one of the EASING_ constants defined on DvtBaseAnimation.
  */
DvtBaseAnimation.prototype.getEasing = function()
{
  return this._easing;
};


/**
  * Set the easing function for this animation.
  * @param  easing  one of the EASING_ constants defined on DvtBaseAnimation
  */
DvtBaseAnimation.prototype.setEasing = function(easing)
{
  this._easing = easing;

  if (this._animator)
    this._animator.setEasing(DvtBaseAnimation.GetEasingFunction(this._easing));
};


/**
  * @protected
  * Create the underlying animator used by this animation.
  * @param {DvtContext}  context  platform specific context object
  */
DvtBaseAnimation.prototype.CreateAnimator = function(context)
{
  this._animator = new DvtAnimator(context, this._duration, this._delay, DvtBaseAnimation.GetEasingFunction(this._easing));
  this._animator.setOnEnd(this.OnAnimEnd, this);
};


/**
  * @protected
  * Called when the underlying animator ends.
  */
DvtBaseAnimation.prototype.OnAnimEnd = function()
{
  //hide objects first
  if (this._bHideObjectsOnEnd)
  {
    this.HideObjects();
  }

  //restore original transforms after hiding objects
  if (this._bSaveAndRestoreOriginalMatrices)
  {
    this.RestoreOriginalMatrices();
  }

  //call external onEnd func after any internal cleanup
  if (this._onEnd)
  {
    this._onEnd.call(this._onEndObj);
  }
};

/**
  * @protected
  * Called when play is called.
  */
DvtBaseAnimation.prototype.InitializePlay = function()
{
  //for subclasses to implement
};


/**
  * Called when play is called to initialize the start states of
  * the objects being animated.
  * @param {array}  arObjects  array of objects being animated
  * @private
  */
DvtBaseAnimation.prototype._initializeStartStates = function(arObjects)
{
  if (arObjects)
  {
    var obj;
    for (var i = 0; i < arObjects.length; i++)
    {
      obj = arObjects[i];
      if (obj)
      {
        if (this._bSaveAndRestoreOriginalMatrices)
        {
          if (!this._origMatrixArray)
          {
            this._origMatrixArray = [];
          }

          this._origMatrixArray.push(obj.getMatrix());
        }

        this.InitStartState(obj);
      }
    }
  }
};


/**
  * Called when play is called to initialize the end states of
  * the objects being animated.
  * @param {array}  arObjects  array of objects being animated
  * @private
  */
DvtBaseAnimation.prototype._initializeEndStates = function(arObjects)
{
  if (arObjects)
  {
    var obj;
    for (var i = 0; i < arObjects.length; i++)
    {
      obj = arObjects[i];
      if (obj)
      {
        this.InitEndState(obj);
      }
    }
  }
};


/**
  * @protected
  * Initialize the start state of the given object being animated.
  * @param {object}  obj  object being animated
  */
DvtBaseAnimation.prototype.InitStartState = function(obj)
{
  //subclasses must implement
};


/**
  * @protected
  * Initialize the end state of the given object being animated.
  * @param {object}  obj  object being animated
  */
DvtBaseAnimation.prototype.InitEndState = function(obj)
{
  //subclasses must implement
};


/**
  * @protected
  * Set objects to be visible.
  */
DvtBaseAnimation.prototype.ShowObjects = function()
{
  this.SetObjectsVisible(true);
};


/**
  * @protected
  * Set objects to be hidden.
  */
DvtBaseAnimation.prototype.HideObjects = function()
{
  this.SetObjectsVisible(false);
};


/**
 * @protected
 * Set visibility of objects.
 *
 * @param {boolean}  bVisible  true to show, false to hide
 */
DvtBaseAnimation.prototype.SetObjectsVisible = function(bVisible)
{
  if (this._arObjects)
  {
    var obj;
    for (var i = this._arObjects.length - 1; i >= 0; i--)
    {
      obj = this._arObjects[i];
      if (obj)
      {
        obj.setVisible(bVisible);
      }
    }
  }
};


/**
  * @protected
  * Restore objects' original matrices as they were before animation.
  */
DvtBaseAnimation.prototype.RestoreOriginalMatrices = function()
{
  if (this._arObjects)
  {
    var obj;
    for (var i = this._arObjects.length - 1; i >= 0; i--)
    {
      obj = this._arObjects[i];
      if (obj)
      {
        if (this._origMatrixArray)
        {
          obj.setMatrix(this._origMatrixArray.pop());
        }
      }
    }
  }
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
 * Class providing the ability to create a custom animation using a DvtAnimator.
 * @param {DvtContext} context The platform specific context object.
 * @param {obj} obj The object to animate.
 * @param {number} duration The length of animation, in seconds.
 * @param {number} delay The time to delay start of animation, in seconds.
 * @extends {DvtBaseAnimation}
 * @class DvtSunburstAnimation
 * @constructor
 */
var DvtCustomAnimation = function(context, obj, duration, delay)
{
  this.Init(context, obj, duration, delay);
};

DvtObj.createSubclass(DvtCustomAnimation, DvtBaseAnimation, 'DvtCustomAnimation');


/**
 * Returns the animator, which can be used to add animated properties.
 * @return {DvtAnimator} The animator for this animation.
 */
DvtCustomAnimation.prototype.getAnimator = function()
{
  return this._animator;
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class representing an animation to move an object into view as
  * if on a conveyor belt.  The object will in from the background on
  * its side and then rotate to face forward.
  * @extends {DvtBaseAnimation}
  * @class DvtAnimConveyorIn
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  * @param objs  a single DvtContainer or Array of DvtContainers to animate
  * @param direction compass direction to move display objects in from;
  *        can be one of: DIR_N, DIR_E, DIR_S, DIR_W
  * @param {number}  duration  length of animation, in seconds
  * @param {number}  delay  time to delay start of animation, in seconds
  */
var DvtAnimConveyorIn = function(context, objs, direction, duration, delay)
{
  this.Init(context, objs, direction, duration, delay);
};

DvtObj.createSubclass(DvtAnimConveyorIn, DvtBaseAnimation, 'DvtAnimConveyorIn');


/**
  * @protected
  * @override
  */
DvtAnimConveyorIn.prototype.Init = function(context, objs, direction, duration, delay)
{
  DvtAnimConveyorIn.superclass.Init.call(this, context, objs, duration, delay);

  this._direction = direction;

  this._SCALE = .2;
  this._SKEW_ANGLE = Math.PI / 12;

  this._bSaveAndRestoreOriginalMatrices = true;
};


/**
  * @protected
  * @override
  */
DvtAnimConveyorIn.prototype.CreateAnimator = function(context)
{
  DvtAnimConveyorIn.superclass.CreateAnimator.call(this, context);

  this.setEasing(DvtBaseAnimation.EASING_CUBIC_IN);
  this._animator.setDuration(this.getDuration() / 2);
  this._animator.setOnEnd(this.PlayEndAnim, this);

  this._endAnim = new DvtAnimator(context, this.getDuration() / 2, 0, DvtBaseAnimation.GetEasingFunction(DvtBaseAnimation.EASING_CUBIC_OUT));
  this._endAnim.setOnEnd(this.OnAnimEnd, this);
};


/**
  * @protected
  * @override
  */
DvtAnimConveyorIn.prototype.InitializePlay = function()
{
  DvtAnimConveyorIn.superclass.InitializePlay.call(this);

  this.ShowObjects();
};


/**
  * @protected
  * @override
  */
DvtAnimConveyorIn.prototype.InitStartState = function(obj)
{
  DvtAnimConveyorIn.superclass.InitStartState.call(this, obj);

  obj.setVisible(false);

  //rotate first
  var scale = this._SCALE;
  var diffScale = 1 - scale;

  var bounds = obj.getDimensions();
  var halfWidth = bounds.w * diffScale;
  var halfHeight = bounds.h * diffScale;

  var mat = this.GetConcatenatedRotationMatrix(obj, bounds);

  //slide into background after
  var mat2 = new DvtMatrix();
  if (this._direction === DvtBaseAnimation.DIR_W ||
      this._direction === DvtBaseAnimation.DIR_E)
  {
    if (this._direction === DvtBaseAnimation.DIR_W)
    {
      mat2.translate(bounds.w, 0);
    }
    else
    {
      mat2.translate(-bounds.w, 0);
    }
  }
  else
  {
    if (this._direction === DvtBaseAnimation.DIR_N)
    {
      mat2.translate(0, bounds.h);
    }
    else
    {
      mat2.translate(0, -bounds.h);
    }
  }
  mat2.concat(mat);
  obj.setMatrix(mat2);
  obj.setAlpha(0);
};


/**
  * @protected
  * @override
  */
DvtAnimConveyorIn.prototype.InitEndState = function(obj)
{
  DvtAnimConveyorIn.superclass.InitEndState.call(this, obj);

  var bounds = obj.getDimensions();

  //slide into foreground first
  var concatRotMat = this.GetConcatenatedRotationMatrix(obj, bounds);
  this._animator.addProp(DvtAnimator.TYPE_MATRIX, obj, obj.getMatrix, obj.setMatrix, concatRotMat);
  this._animator.addProp(DvtAnimator.TYPE_NUMBER, obj, obj.getAlpha, obj.setAlpha, 1);

  //rotate after
  var currMat = obj.getMatrix();
  this._endAnim.addProp(DvtAnimator.TYPE_MATRIX, obj, obj.getMatrix, obj.setMatrix, currMat);
};


/**
  * @protected
  * Play the end animation, which rotates the object to face forward again.
  */
DvtAnimConveyorIn.prototype.PlayEndAnim = function()
{
  // Perform the animation immediately since this is not part of a slow component render operation.
  this._endAnim.play(true);
};


/**
  * @protected
  * Get the concatenation of the rotation matrix with the current matrix.
  *
  * @param  obj  display object being animated
  * @param {DvtRectangle}  bounds  bounding box for the object
  * @type {DvtMatrix}
  */
DvtAnimConveyorIn.prototype.GetConcatenatedRotationMatrix = function(obj, bounds)
{
  var scale = this._SCALE;
  var diffScale = 1 - scale;

  var halfWidth = bounds.w * diffScale;
  var halfHeight = bounds.h * diffScale;

  var skewAngle = this._SKEW_ANGLE;
  if (this._direction === DvtBaseAnimation.DIR_W ||
      this._direction === DvtBaseAnimation.DIR_S)
  {
    skewAngle = -skewAngle;
  }
  var tanAngle = Math.tan(skewAngle);

  var currMat = obj.getMatrix();
  var mat = new DvtMatrix();
  if (this._direction === DvtBaseAnimation.DIR_W ||
      this._direction === DvtBaseAnimation.DIR_E)
  {
    mat.skew(0, skewAngle);
    mat.scale(scale, 1);
    if (this._direction === DvtBaseAnimation.DIR_W)
    {
      mat.translate(0, 0);
    }
    else
    {
      mat.translate(halfWidth, -bounds.w * tanAngle);
    }
  }
  else
  {
    mat.skew(skewAngle, 0);
    mat.scale(1, scale);
    if (this._direction === DvtBaseAnimation.DIR_N)
    {
      mat.translate(0, 0);
    }
    else
    {
      mat.translate(-bounds.h * tanAngle, halfHeight);
    }
  }
  mat.concat(currMat);
  return mat;
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class representing an animation to move an object out of view as
  * if on a conveyor belt.  The object will rotate onto its side and
  * slide into the background.
  * @extends {DvtBaseAnimation}
  * @class DvtAnimConveyorOut
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  * @param objs  a single DvtContainer or Array of DvtContainers to animate
  * @param direction compass direction to move display objects out;
  *        can be one of: DIR_N, DIR_E, DIR_S, DIR_W
  * @param {number}  duration  length of animation, in seconds
  * @param {number}  delay  time to delay start of animation, in seconds
  */
var DvtAnimConveyorOut = function(context, objs, direction, duration, delay)
{
  this.Init(context, objs, direction, duration, delay);
};

DvtObj.createSubclass(DvtAnimConveyorOut, DvtBaseAnimation, 'DvtAnimConveyorOut');


/**
  * @protected
  * @override
  */
DvtAnimConveyorOut.prototype.Init = function(context, objs, direction, duration, delay)
{
  DvtAnimConveyorOut.superclass.Init.call(this, context, objs, duration, delay);

  this._direction = direction;

  this._bSaveAndRestoreOriginalMatrices = true;
  this._bHideObjectsOnEnd = true;
};


/**
  * @protected
  * @override
  */
DvtAnimConveyorOut.prototype.CreateAnimator = function(context)
{
  DvtAnimConveyorOut.superclass.CreateAnimator.call(this, context);

  this.setEasing(DvtBaseAnimation.EASING_CUBIC_IN);
  this._animator.setDuration(this.getDuration() / 2);
  this._animator.setOnEnd(this.PlayEndAnim, this);

  this._endAnim = new DvtAnimator(context, this.getDuration() / 2, 0, DvtBaseAnimation.GetEasingFunction(DvtBaseAnimation.EASING_CUBIC_OUT));
  this._endAnim.setOnEnd(this.OnAnimEnd, this);
};


/**
  * @protected
  * @override
  */
DvtAnimConveyorOut.prototype.InitEndState = function(obj)
{
  DvtAnimConveyorOut.superclass.InitEndState.call(this, obj);

  //rotate first
  var scale = .2;
  var diffScale = 1 - scale;

  var bounds = obj.getDimensions();
  var halfWidth = bounds.w * diffScale;
  var halfHeight = bounds.h * diffScale;

  var skewAngle = Math.PI / 12;
  if (this._direction === DvtBaseAnimation.DIR_W ||
      this._direction === DvtBaseAnimation.DIR_S)
  {
    skewAngle = -skewAngle;
  }
  var tanAngle = Math.tan(skewAngle);

  var currMat = obj.getMatrix();
  var mat = new DvtMatrix();
  if (this._direction === DvtBaseAnimation.DIR_W ||
      this._direction === DvtBaseAnimation.DIR_E)
  {
    mat.skew(0, skewAngle);
    mat.scale(scale, 1);
    if (this._direction === DvtBaseAnimation.DIR_W)
    {
      mat.translate(0, 0);
    }
    else
    {
      mat.translate(halfWidth, -bounds.w * tanAngle);
    }
  }
  else
  {
    mat.skew(skewAngle, 0);
    mat.scale(1, scale);
    if (this._direction === DvtBaseAnimation.DIR_N)
    {
      mat.translate(0, 0);
    }
    else
    {
      mat.translate(-bounds.h * tanAngle, halfHeight);
    }
  }
  mat.concat(currMat);
  this._animator.addProp(DvtAnimator.TYPE_MATRIX, obj, obj.getMatrix, obj.setMatrix, mat);

  //slide into background after
  var mat2 = new DvtMatrix();
  if (this._direction === DvtBaseAnimation.DIR_W ||
      this._direction === DvtBaseAnimation.DIR_E)
  {
    if (this._direction === DvtBaseAnimation.DIR_W)
    {
      mat2.translate(bounds.w, 0);
    }
    else
    {
      mat2.translate(-bounds.w, 0);
    }
  }
  else
  {
    if (this._direction === DvtBaseAnimation.DIR_N)
    {
      mat2.translate(0, bounds.h);
    }
    else
    {
      mat2.translate(0, -bounds.h);
    }
  }
  mat2.concat(mat);
  this._endAnim.addProp(DvtAnimator.TYPE_MATRIX, obj, obj.getMatrix, obj.setMatrix, mat2);
  this._endAnim.addProp(DvtAnimator.TYPE_NUMBER, obj, obj.getAlpha, obj.setAlpha, 0);
};


/**
  * @protected
  * Play the end animation, which slides the object into the background.
  */
DvtAnimConveyorOut.prototype.PlayEndAnim = function()
{
  // Perform the animation immediately since this is not part of a slow component render operation.
  this._endAnim.play(true);
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class representing an animation to flip an object into view,
  * as if flipping a playing card.
  * @extends {DvtBaseAnimation}
  * @class DvtAnimFlipIn
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  * @param objs  a single DvtContainer or Array of DvtContainers to animate
  * @param axis axis of rotation; can be one of: AXIS_X, AXIS_Y
  * @param rotationDir direction of rotation about the axis; can be one of:
  *        ROT_DIR_CLOCKWISE, ROT_DIR_COUNTERCLOCKWISE;
  *        direction is determined by looking down the axis from the positive side
  * @param {number}  duration  length of animation, in seconds
  * @param {number}  delay  time to delay start of animation, in seconds
  */
var DvtAnimFlipIn = function(context, objs, axis, rotationDir, duration, delay)
{
  this.Init(context, objs, axis, rotationDir, duration, delay);
};

DvtObj.createSubclass(DvtAnimFlipIn, DvtBaseAnimation, 'DvtAnimFlipIn');


/**
  * @protected
  * @override
  */
DvtAnimFlipIn.prototype.Init = function(context, objs, axis, rotationDir, duration, delay)
{
  DvtAnimFlipIn.superclass.Init.call(this, context, objs, duration, delay);

  this._axis = axis;
  this._rotationDir = rotationDir;

  this._bSaveAndRestoreOriginalMatrices = true;
  this._cubeEffect = false;
};


/**
  * @protected
  * @override
  */
DvtAnimFlipIn.prototype.InitStartState = function(obj)
{
  DvtAnimFlipIn.superclass.InitStartState.call(this, obj);

  obj.setVisible(false);

  var bounds = obj.getDimensions();
  var halfWidth = bounds.w / 2;
  var halfHeight = bounds.h / 2;

  var skewAngle = Math.PI / 6;
  if (this._rotationDir === DvtBaseAnimation.ROT_DIR_COUNTERCLOCKWISE)
  {
    skewAngle = -skewAngle;
  }
  var tanAngle = Math.tan(skewAngle);

  var currMat = obj.getMatrix();
  var mat = new DvtMatrix();
  if (this._axis === DvtBaseAnimation.AXIS_Y)
  {
    mat.skew(0, skewAngle);
    mat.scale(0, 1);
    if (this._cubeEffect)
    {
      if (this._rotationDir === DvtBaseAnimation.ROT_DIR_COUNTERCLOCKWISE)
      {
        mat.translate(bounds.w, 0);
      }
      else
      {
        mat.translate(0, -bounds.w * tanAngle);
      }
    }
    else
    {
      mat.translate(halfWidth, -halfWidth * tanAngle);
    }
  }
  else
  {
    mat.skew(skewAngle, 0);
    mat.scale(1, 0);
    if (this._cubeEffect)
    {
      if (this._rotationDir === DvtBaseAnimation.ROT_DIR_COUNTERCLOCKWISE)
      {
        mat.translate(-bounds.h * tanAngle, 0);
      }
      else
      {
        mat.translate(0, bounds.h);
      }
    }
    else
    {
      mat.translate(-halfHeight * tanAngle, halfHeight);
    }
  }
  mat.concat(currMat);
  obj.setMatrix(mat);

  if (this._cubeEffect)
  {
    obj.setAlpha(0);
  }
};


/**
  * @protected
  * @override
  */
DvtAnimFlipIn.prototype.InitEndState = function(obj)
{
  DvtAnimFlipIn.superclass.InitEndState.call(this, obj);

  var currMat = obj.getMatrix();
  this._animator.addProp(DvtAnimator.TYPE_MATRIX, obj, obj.getMatrix, obj.setMatrix, currMat);

  if (this._cubeEffect)
  {
    this._animator.addProp(DvtAnimator.TYPE_NUMBER, obj, obj.getAlpha, obj.setAlpha, 1);
  }
};


/**
  * @protected
  * @override
  */
DvtAnimFlipIn.prototype.InitializePlay = function()
{
  DvtAnimFlipIn.superclass.InitializePlay.call(this);

  this.ShowObjects();
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class representing an animation to flip an object out of view,
  * as if flipping a playing card.
  * @extends {DvtBaseAnimation}
  * @class DvtAnimFlipOut
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  * @param objs  a single DvtContainer or Array of DvtContainers to animate
  * @param axis axis of rotation; can be one of: AXIS_X, AXIS_Y
  * @param rotationDir direction of rotation about the axis; can be one of:
  *        ROT_DIR_CLOCKWISE, ROT_DIR_COUNTERCLOCKWISE;
  *        direction is determined by looking down the axis from the positive side
  * @param {number}  duration  length of animation, in seconds
  * @param {number}  delay  time to delay start of animation, in seconds
  */
var DvtAnimFlipOut = function(context, objs, axis, rotationDir, duration, delay)
{
  this.Init(context, objs, axis, rotationDir, duration, delay);
};

DvtObj.createSubclass(DvtAnimFlipOut, DvtBaseAnimation, 'DvtAnimFlipOut');


/**
  * @protected
  * @override
  */
DvtAnimFlipOut.prototype.Init = function(context, objs, axis, rotationDir, duration, delay)
{
  DvtAnimFlipOut.superclass.Init.call(this, context, objs, duration, delay);

  this._axis = axis;
  this._rotationDir = rotationDir;

  this._bSaveAndRestoreOriginalMatrices = true;
  this._bHideObjectsOnEnd = true;
  this._cubeEffect = false;
};


/**
  * @protected
  * @override
  */
DvtAnimFlipOut.prototype.InitEndState = function(obj)
{
  DvtAnimFlipOut.superclass.InitEndState.call(this, obj);

  var bounds = obj.getDimensions();
  var halfWidth = bounds.w / 2;
  var halfHeight = bounds.h / 2;

  var skewAngle = Math.PI / 6;
  if (this._rotationDir === DvtBaseAnimation.ROT_DIR_CLOCKWISE)
  {
    skewAngle = -skewAngle;
  }
  var tanAngle = Math.tan(skewAngle);

  var currMat = obj.getMatrix();
  var mat = new DvtMatrix();
  if (this._axis === DvtBaseAnimation.AXIS_Y)
  {
    mat.skew(0, skewAngle);
    mat.scale(0, 1);
    if (this._cubeEffect)
    {
      if (this._rotationDir === DvtBaseAnimation.ROT_DIR_CLOCKWISE)
      {
        mat.translate(bounds.w, 0);
      }
      else
      {
        mat.translate(0, -bounds.w * tanAngle);
      }
    }
    else
    {
      mat.translate(halfWidth, -halfWidth * tanAngle);
    }
  }
  else
  {
    mat.skew(skewAngle, 0);
    mat.scale(1, 0);
    if (this._cubeEffect)
    {
      if (this._rotationDir === DvtBaseAnimation.ROT_DIR_CLOCKWISE)
      {
        mat.translate(-bounds.h * tanAngle, 0);
      }
      else
      {
        mat.translate(0, bounds.h);
      }
    }
    else
    {
      mat.translate(-halfHeight * tanAngle, halfHeight);
    }
  }
  mat.concat(currMat);
  this._animator.addProp(DvtAnimator.TYPE_MATRIX, obj, obj.getMatrix, obj.setMatrix, mat);

  if (this._cubeEffect)
  {
    this._animator.addProp(DvtAnimator.TYPE_NUMBER, obj, obj.getAlpha, obj.setAlpha, 0);
  }
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class representing an animation to rotate an object into view,
  * as if rotating a cube.
  * @extends {DvtAnimFlipIn}
  * @class DvtAnimCubeIn
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  * @param objs  a single DvtContainer or Array of DvtContainers to animate
  * @param axis axis of rotation; can be one of: AXIS_X, AXIS_Y
  * @param rotationDir direction of rotation about the axis; can be one of:
  *        ROT_DIR_CLOCKWISE, ROT_DIR_COUNTERCLOCKWISE;
  *        direction is determined by looking down the axis from the positive side
  * @param {number}  duration  length of animation, in seconds
  * @param {number}  delay  time to delay start of animation, in seconds
  */
var DvtAnimCubeIn = function(context, objs, axis, rotationDir, duration, delay)
{
  this.Init(context, objs, axis, rotationDir, duration, delay);
};

DvtObj.createSubclass(DvtAnimCubeIn, DvtAnimFlipIn, 'DvtAnimCubeIn');


/**
  * @protected
  * @override
  */
DvtAnimCubeIn.prototype.Init = function(context, objs, axis, rotationDir, duration, delay)
{
  DvtAnimCubeIn.superclass.Init.call(this, context, objs, axis, rotationDir, duration, delay);

  this._cubeEffect = true;
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class representing an animation to rotate an object out of view,
  * as if rotating a cube.
  * @extends {DvtAnimFlipOut}
  * @class DvtAnimCubeOut
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  * @param objs  a single DvtContainer or Array of DvtContainers to animate
  * @param axis axis of rotation; can be one of: AXIS_X, AXIS_Y
  * @param rotationDir direction of rotation about the axis; can be one of:
  *        ROT_DIR_CLOCKWISE, ROT_DIR_COUNTERCLOCKWISE;
  *        direction is determined by looking down the axis from the positive side
  * @param {number}  duration  length of animation, in seconds
  * @param {number}  delay  time to delay start of animation, in seconds
  */
var DvtAnimCubeOut = function(context, objs, axis, rotationDir, duration, delay)
{
  this.Init(context, objs, axis, rotationDir, duration, delay);
};

DvtObj.createSubclass(DvtAnimCubeOut, DvtAnimFlipOut, 'DvtAnimCubeOut');


/**
  * @protected
  * @override
  */
DvtAnimCubeOut.prototype.Init = function(context, objs, axis, rotationDir, duration, delay)
{
  DvtAnimCubeOut.superclass.Init.call(this, context, objs, axis, rotationDir, duration, delay);

  this._cubeEffect = true;
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class representing an animation to fade in an object.
  * @extends {DvtBaseAnimation}
  * @class DvtAnimFadeIn
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  * @param objs  a single DvtContainer or Array of DvtContainers to animate
  * @param {number}  duration  length of animation, in seconds
  * @param {number}  delay  time to delay start of animation, in seconds
  */
var DvtAnimFadeIn = function(context, objs, duration, delay)
{
  this.Init(context, objs, duration, delay);
};

DvtObj.createSubclass(DvtAnimFadeIn, DvtBaseAnimation, 'DvtAnimFadeIn');


/**
  * @protected
  * @override
  */
DvtAnimFadeIn.prototype.Init = function(context, objs, duration, delay)
{
  DvtAnimFadeIn.superclass.Init.call(this, context, objs, duration, delay);
};


/**
  * @protected
  * @override
  */
DvtAnimFadeIn.prototype.InitStartState = function(obj)
{
  obj.setAlpha(0);
};


/**
  * @protected
  * @override
  */
DvtAnimFadeIn.prototype.InitEndState = function(obj)
{
  this._animator.addProp(DvtAnimator.TYPE_NUMBER, obj, obj.getAlpha, obj.setAlpha, 1);
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class representing an animation to fade out an object.
  * @extends {DvtBaseAnimation}
  * @class DvtAnimFadeOut
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  * @param objs  a single DvtContainer or Array of DvtContainers to animate
  * @param {number}  duration  length of animation, in seconds
  * @param {number}  delay  time to delay start of animation, in seconds
  */
var DvtAnimFadeOut = function(context, objs, duration, delay)
{
  this.Init(context, objs, duration, delay);
};

DvtObj.createSubclass(DvtAnimFadeOut, DvtBaseAnimation, 'DvtAnimFadeOut');


/**
  * @protected
  * @override
  */
DvtAnimFadeOut.prototype.Init = function(context, objs, duration, delay)
{
  DvtAnimFadeOut.superclass.Init.call(this, context, objs, duration, delay);
};


/**
  * @protected
  * @override
  */
DvtAnimFadeOut.prototype.InitEndState = function(obj)
{
  this._animator.addProp(DvtAnimator.TYPE_NUMBER, obj, obj.getAlpha, obj.setAlpha, 0);
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class representing an animation to transform an object by a given matrix.
  * @extends {DvtBaseAnimation}
  * @class DvtAnimMatrixTransformBy
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  * @param objs  a single DvtContainer or Array of DvtContainers to animate
  * @param {DvtMatrix}  transformMat  the matrix to use for transforming
  * @param {number}  duration  length of animation, in seconds
  * @param {number}  delay  time to delay start of animation, in seconds
  */
var DvtAnimMatrixTransformBy = function(context, objs, transformMatrix, duration, delay)
{
  this.Init(context, objs, transformMatrix, duration, delay);
};

DvtObj.createSubclass(DvtAnimMatrixTransformBy, DvtBaseAnimation, 'DvtAnimMatrixTransformBy');


/**
  * @protected
  * @override
  */
DvtAnimMatrixTransformBy.prototype.Init = function(context, objs, transformMatrix, duration, delay)
{
  this._transformMatrix = transformMatrix;

  DvtAnimMatrixTransformBy.superclass.Init.call(this, context, objs, duration, delay);
};


/**
  * @protected
  * @override
  */
DvtAnimMatrixTransformBy.prototype.InitEndState = function(obj)
{
  var mat = obj.getMatrix();
  if (mat)
  {
    mat = mat.clone();
    mat.concat(this._transformMatrix);

    this._animator.addProp(DvtAnimator.TYPE_MATRIX, obj, obj.getMatrix, obj.setMatrix, mat);
  }
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class representing an animation to move an object by a given amount.
  * @extends {DvtBaseAnimation}
  * @class DvtAnimMoveBy
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  * @param objs  a single DvtContainer or Array of DvtContainers to animate
  * @param offsets  a single DvtPoint or Array of DvtPoints to move by
  * @param {number}  duration  length of animation, in seconds
  * @param {number}  delay  time to delay start of animation, in seconds
  */
var DvtAnimMoveBy = function(context, objs, offsets, duration, delay)
{
  this.Init(context, objs, offsets, duration, delay);
};

DvtObj.createSubclass(DvtAnimMoveBy, DvtBaseAnimation, 'DvtAnimMoveBy');


/**
  * @protected
  * @override
  */
DvtAnimMoveBy.prototype.Init = function(context, objs, offsets, duration, delay)
{
  if (offsets instanceof Array)
  {
    this._arOffsets = offsets;
  }
  else if (offsets instanceof DvtPoint)
  {
    this._arOffsets = [offsets];
  }
  else
  {
    this._arOffsets = [new DvtPoint(0, 0)];
  }

  this._currIndex = 0;

  DvtAnimMoveBy.superclass.Init.call(this, context, objs, duration, delay);
};


/**
  * @protected
  * @override
  */
DvtAnimMoveBy.prototype.InitEndState = function(obj)
{
  var offset;
  if (this._currIndex < this._arOffsets.length)
  {
    offset = this._arOffsets[this._currIndex];
  }
  else
  {
    offset = this._arOffsets[this._arOffsets.length - 1];
  }

  this._animator.addProp(DvtAnimator.TYPE_NUMBER, obj, obj.getTranslateX, obj.setTranslateX, obj.getTranslateX() + offset.x);
  this._animator.addProp(DvtAnimator.TYPE_NUMBER, obj, obj.getTranslateY, obj.setTranslateY, obj.getTranslateY() + offset.y);

  this._currIndex++;
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class representing an animation to move an object to a given point.
  * @extends {DvtBaseAnimation}
  * @class DvtAnimMoveTo
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  * @param objs  a single DvtContainer or Array of DvtContainers to animate
  * @param points  a single DvtPoint or Array of DvtPoints to move to
  * @param {number}  duration  length of animation, in seconds
  * @param {number}  delay  time to delay start of animation, in seconds
  */
var DvtAnimMoveTo = function(context, objs, points, duration, delay)
{
  this.Init(context, objs, points, duration, delay);
};

DvtObj.createSubclass(DvtAnimMoveTo, DvtBaseAnimation, 'DvtAnimMoveTo');


/**
  * @protected
  * @override
  */
DvtAnimMoveTo.prototype.Init = function(context, objs, points, duration, delay)
{
  if (points instanceof Array)
  {
    this._arPoints = points;
  }
  else if (points instanceof DvtPoint)
  {
    this._arPoints = [points];
  }
  else
  {
    this._arPoints = [new DvtPoint(0, 0)];
  }

  this._currIndex = 0;

  DvtAnimMoveTo.superclass.Init.call(this, context, objs, duration, delay);
};


/**
  * @protected
  * @override
  */
DvtAnimMoveTo.prototype.InitEndState = function(obj)
{
  var point;
  if (this._currIndex < this._arPoints.length)
  {
    point = this._arPoints[this._currIndex];
  }
  else
  {
    point = this._arPoints[this._arPoints.length - 1];
  }

  this._animator.addProp(DvtAnimator.TYPE_NUMBER, obj, obj.getTranslateX, obj.setTranslateX, point.x);
  this._animator.addProp(DvtAnimator.TYPE_NUMBER, obj, obj.getTranslateY, obj.setTranslateY, point.y);

  this._currIndex++;
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class representing an animation to rotate an object by a given angle.
  * @extends {DvtBaseAnimation}
  * @class DvtAnimRotateBy
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  * @param objs  a single DvtContainer or Array of DvtContainers to animate
  * @param angles  a single number or Array of numbers to rotate by, in radians
  * @param {number}  duration  length of animation, in seconds
  * @param {number}  delay  time to delay start of animation, in seconds
  */
var DvtAnimRotateBy = function(context, objs, angles, duration, delay)
{
  this.Init(context, objs, angles, duration, delay);
};

DvtObj.createSubclass(DvtAnimRotateBy, DvtBaseAnimation, 'DvtAnimRotateBy');


/**
  * @protected
  * @override
  */
DvtAnimRotateBy.prototype.Init = function(context, objs, angles, duration, delay)
{
  if (angles instanceof Array)
  {
    this._arAngles = angles;
  }
  else if (typeof angles == 'number')
  {
    this._arAngles = [angles];
  }
  else
  {
    this._arAngles = [0];
  }

  this._currIndex = 0;

  DvtAnimRotateBy.superclass.Init.call(this, context, objs, duration, delay);
};


/**
  * @protected
  * @override
  */
DvtAnimRotateBy.prototype.InitEndState = function(obj)
{
  var angle;
  if (this._currIndex < this._arAngles.length)
  {
    angle = this._arAngles[this._currIndex];
  }
  else
  {
    angle = this._arAngles[this._arAngles.length - 1];
  }

  this._animator.addProp(DvtAnimator.TYPE_NUMBER, obj, obj.getRotation, obj.setRotation, obj.getRotation() + angle);

  this._currIndex++;
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class representing an animation to rotate an object to a given angle.
  * @extends {DvtBaseAnimation}
  * @class DvtAnimRotateTo
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  * @param objs  a single DvtContainer or Array of DvtContainers to animate
  * @param angles  a single number or Array of numbers to rotate to, in radians
  * @param {number}  duration  length of animation, in seconds
  * @param {number}  delay  time to delay start of animation, in seconds
  */
var DvtAnimRotateTo = function(context, objs, angles, duration, delay)
{
  this.Init(context, objs, angles, duration, delay);
};

DvtObj.createSubclass(DvtAnimRotateTo, DvtBaseAnimation, 'DvtAnimRotateTo');


/**
  * @protected
  * @override
  */
DvtAnimRotateTo.prototype.Init = function(context, objs, angles, duration, delay)
{
  if (angles instanceof Array)
  {
    this._arAngles = angles;
  }
  else if (typeof angles == 'number')
  {
    this._arAngles = [angles];
  }
  else
  {
    this._arAngles = [0];
  }

  this._currIndex = 0;

  DvtAnimRotateTo.superclass.Init.call(this, context, objs, duration, delay);
};


/**
  * @protected
  * @override
  */
DvtAnimRotateTo.prototype.InitEndState = function(obj)
{
  var angle;
  if (this._currIndex < this._arAngles.length)
  {
    angle = this._arAngles[this._currIndex];
  }
  else
  {
    angle = this._arAngles[this._arAngles.length - 1];
  }

  this._animator.addProp(DvtAnimator.TYPE_NUMBER, obj, obj.getRotation, obj.setRotation, angle);

  this._currIndex++;
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class representing an animation to scale an object by a given amount.
  * @extends {DvtBaseAnimation}
  * @class DvtAnimScaleBy
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  * @param objs  a single DvtContainer or Array of DvtContainers to animate
  * @param scales  a single DvtPoint or Array of DvtPoints to scale by
  * @param {number}  duration  length of animation, in seconds
  * @param {number}  delay  time to delay start of animation, in seconds
  */
var DvtAnimScaleBy = function(context, objs, scales, duration, delay)
{
  this.Init(context, objs, scales, duration, delay);
};

DvtObj.createSubclass(DvtAnimScaleBy, DvtBaseAnimation, 'DvtAnimScaleBy');


/**
  * @protected
  * @override
  */
DvtAnimScaleBy.prototype.Init = function(context, objs, scales, duration, delay)
{
  if (scales instanceof Array)
  {
    this._arScales = scales;
  }
  else if (scales instanceof DvtPoint)
  {
    this._arScales = [scales];
  }
  else
  {
    this._arScales = [new DvtPoint(1, 1)];
  }

  this._currIndex = 0;

  DvtAnimScaleBy.superclass.Init.call(this, context, objs, duration, delay);
};


/**
  * @protected
  * @override
  */
DvtAnimScaleBy.prototype.InitEndState = function(obj)
{
  var scale;
  if (this._currIndex < this._arScales.length)
  {
    scale = this._arScales[this._currIndex];
  }
  else
  {
    scale = this._arScales[this._arScales.length - 1];
  }

  this._animator.addProp(DvtAnimator.TYPE_NUMBER, obj, obj.getScaleX, obj.setScaleX, obj.getScaleX() * scale.x);
  this._animator.addProp(DvtAnimator.TYPE_NUMBER, obj, obj.getScaleY, obj.setScaleY, obj.getScaleY() * scale.y);

  this._currIndex++;
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class representing an animation to move and fade in an object.  The object
  * is moved in from the edges of a provided rectangle as it fades.
  * The object is also scaled as it fades, so it becomes larger as it is
  * more opaque.
  * @extends {DvtAnimFadeIn}
  * @class DvtAnimScaleFadeIn
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  * @param objs  a single DvtContainer or Array of DvtContainers to animate
  * @param {DvtRectangle}  boundsRect  a rectangle defining the bounds for moving the object
  * @param direction  compass direction to move display object in from;
  *        can be one of the values defined in DvtBaseAnimation:
  *        DIR_C, DIR_N, DIR_NE, DIR_E, DIR_SE, DIR_S, DIR_SW, DIR_W, DIR_NW (default is DIR_NW)
  * @param {number}  minScale  minimum scale to make the object as it starts
  * @param {number}  duration  length of animation, in seconds
  * @param {number}  delay  time to delay start of animation, in seconds
  */
var DvtAnimScaleFadeIn = function(context, objs, boundsRect, direction, minScale, duration, delay)
{
  this.Init(context, objs, boundsRect, direction, minScale, duration, delay);
};

DvtObj.createSubclass(DvtAnimScaleFadeIn, DvtAnimFadeIn, 'DvtAnimScaleFadeIn');


/**
  * @protected
  * @override
  */
DvtAnimScaleFadeIn.prototype.Init = function(context, objs, boundsRect, direction, minScale, duration, delay)
{
  this._boundsRect = boundsRect;
  this._direction = (direction ? direction : DvtBaseAnimation.DIR_NW);
  this._minScale = (minScale ? minScale : 0.5);

  DvtAnimScaleFadeIn.superclass.Init.call(this, context, objs, duration, delay);

  //need to do this AFTER calling superclass Init because member will
  //initially be defined there
  this._bSaveAndRestoreOriginalMatrices = true;
};


/**
  * @protected
  * @override
  */
DvtAnimScaleFadeIn.prototype.InitStartState = function(obj)
{
  DvtAnimScaleFadeIn.superclass.InitStartState.call(this, obj);

  var newScaleX = this._minScale * obj.getScaleX();
  var newScaleY = this._minScale * obj.getScaleY();

  //move the dispObj to the edge of the bounding rect and scale it down
  var objBounds = obj.getDimensions();
  var rect = new DvtRectangle(0, 0, newScaleX * objBounds.w, newScaleY * objBounds.h);
  var point = DvtBaseAnimation.GetAlignCompassPoint(rect, this._boundsRect, this._direction);
  obj.setTranslate(point.x, point.y);
  obj.setScale(newScaleX, newScaleY);
};


/**
  * @protected
  * @override
  */
DvtAnimScaleFadeIn.prototype.InitEndState = function(obj)
{
  DvtAnimScaleFadeIn.superclass.InitEndState.call(this, obj);

  var currMat = obj.getMatrix();
  this._animator.addProp(DvtAnimator.TYPE_MATRIX, obj, obj.getMatrix, obj.setMatrix, currMat);
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class representing an animation to move and fade out an object.  The object
  * is moved out toward the edges of a provided rectangle as it fades.
  * The object is also scaled as it fades, so it becomes smaller as it is
  * more transparent.
  * @extends {DvtAnimFadeOut}
  * @class DvtAnimScaleFadeOut
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  * @param objs  a single DvtContainer or Array of DvtContainers to animate
  * @param {DvtRectangle}  boundsRect  a rectangle defining the bounds for moving the object
  * @param direction  compass direction to move display object out to;
  *        can be one of the values defined in DvtBaseAnimation:
  *        DIR_C, DIR_N, DIR_NE, DIR_E, DIR_SE, DIR_S, DIR_SW, DIR_W, DIR_NW (default is DIR_NE)
  * @param {number}  minScale  minimum scale to make the object as it starts
  * @param {number}  duration  length of animation, in seconds
  * @param {number}  delay  time to delay start of animation, in seconds
  */
var DvtAnimScaleFadeOut = function(context, objs, boundsRect, direction, minScale, duration, delay)
{
  this.Init(context, objs, boundsRect, direction, minScale, duration, delay);
};

DvtObj.createSubclass(DvtAnimScaleFadeOut, DvtAnimFadeOut, 'DvtAnimScaleFadeOut');


/**
  * @protected
  * @override
  */
DvtAnimScaleFadeOut.prototype.Init = function(context, objs, boundsRect, direction, minScale, duration, delay)
{
  this._boundsRect = boundsRect;
  this._direction = (direction ? direction : DvtBaseAnimation.DIR_NE);
  this._minScale = (minScale ? minScale : 0.5);

  DvtAnimScaleFadeOut.superclass.Init.call(this, context, objs, duration, delay);

  //need to do this AFTER calling superclass Init because member will
  //initially be defined there
  this._bSaveAndRestoreOriginalMatrices = true;
};


/**
  * @protected
  * @override
  */
DvtAnimScaleFadeOut.prototype.InitEndState = function(obj)
{
  DvtAnimScaleFadeOut.superclass.InitEndState.call(this, obj);

  var newScaleX = this._minScale * obj.getScaleX();
  var newScaleY = this._minScale * obj.getScaleY();

  //move the dispObj to the edge of the bounding rect and scale it down
  var objBounds = obj.getDimensions();
  var rect = new DvtRectangle(0, 0, newScaleX * objBounds.w, newScaleY * objBounds.h);
  var point = DvtBaseAnimation.GetAlignCompassPoint(rect, this._boundsRect, this._direction);

  this._animator.addProp(DvtAnimator.TYPE_NUMBER, obj, obj.getScaleX, obj.setScaleX, newScaleX);
  this._animator.addProp(DvtAnimator.TYPE_NUMBER, obj, obj.getScaleY, obj.setScaleY, newScaleY);

  this._animator.addProp(DvtAnimator.TYPE_NUMBER, obj, obj.getTranslateX, obj.setTranslateX, point.x);
  this._animator.addProp(DvtAnimator.TYPE_NUMBER, obj, obj.getTranslateY, obj.setTranslateY, point.y);
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class representing an animation to scale an object to a given value.
  * @extends {DvtBaseAnimation}
  * @class DvtAnimScaleTo
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  * @param objs  a single DvtContainer or Array of DvtContainers to animate
  * @param scales  a single DvtPoint or Array of DvtPoints to scale to
  * @param {number}  duration  length of animation, in seconds
  * @param {number}  delay  time to delay start of animation, in seconds
  */
var DvtAnimScaleTo = function(context, objs, scales, duration, delay)
{
  this.Init(context, objs, scales, duration, delay);
};

DvtObj.createSubclass(DvtAnimScaleTo, DvtBaseAnimation, 'DvtAnimScaleTo');


/**
  * @protected
  * @override
  */
DvtAnimScaleTo.prototype.Init = function(context, objs, scales, duration, delay)
{
  if (scales instanceof Array)
  {
    this._arScales = scales;
  }
  else if (scales instanceof DvtPoint)
  {
    this._arScales = [scales];
  }
  else
  {
    this._arScales = [new DvtPoint(1, 1)];
  }

  this._currIndex = 0;

  DvtAnimScaleTo.superclass.Init.call(this, context, objs, duration, delay);
};


/**
  * @protected
  * @override
  */
DvtAnimScaleTo.prototype.InitEndState = function(obj)
{
  var scale;
  if (this._currIndex < this._arScales.length)
  {
    scale = this._arScales[this._currIndex];
  }
  else
  {
    scale = this._arScales[this._arScales.length - 1];
  }

  this._animator.addProp(DvtAnimator.TYPE_NUMBER, obj, obj.getScaleX, obj.setScaleX, scale.x);
  this._animator.addProp(DvtAnimator.TYPE_NUMBER, obj, obj.getScaleY, obj.setScaleY, scale.y);

  this._currIndex++;
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class representing an animation to pop an object in.
  * @extends {DvtBaseAnimation}
  * @class DvtAnimPopIn
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  * @param objs  a single DvtContainer or Array of DvtContainers to animate
  * @param {boolean}  bCenter  true to scale the object from its center,
  *        false to scale from its origin
  * @param {number}  duration  length of animation, in seconds
  * @param {number}  delay  time to delay start of animation, in seconds
  */
var DvtAnimPopIn = function(context, objs, bCenter, duration, delay)
{
  this.Init(context, objs, bCenter, duration, delay);
};

DvtObj.createSubclass(DvtAnimPopIn, DvtBaseAnimation, 'DvtAnimPopIn');


/**
  * @protected
  */
DvtAnimPopIn.BackOut = function(progress)
{
  return DvtEasing.backOut(progress, 2.5);
};


/**
  * @protected
  * @override
  */
DvtAnimPopIn.prototype.Init = function(context, objs, bCenter, duration, delay)
{
  this._bCenter = bCenter;
  if (this._bCenter) {
    //temporary containers used to scale an object from its center
    this._tempContainers = [];
    //current index in array of temp containers
    this._currIndex = 0;
  }
  DvtAnimPopIn.superclass.Init.call(this, context, objs, duration, delay);
};


/**
  * @override
  */
DvtAnimPopIn.prototype.setEasing = function(easing)
{
  //do nothing because we want to use our own easing
};


/**
  * @protected
  * @override
  */
DvtAnimPopIn.prototype.CreateAnimator = function(context)
{
  DvtAnimPopIn.superclass.CreateAnimator.call(this, context);
  this._animator.setEasing(DvtAnimPopIn.BackOut);
  if (this._bCenter) {
    //need to remove temporary containers at end of anim
    DvtPlayable.appendOnEnd(this._animator, this.RemoveTempContainers, this);
  }
};


/**
  * @protected
  * @override
  */
DvtAnimPopIn.prototype.InitStartState = function(obj)
{
  if (this._bCenter) {
    //For centering, the idea is to insert a temporary container between the obj and its
    //parent.  The temp container will be positioned such that its origin is at the center
    //of the obj.  Then, when the temp container is scaled about its origin, it will look
    //like the obj is scaled about its own center point.
    var tempContainer = this._tempContainers[this._currIndex];

    var dims = obj.getDimensions();
    //store the original translate on the temp container
    tempContainer._dvtAnimPopInOrigTx = obj.getTranslateX();
    tempContainer._dvtAnimPopInOrigTy = obj.getTranslateY();
    //calculate the center point of the obj
    var dx = dims.x + .5 * dims.w;
    var dy = dims.y + .5 * dims.h;
    //position the origin of the temp container at the center point of the obj
    //so that the obj appears to scale from its center
    tempContainer.setTranslate(tempContainer._dvtAnimPopInOrigTx + dx, tempContainer._dvtAnimPopInOrigTy + dy);
    //translate the obj so that its center point is at the origin of the temp container
    obj.setTranslate(-dx, -dy);
    //reparent the obj to the temp container, and insert the temp container into
    //the obj's original parent at the same index
    var childIndex = obj.getParent().getChildIndex(obj);
    tempContainer._dvtAnimPopInChildIndex = childIndex;
    obj.getParent().addChildAt(tempContainer, childIndex);
    tempContainer.addChild(obj);

    //scale the temp container instead of the obj
    tempContainer.setScale(.01, .01);

    this._currIndex++;
  }
  else {
    //scale the obj
    obj.setScale(.01, .01);
  }
  obj.setVisible(true);
};


/**
  * @protected
  * @override
  */
DvtAnimPopIn.prototype.InitEndState = function(obj)
{
  if (this._bCenter) {
    //create a temp container
    var tempContainer = new DvtContainer(this._context);
    this._tempContainers.push(tempContainer);
    //scale the temp container to full size
    this._animator.addProp(DvtAnimator.TYPE_NUMBER, tempContainer, tempContainer.getScaleX, tempContainer.setScaleX, 1);
    this._animator.addProp(DvtAnimator.TYPE_NUMBER, tempContainer, tempContainer.getScaleY, tempContainer.setScaleY, 1);
  }
  else {
    this._animator.addProp(DvtAnimator.TYPE_NUMBER, obj, obj.getScaleX, obj.setScaleX, 1);
    this._animator.addProp(DvtAnimator.TYPE_NUMBER, obj, obj.getScaleY, obj.setScaleY, 1);
  }
};


/**
  * @protected
  */
DvtAnimPopIn.prototype.RemoveTempContainers = function() {
  //remove temp containers used for scaling from center
  if (this._tempContainers) {
    for (var i = 0; i < this._tempContainers.length; i++) {
      var tempContainer = this._tempContainers[i];
      this._tempContainers[i] = null;
      if (tempContainer.getNumChildren() > 0) {
        //obj should be first child of temp container
        var obj = tempContainer.getChildAt(0);
        if (obj) {
          //translate the obj back to its original position and reparent it back to
          //its original container at the same z-index
          obj.setTranslate(tempContainer._dvtAnimPopInOrigTx, tempContainer._dvtAnimPopInOrigTy);
          tempContainer.getParent().addChildAt(obj, tempContainer._dvtAnimPopInChildIndex);
        }
      }
      //remove the temp container from the display list
      tempContainer.getParent().removeChild(tempContainer);
    }
    this._tempContainers = null;
  }
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class representing an animation to pop an object out.
  * @extends {DvtBaseAnimation}
  * @class DvtAnimPopOut
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  * @param objs  a single DvtContainer or Array of DvtContainers to animate
  * @param {boolean}  bCenter  true to scale the object from its center,
  *        false to scale from its origin
  * @param {number}  duration  length of animation, in seconds
  * @param {number}  delay  time to delay start of animation, in seconds
  */
var DvtAnimPopOut = function(context, objs, bCenter, duration, delay)
{
  this.Init(context, objs, bCenter, duration, delay);
};

DvtObj.createSubclass(DvtAnimPopOut, DvtBaseAnimation, 'DvtAnimPopOut');


/**
  * @protected
  */
DvtAnimPopOut.BackIn = function(progress)
{
  return DvtEasing.backIn(progress, 2.5);
};


/**
  * @protected
  * @override
  */
DvtAnimPopOut.prototype.Init = function(context, objs, bCenter, duration, delay)
{
  this._bCenter = bCenter;
  if (this._bCenter) {
    //temporary containers used to scale an object from its center
    this._tempContainers = [];
    //current index in array of temp containers
    this._currIndex = 0;
  }
  DvtAnimPopOut.superclass.Init.call(this, context, objs, duration, delay);

  //need to do this AFTER calling superclass Init because member will
  //initially be defined there
  //only need to restore original matrices if not centering (temp containers not used)
  this._bSaveAndRestoreOriginalMatrices = !this._bCenter;
  this._bHideObjectsOnEnd = true;
};


/**
  * @override
  */
DvtAnimPopOut.prototype.setEasing = function(easing)
{
  //do nothing because we want to use our own easing
};


/**
  * @protected
  * @override
  */
DvtAnimPopOut.prototype.CreateAnimator = function(context)
{
  DvtAnimPopOut.superclass.CreateAnimator.call(this, context);
  this._animator.setEasing(DvtAnimPopOut.BackIn);
  if (this._bCenter) {
    //need to remove temporary containers at end of anim
    DvtPlayable.appendOnEnd(this._animator, this.RemoveTempContainers, this);
  }
};


/**
  * @protected
  * @override
  */
DvtAnimPopOut.prototype.InitStartState = function(obj)
{
  if (this._bCenter) {
    //For centering, the idea is to insert a temporary container between the obj and its
    //parent.  The temp container will be positioned such that its origin is at the center
    //of the obj.  Then, when the temp container is scaled about its origin, it will look
    //like the obj is scaled about its own center point.
    var tempContainer = this._tempContainers[this._currIndex];

    var dims = obj.getDimensions();
    //store the original translate on the temp container
    tempContainer._dvtAnimPopInOrigTx = obj.getTranslateX();
    tempContainer._dvtAnimPopInOrigTy = obj.getTranslateY();
    //calculate the center point of the obj
    var dx = dims.x + .5 * dims.w;
    var dy = dims.y + .5 * dims.h;
    //position the origin of the temp container at the center point of the obj
    //so that the obj appears to scale from its center
    tempContainer.setTranslate(tempContainer._dvtAnimPopInOrigTx + dx, tempContainer._dvtAnimPopInOrigTy + dy);
    //translate the obj so that its center point is at the origin of the temp container
    obj.setTranslate(-dx, -dy);
    //reparent the obj to the temp container, and insert the temp container into
    //the obj's original parent at the same index
    var childIndex = obj.getParent().getChildIndex(obj);
    tempContainer._dvtAnimPopInChildIndex = childIndex;
    obj.getParent().addChildAt(tempContainer, childIndex);
    tempContainer.addChild(obj);

    this._currIndex++;
  }
};


/**
  * @protected
  * @override
  */
DvtAnimPopOut.prototype.InitEndState = function(obj)
{
  if (this._bCenter) {
    //create a temp container
    var tempContainer = new DvtContainer(this._context);
    this._tempContainers.push(tempContainer);
    //scale the temp container to small size
    this._animator.addProp(DvtAnimator.TYPE_NUMBER, tempContainer, tempContainer.getScaleX, tempContainer.setScaleX, .01);
    this._animator.addProp(DvtAnimator.TYPE_NUMBER, tempContainer, tempContainer.getScaleY, tempContainer.setScaleY, .01);
  }
  else {
    this._animator.addProp(DvtAnimator.TYPE_NUMBER, obj, obj.getScaleX, obj.setScaleX, .01);
    this._animator.addProp(DvtAnimator.TYPE_NUMBER, obj, obj.getScaleY, obj.setScaleY, .01);
  }
};


/**
  * @protected
  */
DvtAnimPopOut.prototype.RemoveTempContainers = function() {
  //remove temp containers used for scaling from center
  if (this._tempContainers) {
    for (var i = 0; i < this._tempContainers.length; i++) {
      var tempContainer = this._tempContainers[i];
      this._tempContainers[i] = null;
      if (tempContainer.getNumChildren() > 0) {
        //obj should be first child of temp container
        var obj = tempContainer.getChildAt(0);
        if (obj) {
          //translate the obj back to its original position and reparent it back to
          //its original container at the same z-index
          obj.setTranslate(tempContainer._dvtAnimPopInOrigTx, tempContainer._dvtAnimPopInOrigTy);
          tempContainer.getParent().addChildAt(obj, tempContainer._dvtAnimPopInChildIndex);
        }
      }
      //remove the temp container from the display list
      tempContainer.getParent().removeChild(tempContainer);
    }
    this._tempContainers = null;
  }
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class used to animate replacing one set of display objects with another
  * set by rotating and moving them as if on a conveyor belt.  The old
  * objects will move back into the display while the new objects will be
  * moved to the front.
  * @extends {DvtParallelPlayable}
  * @class DvtCombinedAnimConveyor
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  * @param outObjs  a single DvtContainer or Array of DvtContainers to fade out
  * @param inObjs  a single DvtContainer or Array of DvtContainers to fade in
  * @param outDir compass direction to move old display objects out; can be
  *        one of: DIR_N, DIR_E, DIR_S, DIR_W
  * @param inDir compass direction to move new display objects in from; can
  *        be one of: DIR_N, DIR_E, DIR_S, DIR_W
  * @param {number}  duration  length of individual out and in animations, in seconds
  * @param {number}  delay  time to delay start of animation, in seconds
  */
var DvtCombinedAnimConveyor = function(context, outObjs, inObjs, outDir, inDir, duration, delay)
{
  this.Init(context, outObjs, inObjs, outDir, inDir, duration, delay);
};

DvtObj.createSubclass(DvtCombinedAnimConveyor, DvtParallelPlayable, 'DvtCombinedAnimConveyor');


/**
  * @protected
  * @override
  */
DvtCombinedAnimConveyor.prototype.Init = function(context, outObjs, inObjs, outDir, inDir, duration, delay)
{
  if (!duration)
    duration = 0.5;
  if (!delay)
    delay = 0;

  var conveyorOut = new DvtAnimConveyorOut(context, outObjs, outDir, duration, delay);
  var conveyorIn = new DvtAnimConveyorIn(context, inObjs, inDir, duration, (duration / 3) + delay);

  DvtCombinedAnimConveyor.superclass.Init.call(this, context, [conveyorOut, conveyorIn]);
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class used to animate replacing one set of display objects with
  * another set by rotating out the old and rotating in the new,
  * as if on a cube.
  * @extends {DvtParallelPlayable}
  * @class DvtCombinedAnimCube
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  * @param outObjs  a single DvtContainer or Array of DvtContainers to fade out
  * @param inObjs  a single DvtContainer or Array of DvtContainers to fade in
  * @param axis axis of rotation; can be one of: AXIS_X, AXIS_Y
  * @param rotationDir direction of rotation about the axis; can be one of:
  *        ROT_DIR_CLOCKWISE, ROT_DIR_COUNTERCLOCKWISE;
  *        direction is determined by looking down the axis from the positive side
  * @param {number}  duration  length of individual out and in animations, in seconds
  * @param {number}  delay  time to delay start of animation, in seconds
  */
var DvtCombinedAnimCube = function(context, outObjs, inObjs, axis, rotationDir, duration, delay)
{
  this.Init(context, outObjs, inObjs, axis, rotationDir, duration, delay);
};

DvtObj.createSubclass(DvtCombinedAnimCube, DvtParallelPlayable, 'DvtCombinedAnimCube');


/**
  * @protected
  * @override
  */
DvtCombinedAnimCube.prototype.Init = function(context, outObjs, inObjs, axis, rotationDir, duration, delay)
{
  if (!duration)
    duration = 0.5;
  if (!delay)
    delay = 0;

  var cubeOut = new DvtAnimCubeOut(context, outObjs, axis, rotationDir, duration, delay);
  var cubeIn = new DvtAnimCubeIn(context, inObjs, axis, rotationDir, duration, delay);

  DvtCombinedAnimCube.superclass.Init.call(this, context, [cubeOut, cubeIn]);
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class used to animate replacing one set of display objects with another set by
  * fading out the old and fading in the new.
  * @extends {DvtParallelPlayable}
  * @class DvtCombinedAnimFade
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  * @param outObjs  a single DvtContainer or Array of DvtContainers to fade out
  * @param inObjs  a single DvtContainer or Array of DvtContainers to fade in
  * @param {number}  duration  length of individual out and in animations, in seconds
  * @param {number}  delay  time to delay start of animation, in seconds
  */
var DvtCombinedAnimFade = function(context, outObjs, inObjs, duration, delay)
{
  this.Init(context, outObjs, inObjs, duration, delay);
};

DvtObj.createSubclass(DvtCombinedAnimFade, DvtParallelPlayable, 'DvtCombinedAnimFade');


/**
  * @protected
  * @override
  */
DvtCombinedAnimFade.prototype.Init = function(context, outObjs, inObjs, duration, delay)
{
  if (!duration)
    duration = 0.5;
  if (!delay)
    delay = 0;

  var fadeOut = new DvtAnimFadeOut(context, outObjs, duration, delay);
  //delay the fade out by a little bit to make both animations easier to see
  var fadeIn = new DvtAnimFadeIn(context, inObjs, duration, 0.5 * fadeOut.getDuration() + delay);

  DvtCombinedAnimFade.superclass.Init.call(this, context, [fadeOut, fadeIn]);
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class used to animate replacing one set of display objects with
  * another set by flipping out the old and flipping in the new,
  * as if on a playing card.
  * @extends {DvtSequentialPlayable}
  * @class DvtCombinedAnimFlip
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  * @param outObjs  a single DvtContainer or Array of DvtContainers to fade out
  * @param inObjs  a single DvtContainer or Array of DvtContainers to fade in
  * @param axis axis of rotation; can be one of: AXIS_X, AXIS_Y
  * @param rotationDir direction of rotation about the axis; can be one of:
  *        ROT_DIR_CLOCKWISE, ROT_DIR_COUNTERCLOCKWISE;
  *        direction is determined by looking down the axis from the positive side
  * @param {number}  duration  length of individual out and in animations, in seconds
  * @param {number}  delay  time to delay start of animation, in seconds
  */
var DvtCombinedAnimFlip = function(context, outObjs, inObjs, axis, rotationDir, duration, delay)
{
  this.Init(context, outObjs, inObjs, axis, rotationDir, duration, delay);
};

DvtObj.createSubclass(DvtCombinedAnimFlip, DvtSequentialPlayable, 'DvtCombinedAnimFlip');


/**
  * @protected
  * @override
  */
DvtCombinedAnimFlip.prototype.Init = function(context, outObjs, inObjs, axis, rotationDir, duration, delay)
{
  if (!duration)
    duration = 0.5;
  if (!delay)
    delay = 0;

  var flipOut = new DvtAnimFlipOut(context, outObjs, axis, rotationDir, duration, delay);
  //adjust easing so that animation is slow at the beginning,
  //but fast at the end
  flipOut.setEasing(DvtBaseAnimation.EASING_CUBIC_IN);
  var flipIn = new DvtAnimFlipIn(context, inObjs, axis, rotationDir, duration, delay);
  //adjust easing so that animation is fast at the beginning,
  //but slow at the end
  flipIn.setEasing(DvtBaseAnimation.EASING_CUBIC_OUT);

  //because the flipOut and flipIn animations are played in sequence,
  //and because the initState of the flipIn won't be set until it starts
  //to play, we need to explicitly hide the flipIn objects here so that
  //they're not visible during the first flipOut part of the sequence
  flipIn.HideObjects();

  DvtCombinedAnimFlip.superclass.Init.call(this, context, [flipOut, flipIn]);
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class used to animate replacing one set of display objects with another set by
  * moving out the old and moving in the new.
  * @extends {DvtParallelPlayable}
  * @class DvtCombinedAnimMoveBy
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  * @param outObjs  a single DvtContainer or Array of DvtContainers to move out
  * @param inObjs  a single DvtContainer or Array of DvtContainers to move in
  * @param outOffsets  a single DvtPoint or Array of DvtPoints to move out by
  * @param inOffsets  a single DvtPoint or Array of DvtPoints to move in by
  * @param {number}  duration  length of individual out and in animations, in seconds
  * @param {number}  delay  time to delay start of animation, in seconds
  */
var DvtCombinedAnimMoveBy = function(context, outObjs, inObjs, outOffsets, inOffsets, duration, delay)
{
  this.Init(context, outObjs, inObjs, outOffsets, inOffsets, duration, delay);
};

DvtObj.createSubclass(DvtCombinedAnimMoveBy, DvtParallelPlayable, 'DvtCombinedAnimMoveBy');


/**
  * @protected
  * @override
  */
DvtCombinedAnimMoveBy.prototype.Init = function(context, outObjs, inObjs, outOffsets, inOffsets, duration, delay)
{
  if (!duration)
    duration = 0.5;
  if (!delay)
    delay = 0;

  var moveOut = new DvtAnimMoveBy(context, outObjs, outOffsets, duration, delay);
  var moveIn = new DvtAnimMoveBy(context, inObjs, inOffsets, duration, delay);

  DvtCombinedAnimMoveBy.superclass.Init.call(this, context, [moveOut, moveIn]);
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * Class used to animate replacing one set of display objects with another set by
  * moving and fading out the old and moving and fading in the new.  The objects
  * are moved out toward and in from the edges of a provided rectangle as they fade.
  * The objects are also scaled as they fade, so they become smaller as they are
  * more transparent.
  * @extends {DvtParallelPlayable}
  * @class DvtCombinedAnimScaleFade
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  * @param outObjs  a single DvtContainer or Array of DvtContainers to fade out
  * @param inObjs  a single DvtContainer or Array of DvtContainers to fade in
  * @param {DvtRectangle}  boundsRect  a rectangle defining the bounds for moving the objects
  * @param outDirection  compass direction to move old display objects out to;
  *        can be one of the values defined in DvtBaseAnimation:
  *        DIR_C, DIR_N, DIR_NE, DIR_E, DIR_SE, DIR_S, DIR_SW, DIR_W, DIR_NW (default is DIR_NE)
  * @param inDirection  compass direction to move new display objects in from;
  *        can be one of the values defined in DvtBaseAnimation:
  *        DIR_C, DIR_N, DIR_NE, DIR_E, DIR_SE, DIR_S, DIR_SW, DIR_W, DIR_NW (default is DIR_NW)
  * @param {number}  minScale  minimum scale to make the objects as they fade
  * @param {number}  duration  length of individual out and in animations, in seconds
  * @param {number}  delay  time to delay start of animation, in seconds
  */
var DvtCombinedAnimScaleFade = function(context, outObjs, inObjs, boundsRect, outDirection, inDirection, minScale, duration, delay)
{
  this.Init(context, outObjs, inObjs, boundsRect, outDirection, inDirection, minScale, duration, delay);
};

DvtObj.createSubclass(DvtCombinedAnimScaleFade, DvtParallelPlayable, 'DvtCombinedAnimScaleFade');


/**
  * @protected
  * @override
  */
DvtCombinedAnimScaleFade.prototype.Init = function(context, outObjs, inObjs, boundsRect, outDirection, inDirection, minScale, duration, delay)
{
  if (!outDirection)
    outDirection = DvtBaseAnimation.DIR_NE;
  if (!inDirection)
    inDirection = DvtBaseAnimation.DIR_NW;
  if (!minScale)
    minScale = 0.5;
  if (!duration)
    duration = 0.5;
  if (!delay)
    delay = 0;

  var fadeOut = new DvtAnimScaleFadeOut(context, outObjs, boundsRect, outDirection, minScale, duration, delay);
  var fadeIn = new DvtAnimScaleFadeIn(context, inObjs, boundsRect, inDirection, minScale, duration, 0.3 * fadeOut.getDuration() + delay);

  DvtCombinedAnimScaleFade.superclass.Init.call(this, context, [fadeOut, fadeIn]);
};
// Copyright (c) 2011, 2016, Oracle and/or its affiliates. All rights reserved.
/**
  * Class used to animate a set of display objects popping into the display
  * at staggered times.
  * @extends {DvtParallelPlayable}
  * @class DvtCombinedAnimPopIn
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  * @param objs  a single DvtContainer or Array of DvtContainers to pop in
  * @param {boolean}  bCenter  true to scale the object from its center,
  *        false to scale from its origin (true is not implemented yet)
  * @param {number}  popDuration  length of individual pop animations,
  *        in seconds
  * @param {number}  totalDuration  total length of time in which all
  *        individiual animations must run, in seconds
  * @param {number}  delay  time to delay start of animation, in seconds
  */
var DvtCombinedAnimPopIn = function(context, objs, bCenter, popDuration, totalDuration, delay)
{
  this.Init(context, objs, bCenter, popDuration, totalDuration, delay);
};

DvtObj.createSubclass(DvtCombinedAnimPopIn, DvtParallelPlayable, 'DvtCombinedAnimPopIn');


/**
  * @protected
  * @override
  */
DvtCombinedAnimPopIn.prototype.Init = function(context, objs, bCenter, popDuration, totalDuration, delay)
{
  var array = [];
  var dispObjArray;

  if (objs instanceof Array)
  {
    dispObjArray = objs;
  }
  else
  {
    dispObjArray = [objs];
  }

  delay = (delay === null || isNaN(delay)) ? 0 : delay;

  for (var i = 0; i < dispObjArray.length; i++)
  {
    var dispObj = dispObjArray[i];
    //if (dispObj instanceof DvtDisplayable)
    //{
    var individualDelay = delay + (Math.random() * (totalDuration - popDuration));//Randomize the delay @RandomNumberReview
    var popIn = new DvtAnimPopIn(context, dispObj, bCenter, popDuration, individualDelay);
    array.push(popIn);
    //}
  }

  DvtCombinedAnimPopIn.superclass.Init.call(this, context, array);
};
// Copyright (c) 2011, 2016, Oracle and/or its affiliates. All rights reserved.
/**
  * Class used to animate a set of display objects popping out of the display
  * at staggered times.
  * @extends {DvtParallelPlayable}
  * @class DvtCombinedAnimPopOut
  * @constructor
  *
  * @param {DvtContext}  context  platform specific context object
  * @param objs  a single DvtContainer or Array of DvtContainers to pop out
  * @param {boolean}  bCenter  true to scale the object from its center,
  *        false to scale from its origin (true is not implemented yet)
  * @param {number}  popDuration  length of individual pop animations,
  *        in seconds
  * @param {number}  totalDuration  total length of time in which all
  *        individiual animations must run, in seconds
  * @param {number}  delay  time to delay start of animation, in seconds
  */
var DvtCombinedAnimPopOut = function(context, objs, bCenter, popDuration, totalDuration, delay)
{
  this.Init(context, objs, bCenter, popDuration, totalDuration, delay);
};

DvtObj.createSubclass(DvtCombinedAnimPopOut, DvtParallelPlayable, 'DvtCombinedAnimPopOut');


/**
  * @protected
  * @override
  */
DvtCombinedAnimPopOut.prototype.Init = function(context, objs, bCenter, popDuration, totalDuration, delay)
{
  var array = [];
  var dispObjArray;


  if (objs instanceof Array)
  {
    dispObjArray = objs;
  }
  else
  {
    dispObjArray = [objs];
  }

  delay = (delay === null || isNaN(delay)) ? 0 : delay;

  for (var i = 0; i < dispObjArray.length; i++)
  {
    var dispObj = dispObjArray[i];
    //if (dispObj instanceof DvtDisplayable)
    //{
    var individualDelay = delay + (Math.random() * (totalDuration - popDuration));//Randomize the delay @RandomNumberReview
    var popIn = new DvtAnimPopOut(context, dispObj, bCenter, popDuration, individualDelay);
    array.push(popIn);
    //}
  }

  DvtCombinedAnimPopOut.superclass.Init.call(this, context, array);
};
// Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.
/*-------------------------------------------------------------------------*/
/*   DvtBaseDrawEffect                                                     */
/*-------------------------------------------------------------------------*/
/**
 * A base class for draw effects like sahodws, glows, etc.
 * {@link DvtBaseDrawEffect}.
 * @extends {DvtLockable}
 * @class DvtBaseDrawEffect  A base class for draw effects like sahodws, glows, etc.
 * @constructor  Do not create/use directly.
 */
var DvtBaseDrawEffect = function() {
  this._Init();
};

DvtObj.createSubclass(DvtBaseDrawEffect, DvtLockable, 'DvtBaseDrawEffect');


/**
 * @private
 */
DvtBaseDrawEffect.prototype._Init = function() {
  DvtBaseDrawEffect.superclass._Init.call(this);
};


/**
 *   Returns the id of this draw effect.
 *   @type {String}
 */
DvtBaseDrawEffect.prototype.getId = function() {
  return this._id;
};


/**
 *   Sets the id of this fill.
 *   @param {String} id  The id for the fill.
 */
DvtBaseDrawEffect.prototype.setId = function(id) {
  this._id = id;
};


/**
 *   Merge properties in the current object into the supplied object.
 *   Abstract method, subclasses must implement. Used internally by clone().
 *   @param {DvtObj}
 *   @private
 */
DvtBaseDrawEffect.prototype.mergeProps = function(obj) {
  obj.setId(this._id);
};
// Copyright (c) 2008, 2016, Oracle and/or its affiliates. All rights reserved.
/*-------------------------------------------------------------------------*/
/*   DvtColorUtils       A static class for css color manipulation         */
/*-------------------------------------------------------------------------*/
/*   The static utility functions operate on color specifications of the   */
/*   format #rrggbb, or rgb(r,g,b), or rgba(r,g,b,a).                      */
/*-------------------------------------------------------------------------*/
/**  Static utility functions that operate on color specification strings of the
  *  format #rrggbb, or rgb(r,g,b), or rgba(r,g,b,a).
  *  @base DvtColorUtils
  */
var DvtColorUtils = {};

DvtObj.createSubclass(DvtColorUtils, DvtObj, 'DvtColorUtils');

//  Channel definition constants

DvtColorUtils._RED = 0;  // Channels. Don't change
DvtColorUtils._GREEN = 1;  // defs unless the routines
DvtColorUtils._BLUE = 2;  // below are changed.
DvtColorUtils._ALPHA = 3;

//  private constants

DvtColorUtils._RGBA = 'rgba(';
DvtColorUtils._RGB = 'rgb(';
DvtColorUtils._POUND = '#';

DvtColorUtils._FACTOR = 0.15;  // default darkening percentage.


/** @private */
DvtColorUtils._names;          // associative array


/*-------------------------------------------------------------------------*/
/*  getColorFromName()                                                     */
/*-------------------------------------------------------------------------*/
/**
  * Returns a color definition string from the named color.
  * @param {String}  name  The color name.
  * @type {String}
  * @return  An #rrggbb color string.
  */
DvtColorUtils.getColorFromName = function(name)
{
  if (! DvtColorUtils._names) {
    var ar = [];
    ar['aliceblue'] = '#f0f8ff';
    ar['antiquewhite'] = '#faEbd7';
    ar['aqua'] = '#00ffff';
    ar['aquamarine'] = '#7fffd4';
    ar['azure'] = '#f0ffff';
    ar['beige'] = '#f5f5dc';
    ar['bisque'] = '#ffE4c4';
    ar['black'] = '#000000';
    ar['blanchedalmond'] = '#ffEbcd';
    ar['blue'] = '#0000ff';
    ar['blueviolet'] = '#8a2bE2';
    ar['brown'] = '#a52a2a';
    ar['burlywood'] = '#dEb887';
    ar['cadetblue'] = '#5f9Ea0';
    ar['chartreuse'] = '#7fff00';
    ar['chocolate'] = '#d2691E';
    ar['coral'] = '#ff7f50';
    ar['cornflowerblue'] = '#6495Ed';
    ar['cornsilk'] = '#fff8dc';
    ar['crimson'] = '#dc143c';
    ar['cyan'] = '#00ffff';
    ar['darkblue'] = '#00008b';
    ar['darkcyan'] = '#008b8b';
    ar['darkgoldenrod'] = '#b8860b';
    ar['darkgray'] = '#a9a9a9';
    ar['darkgreen'] = '#006400';
    ar['darkkhaki'] = '#bdb76b';
    ar['darkmagenta'] = '#8b008b';
    ar['darkolivegreen'] = '#556b2f';
    ar['darkorange'] = '#ff8c00';
    ar['darkorchid'] = '#9932cc';
    ar['darkred'] = '#8b0000';
    ar['darksalmon'] = '#E9967a';
    ar['darkseagreen'] = '#8fbc8f';
    ar['darkslateblue'] = '#483d8b';
    ar['darkslategray'] = '#2f4f4f';
    ar['darkturquoise'] = '#00cEd1';
    ar['darkviolet'] = '#9400d3';
    ar['deeppink'] = '#ff1493';
    ar['deepskyblue'] = '#00bfff';
    ar['dimgray'] = '#696969';
    ar['dodgerblue'] = '#1E90ff';
    ar['firebrick'] = '#b22222';
    ar['floralwhite'] = '#fffaf0';
    ar['forestgreen'] = '#228b22';
    ar['fuchsia'] = '#ff00ff';
    ar['gainsboro'] = '#dcdcdc';
    ar['ghostwhite'] = '#f8f8ff';
    ar['gold'] = '#ffd700';
    ar['goldenrod'] = '#daa520';
    ar['gray'] = '#808080';
    ar['green'] = '#008000';
    ar['greenyellow'] = '#adff2f';
    ar['honeydew'] = '#f0fff0';
    ar['hotpink'] = '#ff69b4';
    ar['indianred '] = '#cd5c5c';
    ar['indigo '] = '#4b0082';
    ar['ivory'] = '#fffff0';
    ar['khaki'] = '#f0E68c';
    ar['lavender'] = '#E6E6fa';
    ar['lavenderblush'] = '#fff0f5';
    ar['lawngreen'] = '#7cfc00';
    ar['lemonchiffon'] = '#fffacd';
    ar['lightblue'] = '#add8E6';
    ar['lightcoral'] = '#f08080';
    ar['lightcyan'] = '#E0ffff';
    ar['lightgoldenrodyellow'] = '#fafad2';
    ar['lightgray'] = '#d3d3d3';
    ar['lightgreen'] = '#90EE90';
    ar['lightpink'] = '#ffb6c1';
    ar['lightsalmon'] = '#ffa07a';
    ar['lightseagreen'] = '#20b2aa';
    ar['lightskyblue'] = '#87cEfa';
    ar['lightslategray'] = '#778899';
    ar['lightsteelblue'] = '#b0c4dE';
    ar['lightyellow'] = '#ffffE0';
    ar['lime'] = '#00ff00';
    ar['limegreen'] = '#32cd32';
    ar['linen'] = '#faf0E6';
    ar['magenta'] = '#ff00ff';
    ar['maroon'] = '#800000';
    ar['mediumaquamarine'] = '#66cdaa';
    ar['mediumblue'] = '#0000cd';
    ar['mediumorchid'] = '#ba55d3';
    ar['mediumpurple'] = '#9370db';
    ar['mediumseagreen'] = '#3cb371';
    ar['mediumslateblue'] = '#7b68EE';
    ar['mediumspringgreen'] = '#00fa9a';
    ar['mediumturquoise'] = '#48d1cc';
    ar['mediumvioletred'] = '#c71585';
    ar['midnightblue'] = '#191970';
    ar['mintcream'] = '#f5fffa';
    ar['mistyrose'] = '#ffE4E1';
    ar['moccasin'] = '#ffE4b5';
    ar['navajowhite'] = '#ffdEad';
    ar['navy'] = '#000080';
    ar['oldlace'] = '#fdf5E6';
    ar['olive'] = '#808000';
    ar['olivedrab'] = '#6b8E23';
    ar['orange'] = '#ffa500';
    ar['orangered'] = '#ff4500';
    ar['orchid'] = '#da70d6';
    ar['palegoldenrod'] = '#EEE8aa';
    ar['palegreen'] = '#98fb98';
    ar['paleturquoise'] = '#afEEEE';
    ar['palevioletred'] = '#db7093';
    ar['papayawhip'] = '#ffEfd5';
    ar['peachpuff'] = '#ffdab9';
    ar['peru'] = '#cd853f';
    ar['pink'] = '#ffc0cb';
    ar['plum'] = '#dda0dd';
    ar['powderblue'] = '#b0E0E6';
    ar['purple'] = '#800080';
    ar['rebeccapurple'] = '#663399';
    ar['red'] = '#ff0000';
    ar['rosybrown'] = '#bc8f8f';
    ar['royalblue'] = '#4169E1';
    ar['saddlebrown'] = '#8b4513';
    ar['salmon'] = '#fa8072';
    ar['sandybrown'] = '#f4a460';
    ar['seagreen'] = '#2E8b57';
    ar['seashell'] = '#fff5EE';
    ar['sienna'] = '#a0522d';
    ar['silver'] = '#c0c0c0';
    ar['skyblue'] = '#87cEEb';
    ar['slateblue'] = '#6a5acd';
    ar['slategray'] = '#708090';
    ar['snow'] = '#fffafa';
    ar['springgreen'] = '#00ff7f';
    ar['steelblue'] = '#4682b4';
    ar['tan'] = '#d2b48c';
    ar['teal'] = '#008080';
    ar['thistle'] = '#d8bfd8';
    ar['tomato'] = '#ff6347';
    ar['turquoise'] = '#40E0d0';
    ar['violet'] = '#EE82EE';
    ar['wheat'] = '#f5dEb3';
    ar['white'] = '#ffffff';
    ar['whitesmoke'] = '#f5f5f5';
    ar['yellow'] = '#ffff00';
    ar['yellowgreen'] = '#9acd32';

    ar['transparent'] = 'rgba(255,255,255,0)';

    DvtColorUtils._names = ar;
  }
  return DvtColorUtils._names[name];

};


/*-------------------------------------------------------------------------*/
/*  isColor()                                                              */
/*-------------------------------------------------------------------------*/
/**
 * Determine if the given string specifies a color value.
 * @param {String}  s  The string to be evaluated.
 * @param {Boolean}  bValid  Optional.  If omitted or false, the string prefix
 *                           is checked for validity only. If true, a deeper
 *                           check of the rgb component values is performed.
 * @type {Boolean}
 * @return true if the string specifies a color value, else false.
 */
DvtColorUtils.isColor = function(s, bValid)
{
  if (! bValid) {
    return ((s.charAt(0) === DvtColorUtils._POUND) ||
            (s.indexOf(DvtColorUtils._RGBA) === 0) ||
            (s.indexOf(DvtColorUtils._RGB) === 0));
  }

  // Deeper validation

  var bRet = false;

  s = DvtStringUtils.trim(s);
  s = s.toLowerCase();

  if (s.charAt(0) === DvtColorUtils._POUND) {
    if (s.length === 7) {
      var pat = new RegExp(/^#[0-9a-f]{6}$/i);
      bRet = pat.test(s);
    }
  }
  else {
    var bRGBA = (s.indexOf(DvtColorUtils._RGBA) === 0);
    var bRGB;

    if (! bRGBA) {
      bRGB = (s.indexOf(DvtColorUtils._RGB) === 0);
    }

    if (bRGBA || bRGB) {
      var x = s.indexOf(')');

      if (x >= 0) {
        var ar = s.substring((bRGBA ? 5 : 4), x).split(',');
        var len = ar.length;
        var bVals = true;

        for (var i = 0; i < len; i++) {
          var n = ar[i];
          if (((1 < 3) && (n < 0 || n > 255)) || ((i > 3) && (n < 0 || n > 1))) {
            bVals = false;
            break;
          }
        }

        if (bVals) {
          bRet = (bRGBA ? (len === 4) : (len === 3));
        }
      }
    }
  }

  return bRet;
};


/*-------------------------------------------------------------------------*/
/*   get/setAlpha()                                                        */
/*-------------------------------------------------------------------------*/
/**
  *  Returns the alpha value (or implied value) of the specified color string.
  *  @param {String} c The color specification.
  *  @type {number}
  *  @return {number}  The alpha-channel value (between 0 and 1).
  */
DvtColorUtils.getAlpha = function(c)
{
  return DvtColorUtils._getChannel(c, DvtColorUtils._ALPHA);
};


/**
  *  Changes the alpha channel in the supplied color string.
  *  @param {String} c The color specification.
  *  @param {number} a The alpha value (range 0 to 1).
  *  @type {String}
  *  @return  A new color specification.
  */
DvtColorUtils.setAlpha = function(c, a)
{
  return DvtColorUtils._setChannel(c, DvtColorUtils._ALPHA, a);
};


/*-------------------------------------------------------------------------*/
/*   get/setRed()                                                          */
/*-------------------------------------------------------------------------*/
/**
  *  Returns the red-channel value of the specified color string.
  *  @param {String} c The color specification.
  *  @type {number}
  *  @return   The red-channel value as a decimal number between 0 and 255.
  */
DvtColorUtils.getRed = function(c)
{
  return DvtColorUtils._getChannel(c, DvtColorUtils._RED);
};


/**
  *  Changes the red-channel value in the supplied color string.
  *  @param {String} c The color specification.
  *  @param {number} r The red channel value as a decimal number between 0 and 255.
  *  @type {String}
  *  @return  A new color string specification.
  */
DvtColorUtils.setRed = function(c, r)
{
  return DvtColorUtils._setChannel(c, DvtColorUtils._RED, r);
};


/*-------------------------------------------------------------------------*/
/*   get/setBlue()                                                         */
/*-------------------------------------------------------------------------*/
/**
  *  Returns the blue-channel value of the specified color string.
  *  @param {String} c The color specification.
  *  @type {number}
  *  @return  The blue-channel value as a decimal number between 0 and 255.
  */
DvtColorUtils.getBlue = function(c)
{
  return DvtColorUtils._getChannel(c, DvtColorUtils._BLUE);
};


/**
  *  Changes the blue-channel value in the supplied color string.
  *  @param {String} c The color specification.
  *  @param {number} b The blue channel value as a decimal number.
  *  @type {String}
  *  @return  A new color string specification.
  */
DvtColorUtils.setBlue = function(c, b)
{
  return DvtColorUtils._setChannel(c, DvtColorUtils._BLUE, b);
};


/*-------------------------------------------------------------------------*/
/*   get/setGreen()                                                        */
/*-------------------------------------------------------------------------*/
/**
  *  Returns the green-channel value of the specified color string.
  *  @param {String} c The color specification.
  *  @type {number}
  *  @return   The green value as a decimal number between 0 and 255.
  */
DvtColorUtils.getGreen = function(c)
{
  return DvtColorUtils._getChannel(c, DvtColorUtils._GREEN);
};


/**
  *  Changes the green-channel value in the supplied color string.
  *  @param {String} c The color specification.
  *  @param {number} g The green channel value as a decimal number between 0 and 255.
  *  @type {String}
  *  @return  A new color string specification.
  */
DvtColorUtils.setGreen = function(c, g)
{
  return DvtColorUtils._setChannel(c, DvtColorUtils._GREEN, g);
};


/*-------------------------------------------------------------------------*/
/*   getChannel()     Returns a channel from a #, rgb or rgba string.      */
/*                    (Note: if an alpha channel is requested and a # or   */
/*                    rgb string is supplied, the implied value of 1 is    */
/*                    returned.                                            */
/*-------------------------------------------------------------------------*/
/**
  *  Returns a specifed channel value from a css color specification (#, rgb(), rgba()).
  *  If an alpha channel is requested and a # or rgb string is supplied,
  *  an implied value of 1 is returned.
  *  @private
  *  @param  {String} c  The color string.
  *  @param  {number} chan  The channel (see {@DvtColorUtils#_RED} for example).
  *  @type {number}
  *  @return The channel value as a decimal number (between 0 and 255).
  */
DvtColorUtils._getChannel = function(c, chan)
{
  var clr = c;
  var chval = null;// the return value

  // If clr is a named color, then convert into usable format
  var namedColor = DvtColorUtils.getColorFromName(clr);
  if (namedColor)
    clr = namedColor;

  // Alpha support
  if (chan === DvtColorUtils._ALPHA) {
    if (clr.charAt(0) === '#')
      return (clr.length > 7) ? parseInt(clr.substring(1, 3), 16) / 255 : 1;//check for MT extended format of #aarrggbb
    else if (clr === 'none')
      return 0;
  }

  var x1 = clr.indexOf('(');
  if (x1 < 0) {
    ar = [];
    //: parse channels for different # formats
    if (clr.length > 7) {
      //  #aarrggbb format
      ar[0] = parseInt(clr.substr(3, 2), 16);
      ar[1] = parseInt(clr.substr(5, 2), 16);
      ar[2] = parseInt(clr.substr(7, 2), 16);
      ar[3] = parseInt(clr.substr(1, 2), 16) / 255;
    }
    else {
      //  #rrggbb format
      ar[0] = parseInt(clr.substr(1, 2), 16);
      ar[1] = parseInt(clr.substr(3, 2), 16);
      ar[2] = parseInt(clr.substr(5, 2), 16);
      ar[3] = 1;
    }
    chval = ar[chan];
  }
  else {

    //  rgb() or rgba() format
    var x2 = clr.indexOf(')');
    var ar = clr.substring(x1 + 1, x2).split(',');

    if (ar.length === 3 && chan === DvtColorUtils._ALPHA) {
      chval = 1;
    }
    else {
      chval = ar[chan];
      chval = parseFloat(chval);
    }
  }

  return chval;
};


/*-------------------------------------------------------------------------*/
/*   getDarker()                                                           */
/*-------------------------------------------------------------------------*/
/**
  * Returns the specified color made darker by the specified percentage.
  * <p>
  * Example:<br><br><code>
  * // create a color darkened by 25%).
  *  var darker = DvtColorUtils.getDarker("rgba(220,128,49)", 0.25) ;<br>
  *  </code>
  * @param {String} color   A color specification.
  * @param {number} factor  An optional percentage by which each color component is to be
  *                         darkened (1 returns unchanged) specified as a decimal
  *                         (e.g. 25% = 0.25).  If omitted, a default percentage of
  *                         15% (i.e 0.15) is applied.
  * @type {String}
  * @return A darkened color specification in RGBA format.
  */
DvtColorUtils.getDarker = function(color, factor)
{
  //TDO

  var r = DvtColorUtils._getChannel(color, DvtColorUtils._RED);
  var g = DvtColorUtils._getChannel(color, DvtColorUtils._GREEN);
  var b = DvtColorUtils._getChannel(color, DvtColorUtils._BLUE);
  var a = DvtColorUtils._getChannel(color, DvtColorUtils._ALPHA);

  if (! factor) {
    factor = DvtColorUtils._FACTOR;    // use default factor
  }

  r = Math.max(parseInt(r * factor), 0);
  g = Math.max(parseInt(g * factor), 0);
  b = Math.max(parseInt(b * factor), 0);

  return DvtColorUtils.makeRGBA(r, g, b, a);
};


/*-------------------------------------------------------------------------*/
/*   getGrey()                                                             */
/*-------------------------------------------------------------------------*/
/**
  * @this {DvtColorUtils}
  *   Returns a greyscale version of the supplied color (in the same format).
  *   @param {String} color  The color to be converted.
  *   @return a greyscale version of the supplied color
  *   @type {String}
  *   @return a greyscale version of the supplied color (in the same format).
  */
DvtColorUtils.getGrey = function(color)
{
  var ret;

  var r = DvtColorUtils._getChannel(color, DvtColorUtils._RED);
  var g = DvtColorUtils._getChannel(color, DvtColorUtils._BLUE);
  var b = DvtColorUtils._getChannel(color, DvtColorUtils._GREEN);

  var gray = Math.round((r * 0.3) + (g * 0.59) + (b * 0.11));

  return this.setRGB(color, gray, gray, gray);
};


/*-------------------------------------------------------------------------*/
/*   invert()                                                              */
/*-------------------------------------------------------------------------*/
/**
  *   Inverts the specified color.
  *   @param {String} c   The color to be inverted.
  *   @type  {String}
  *   @return The inverted color in the same color format as supplied.
  */
DvtColorUtils.invert = function(c) {

  var ret;

  var r = 255 - DvtColorUtils._getChannel(c, DvtColorUtils._RED);
  var g = 255 - DvtColorUtils._getChannel(c, DvtColorUtils._BLUE);
  var b = 255 - DvtColorUtils._getChannel(c, DvtColorUtils._GREEN);

  if (c.charAt(0) === '#') {
    ret = DvtColorUtils.makePound(r, g, b);
  }
  else if (c.substr(0, 4) === DvtColorUtils._RGB) {
    ret = DvtColorUtils.makeRGB(r, g, b);
  }
  else {
    ret = DvtColorUtils.makeRGBA(r, g, b, DvtColorUtils._getChannel(c, DvtColorUtils._ALPHA));
  }

  return ret;
};


/*-------------------------------------------------------------------------*/
/*   isRGBA()                                                              */
/*-------------------------------------------------------------------------*/
/**
  *   Returns true if the color string is of rgba(...) format.
  *   @param {String} c   the color to be tested.
  *   @return {boolean}  true if the color is of rgba(. . .) type, else false.
  */
DvtColorUtils.isRGBA = function(c)
{
  return (c.substr(0, 5) === DvtColorUtils._RGBA);
};


/*-------------------------------------------------------------------------*/
/*   makeRGB()                                                             */
/*-------------------------------------------------------------------------*/
/**
  *  Creates an rgb(...) format from the supplied red, green, blue channel values.
  *  @param {number} r  The red value as a decimal number in the range 0 - 255.
  *  @param {number} g  The green value as a decimal number in the range 0 - 255.
  *  @param {number} b  The blue value as a decimal number in the range 0 - 255.
  *  @type {String}
  *  @return A new rgb(. . .) format string.
  */
DvtColorUtils.makeRGB = function(r,g,b)
{
  b = ((b === null || isNaN(b)) ? 0 : b);
  g = ((g === null || isNaN(g)) ? 0 : g);
  r = ((r === null || isNaN(r)) ? 0 : r);

  return DvtColorUtils._RGB + r + ',' + g + ',' + b + ')';
};


/*-------------------------------------------------------------------------*/
/*   makeRGBA()                                                            */
/*-------------------------------------------------------------------------*/
/**
  *  Creates an rgba(...) format string using the supplied red, green, blue,
  *   and alpha channel values.
  *  @param {number} r  The red value as a decimal number in the range 0 - 255.
  *  @param {number} g  The green value as a decimal number in the range 0 - 255.
  *  @param {number} b  The blue value as a decimal number in the range 0 - 255.
  *  @param {number} a  The alpha value as a decimal number in the range 0 - 1.
  *                  If omitted, 1 is assumed.
  *  @type {String}
  *  @return A new rgba(. . .) format string.
  */
DvtColorUtils.makeRGBA = function(r,g,b,a)
{
  b = ((b === null || isNaN(b)) ? 0 : Math.round(b));
  g = ((g === null || isNaN(g)) ? 0 : Math.round(g));
  r = ((r === null || isNaN(r)) ? 0 : Math.round(r));
  a = ((a === null || isNaN(a)) ? 1 : a);

  return DvtColorUtils._RGBA + r + ',' + g + ',' + b + ',' + a + ')';
};


/*-------------------------------------------------------------------------*/
/*   makePound()                                                           */
/*-------------------------------------------------------------------------*/
/**
  *  Creates a #rrggbb format string using the supplied red, green and blue
  *  channel values.
  *  @param {number} r  The red value as a decimal number in the range 0 - 255.
  *  @param {number} g  The green value as a decimal number in the range 0 - 255.
  *  @param {number} b  The blue value as a decimal number in the range 0 - 255.
  *  @type {String}
  *  @return A new #rrggbb format string.
  */
DvtColorUtils.makePound = function(r,g,b)
{
  var rr = Math.round(r);
  var gg = Math.round(g);
  var bb = Math.round(b);
  var red = rr.toString(16);
  var green = gg.toString(16);
  var blue = bb.toString(16);

  return '#' + (red.length === 1 ? '0' : '') + red + (green.length === 1 ? '0' : '') + green +
      (blue.length === 1 ? '0' : '') + blue;
};


/*-------------------------------------------------------------------------*/
/*   getPound()  Returns a "#rrggbb" string from a color string            */
/*              specification such as #rr[gg[bb[aa]]], rgba(...), rgb(...) */
/*-------------------------------------------------------------------------*/
/**
  *   Returns a "#rrggbb"  color string from the supplied color string. Formats
  *   accepted are the extended middle-tier "#aarrggbb" string, "rgba(r,g,b,a)",
  *   or an "rgb(r,g,b)". If a "#rrggbb" is supplied, the same object will be
  *   returned.  (See also {@link DvtColorUtils#makePound}.)
  *   @param {String} s  A color string specification.
  *   @return {String}  a string of the format "#rrggbb".
  */
DvtColorUtils.getPound = function(s)
{
  var ret;

  if (s.charAt(0) === '#') {

    var len = s.length;

    if (len <= 7) {
      return s;
    }
    else {             // alpha specified (#aarrggbb) - middle-tier extended format
      ret = DvtColorUtils._POUND;
      ret += s.substring(3, 5) + s.substring(5, 7) + s.substring(7, 9);
    }
  }
  else {
    var r = DvtColorUtils.getRed(s);
    var g = DvtColorUtils.getGreen(s);
    var b = DvtColorUtils.getBlue(s);
    ret = DvtColorUtils.makePound(r, g, b);
  }

  return ret;

};


/*-------------------------------------------------------------------------*/
/*   getRGB()   Returns an rgb(rr,gg,bb) string from a color string        */
/*              specification such as #rr[gg[bb[aa]]], rgba(...), rgb(...) */
/*-------------------------------------------------------------------------*/
/**
  *   Returns an "rgb(r,g,b)"  color string from a supplied "#rrggbb" or
  *   extended middle-tier "#aarrggbb" string, or an rgb(r,g,b,a).
  *   If an "rgb(r,g,b)" is supplied, the same object will be returned.  (See also {@link DvtColorUtils#makePound}.)
  *   @param {String} s  A color string specification.
  *   @type {String.}
  */
DvtColorUtils.getRGB = function(s)
{
  var ret;

  // If clr is a named color, then convert into usable format
  var namedColor = DvtColorUtils.getColorFromName(s);
  if (namedColor)
    s = namedColor;

  if (s.charAt(0) === '#') {
    ret = DvtColorUtils._RGB;

    var len = s.length;

    if (len > 7) {             // alpha specified (#aarrggbb) - middle-tier extended format
      ret += parseInt(s.substring(3, 5), 16) + ',' + parseInt(s.substring(5, 7), 16) + ',' +
              parseInt(s.substring(7, 9), 16);
    }
    else if (len === 7) {      // alpha not specified (#rrggbb)
      ret += parseInt(s.substring(1, 3), 16) + ',' + parseInt(s.substring(3, 5), 16) + ',' +
              parseInt(s.substr(5), 16);
    }
    else if (len === 4) {      // #rgb
      var r = s.substring(1, 2);
      r += r;
      var g = s.substring(2, 3);
      g += g;
      var b = s.substring(3);
      b += b;

      ret += parseInt(r, 16) + ',' + parseInt(g, 16) + ',' + parseInt(b, 16);
    }
    else if (len === 5) {      // #rrgg
      ret += parseInt(s.substring(1, 3), 16) + ',' + parseInt(s.substring(3, 5), 16) + ',0,1';
    }
    else if (len === 3) {      // #rr
      ret += parseInt(s.substring(1, 3), 16) + ',0,0,1';
    }

    ret += ')';
  }
  else if (s.substr(0, 5) === DvtColorUtils._RGBA) {
    var x = s.lastIndexOf(',');
    ret = DvtColorUtils._RGB;
    ret += s.substring(5, x);
    ret += ')';
  }
  else {
    ret = s;
  }
  return ret;

};


/*-------------------------------------------------------------------------*/
/*   getRGBA()  Returns an rgba(rr,gg,bb,aa) string from a color string    */
/*              specification such as #rr[gg[bb[aa]]], rgb(...), rgba(...) */
/*-------------------------------------------------------------------------*/
/**
  *   Returns an "rgba(r,g,b,a)"  color string from a supplied "#rrggbb" or
  *   extended middle-tier "#aarrggbb" string.  Will also accept an rgb(r,g,b)
  *   string (in which case the implied alpha is 1).  If an "rgba(r,g,b,a)" is
  *   supplied, the same object will be returned.  (See also {@link DvtColorUtils#makePound}.)
  *   @param {String} s  A color string specification.
  *   @type {String.}
  */
DvtColorUtils.getRGBA = function(s)
{
  var ret;

  // If clr is a named color, then convert into usable format
  var namedColor = DvtColorUtils.getColorFromName(s);
  if (namedColor)
    s = namedColor;

  if (s.charAt(0) === '#') {
    ret = DvtColorUtils._RGBA;

    var len = s.length;

    if (len > 7) {             // alpha specified (#aarrggbb)
      ret += parseInt(s.substring(3, 5), 16) + ',' + parseInt(s.substring(5, 7), 16) + ',' +
              parseInt(s.substring(7, 9), 16) + ',' + (parseInt(s.substring(1, 3), 16) / 255);
    }
    else if (len === 7) {      // alpha not specified (#rrggbb)  - alpha of 1 is assumed
      ret += parseInt(s.substring(1, 3), 16) + ',' + parseInt(s.substring(3, 5), 16) + ',' +
              parseInt(s.substr(5), 16) + ',1';
    }
    else if (len === 5) {      // #rrgg
      ret += parseInt(s.substring(1, 3), 16) + ',' + parseInt(s.substring(3, 5), 16) + ',0,1';
    }
    else if (len === 4) {      // #rgb
      var r = s.substring(1, 2);
      r += r;
      var g = s.substring(2, 3);
      g += g;
      var b = s.substring(3);
      b += b;

      ret += parseInt(r, 16) + ',' + parseInt(g, 16) + ',' + parseInt(b, 16) + ',1';
    }
    else if (len === 3) {      // #rr
      ret += parseInt(s.substring(1, 3), 16) + ',0,0,1';
    }

    ret += ')';
  }
  else if (s.substr(0, 4) === DvtColorUtils._RGB) {
    ret = DvtColorUtils._RGBA;
    ret += s.substring(4, s.length - 1) + ',1)';
  }
  else {
    ret = s;
  }
  return ret;

};


/*-------------------------------------------------------------------------*/
/*  _setChannel()     Replaces a channel in an rgb or rgba string.  (Note: */
/*                    if an alpha channel is added and an rgb string was   */
/*                    supplied, the string is changed to an rgba string.)  */
/*-------------------------------------------------------------------------*/
/**
  *  Returns a new color String with the specifed channel value set.
  *  If an alpha channel is requested and a # or rgb string is supplied,
  *  an rgba(...) string is returned.
  *  @private
  *  @param {String} s     A color specification to be changed.
  *  @param {number} chan  The channel to be changed.
  *  @param {number} chval The new channel value (as a decimal number).
  *  @type {String}
  */
DvtColorUtils._setChannel = function(s, chan, chval)
{
  if ((chan === undefined) || (chval === undefined) || (chan < DvtColorUtils._RED) || (chan > DvtColorUtils._ALPHA)) {
    return s;
  }

  // If named color, then convert into usable format
  var namedColor = DvtColorUtils.getColorFromName(s);
  if (namedColor)
    s = namedColor;

  var ar;
  var bPound = (s.charAt(0) === '#');
  var bRGBA;
  var ret;
  if (bPound) {
    ar = [];
    ar.push(parseInt(s.substr(1, 2), 16));
    ar.push(parseInt(s.substr(3, 2), 16));
    ar.push(parseInt(s.substr(5, 2), 16));
    if (chan === DvtColorUtils._ALPHA) {
      ar.push(chval);
      bPound = false;
      bRGBA = true;
    }
  }
  else {
    var bRGBA = (s.substr(0, 5) === DvtColorUtils._RGBA);
    var x1 = s.indexOf('(');
    var x2 = s.indexOf(')');
    var ar = s.substring(x1 + 1, x2).split(',');

    if ((! bRGBA) && chan === DvtColorUtils._ALPHA) {
      ar.push(chval);
      bRGBA = true;
    }
  }

  ar[chan] = chval;

  if (bPound) {
    ret = DvtColorUtils.makePound(ar[0], ar[1], ar[2]);
  }
  else {
    ret = (bRGBA ? DvtColorUtils.makeRGBA(ar[0], ar[1], ar[2], ar[3]) :
        DvtColorUtils.makeRGB(ar[0], ar[1], ar[2]));
  }
  return ret;

};


/*-------------------------------------------------------------------------*/
/*   setRGB()                                                              */
/*-------------------------------------------------------------------------*/
/**
  *  Returns a string of the same format as the input string, with the red, green,
  *  and blue channels replaced.
  *  @param {String}  s  The input string.
  *  @param {number}  r  The red value as a decimal number.
  *  @param {number}  g  The green value as a decimal number.
  *  @param {number}  b  The blue value as a decimal number.
  *  @type {String}
  *  @return A new color string of the same format as the input string, with
  *  the new color values.
  */
DvtColorUtils.setRGB = function(s, r, g, b)
{
  b = ((b === null || isNaN(b)) ? 0 : b);
  g = ((g === null || isNaN(g)) ? 0 : g);
  r = ((r === null || isNaN(r)) ? 0 : r);

  if (s.charAt(0) === '#')
  {
    return DvtColorUtils.makePound(r, g, b);
  }

  var bRGBA = (s.substr(0, 5) === DvtColorUtils._RGBA);

  var ret = (bRGBA ? DvtColorUtils._RGBA : DvtColorUtils._RGB) + r + ',' + g + ',' + b;

  if (bRGBA) {
    var x1 = s.lastIndexOf(5, ',');
    var x2 = s.indexOf(')');

    ret += ',' + s.substring(x1 + 1, x2);
  }
  ret += ')';
  return ret;
};


/**
  * Returns a brighter color of the supplied color based on a percentage factor.
  * @param {String} color   A color specification.
  * @param {number} factor  An optional percentage by which the color is to be brightened
  *                         lightened (1 returns unchanged) specified as a decimal
  *                         (e.g. 25% = 0.25).  If omitted, a default percentage of
  *                         15% (i.e 0.15) is applied.
  * @type {String}
  * @return  A new color string brightened by the factor <code>uint</code> containing the new color value.
  */
DvtColorUtils.getBrighter = function(color, factor)
{
  var r = DvtColorUtils._getChannel(color, DvtColorUtils._RED);
  var g = DvtColorUtils._getChannel(color, DvtColorUtils._GREEN);
  var b = DvtColorUtils._getChannel(color, DvtColorUtils._BLUE);
  var a = DvtColorUtils._getChannel(color, DvtColorUtils._ALPHA);

  if (! factor) {
    factor = DvtColorUtils._FACTOR;    // use default factor
  }

  // From 2D group:
  // 1. black.brighter() should return grey
  // 2. applying brighter to blue will always return blue, brighter
  // 3. non pure color (non zero rgb) will eventually return white

  var i = parseInt(1.0 / (1.0 - factor));
  if (r === 0 && g === 0 && b === 0) {
    //if factor=.5, then this only creates a color of rgb(2,2,2),
    //which is still black, so instead, just use the factor times white
    //return DvtColorUtils.makeRGBA(i, i, i, a);
    var newI = parseInt(255 * factor);
    return DvtColorUtils.makeRGBA(newI, newI, newI, a);
  }

  if (r > 0 && r < i) {
    r = i;
  }
  if (g > 0 && g < i) {
    g = i;
  }
  if (b > 0 && b < i) {
    b = i;
  }

  r = Math.min(parseInt(r / factor), 255);
  g = Math.min(parseInt(g / factor), 255);
  b = Math.min(parseInt(b / factor), 255);

  return DvtColorUtils.makeRGBA(r, g, b, a);
};


/**
 * Returns the hsl values for a color with the given rgb.
 * @param {number} r The r value, on a scale from 0 to 255
 * @param {number} g The g value, on a scale from 0 to 255
 * @param {number} b The b value, on a scale from 0 to 255
 * @return {object} The object containing the h, s, and l fields.  The h field is on a scale from 0 to 360, and the s
 *                  and l fields are on a scale from 0 to 1.
 */
DvtColorUtils.rgb2hsl = function(r, g, b) {
  // Scale rgb to be from 0 to 1
  r /= 255;
  g /= 255;
  b /= 255;

  var max = Math.max(r, g, b);
  var min = Math.min(r, g, b);
  var sum = max + min;

  var h, s;
  var l = sum / 2;

  if (max == min) {
    h = 0;
    s = 0;
  }
  else {
    var diff = max - min;
    s = l > 0.5 ? diff / (2 - sum) : diff / sum;

    if (max == r)
      h = (g - b) / diff + (g < b ? 6 : 0);
    else if (max == g)
      h = (b - r) / diff + 2;
    else if (max == b)
      h = (r - g) / diff + 4;

    h /= 6;
  }

  return {h: h * 360, s: s, l: l};
};


/**
 * Returns the rgb values for a color with the given hsl.
 * @param {number} h The h value, on a scale from 0 to 360
 * @param {number} s The s value, on a scale from 0 to 1
 * @param {number} l The l value, on a scale from 0 to 1
 * @return {object} The object containing the r, g, and b fields on a scale from 0 to 255.
 */
DvtColorUtils.hsl2rgb = function(h, s, l) {
  // Scale h to be from 0 to 1
  h /= 360;

  var r, g, b;
  if (s == 0)
    r = g = b = l;
  else {
    var q = l < 0.5 ? l * (1 + s) : l + s - (l * s);
    var p = 2 * l - q;
    r = DvtColorUtils._hue2rgb(p, q, h + 1 / 3);
    g = DvtColorUtils._hue2rgb(p, q, h);
    b = DvtColorUtils._hue2rgb(p, q, h - 1 / 3);
  }

  return {r: r * 255, g: g * 255, b: b * 255};
};


/**
 * @private
 */
DvtColorUtils._hue2rgb = function(p, q, t) {
  if (t < 0)
    t += 1;
  else if (t > 1)
    t -= 1;

  if (t < 1 / 6)
    return p + (q - p) * 6 * t;
  else if (t < 1 / 2)
    return q;
  else if (t < 2 / 3)
    return p + (q - p) * (2 / 3 - t) * 6;
  else
    return p;
};


/**
  * Converts an HSV color to RGB.
  *
  * @param (number) hue hue of the HSV color
  * @param (number) sat saturation of the HSV color
  * @param (number) val value of the HSV color
  *
  * @type {object}
  * @return an object defining r,g,b for the color
  */
DvtColorUtils.hsv2rgb = function(hue, sat, val)
{
  var red;
  var grn;
  var blu;
  var i;
  var f;
  var p;
  var q;
  var t;

  hue %= 360;
  if (val == 0)
  {
    return (
        {
          r: 0, g: 0, v: 0
        });
  }
  sat /= 100;
  val /= 100;
  hue /= 60;
  i = Math.floor(hue);
  f = hue - i;
  p = val * (1 - sat);
  q = val * (1 - (sat * f));
  t = val * (1 - (sat * (1 - f)));
  if (i == 0)
  {
    red = val;
    grn = t;
    blu = p;
  }
  else if (i == 1)
  {
    red = q;
    grn = val;
    blu = p;
  }
  else if (i == 2)
  {
    red = p;
    grn = val;
    blu = t;
  }
  else if (i == 3)
  {
    red = p;
    grn = q;
    blu = val;
  }
  else if (i == 4)
  {
    red = t;
    grn = p;
    blu = val;
  }
  else if (i == 5)
  {
    red = val;
    grn = p;
    blu = q;
  }
  red = Math.floor(red * 255);
  grn = Math.floor(grn * 255);
  blu = Math.floor(blu * 255);
  return ({r: red, g: grn, b: blu});
};


/**
  * Converts an RGB color to HSV.
  *
  * @param (number) red red of the RGB color
  * @param (number) grn green of the RGB color
  * @param (number) blu blue of the RGB color
  *
  * @type {object}
  * @return an object defining h,s,v for the color
  */
DvtColorUtils.rgb2hsv = function(red, grn, blu)
{
  var x;
  var val;
  var f;
  var i;
  var hue;
  var sat;

  red /= 255;
  grn /= 255;
  blu /= 255;
  x = Math.min(red, grn, blu);
  val = Math.max(red, grn, blu);
  if (x == val)
  {
    return ({h: undefined, s: 0, v: val * 100});
  }
  f = (red == x) ? grn - blu : ((grn == x) ? blu - red : red - grn);
  i = (red == x) ? 3 : ((grn == x) ? 5 : 1);
  hue = Math.floor((i - f / (val - x)) * 60) % 360;
  sat = Math.floor(((val - x) / val) * 100);
  val = Math.floor(val * 100);
  return ({h: hue, s: sat, v: val});
};


/**
  * Returns a pastel color using the supplied color based on a ratio.
  *
  *
  * @param (String) color  A color specification.
  * @param (number) factor An optional percentage by which to apply the pastel effect (0 returns unchanged)
  *                        specified as a decimal (e.g., 25% = 0.25).  If omitted, the default percentage of
  *                        15% (i.e., 0.15) is applied.
  *
  * @return A <code>uint</code> containing the new color value.
  */
DvtColorUtils.getPastel = function(color, factor)
{
  // TDO
  var a = DvtColorUtils._getChannel(color, DvtColorUtils._ALPHA);
  var r = DvtColorUtils._getChannel(color, DvtColorUtils._RED);
  var g = DvtColorUtils._getChannel(color, DvtColorUtils._GREEN);
  var b = DvtColorUtils._getChannel(color, DvtColorUtils._BLUE);

  var gR = Math.min(r + parseInt((255 - r) * factor), 255);
  var gG = Math.min(g + parseInt((255 - g) * factor), 255);
  var gB = Math.min(b + parseInt((255 - b) * factor), 255);

  return DvtColorUtils.makeRGBA(gR, gG, gB, a);

};


/**
 * Returns a color whose lightness has been adjusted by the specified amount.
 * @param {string} color The original color.
 * @param {number} dh The change in hue.
 * @param {number} ds The change in saturation.
 * @param {number} dl The change in lightness.
 * @return {string} The adjusted color.
 */
DvtColorUtils.adjustHSL = function(color, dh, ds, dl) 
{
  // Cache the adjusted values for performance.
  if (!DvtColorUtils._hslCache)
    DvtColorUtils._hslCache = new DvtCache(100);

  // Create the key and look for the cache entry.
  var key = color + ':' + dh + ':' + ds + ':' + dl;
  var ret = DvtColorUtils._hslCache.get(key);
  if (ret != null)
    return ret;

  // Break down in rgba
  var r = DvtColorUtils._getChannel(color, DvtColorUtils._RED);
  var g = DvtColorUtils._getChannel(color, DvtColorUtils._GREEN);
  var b = DvtColorUtils._getChannel(color, DvtColorUtils._BLUE);
  var a = DvtColorUtils._getChannel(color, DvtColorUtils._ALPHA);

  // Get the color as HSL
  var hslColor = DvtColorUtils.rgb2hsl(r, g, b);

  // Add the changes, bounded to the min and max for each value
  var h = Math.min(Math.max(0, hslColor.h + dh), 360);
  var s = Math.min(Math.max(0, hslColor.s + ds), 1);
  var l = Math.min(Math.max(0, hslColor.l + dl), 1);

  // Convert back to rgba and return
  var rgbColor = DvtColorUtils.hsl2rgb(h, s, l);
  if (a == 1)
    ret = DvtColorUtils.makePound(rgbColor.r, rgbColor.g, rgbColor.b);
  else
    ret = DvtColorUtils.makeRGBA(rgbColor.r, rgbColor.g, rgbColor.b, a);

  // Store in the cache and return
  DvtColorUtils._hslCache.put(key, ret);
  return ret;
};


/**
  * Interpolate a color between the original and destination values for the
  * given percent.
  * @param  origVal  original color value, a string
  * @param  destVal  destination color value, a string
  * @param {number}  percent  percent value to interpolate
  */
DvtColorUtils.interpolateColor = function(origVal, destVal, percent)
{
  var oldR = DvtColorUtils.getRed(origVal);
  var oldG = DvtColorUtils.getGreen(origVal);
  var oldB = DvtColorUtils.getBlue(origVal);
  var oldA = DvtColorUtils.getAlpha(origVal);

  var destR = DvtColorUtils.getRed(destVal);
  var destG = DvtColorUtils.getGreen(destVal);
  var destB = DvtColorUtils.getBlue(destVal);
  var destA = DvtColorUtils.getAlpha(destVal);

  var newR = Math.round(DvtMath.interpolateNumber(oldR, destR, percent));
  var newG = Math.round(DvtMath.interpolateNumber(oldG, destG, percent));
  var newB = Math.round(DvtMath.interpolateNumber(oldB, destB, percent));
  var newA = DvtMath.interpolateNumber(oldA, destA, percent);

  return DvtColorUtils.makeRGBA(newR, newG, newB, newA);
};

DvtColorUtils.inferColor = function(baseColor1, baseColor2, newColor1) {
  if (baseColor1 == baseColor2) {
    return newColor1;
  }

  if (newColor1 == baseColor1) {
    return baseColor2;
  }

  var red;
  var divisor = DvtColorUtils.getRed(baseColor1);
  var dividend = DvtColorUtils.getRed(baseColor2);
  if (divisor == dividend) {
    red = DvtColorUtils.getRed(newColor1);
  }
  else {
    if (divisor == 0) {
      divisor = 1;
    }
    red = dividend / divisor * DvtColorUtils.getRed(newColor1);
  }
  var green;
  divisor = DvtColorUtils.getGreen(baseColor1);
  dividend = DvtColorUtils.getGreen(baseColor2);
  if (divisor == dividend) {
    green = DvtColorUtils.getGreen(newColor1);
  }
  else {
    if (divisor == 0) {
      divisor = 1;
    }
    green = dividend / divisor * DvtColorUtils.getGreen(newColor1);
  }
  var blue;
  divisor = DvtColorUtils.getBlue(baseColor1);
  dividend = DvtColorUtils.getBlue(baseColor2);
  if (divisor == dividend) {
    blue = DvtColorUtils.getBlue(newColor1);
  }
  else {
    if (divisor == 0) {
      divisor = 1;
    }
    blue = dividend / divisor * DvtColorUtils.getBlue(newColor1);
  }
  //return (0xffffff & (red << 16)) + (0xffff & (green << 8)) + (0xff & blue);
  return DvtColorUtils.makePound(red, green, blue);
};


/**
 * Returns a contrasting text color for the specified background color.
 * @param {string} backgroundColor The background color.
 * @return {string} A constrasting color for use on text.
 */
DvtColorUtils.getContrastingTextColor = function(backgroundColor) {
  var r = DvtColorUtils.getRed(backgroundColor);
  var g = DvtColorUtils.getGreen(backgroundColor);
  var b = DvtColorUtils.getBlue(backgroundColor);
  var yiq = (r * 299 + g * 587 + b * 114) / 1000;
  return (yiq >= 128) ? '#000000' : '#FFFFFF';
};

/**
 * Process and fix color based on platform.
 * Color in #aarrggbb format is converted to rgba(r,g,b,a) representation
 * Batik doesn't support rgba, so splits the rgba color into rgb(r,g,b) color and alpha for Batik
 * @param {String}  color  The hex or RGB or RGBA representation of the color
 * @param {number}  alpha  The opacity
 * @return {object}  color object containing 'color' and 'alpha'
 */
DvtColorUtils.fixColorForPlatform = function(color, alpha) {
  if (!color)
    return null;
  if (color.charAt(0) == '#' && color.length > 8) {
    // #aarrggbb values shouldn't be sent to the DOM
    color = DvtColorUtils.getRGBA(color);
  }
  var colorObj = {};
  // rgba is not supported in batik environment.
  if (DvtAgent.isEnvironmentBatik() && color.indexOf('rgba') !== - 1) {
    colorObj['color'] = DvtColorUtils.getRGB(color);

    // Apply alpha in rgba value as a multiplier to the alpha set on the object as this is what svg does.
    if (alpha != null)
      colorObj['alpha'] = DvtColorUtils.getAlpha(color) * alpha;
    else
      colorObj['alpha'] = DvtColorUtils.getAlpha(color);
  }
  else {
    colorObj['color'] = color;
    if (alpha != null)
      colorObj['alpha'] = alpha;
  }
  return colorObj;
};
// Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.



/**
  *  @class DvtClipPath
  *  Defines a clipping region composed of the union of one or more outlines.
  *  @param {String} prefix  An optional prefix for the clip path id.
  *  @constructor
  */
var DvtClipPath = function(prefix)
{
  /** Id of the clip path. @type {String}  */
  this._id = (prefix ? prefix + '$' : '') + 'cp' + DvtClipPath._uniqueSeed++;
  /** the clipping outline  @type {Object}  */
  this._regions = [];
};

DvtObj.createSubclass(DvtClipPath, DvtObj, 'DvtClipPath');

DvtClipPath._uniqueSeed = 0;

//  Clipping path outlines


/**  @final  @type {number}  */
DvtClipPath.NONE = 0;


/**  @final  @type {number}  */
DvtClipPath.RECT = 1;


/**  @final  @type {number}  */
DvtClipPath.PATH = 2;


/**  @final  @type {number}  */
DvtClipPath.POLYGON = 3;


/**  @final  @type {number}  */
DvtClipPath.ELLIPSE = 4;


/**  @final  @type {number}  */
DvtClipPath.CIRCLE = 5;


/**
  *   @private
  */
DvtClipPath.prototype._addRegion = function(obj)
{
  if (obj)
    this._regions.push(obj);
};


/**
  *   Returns the ID of the clip path
  *   @return {String}  The ID of the clip path
  */

DvtClipPath.prototype.getId = function()
{
  return this._id;
};

/**
 *   Returns a  clipping region outline object (by index).
 *   @type {Object}
 */

DvtClipPath.prototype.getRegions = function(idx)
{
  return this._regions;
};


/**
  *  Adds a rectangular clipping region to the clip path.
  *  @param {number}  x   The top left x position of the rectangular region.
  *  @param {number}  y   The top left y position of the rectangular region.
  *  @param {number}  w   The width of the rectangular region.
  *  @param {number}  h   The height of the rectangular region.
  *  @param {number}  rx  Optional x-axis radius of the ellipse used to round off the cornders of the rectangle.
  *  @param {number}  ry  Optional y-axis radius of the ellipse used to round off the cornders of the rectangle.
  */
DvtClipPath.prototype.addRect = function(x, y, w, h, rx, ry)
{
  var obj = {};
  obj.type = DvtClipPath.RECT;
  obj.x = x;
  obj.y = y;
  obj.w = w;
  obj.h = h;
  obj.rx = rx;
  obj.ry = ry;
  this._addRegion(obj);
};


/**
  *  Adds a circular clipping region to the clip path.
  *  @param {number}  cx  The x-axis coordinate of the center of the circle.
  *  @param {number}  cy  The y-axis coordinate of the center of the circle.
  *  @param {number}  r   The radius of the circle.
  */
DvtClipPath.prototype.addCircle = function(cx, cy, r)
{
  var obj = {};
  obj.type = DvtClipPath.CIRCLE;
  obj.cx = cx;
  obj.cy = cy;
  obj.r = r;
  this._addRegion(obj);
};


/**
  *  Adds an ellipse clipping region to the clip path.
  *  @param {number}  cx  The x-axis coordinate of the center of the circle.
  *  @param {number}  cy  The y-axis coordinate of the center of the circle.
  *  @param {number}  rx  The x-axis radius of the ellipse.
  *  @param {number}  ry  The y-axis radius of the ellipse.
  */
DvtClipPath.prototype.addEllipse = function(cx, cy, rx, ry)
{
  var obj = {};
  obj.type = DvtClipPath.ELLIPSE;
  obj.cx = cx;
  obj.cy = cy;
  obj.rx = rx;
  obj.ry = ry;
  this._addRegion(obj);
};


/**
  *  Adds a polygon clipping region to the clip path.
  *  @param {string}  points  The points that make up the polygon.
  */
DvtClipPath.prototype.addPolygon = function(points)
{
  var obj = {};
  obj.type = DvtClipPath.POLYGON;
  obj.points = points;
  this._addRegion(obj);
};


/**
  *  Adds a path clipping region to the clip path.
  *  @param {string}  d  Path data.
  */
DvtClipPath.prototype.addPath = function(d)
{
  var obj = {};
  obj.type = DvtClipPath.PATH;
  obj.d = d;
  this._addRegion(obj);
};
// Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
/**
 *  Defines a mask.
 *  @param {DvtGradientFill} gradient The gradient to use for this mask
 *  @param {DvtRectangle} bounds The bounds of this mask
 *  @constructor
 */
var DvtMask = function(gradient, bounds) {
  this._id = 'mask' + DvtMask._uniqueSeed++;
  this._gradient = gradient;
  this._bounds = bounds;
};

DvtObj.createSubclass(DvtMask, DvtObj, 'DvtMask');

/**
 * @private
 */
DvtMask._uniqueSeed = 0;

/**
 * Returns the ID of the mask
 * @return {String}
 */
DvtMask.prototype.getId = function() {
  return this._id;
};

/**
 * Returns the DvtGradient for this mask
 * @return {DvtGradient}
 */
DvtMask.prototype.getGradient = function() {
  return this._gradient;
};

/**
 * Returns the bounds of this mask
 * @return {DvtRectangle}
 */
DvtMask.prototype.getBounds = function() {
  return this._bounds;
};
// Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.
/*-------------------------------------------------------------------------*/
/*   DvtFill                                                               */
/*-------------------------------------------------------------------------*/
/**
  * A base class for shape fills. DvtFill is intended to be subclassed (e.g.
  * {@link DvtSolidFill}).
  * @extends {DvtBaseDrawEffect}
  * @class DvtFill  is a base class for shape fill specifications.  DvtFill is intended to be subclassed (e.g.
  * {@link DvtSolidFill}).
  * @constructor  Do not create/use directly.
  * @param {String} id  Optional ID for the object (see also {@link DvtBaseDrawEffect#setId}).
  */
var DvtFill = function()
{
  this._Init();
};

DvtObj.createSubclass(DvtFill, DvtLockable, 'DvtFill');


//  Fill type definitions


/**   @final @type {number}  */
DvtFill.NONE = 0;


// No fill specified.
/**   @final @type {number}  */
DvtFill.COLOR = 1;


// Solid color fill.
/**   @final @type {number}  */
DvtFill.GRADIENT = 2;


// Gradient fill.
/**   @final @type {number}  */
DvtFill.PATTERN = 3;


// Pattern fill.
/**   @final @type {number}  */
DvtFill.IMAGE = 4;            // Image fill.


/**
 * @private
 */
DvtFill.prototype._Init = function() {
  DvtFill.superclass._Init.call(this);
};

// TODO  REMOVE get/setId if possible
/**
 *   Returns the id of this draw effect.
 *   @type {String}
 */
DvtFill.prototype.getId = function() {
  return this._id;
};


/**
 *   Sets the id of this fill.
 *   @param {String} id  The id for the fill.
 */
DvtFill.prototype.setId = function(id) {
  this._id = id;
};

/**
 * Returns true if this fill is identical to the specified fill.
 * @param {DvtFill} fill
 * @return {boolean}
 */
DvtFill.prototype.equals = function(fill) {
  return true; // subclasses should override
};
// Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * A shape fill class rendering a solid fill color.
  * @constructor
  * @param {String} fc  A css color specification for the fill color.
  * @param {String} fa  An optional alpha. Can be used to supplement the alpha specified by the fill color.  If omitted, the alpha specifed
  *                     by the fill color (or 1 if it does not specify an alpha) is used.
 */
var DvtSolidFill = function(fc, fa)
{
  this._Init(fc, fa);
};

DvtObj.createSubclass(DvtSolidFill, DvtFill, 'DvtSolidFill');

/**
 * Returns a copy of this object.
 * @return {DvtSolidFill}
 */
DvtSolidFill.prototype.clone = function()
{
  var o = new DvtSolidFill();
  this.mergeProps(o);
  return o;
};


/**
 * Helper method to initialize this object.
  * @param {String} fc  A css color specification for the fill color.
  * @param {String} fa  An optional alpha. Can be used to supplement the alpha specified by the fill color.  If omitted, the alpha specifed
  *                     by the fill color (or 1 if it does not specify an alpha) is used.
 * @private
 */
DvtSolidFill.prototype._Init = function(fc, fa)
{
  DvtSolidFill.superclass._Init.call(this);
  this._fc = fc;
  this._fa = fa != null ? fa : 1;
};


/**
  *  Returns the fill's solid color (and alpha).
  *  @type {String}
  */
DvtSolidFill.prototype.getColor = function()
{
  return this._fc;
};


/**
  *  Sets the fill color.
  *  @param  {String} fc  A color specification.
  *  e.g.  #123456, &nbsp; rgb(128,42,200), &nbsp; rgba(28, 128, 56, 0.7)
  *  &nbsp;or &nbsp;'green'&nbsp; or&nbsp; 'none'
  */
DvtSolidFill.prototype.setColor = function(fc)
{
  if (! this.isLocked()) {
    this._fc = fc;
  }
};


/**
  *  Returns the fill's solid color alpha channel value in the range 0 (invisible) to 1 (opaque).
  *  @type {number}
  */
DvtSolidFill.prototype.getAlpha = function()
{
  return this._fa;
};


/**
  *  Sets the fill alpha.
  *  @param {number} alpha  A value between 0 (invisible) and 1 (opaque).
  */
DvtSolidFill.prototype.setAlpha = function(alpha)
{
  if (! this.isLocked()) {
    this._fa = alpha;
  }
};


/**
  *   Merges the fill properties in the current object into the supplied fill
  *   object.
  *   Used internally by clone().
  *   @private
  */
DvtSolidFill.prototype.mergeProps = function(obj)
{
  DvtSolidFill.superclass.mergeProps.call(this, obj);   // merge in subclass props

  obj._fc = this._fc;   // color
  obj._fa = this._fa;   // alpha
};


/**
 * Returns an instance of DvtSolidFill that is invisible and can be used for event detection.
 * @return {DvtSolidFill}
 */
DvtSolidFill.invisibleFill = function() {
  if (!DvtSolidFill._INVISIBLE_FILL)
    DvtSolidFill._INVISIBLE_FILL = new DvtSolidFill('rgba(0,0,0,0)');

  return DvtSolidFill._INVISIBLE_FILL;
};

/**
 * @override
 */
DvtSolidFill.prototype.equals = function(fill) {
  // TODO  fc should be converted so that equivalent colors via different syntax are treated correctly.
  if (fill instanceof DvtSolidFill && fill._fc == this._fc && fill._fa == this._fa)
    return DvtSolidFill.superclass.equals.call(this, fill);
  else
    return false;
};
// Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.
/*-------------------------------------------------------------------------*/
/*   DvtStroke                 Base stroke properties                      */
/*-------------------------------------------------------------------------*/
/**
  * An abstract base class representing stroke properties.
  * @class DvtStroke
  * @extends {DvtObj}
  * @constructor
  * @param {number} sw  The width of the stroke line.  If omitted, default is 1.
  * @param {String} id  Optional ID for the object (see also {@link DvtBaseDrawEffect#setId}).
  */
var DvtStroke = function(sw, id)
{
  this._Init(sw, id);
};

DvtObj.createSubclass(DvtStroke, DvtLockable, 'DvtStroke');


/**
  * Stroke Types
  */
DvtStroke.SOLID = 0;
DvtStroke.DASHED = 1;
DvtStroke.DOTTED = 2;
DvtStroke.DASHED_DOTTED = 3;


/**
  * Stroke joins
  */
DvtStroke.SQUARE = 'square';
DvtStroke.ROUND = 'round';
DvtStroke.BEVEL = 'bevel';
DvtStroke.MITER = 'miter';

/**
  * Stroke endings
  */
//DvtSTROKE.SQUARE  ;     // same as for join
//DvtSTROKE.ROUND   ;     //  ..   .  ..  ..
DvtStroke.BUTT = 'butt';


/**
 * Converts the specified stroke type string to its constant value.
 * @param {string} shape The stroke type.
 * @return {number} The corresponding constant value.
 */
DvtStroke.convertTypeString = function(type) {
  if (type == 'solid')
    return DvtStroke.SOLID;
  else if (type == 'dashed')
    return DvtStroke.DASHED;
  else if (type == 'dotted')
    return DvtStroke.DOTTED;
  else
    return DvtStroke.SOLID;
};


/*-------------------------------------------------------------------------*/
/*   _Init()                                                               */
/*-------------------------------------------------------------------------*/
/** @private */
DvtStroke.prototype._Init = function(sw)
{
  this._sw = ((sw === null || isNaN(sw)) ? 1 : sw);    // stroke_width

  DvtStroke.superclass._Init.call(this);
  this._bFixedWidth = false;
};


/**
 *   Returns the id of this draw effect.
 *   @type {String}
 */
DvtStroke.prototype.getId = function() {
  return this._id;
};


/**
 *   Sets the id of this fill.
 *   @param {String} id  The id for the fill.
 */
DvtStroke.prototype.setId = function(id) {
  this._id = id;
};


/*-------------------------------------------------------------------------*/
/*   mergeProps()                                                          */
/*-------------------------------------------------------------------------*/

DvtStroke.prototype.mergeProps = function(to)
{
  to._sw = this._sw;      // stroke width
  to._st = this._st;      // stroke type (solid, dashed, etc)
  to._sd = this._sd;      // dash details
  to._sdo = this._sdo;      // dash offset
  to._sj = this._sj;      // line join style
  to._se = this._se;      // line ending style
  to._sm = this._sm;      // miter limit
  to._bFixedWidth = this._bFixedWidth;

  DvtStroke.superclass.mergeProps.call(this, to);
};


/*-------------------------------------------------------------------------*/
/*   setStyle()                                                            */
/*-------------------------------------------------------------------------*/
/**
  *  Sets the stroke style (e.g solid line, or intermittent line, and optionally
  *  the stroke join type and the line ending type). Null may be used to ignore
  *  any argument.
  *  <p>
  *  Dashed line examples :<br><br><code>
  *  // 3 pixel dash followed by a 3 pixel gap<br><br>
  *  obj.setStyle(DvtStroke.DASHED, "3");<br><br>
  *  // 5 pixel dash, 3 pixel gap, 9 pixel dash, 2 pixel gap.  The pattern then repeats
  *  to fill the line<br><br>
  *  obj.setStyle(DvtStroke.DASHED, "5,3,9,2");
  *
  *  @param {number} type  DvtStroke.SOLID or DvtStroke.DASHED.
  *  @param {String} dashsize  For dashed lines, specifies the dash and space size.
  *                            The string contains a list of numbers separated by commas
  *                            or whitespace, specifying dash length and gaps. The list
  *                            should have an even number of entries, but if an odd number
  *                            is used the list will be repeated so that the entry count is even.
  *  @param {String} join  Specifies the type of line join.  May be DvtStroke.SQUARE,
  *                        DvtStroke.ROUND, DvtStroke.BEVEL, or DvtStroke.MITER.
  *  @param {String} end   Specifies the type of line end.  May be DvtSTROKE.SQUARE,
  *                        DvtSTROKE.ROUND, or DvtStroke.BUTT.
  *  @param {number} miter miter limit when join is DvtStroke.MITER
  */
DvtStroke.prototype.setStyle = function(type, dashsize, join, end, miter)
{
  if (this.isLocked()) {
    return;
  }

  //  Line-type attributes

  if (type && !dashsize)
    dashsize = DvtStroke.getDefaultDash(type, this._sw);

  this._st = type;
  this._sd = dashsize;


  //  Line-joining attributes

  if (join) {
    this._sj = join;
  }

  //  Line-ending attributes

  if (end) {
    this._se = end;
  }

  //  miter limit attributes

  if (miter) {
    this._sm = miter;
  }

};


DvtStroke.prototype.getDash = function()
{
  return this._sd;
};

DvtStroke.prototype.getDashOffset = function()
{
  return this._sdo;
};


DvtStroke.prototype.getLineJoin = function()
{
  return this._sj;
};

DvtStroke.prototype.setLineJoin = function(join)
{
  if (! this.isLocked()) {
    this._sj = join;
  }
};

DvtStroke.prototype.getLineEnd = function()
{
  return this._se;
};

DvtStroke.prototype.setLineEnd = function(end)
{
  if (! this.isLocked()) {
    this._se = end;
  }
};

DvtStroke.prototype.getMiterLimit = function()
{
  return this._sm;
};

DvtStroke.prototype.setMiterLimit = function(limit)
{
  if (! this.isLocked()) {
    this._sm = limit;
  }
};


/*-------------------------------------------------------------------------*/
/*   get/setType()     Gets/Sets the type of stroke (e.g. solid or dashed  */
/*-------------------------------------------------------------------------*/

DvtStroke.prototype.getType = function()
{
  return this._st;
};


//  dash size is optional.  May also specify alternating sizes  e.g. "3, 5, 3"
/**
  *  Sets the type of the stroke.
  *  @param {number} type  The stroke type, such as {@link DvtStroke#DASHED}.
  *  @param {number} dashsize  Optional dash details if the stroke type is not {@link DvtStroke#SOLID}.
  *  @param {number} dashoffset  Optional dash offset if the stroke type is not {@link DvtStroke#SOLID}.
  */
DvtStroke.prototype.setType = function(type, dashsize, dashoffset)
{
  if (this.isLocked()) {
    return;
  }

  if (type === DvtStroke.SOLID) {
    dashsize = null;
    dashoffset = null;
  }
  else if (! dashsize) {
    dashsize = DvtStroke.getDefaultDash(type, this._sw);
  }

  this._st = type;
  this._sd = dashsize;
  this._sdo = dashoffset;

};


/*-------------------------------------------------------------------------*/
/*   get/setWidth()                                                        */
/*-------------------------------------------------------------------------*/
/**
  *  Returns the stroke width.
  *  @type {number}
  */
DvtStroke.prototype.getWidth = function()
{
  return this._sw;
};


/**
  *  Sets the stroke width.
  *  @param {number} sw  The stroke width.
  */
DvtStroke.prototype.setWidth = function(sw)
{
  if (! this.isLocked()) {
    this._sw = sw;
  }
};

DvtStroke.prototype.setFixedWidth = function(bFixedWidth)
{
  this._bFixedWidth = bFixedWidth;
};

DvtStroke.prototype.isFixedWidth = function()
{
  return this._bFixedWidth;
};


/**
 * Gets a default dash size based on the stroke type and stroke width.
 * @return {string} dash size string, e.g. "6,3,4,3"
 */
DvtStroke.getDefaultDash = function(type, width) {
  width = Math.ceil(width);
  var dashSize = Math.max(6, width * 2); // dash is at least 6px
  var dotSize = Math.max(2, width); // dot is at least 2px
  var dashDotGap = Math.floor((dashSize + dotSize) / 2);

  if (type == DvtStroke.DASHED)
    return '' + dashSize;
  if (type == DvtStroke.DOTTED)
    return '' + dotSize;
  if (type == DvtStroke.DASHED_DOTTED)
    return '' + dashSize + ',' + dashDotGap + ',' + dotSize + ',' + dashDotGap;
  else
    return null;
};
// Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.
/*---------------------------------------------------------------------------*/
/*    DvtGradientStroke            Gradient stroke definition class          */
/*---------------------------------------------------------------------------*/
/*  Can be used to share a gradient definition among several shapes, or as a */
/*  convenience to maintain a gradient definition separately from a shape.   */
/*---------------------------------------------------------------------------*/
/**
  *   Creates a gradient specification (shareable by other shapes).
  *   @extends {DvtStroke}
  *   @class
  *   @constructor
  *   @param {Array} arColors  An array of color specifications (which do not include alpha values).
  *   @param {Array} arAlphas  An optional array of alpha values (between 0 and 1).  If omitted,
  *                            alphas of 1 are assumed.
  *   @param {Array} arStops   An optional array of stop boundary positions (between 0 and 1).
  *                            If omitted, an equal distribution of colors is assumed.
  *   @param {Array} arBounds  An optional bounding box array (x, y, w, h).
  *   @param {number} sw       Stroke width
  *   @param {String} id
  */
var DvtGradientStroke = function(arColors, arAlphas, arStops, arBounds, sw, id)
{
  this._Init(arColors, arAlphas, arStops, arBounds, sw, id);
};


DvtObj.createSubclass(DvtGradientStroke, DvtStroke, 'DvtGradientStroke');


/**
 * Return the first alpha in the alphas array
 *
 * @return {number}
 */
DvtGradientStroke.prototype.getAlpha = function()
{
  return 1;
};


/**
  *   Returns an array of alpha's.
  *   @type {Array}
  */
DvtGradientStroke.prototype.getAlphas = function()
{
  return this._arAlphas;
};


/**
  *   Returns the bounding box for the gradient as an array (x, y, w, h).
  *   @type {Array}
  */
DvtGradientStroke.prototype.getBounds = function()
{
  return this._arBounds;
};


/**
  *   Returns an array of colors.
  *   @type {Array}
  */
DvtGradientStroke.prototype.getColors = function()
{
  return this._arColors;
};


/**
  *   Returns an array of stop ratios.
  *   @type {Array}
  */
DvtGradientStroke.prototype.getStops = function()
{
  return this._arStops;
};


/*---------------------------------------------------------------------------*/
/*    _Init()                                                                */
/*---------------------------------------------------------------------------*/
/**
  *  @private
  */
DvtGradientStroke.prototype._Init = function(arColors, arAlphas, arStops, arBounds, sw, id)
{
  DvtGradientStroke.superclass._Init.call(this, sw, id);

  this._arColors = arColors;
  this._arBounds = arBounds;

  var len = 0;
  if (arColors) {
    len = arColors.length - 1;
  }

  if (! arAlphas) {
    arAlphas = DvtGradientStroke.createDefaultAlphas(len);
  }
  this._arAlphas = arAlphas;

  if (! arStops) {     // if no stops, generate default stops
    // for a uniform distribution of colors.
    arStops = DvtGradientStroke.createDefaultStops(len);
  }

  this._arStops = arStops;
};


/**
 * @param {number} size
 * @return {Array} An array with size number of elements, with each element equal to 1, or null if size
 *                  is less than 0.
 */
DvtGradientStroke.createDefaultAlphas = function(size)
{
  if (size < 0)
    return null;

  var arAlphas = [];
  for (var i = 0; i < size; i++)
  {
    arAlphas.push(1);
  }
  return arAlphas;
};


/**
 * Creates a uniformly distributed range of gradient stops
 *
 * @param {number} numStops
 * @return {Array}
 */
DvtGradientStroke.createDefaultStops = function(numStops)
    {
  var arStops = [];
  var incr = 1 / numStops;
  var curStop = 0;

  do {
    arStops.push(curStop);
    curStop += incr;
  } while (--numStops > 0);
  arStops.push(1);

  return arStops;
};


/*-------------------------------------------------------------------------*/
/*   mergeProps()                                                          */
/*-------------------------------------------------------------------------*/
/**
  *   Merges the gradient properties in the current object into the supplied gradient object.
  *   Used internally by clone().
  *   @private
  */
DvtGradientStroke.prototype.mergeProps = function(obj)
{
  obj._arColors = this._arColors;
  obj._arStops = this._arStops;
  obj._arAlphas = this._arAlphas;
  obj._arBounds = this._arBounds;

  DvtGradientStroke.superclass.mergeProps.call(this, obj);
};
// Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.
/*---------------------------------------------------------------------------*/
/*    DvtLinearGradientStroke       Linear Gradient stroke class             */
/*---------------------------------------------------------------------------*/
/**
  *   Creates a linear gradient stroke.
  *   @extends {DvtGradientStroke}
  *   @class
  *   <p>
  *   <b>Example usage:</b><br><br><code>
  *
  *   //  Fill rectangle with a left-to-right gradient of red through blue to green.<br>
  *   //  The colors are evenly graduated because the stop values have been omitted.<br><br>
  *   rect.setStroke(<b>new DvtLinearGradientStroke(0, ['red', 'green, 'blue']</b>) ;<br><br>
  *
  *   //  Fill rectangle with a north-east direction gradient of red to green
  *   with an unequal gradient distribution of colors.<br><br>
  *   rect.setStroke(<b>new DvtLinearGradientStroke(45, ['red', 'green], [0, 0.75,1]</b>) ;<br><br>

  *   @constructor
  *   @param {number} angle  Specifies the direction of the gradient as an
  *                          angle in degrees (using the standard anti-clockwise convention
  *                           for positive angles, i.e. 0 = horizontal and 90 = vertically up, etc).
  *   @param {Array} arColors  An array of color specifications (which do not include alpha values).
  *   @param {Array} arColors  An optional array of alpha values (between 0 and 1).  If omitted,
  *                            alphas of 1 are assumed.
  *   @param {Array} arStops   An optional array of stop boundary positions (between 0 and 1).
  *                            If omitted, an equal distribution of colors is assumed.
  *   @param {Array} arBounds  An optional bounding box array (x, y, w, h).
  *   @param {number} sw    An optional number for stroke width.
  *   @param {String} id
  */
var DvtLinearGradientStroke = function(angle, arColors, arAlphas, arStops, arBounds, sw, id)
{
  this._Init(angle, arColors, arAlphas, arStops, arBounds, sw, id);
};

DvtObj.createSubclass(DvtLinearGradientStroke, DvtGradientStroke, 'DvtLinearGradientStroke');


/*---------------------------------------------------------------------------*/
/*    clone()                                                                */
/*---------------------------------------------------------------------------*/
/**
  *  Returns an (unlocked) copy of this object.
  *  @type {DvtLinearGradientStroke}
  */
DvtLinearGradientStroke.prototype.clone = function()
{
  var o = new DvtLinearGradientStroke();

  this.mergeProps(o);    // merge properties into cloned obj.
  return o;
};


/*---------------------------------------------------------------------------*/
/*     Init()                                                                */
/*---------------------------------------------------------------------------*/
/**
  *  @private
  */
DvtLinearGradientStroke.prototype._Init = function(angle, arColors, arAlphas, arStops, arBounds, sw, id)
{
  DvtLinearGradientStroke.superclass._Init.call(this, arColors, arAlphas, arStops, arBounds, sw, id);

  this._angle = ((angle === null || isNaN(angle)) ? 0 : angle);
};


/*---------------------------------------------------------------------------*/
/*   getAngle()    Returns the gradient angle property for linear gradients  */
/*                 see also setAngle().                                      */
/*---------------------------------------------------------------------------*/
/**
  *  Gets the angle of the gradient in degrees.
  *  @type {number}
  *  @return The angle of the gradient in degrees.  The zero degree direction is
  *  left-to-right (due east). Positive angles rotate anti-clockwise, and negative
  *  angles rotate clockwise.
  */
DvtLinearGradientStroke.prototype.getAngle = function()
{
  return this._angle;
};


/*-------------------------------------------------------------------------*/
/*   mergeProps()                                                          */
/*-------------------------------------------------------------------------*/
/**
  *   Merges the linear gradient properties in the current object into the
  *   DvtLinearGradientStroke object.
  *   Used internally by clone().
  *   @private
  */
DvtLinearGradientStroke.prototype.mergeProps = function(obj)
{
  DvtLinearGradientStroke.superclass.mergeProps.call(this, obj);

  obj._angle = this._angle;      // gradient angle
};



/*---------------------------------------------------------------------------*/
/*   setAngle()         Set the gradient angle for linear gradients          */
/*---------------------------------------------------------------------------*/
//  Be default, the gradient angle is zero (due east).  Angles greater
// than zero rotate anti-clockwise.  Angles less than zero rotate clockwise.


/**
  * Sets the angle of the gradient in degrees.  The zero degree direction is
  * left-to-right (due east). Positive angles rotate anti-clockwise, and negative
  * angles rotate clockwise.
  * @param {number} The gradient direction in degrees.
  */
DvtLinearGradientStroke.prototype.setAngle = function(degrees)
{
  if (this.isLocked()) {
    return;
  }

  if (degrees !== 0) {
    if (Math.abs(degrees) > 360) {
      degrees %= 360;
    }
    this._angle = degrees;
  }
};

// Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.
/**
  * A class representing the stroke properties for a solid line.
  * @param {String} sc  A css color specification for the stroke color.
  * @param {String} sa  An optional alpha. Can be used to supplement the alpha specified by the stroke color.
  *                     If omitted, the alpha specifed by the stroke color (or 1 if it does not specify an alpha) is used.
  * @param {number} sw  The width of the stroke line.  If omitted, the default width is 1.
  */
var DvtSolidStroke = function(sc, sa, sw)
{
  this._Init(sc, sa, sw);
};

DvtObj.createSubclass(DvtSolidStroke, DvtStroke, 'DvtSolidStroke');


/**
  *  Returns an (unlocked) copy of this stroke object.
  *  @type {DvtSolidStroke}
  */
DvtSolidStroke.prototype.clone = function()
{
  var o = new DvtSolidStroke();

  this.mergeProps(o);    // merge properties into cloned obj.
  return o;
};


/**
 * Helper method to initialize this object.
  * @param {String} sc  A css color specification for the stroke color.
  * @param {String} sa  An optional alpha. Can be used to supplement the alpha specified by the stroke color.
  *                     If omitted, the alpha specifed by the stroke color (or 1 if it does not specify an alpha) is used.
  * @param {number} sw  The width of the stroke line.  If omitted, the default width is 1.
 * @private
 */
DvtSolidStroke.prototype._Init = function(sc, sa, sw)
{
  this._sc = sc;
  this._sa = sa != null ? sa : 1;
  this._st = DvtStroke.SOLID;
  DvtSolidStroke.superclass._Init.call(this, sw);
};


/**
  *  Returns the stroke alpha as a value between 0 (invisible) and 1 (opaque).
  *  @type {number}
  */
DvtSolidStroke.prototype.getAlpha = function()
{
  return this._sa;
};


/**
  *  Sets the stroke alpha.
  *  @param {number} alpha  A value between 0 (invisible) and 1 (opaque).
  */
DvtSolidStroke.prototype.setAlpha = function(alpha)
{
  if (! this.bLocked)
    this._sa = alpha;
};


/**
  *  Returns the stroke color.
  *  @type {String}
  */
DvtSolidStroke.prototype.getColor = function()
{
  return this._sc;
};


/**
  *  Sets the stroke color.
  *  @param {String}  sc  A css color specification. e.g.  '#123456',  'rgb(128,42,200)',
  *                       rgba(128,42,200,0.8), or 'green'
  */
DvtSolidStroke.prototype.setColor = function(sc)
{
  if (! this.bLocked)
    this._sc = sc;
};


/**
  *   Merges the stroke properties in the current object into the supplied
  *   stroke object.
  *   Used internally by clone().
  *   @private
  */
DvtSolidStroke.prototype.mergeProps = function(obj)
{
  DvtSolidStroke.superclass.mergeProps.call(this, obj);   // merge in the subclass's props

  obj._sc = this._sc;      // stroke color
  obj._sa = this._sa;      // stroke alpha
};
// Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.
/*-------------------------------------------------------------------------*/
/*   DvtShadow                     Base drop shadow                        */
/*-------------------------------------------------------------------------*/
/**
  * @class DvtShadow
  * Represents a drop shadow.  The shadow object properties are a superset of values, and
  *                            each platform implementation should take those required
  *                            by that specfic platform.
  *
  * @constructor
  * @param {number} sw  The width of the stroke line.  If omitted, default is 1.
  * @param {String} id  Optional ID for the object (see also {@link DvtBaseDrawEffect#setId}).
  * @param {String} rgba  The color and transparency of the shadow.  Default is      0x59333333.
  * @param {number} distance The offset distance for the shadow, in pixels.   Default is 4.
  * @param {number} strength  The strength of the imprint or spread. Default is 1.
  *                           Note: The higher the value, the more color is imprinted and the
  *                           stronger the contrast between the shadow and the background.
  *                           Valid values are from 0 to 255.0
  * @param {number} angle  The angle of the shadow. Valid values are 0.0 to 360.0 degrees.  Default is 45 deg.
  * @param {number} blurX  The amount of horizontal blur. Valid values are 0.0 to 255.0  Default is 4.
  * @param {number} blurY  The amount of vertical blur (float). Valid values are 0.0 to 255.0  Default is 4.
  * @param {number} quality  An integer number of times to apply the effect. Valid values are 0
  *                          to 15.  Default is 1.  Note: shadows with lower values are rendered
  *                          more quickly. For most applications, a quality value of 1 (low), 2
  *                          (medium), or 3 (high) is sufficient.  Although you can use additional
  *                          numeric values up to 15 to achieve different effects, higher values
  *                          are rendered more slowly. Instead of increasing the value of quality,
  *                          you can often get a similar effect, and with faster rendering, by
  *                          simply increasing the values of the blurX and blurY properties.
  * @param {Boolean} inner  A boolean value indicating whether or not the shadow is an inner shadow.
  *                         A true value specifies an inner shadow. False specifies an outer shadow
  *                         (a shadow around the outer edges of the object).
  * @param {Boolean} knockout  Applies a knockout effect if true which effectively makes the object's
  *                         fill transparent, and reveals the background color of the document.
  * @param {Boolean} hide   A value indicating whether or not the object is hidden. A true value
  *                         indicates that the object itself is not drawn; only the shadow is visible.
  *                         If false, the object is shown.
  *
  */
var DvtShadow = function(rgba, distance, blurX, blurY, angle, strength,
    quality,inner,knockout,hide)

{
  this._Init(rgba, distance, blurX, blurY, angle, strength, quality, inner, knockout, hide);
};


DvtObj.createSubclass(DvtShadow, DvtBaseDrawEffect, 'DvtShadow');


DvtShadow._uniqueId = 1;


/*-------------------------------------------------------------------------*/
/*   _Init()                                                               */
/*-------------------------------------------------------------------------*/
/** @private */
DvtShadow.prototype._Init = function(rgba, distance, blurX, blurY, angle, strength,
                                     quality,inner,knockout,hide)
{
  DvtShadow.superclass._Init.call(this);

  // The type of this draw effect, used in Flash to differentiate between filter effects
  this.__type = 'shadow';

  this._rgba = (rgba ? rgba : 'rgba(48,48,48,0.35)');
  this._distance = ((distance === null || isNaN(distance)) ? 4 : distance);

  this._strength = ((strength === null || isNaN(strength)) ? 1 : strength);
  this._blurX = ((blurX === null || isNaN(blurX)) ? 4 : blurX);
  this._blurY = ((blurY === null || isNaN(blurY)) ? 4 : blurY);
  this._angle = ((angle === null || isNaN(angle)) ? 45 : angle);
  this._quality = ((quality === null || isNaN(quality)) ? 1 : quality);
  this._bInner = (inner ? true : false);
  this._bKnockout = false;
  this._bHide = false;
  this._Id = 'ds' + DvtShadow._uniqueId++;
};


/**
  *  Returns an (unlocked) copy of this object.
  *  @type {DvtShadow}
  */
DvtShadow.prototype.clone = function()
{
  var o = new DvtShadow();

  this.mergeProps(o);    // merge properties into cloned obj.

  return o;
};


/**
  *   Merges the fill properties in the current object into the supplied fill
  *   object.
  *   Used internally by clone().
  *   @private
  */
DvtShadow.prototype.mergeProps = function(obj)
{
  DvtShadow.superclass.mergeProps.call(this, obj);   // merge in subclass props

  obj._rgba = this._rgba;
  obj._distance = this._distance;
  obj._strength = this._strength;
  obj._blurX = this._blurX;
  obj._blurY = this._blurY;
  obj._angle = this._angle;
  obj._quality = this._quality;
  obj._bInner = this._bInner;
  obj._bKnockout = this._bKnockout;
  obj._bHide = this._bHide;
  obj._Id = this._Id;
};


// Copyright (c) 2008, 2015, Oracle and/or its affiliates. All rights reserved.
/*---------------------------------------------------------------------------*/
/*    DvtGradientFill            Gradient fill definition class              */
/*---------------------------------------------------------------------------*/
/*  Can be used to share a gradient definition among several shapes, or as a */
/*  convenience to maintain a gradient definition separately from a shape.   */
/*---------------------------------------------------------------------------*/
/**
  *   Creates a gradient specification (shareable by other shapes).
  *   @extends {DvtFill}
  *   @class
  *   @constructor
  *   @param {Array} arColors  An array of color specifications (which do not include alpha values).
  *   @param {Array} arColors  An optional array of alpha values (between 0 and 1).  If omitted,
  *                            alphas of 1 are assumed.
  *   @param {Array} arStops   An optional array of stop boundary positions (between 0 and 1).
  *                            If omitted, an equal distribution of colors is assumed.
  *   @param {Array} arBounds  An optional bounding box array (x, y, w, h).
  */
var DvtGradientFill = function(arColors, arAlphas, arStops, arBounds)
{
  this._Init(arColors, arAlphas, arStops, arBounds);
};


DvtObj.createSubclass(DvtGradientFill, DvtFill, 'DvtGradientFill');


/**
  *   Returns an array of alpha's.
  *   @type {Array}
  */
DvtGradientFill.prototype.getAlphas = function()
{
  return this._arAlphas;
};


/**
  *   Returns the bounding box for the gradient as an array (x, y, w, h).
  *   @type {Array}
  */
DvtGradientFill.prototype.getBounds = function()
{
  return this._arBounds;
};


/**
  *   Returns an array of colors.
  *   @type {Array}
  */
DvtGradientFill.prototype.getColors = function()
{
  return this._arColors;
};


/**
  *   Returns an array of stop ratios.
  *   @type {Array}
  */
DvtGradientFill.prototype.getStops = function()
{
  return this._arStops;
};


/*---------------------------------------------------------------------------*/
/*     Init()                                                                */
/*---------------------------------------------------------------------------*/
/**
  *  @private
  */
DvtGradientFill.prototype._Init = function(arColors, arAlphas, arStops, arBounds)
{
  DvtGradientFill.superclass._Init.call(this);

  this._arColors = arColors;
  this._arBounds = arBounds;

  if (! arAlphas) {
    arAlphas = [];
    if (arColors) {
      for (var i = 0; i < arColors.length; i++) {
        arAlphas.push(1);
      }
    }
  }
  this._arAlphas = arAlphas;

  var len = arColors ? arColors.length - 1 : 0;
  if (! arStops) {     // if no stops, generate default stops
    // for a uniform distribution of colors.
    arStops = [];
    var incr = (len > 0) ? 1 / len : 0;
    var curStop = 0;

    do {
      arStops.push(curStop);
      curStop += incr;
    } while (--len > 0);
    arStops.push(1);
  }

  this._arStops = arStops;
};


/*-------------------------------------------------------------------------*/
/*   mergeProps()                                                          */
/*-------------------------------------------------------------------------*/
/**
  *   Merges the gradient properties in the current object into the supplied gradient object.
  *   Used internally by clone().
  *   @private
  */
DvtGradientFill.prototype.mergeProps = function(obj)
{
  obj._arColors = this._arColors;
  obj._arStops = this._arStops;
  obj._arAlphas = this._arAlphas;
  obj._arBounds = this._arBounds;

  DvtGradientFill.superclass.mergeProps.call(this, obj);
};

/**
 * @override
 */
DvtGradientFill.prototype.equals = function(fill) {
  if (fill instanceof DvtGradientFill && DvtArrayUtils.equals(this._arColors, fill._arColors) &&
      DvtArrayUtils.equals(this._arStops, fill._arStops) && DvtArrayUtils.equals(this._arAlphas, fill._arAlphas) &&
      DvtArrayUtils.equals(this._arBounds, fill._arBounds))
    return DvtGradientFill.superclass.equals.call(this, fill);
  else
    return false;
};
// Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.
/*---------------------------------------------------------------------------*/
/*    DvtLinearGradientFill       Linear Gradient fill class                     */
/*---------------------------------------------------------------------------*/
/**
  *   Creates a linear gradient fill.
  *   @extends {DvtGradientFill}
  *   @class
  *   <p>
  *   <b>Example usage:</b><br><br><code>
  *
  *   //  Fill rectangle with a left-to-right gradient of red through blue to green.<br>
  *   //  The colors are evenly graduated because the stop values have been omitted.<br><br>
  *   rect.setFill(<b>new DvtLinearGradientFill(0, ['red', 'green, 'blue']</b>) ;<br><br>
  *
  *   //  Fill rectangle with a north-east direction gradient of red to green
  *   with an unequal gradient distribution of colors.<br><br>
  *   rect.setFill(<b>new DvtLinearGradientFill(45, ['red', 'green], [0, 0.75,1]</b>) ;<br><br>

  *   @constructor
  *   @param {number} angle  Specifies the direction of the gradient as an
  *                          angle in degrees (using the standard anti-clockwise convention
  *                           for positive angles, i.e. 0 = horizontal and 90 = vertically up, etc).
  *   @param {Array} arColors  An array of color specifications (which do not include alpha values).
  *   @param {Array} arColors  An optional array of alpha values (between 0 and 1).  If omitted,
  *                            alphas of 1 are assumed.
  *   @param {Array} arStops   An optional array of stop boundary positions (between 0 and 1).
  *                            If omitted, an equal distribution of colors is assumed.
  *   @param {Array} arBounds  An optional bounding box array (x, y, w, h).
  */
var DvtLinearGradientFill = function(angle, arColors, arAlphas, arStops, arBounds)
{
  this._Init(angle, arColors, arAlphas, arStops, arBounds);
};

DvtObj.createSubclass(DvtLinearGradientFill, DvtGradientFill, 'DvtLinearGradientFill');


/*---------------------------------------------------------------------------*/
/*    clone()                                                                */
/*---------------------------------------------------------------------------*/
/**
  *  Returns an (unlocked) copy of this object.
  *  @type {DvtLinearGradientFill}
  */
DvtLinearGradientFill.prototype.clone = function()
{
  var o = new DvtLinearGradientFill();

  this.mergeProps(o);    // merge properties into cloned obj.
  return o;
};


/*---------------------------------------------------------------------------*/
/*     Init()                                                                */
/*---------------------------------------------------------------------------*/
/**
  *  @private
  */
DvtLinearGradientFill.prototype._Init = function(angle, arColors, arAlphas, arStops, arBounds)
{
  DvtLinearGradientFill.superclass._Init.call(this, arColors, arAlphas, arStops, arBounds);

  this._angle = ((angle === null || isNaN(angle)) ? 0 : angle);
};


/*---------------------------------------------------------------------------*/
/*   getAngle()    Returns the gradient angle property for linear gradients  */
/*                 see also setAngle().                                      */
/*---------------------------------------------------------------------------*/
/**
  *  Gets the angle of the gradient in degrees.
  *  @type {number}
  *  @return The angle of the gradient in degrees.  The zero degree direction is
  *  left-to-right (due east). Positive angles rotate anti-clockwise, and negative
  *  angles rotate clockwise.
  */
DvtLinearGradientFill.prototype.getAngle = function()
{
  return this._angle;
};

/**
 * Returns a copy of this object.
 * @return {DvtLinearGradientFill}
 */
DvtLinearGradientFill.prototype.clone = function()
{
  var o = new DvtLinearGradientFill();
  this.mergeProps(o);
  return o;
};

/**
  *   Merges the linear gradient properties in the current object into the
  *   DvtLinearGradientFill object.
  *   Used internally by clone().
  *   @private
  */
DvtLinearGradientFill.prototype.mergeProps = function(obj)
{
  DvtLinearGradientFill.superclass.mergeProps.call(this, obj);

  obj._angle = this._angle;      // gradient angle
};



/*---------------------------------------------------------------------------*/
/*   setAngle()         Set the gradient angle for linear gradients          */
/*---------------------------------------------------------------------------*/
//  Be default, the gradient angle is zero (due east).  Angles greater
// than zero rotate anti-clockwise.  Angles less than zero rotate clockwise.


/**
  * Sets the angle of the gradient in degrees.  The zero degree direction is
  * left-to-right (due east). Positive angles rotate anti-clockwise, and negative
  * angles rotate clockwise.
  * @param {number} The gradient direction in degrees.
  */
DvtLinearGradientFill.prototype.setAngle = function(degrees)
{
  if (this.isLocked()) {
    return;
  }

  if (degrees !== 0) {
    if (Math.abs(degrees) > 360) {
      degrees %= 360;
    }
    this._angle = degrees;
  }
};

/**
 * @override
 */
DvtLinearGradientFill.prototype.equals = function(fill) {
  if (fill instanceof DvtLinearGradientFill && fill._angle == this._angle)
    return DvtLinearGradientFill.superclass.equals.call(this, fill);
  else
    return false;
};
// Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.
/*---------------------------------------------------------------------------*/
/*    DvtImageFill            Image fill definition class                    */
/*---------------------------------------------------------------------------*/
/*  Can be used to share an image fill definition among several shapes, or   */
/*  as a convenience to maintain an image fill definition separately from a  */
/*  shape.                                                                   */
/*---------------------------------------------------------------------------*/
/**
  *   Creates an image fill specification (shareable by other shapes).
  *   @extends {DvtFill}
  *   @class
  *   @constructor
  *   @param {String} src  image source
  *   @param {dimension} bound  bounding box (x, y, w, h).
  *   @param {String} repeat  specify how background image is repeated.
  *                           valid values: repeat-x, repeat-y, repeat, no-repeat
  */
var DvtImageFill = function(src, bound, repeat)
{
  this._Init(src, bound, repeat);
};


DvtObj.createSubclass(DvtImageFill, DvtFill, 'DvtImageFill');


/**
  *   Returns the bounding box for the image fill as (x, y, w, h).
  *   @type {(x, y, w, h)}
  */
DvtImageFill.prototype.getBound = function()
{
  return this._bound;
};


/**
  *   Returns the image source
  *   @type {String}
  */
DvtImageFill.prototype.getSrc = function()
{
  return this._src;
};


/**
  *   Returns how the image is repeated
  *   @type {String}
  */
DvtImageFill.prototype.getRepeat = function()
{
  return this._repeat;
};


/*---------------------------------------------------------------------------*/
/*     Init()                                                                */
/*---------------------------------------------------------------------------*/
/**
  *  @private
  */
DvtImageFill.prototype._Init = function(src, bound, repeat)
{
  DvtImageFill.superclass._Init.call(this);

  this._src = src;
  this._bound = bound;
  this._repeat = repeat;

};


/**
 * Returns a copy of this object.
 * @return {DvtImageFill}
 */
DvtImageFill.prototype.clone = function()
{
  var o = new DvtImageFill();
  this.mergeProps(o);
  return o;
};

/**
  *   Merges the image fill properties in the current object into the
  *   supplied image fill object.
  *   Used internally by clone().
  *   @private
  */
DvtImageFill.prototype.mergeProps = function(obj)
{
  obj._src = this._src;
  obj._bound = this._bound;
  obj._repeat = this._repeat;

  DvtImageFill.superclass.mergeProps.call(this);
};

/**
 * @override
 */
DvtImageFill.prototype.equals = function(fill) {
  if (fill instanceof DvtImageFill && fill._src == this._src && fill._repeat == this._repeat) {
    if (this._bound && fill._bound && this._bound.x == fill.bound.x && this._bound.y == fill.bound.y &&
        this._bound.w == fill.bound.w && this._bound.h == fill.bound.h)
      return DvtImageFill.superclass.equals.call(this, fill);
    else if (!this._bound && !fill._bound)
      return DvtImageFill.superclass.equals.call(this, fill);
  }

  return false;
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/*---------------------------------------------------------------------------*/
/*    DvtPatternFill            Pattern definition class                     */
/*---------------------------------------------------------------------------*/
/*  Can be used to share a pattern definition among several shapes, or as a  */
/*  convenience to maintain a pattern definition separately from a shape.    */
/*---------------------------------------------------------------------------*/
/**
 *   Creates a pattern specification (shareable by other shapes).
 *   @extends {DvtFill}
 *   @class
 *   @constructor
 *   @param {String} pattern  constant for the type of pattern
 *   @param {String} fillColor  color of the pattern
 *   @param {String} backgroundColor  background color of the pattern
 */
var DvtPatternFill = function(pattern, fillColor, backgroundColor)
{
  this.Init(pattern, fillColor, backgroundColor);
};


DvtObj.createSubclass(DvtPatternFill, DvtFill, 'DvtPatternFill');


/**   @final @type {String}  */
DvtPatternFill.SM_DIAG_UP_LT = 'sDUL';


/**   @final @type {String}  */
DvtPatternFill.LG_DIAG_UP_LT = 'lDUL';


/**   @final @type {String}  */
DvtPatternFill.SM_DIAG_UP_RT = 'sDUR';


/**   @final @type {String}  */
DvtPatternFill.LG_DIAG_UP_RT = 'lDUR';


/**   @final @type {String}  */
DvtPatternFill.SM_CROSSHATCH = 'sC';


/**   @final @type {String}  */
DvtPatternFill.LG_CROSSHATCH = 'lC';


/**   @final @type {String}  */
DvtPatternFill.SM_CHECK = 'sCh';


/**   @final @type {String}  */
DvtPatternFill.LG_CHECK = 'lCh';


/**   @final @type {String}  */
DvtPatternFill.SM_TRIANGLE_CHECK = 'sTCh';


/**   @final @type {String}  */
DvtPatternFill.LG_TRIANGLE_CHECK = 'lTCh';


/**   @final @type {String}  */
DvtPatternFill.SM_DIAMOND_CHECK = 'sDCh';


/**   @final @type {String}  */
DvtPatternFill.LG_DIAMOND_CHECK = 'lDCh';


/**
 *  @protected
 */
DvtPatternFill.prototype.Init = function(pattern, fillColor, backgroundColor)
{
  DvtPatternFill.superclass._Init.call(this);

  this._pattern = (pattern ? DvtPatternFill._convertPatternValue(pattern) : DvtPatternFill.SM_DIAG_UP_LT);
  this._fillColor = (fillColor ? fillColor : '#000000');
  this._backgroundColor = (backgroundColor ? backgroundColor : '#ffffff');
};


/**
 *   Returns the type of pattern
 *   @type {String}
 */
DvtPatternFill.prototype.getPattern = function()
{
  return this._pattern;
};


/**
 *   Returns the color of the pattern
 *   @type {String}
 */
DvtPatternFill.prototype.getColor = function()
{
  return this._fillColor;
};


/**
 *   Returns the background color of the pattern
 *   @type {String}
 */
DvtPatternFill.prototype.getBackgroundColor = function()
{
  return this._backgroundColor;
};

/**
 * Returns a copy of this object.
 * @return {DvtPatternFill}
 */
DvtPatternFill.prototype.clone = function()
{
  var o = new DvtPatternFill();
  this.mergeProps(o);
  return o;
};


/**
 *   Merges the pattern properties in the current object into the supplied
 *   pattern object.
 *   Used internally by clone().
 *   @private
 */
DvtPatternFill.prototype.mergeProps = function(obj)
{
  obj._pattern = this._pattern;
  obj._fillColor = this._fillColor;
  obj._backgroundColor = this._backgroundColor;

  DvtPatternFill.superclass.mergeProps.call(this);
};

/**
 * @override
 */
DvtPatternFill.prototype.equals = function(fill) {
  if (fill instanceof DvtPatternFill && fill._pattern == this._pattern && fill._fillColor == this._fillColor &&
      fill._backgroundColor == this._backgroundColor)
    return DvtPatternFill.superclass.equals.call(this, fill);
  else
    return false;
};

/**
 * Return the transformation matrix applied to this container.
 *  @type {DvtMatrix}
 *  @return transformation matrix
 */
DvtPatternFill.prototype.getMatrix = function() {
  if (this._matrix)
    return this._matrix;

  return new DvtMatrix();
};


/**
 * Set the transformation matrix to apply to this container.
 *  When set, the matrix is locked so that it becomes immutable.
 *  To make changes, clone the matrix, apply changes to it, and then
 *  set the matrix again.
 *  @param {DvtMatrix} mat   The transformation matrix to apply.
 */
DvtPatternFill.prototype.setMatrix = function(mat) {
  this._matrix = mat;

  // Lock the new matrix if it isn't already locked.
  // The same matrix can be set on more than one object irregardless of locking.
  if (this._matrix && !this._matrix.isLocked())
    this._matrix.__lock();


};


/**
 * Returns the pattern constant given the API string name for the pattern.  Returns the unmodified string if the value
 * is already a predefined constant or if it's not recognized.
 * @return {string}
 * @private
 */
DvtPatternFill._convertPatternValue = function(patternStr) {
  if (patternStr == 'smallDiagonalLeft')
    return DvtPatternFill.SM_DIAG_UP_LT;
  else if (patternStr == 'largeDiagonalLeft')
    return DvtPatternFill.LG_DIAG_UP_LT;
  else if (patternStr == 'smallDiagonalRight')
    return DvtPatternFill.SM_DIAG_UP_RT;
  else if (patternStr == 'largeDiagonalRight')
    return DvtPatternFill.LG_DIAG_UP_RT;
  else if (patternStr == 'smallCrosshatch')
    return DvtPatternFill.SM_CROSSHATCH;
  else if (patternStr == 'largeCrosshatch')
    return DvtPatternFill.LG_CROSSHATCH;
  else if (patternStr == 'smallChecker')
    return DvtPatternFill.SM_CHECK;
  else if (patternStr == 'largeChecker')
    return DvtPatternFill.LG_CHECK;
  else if (patternStr == 'smallTriangle')
    return DvtPatternFill.SM_TRIANGLE_CHECK;
  else if (patternStr == 'largeTriangle')
    return DvtPatternFill.LG_TRIANGLE_CHECK;
  else if (patternStr == 'smallDiamond')
    return DvtPatternFill.SM_DIAMOND_CHECK;
  else if (patternStr == 'largeDiamond')
    return DvtPatternFill.LG_DIAMOND_CHECK;
  else
    return patternStr;
};
// Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.
/*---------------------------------------------------------------------------*/
/*    DvtRadialGradientFill       Radial Gradient fill class                 */
/*---------------------------------------------------------------------------*/
/**
  *   Creates a radial gradient specification (shareable by other shapes).
  *   @extends {DvtGradientFill}
  *   @class
  *   <p>
  *   <b>Example usage:</b><br><br><code>
  *
  *   //  Fill a circle with a radial gradient of red to green.<br><br>
  *   circle.setFill(<b>new DvtRadialGradientFill(0, ['red', 'green]</b>) ;<br><br>
  *
  *   //  Fill rectangle with a north-east direction gradient of red to green
  *   with an unequal gradient distribution of colors.<br><br>
  *   rect.setFill(<b>new DvtRadialGradientFill(45, ['red', 'green], [0, 0.75,1]</b>) ;<br><br>

  *   @constructor
  *   @param {number} radius
  *   @param {Array} arColors  An array of color specifications (which do not include alpha values).
  *   @param {Array} arAlphas  An optional array of alpha values (between 0 and 1).  If omitted,
  *                            alphas of 1 are assumed.
  *   @param {Array} arStops   An optional array of stop boundary positions (between 0 and 1).
  *                            If omitted, an equal distribution of colors is assumed.
  *   @param {Number} cx       the radial gradient center x position.
  *   @param {Number} cy       the radial gradient center y position.
  *   @param {Number} r        the radius of the radial gradient.
  *   @param {Array} arBounds  An optional bounding box array (x, y, w, h).
  */
var DvtRadialGradientFill = function(arColors, arAlphas, arStops, cx, cy, r, arBounds)
{
  this._Init(arColors, arAlphas, arStops, cx, cy, r, arBounds);
};

DvtObj.createSubclass(DvtRadialGradientFill, DvtGradientFill, 'DvtRadialGradientFill');


/*---------------------------------------------------------------------------*/
/*    clone()                                                                */
/*---------------------------------------------------------------------------*/
/**
  *  Returns an (unlocked) copy of this object.
  *  @type {DvtRadialGradientFill}
  */
DvtRadialGradientFill.prototype.clone = function()
{
  var o = new DvtRadialGradientFill();

  this.mergeProps(o);    // merge properties into cloned obj.

  return o;
};


/*---------------------------------------------------------------------------*/
/*    getRadius()                                                            */
/*---------------------------------------------------------------------------*/
/**
  *  Returns the radial-gradient radius.
  *  @type {number}
  */
DvtRadialGradientFill.prototype.getRadius = function()
{
  return this._r;
};


/*---------------------------------------------------------------------------*/
/*    getCx()                                                                */
/*---------------------------------------------------------------------------*/
/**
  *  Returns the radial-gradient center x coordinate.
  *  @type {number}
  */
DvtRadialGradientFill.prototype.getCx = function()
{
  return this._cx;
};


/*---------------------------------------------------------------------------*/
/*    getCy()                                                                */
/*---------------------------------------------------------------------------*/
/**
  *  Returns the radial-gradient center y coordinate.
  *  @type {number}
  */
DvtRadialGradientFill.prototype.getCy = function()
{
  return this._cy;
};


/*---------------------------------------------------------------------------*/
/*     Init()                                                                */
/*---------------------------------------------------------------------------*/
/**
  *  @private
  */
DvtRadialGradientFill.prototype._Init = function(arColors, arAlphas, arStops, cx, cy, r, arBounds)
{
  DvtRadialGradientFill.superclass._Init.call(this, arColors, arAlphas, arStops, arBounds);

  this._cx = cx;
  this._cy = cy;
  this._r = r;


};

/**
 * Returns a copy of this object.
 * @return {DvtRadialGradientFill}
 */
DvtRadialGradientFill.prototype.clone = function()
{
  var o = new DvtRadialGradientFill();
  this.mergeProps(o);
  return o;
};

/**
  *   Merges the radial gradient properties in the current object into the
  *   supplied DvtRadialGradientFill object.
  *   Used internally by clone().
  *   @private
  */
DvtRadialGradientFill.prototype.mergeProps = function(obj)
{
  DvtRadialGradientFill.superclass.mergeProps.call(this, obj);

  obj._cx = this._cx;
  obj._cy = this._cy;
  obj._r = this._r;
};

/**
 * @override
 */
DvtRadialGradientFill.prototype.equals = function(fill) {
  if (fill instanceof DvtRadialGradientFill && fill._cx == this._cx && fill._cy == this._cy && fill._r == this._r)
    return DvtRadialGradientFill.superclass.equals.call(this, fill);
  else
    return false;
};
// Copyright (c) 2011, 2015, Oracle and/or its affiliates. All rights reserved.



/**
  *   Selection effect utilities.
  *   @class DvtSelectionEffectUtils
  *   @constructor
  */
var DvtSelectionEffectUtils = {};

DvtObj.createSubclass(DvtSelectionEffectUtils, DvtObj, 'DvtSelectionEffectUtils');


/**
 * Get the border color to use for a selectable marker when the mouse hovers over it.
 * @param {String} color The color of the data marker.
 * @return String The resulting color.
 */
DvtSelectionEffectUtils.getHoverBorderColor = function(color)
{
  return DvtColorUtils.adjustHSL(color, 0, 0, 0.15);
};


/**
 * Apply a draw effect to a given displayable object.
 *
 * @param {DvtDisplayable}  displayable  object to apply draw effect to
 * @param {DvtBaseDrawEffect}  drawEffect  effect to apply
 */
DvtSelectionEffectUtils.applyDrawEffect = function(displayable, drawEffect)
{
  var numEffects = displayable.getNumDrawEffects();
  if (numEffects == 0) {
    displayable.addDrawEffect(drawEffect);
  } else {
    var pos = displayable.getDrawEffectIndex(drawEffect);
    if (pos > -1) {
      displayable.removeDrawEffectAt(pos);
      displayable.addDrawEffectAt(drawEffect, pos);
    } else {
      displayable.addDrawEffect(drawEffect);
    }
  }
};


/**
 * Create a stroke to use when the mouse hovers over a selectable marker.
 *
 * @param {String}  selColor  color of the data marker
 *
 * @type {DvtStroke}
 */
DvtSelectionEffectUtils.createSelectingStroke = function(selColor)
{
  var stroke = new DvtSolidStroke(DvtSelectionEffectUtils.getHoverBorderColor(selColor), 1, 2);
  stroke.setMiterLimit(1); // Set low miter limit to avoid bits sticking out at corners of 3D bars, for example
  return stroke;
};


/**
 * Get the type of cursor to use when the mouse hovers over a selectable marker.
 * @return {string}
 */
DvtSelectionEffectUtils.getSelectingCursor = function()
{
  return 'pointer';
};

// Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.
/*---------------------------------------------------------------------*/
/*    DvtKeyboardFocusEffect     Manages keyboard focus effect         */
/*---------------------------------------------------------------------*/
/**
  *  Creates a rectangular shape that represents keyboard focus
  *  @param {DvtContext} context the rendering context
  *  @param {DvtContainer} displayable a parent container
  *  @param {DvtRectangle} bounds keyboard focus dimensions
  *  @param {DvtMatrix} matrix transformation matrix to apply to the focus effect
  *  @param {string} id  optional id for the focus
  *  @param {boolean} bAppendLast optional argument that specifies a position of the focus effect in the parent container.
  *                   True to add focus effect to the end of the child list. Default is false.
  *  @extends {DvtRect}
  */
var DvtKeyboardFocusEffect = function(context, displayable, bounds, matrix,id, bAppendLast)
{
  this.Init(context, displayable, bounds, matrix, id, bAppendLast);
};

DvtObj.createSubclass(DvtKeyboardFocusEffect, DvtObj, 'DvtKeyboardFocusEffect');

DvtKeyboardFocusEffect.FOCUS_BORDER_RADIUS = 1;
DvtKeyboardFocusEffect.FOCUS_STROKE_WIDTH = 1;
DvtKeyboardFocusEffect.FOCUS_STROKE_ALPHA = 1;
DvtKeyboardFocusEffect.FOCUS_STROKE_TYPE = DvtStroke.DOTTED;


/*---------------------------------------------------------------------*/
/*  Init()                                                             */
/*---------------------------------------------------------------------*/
/**
  *  Object initializer.
  *  @param {DvtContext} context the rendering context
  *  @param {DvtContainer} container a parent container
  *  @param {DvtRectangle} bounds keyboard focus dimensions
  *  @param {DvtMatrix} matrix transformation matrix to apply to the focus effect
  *  @param {string} id  optional id for the focus
  *  @param {boolean} bAppendLast optional argument that specifies a position of the focus effect in the parent container.
  *                   True to add focus effect to the end of the child list. Default is false.
  *  @protected
  */
DvtKeyboardFocusEffect.prototype.Init = function(context, container, bounds, matrix, id, bAppendLast)
{
  this._container = container;
  this._focusEffect = new DvtRect(context, bounds.x, bounds.y, bounds.w, bounds.h, id);

  var stroke = this.CreateStroke();
  this._focusEffect.setStroke(stroke);
  this._focusEffect.setRx(DvtKeyboardFocusEffect.FOCUS_BORDER_RADIUS);
  this._focusEffect.setRy(DvtKeyboardFocusEffect.FOCUS_BORDER_RADIUS);
  if (matrix)
    this._focusEffect.setMatrix(matrix);
  this._focusEffect.setFill(null);
  this._appendLast = bAppendLast;
};


/**
 * Helper function that creates a solid stroke for the focus rectangle
 * @return {DvtSolidStroke} a stroke for the focus rectangle
 * @protected
 */
DvtKeyboardFocusEffect.prototype.CreateStroke = function()
{
  var color = DvtAgent.getFocusColor();
  var width = DvtKeyboardFocusEffect.FOCUS_STROKE_WIDTH;
  var alpha = DvtKeyboardFocusEffect.FOCUS_STROKE_ALPHA;
  var type = DvtKeyboardFocusEffect.FOCUS_STROKE_TYPE;

  if (DvtAgent.isPlatformWebkit()) {
    width = 2;
    type = DvtStroke.SOLID;
  }

  var stroke = new DvtSolidStroke(color,
      alpha,
      width);
  stroke.setType(type, width, width);
  return stroke;
};

DvtKeyboardFocusEffect.prototype.getEffect = function() 
{
  return this._focusEffect;
};

DvtKeyboardFocusEffect.prototype.setEffect = function(effect) 
{
  this._focusEffect = effect;
};

DvtKeyboardFocusEffect.prototype.show = function() {
  if (this._focusEffect instanceof DvtShape) {
    if (!this._appendLast)
      this._container.addChildAt(this._focusEffect, 0);
    else
      this._container.addChild(this._focusEffect);
  }
};

DvtKeyboardFocusEffect.prototype.hide = function() {
  if (this._focusEffect instanceof DvtShape)
    this._container.removeChild(this._focusEffect);
};
// Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.

/**
 * Defines a (w,h) dimension.
 * @class DvtDimension
 * @extends {DvtObj}
 * @constructor
 * @param {number} w The dimension width
 * @param {number} h The dimension height
 * @export
 */
var DvtDimension = function(w, h)
{
  this.Init(w, h);
};


DvtObj.createSubclass(DvtDimension, DvtObj, 'DvtDimension');


/**
 * @param {number} w The dimension width
 * @param {number} h The dimension height
 * @protected
 */
DvtDimension.prototype.Init = function(w, h)
{
  this.w = ((w === null || isNaN(w)) ? 0 : w);
  this.h = ((h === null || isNaN(h)) ? 0 : h);
};


/**
 * Gets the width
 * @return {number} width
 * @export
 */
DvtDimension.prototype.getWidth = function() {
  return this.w;
};


/**
 * Gets the height
 * @return {number} height
 * @export
 */
DvtDimension.prototype.getHeight = function() {
  return this.h;
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.



/**
 *  Creates a matrix object.
 *  @extends {DvtObj}
 *  @class DvtMatrix is a platform independent class representing a transformation
 *  matrix.
 *  <p>
 *  The matrix is in the form:<br>
 *  [ a  b  tx ]<br>
 *  [ c  d  ty ]<br>
 *  [ 0  0  1  ]<br>
 *  <p>
 *  <b>Example:</b><br><br> <code>
  *  var mat = new DvtMatrix(context) ;<br>
 *  mat.translate(15, 30) ;<br>
 *</code>
 *  @constructor
 *  @param {number} a Optional
 *  @param {number} b Optional
 *  @param {number} c Optional
 *  @param {number} d Optional
 *  @param {number} tx Optional
 *  @param {number} ty Optional
 */
var DvtMatrix = function(a, b, c, d, tx, ty) 
{
  //don't allow users to set individual elements, because we
  //may need to adjust transforms for different platforms, for
  //example if the angle of rotation increases in different
  //directions on different platforms, and we don't want to try
  //to deconstruct the matrix
  this.Init(a, b, c, d, tx, ty);
};

DvtObj.createSubclass(DvtMatrix, DvtLockable, 'DvtMatrix');

//   [ a  b  tx ]
//   [ c  d  ty ]
//   [ 0  0  1  ]


/**
 *  @private
 */
DvtMatrix._DECOMP_TX = 0;


/**
 *  @private
 */
DvtMatrix._DECOMP_TY = 1;


/**
 *  @private
 */
DvtMatrix._DECOMP_R = 2;


/**
 *  @private
 */
DvtMatrix._DECOMP_SKEWX = 3;


/**
 *  @private
 */
DvtMatrix._DECOMP_SX = 4;


/**
 *  @private
 */
DvtMatrix._DECOMP_SY = 5;


/**
 * Users should becareful when setting individual elements, because we may need to adjust transforms for different
 * platforms, for example if the angle of rotation increases in different directions on different platforms,
 * and we don't want to try to deconstruct the matrix
 *  @protected
 */
DvtMatrix.prototype.Init = function(a, b, c, d, tx, ty) 
{
  this._a = (a == null) ? 1 : a;
  this._b = (b == null) ? 0 : b;
  this._c = (c == null) ? 0 : c;
  this._d = (d == null) ? 1 : d;
  this._tx = (tx == null) ? 0 : tx;
  this._ty = (ty == null) ? 0 : ty;

  this._u = 0;
  this._v = 0;
  this._w = 1;

  DvtMatrix.superclass._Init.call(this);
};


/**
 *  @protected
 *  Make this matrix the identity matrix.
 */
DvtMatrix.prototype.Identity = function() 
{
  this._a = 1;
  this._b = 0;
  this._c = 0;
  this._d = 1;
  this._tx = 0;
  this._ty = 0;
};


/**
 *  Get the A element of this matrix.
 *  @return {Number}  The A element of this matrix.
 */
DvtMatrix.prototype.getA = function()
{
  return this._a;
};


/**
 *  Get the B element of this matrix.
 *  @return {Number}  The B element of this matrix.
 */
DvtMatrix.prototype.getB = function()
{
  return this._b;
};


/**
 *  Get the C element of this matrix.
 *  @return {Number}  The C element of this matrix.
 */
DvtMatrix.prototype.getC = function()
{
  return this._c;
};


/**
 *  Get the D element of this matrix.
 *  @return {Number}  The D element of this matrix.
 */
DvtMatrix.prototype.getD = function()
{
  return this._d;
};


/**
 *  Get the TX element of this matrix.
 *  @return {Number}  The TX element of this matrix.
 */
DvtMatrix.prototype.getTx = function()
{
  return this._tx;
};


/**
 *  Get the TY element of this matrix.
 *  @return {Number}  The TY element of this matrix.
 */
DvtMatrix.prototype.getTy = function()
{
  return this._ty;
};


/**
 *  Clone this matrix.
 *  @return {DvtMatrix}  A clone of this matrix.
 */
DvtMatrix.prototype.clone = function() 
{
  return new DvtMatrix(this._a, this._b, this._c, this._d, this._tx, this._ty);
};


/**
 *  Concatenate the given matrix with this matrix.
 *  @param {DvtMatrix} mat   The matrix to concatenate with this matrix.
 */
DvtMatrix.prototype.concat = function(mat)
{
  // A * B = B.concat(A) = childMatrix.concat(parentMatrix)

  if (this.isLocked())
  {
    return;
  }

  var newA = this._a * mat._a + this._c * mat._b + this._u * mat._tx;
  var newB = this._b * mat._a + this._d * mat._b + this._v * mat._tx;
  var newTX = this._tx * mat._a + this._ty * mat._b + this._w * mat._tx;

  var newC = this._a * mat._c + this._c * mat._d + this._u * mat._ty;
  var newD = this._b * mat._c + this._d * mat._d + this._v * mat._ty;
  var newTY = this._tx * mat._c + this._ty * mat._d + this._w * mat._ty;

  //var newU = this._a * mat._u + this._c * mat._v + this._u * mat._w;
  //var newV = this._b * mat._u + this._d * mat._v + this._v * mat._w;
  //var newW = this._tx * mat._u + this._ty * mat._v + this._w * mat._w;

  this._a = newA;
  this._b = newB;
  this._c = newC;
  this._d = newD;
  this._tx = newTX;
  this._ty = newTY;
};


/**
 *  Translate this matrix.
 *  @param {Number} dx   The horizontal distance to translate by, in pixels.
 *  @param {Number} dy   The vertical distance to translate by, in pixels.
 */
DvtMatrix.prototype.translate = function(dx, dy)
{
  if (this.isLocked())
  {
    return;
  }

  var tMat = new DvtMatrix();
  tMat._tx = dx;
  tMat._ty = dy;

  this.concat(tMat);
};


/**
 *  Scale this matrix, optionally around a specified point
 *  @param {number} sx   The horizontal value to scale by.
 *  @param {number} sy   The vertical value to scale by.
 *  @param {number} px   The x value of the point to scale around (optional)
 *  @param {number} py   The y value of the point to scale around (optional)
 */
DvtMatrix.prototype.scale = function(sx, sy, px, py)
{
  if (this.isLocked())
  {
    return;
  }

  if (px || py) {
    this.translate(-px, -py);
  }
  var tMat = new DvtMatrix();
  tMat._a = sx;
  tMat._d = sy;

  this.concat(tMat);
  if (px || py) {
    this.translate(px, py);
  }
};


/**
 *  Rotate this matrix.
 *  @param {Number} angleRads   The angle to rotate by, in radians.
 */
DvtMatrix.prototype.rotate = function(angleRads)
{
  if (this.isLocked())
  {
    return;
  }

  var tMat = new DvtMatrix();
  tMat._a = Math.cos(angleRads);
  tMat._d = tMat._a;
  tMat._c = Math.sin(angleRads);
  tMat._b = - tMat._c;

  this.concat(tMat);
};


/**
 *  Skew this matrix.
 *  @param {Number} sxRads   The horizontal angle to skew by, in radians.
 *  @param {Number} syRads   The vertical angle to skew by, in radians.
 */
DvtMatrix.prototype.skew = function(sxRads, syRads)
{
  if (this.isLocked())
  {
    return;
  }

  var tMat = new DvtMatrix();
  tMat._b = Math.tan(sxRads);
  tMat._c = Math.tan(syRads);

  this.concat(tMat);
};


/**
 *  @protected
 *  Calculate the determinant of this matrix.
 *  @return {number} determinant of this matrix
 */
DvtMatrix.prototype.Determinant = function()
{
  var determinant = this._a * (this._d * this._w - this._ty * this._v) -
                    this._b * (this._c * this._w - this._ty * this._u) +
                    this._tx * (this._c * this._v - this._d * this._u);
  return determinant;
};


/**
 *  Invert this matrix.
 */
DvtMatrix.prototype.invert = function()
{
  if (this.isLocked())
  {
    return;
  }

  var determinant = this.Determinant();
  var A = (this._d * this._w - this._ty * this._v);
  var B = (this._tx * this._v - this._b * this._w);
  var TX = (this._b * this._ty - this._tx * this._d);
  var C = (this._ty * this._u - this._c * this._w);
  var D = (this._a * this._w - this._tx * this._u);
  var TY = (this._tx * this._c - this._a * this._ty);
  //var U = (this._c * this._v - this._d * this._u);
  //var V = (this._b * this._u - this._a * this._v);
  //var W = (this._a * this._d - this._b * this._c);

  this._a = A / determinant;
  this._b = B / determinant;
  this._tx = TX / determinant;
  this._c = C / determinant;
  this._d = D / determinant;
  this._ty = TY / determinant;
  //this._u = U / determinant;
  //this._v = V / determinant;
  //this._w = W / determinant;
};


/**
 *  @private
 *  Decompose this matrix into its constituent transforms.
 *  @return {Array} array of transform values in the form
 *           [translateX, translateY, rotationRadians, skewXRadians, scaleX, scaleY],
 *           of null if decomposition doesn't exist
 */
DvtMatrix.prototype._decompose = function()
{
  var A = this._a;
  var B = this._b;
  var C = this._c;
  var D = this._d;
  var Tx = this._tx;
  var Ty = this._ty;

  if (A * D - B * C === 0)
    return null;

  //x scale factor
  var Sx = Math.sqrt(A * A + C * C);
  A = A / Sx;
  C = C / Sx;

  //xy shear
  var K = A * B + C * D;
  B = B - A * K;
  D = D - C * K;

  //y scale factor
  var Sy = Math.sqrt(B * B + D * D);
  B = B / Sy;
  D = D / Sy;
  K = K / Sy;

  var determinant = A * D - B * C;
  if (determinant === -1)
  {
    K = - K;
    Sy = - Sy;
  }

  //rotation
  var R = Math.atan2(C, A);

  //skew
  var skewX = Math.atan(K);

  //to create new matrix with same transforms, use order:
  //1) scale(Sx, Sy)
  //2) skew(skewX, 0);
  //3) rotate(R);
  //4) translate(Tx, Ty);
  return [Tx, Ty, R, skewX, Sx, Sy];
};


/**
 *  @private
 *  Recompose this matrix from the given decomposition.
 *  @param {Array}  arDecomposition  array of transform values returned from
 *         calling decompose()
 */
DvtMatrix.prototype._recompose = function(arDecomposition)
{
  if (this.isLocked())
  {
    return;
  }

  this.Identity();

  var Tx = arDecomposition[0];
  var Ty = arDecomposition[1];
  var R = arDecomposition[2];
  var skewX = arDecomposition[3];
  var Sx = arDecomposition[4];
  var Sy = arDecomposition[5];

  this.scale(Sx, Sy);
  this.skew(skewX, 0);
  this.rotate(R);
  this.translate(Tx, Ty);
};


/**
 *  @private
 *  Determine whether this matrix is equal to another.
 *  @param {DvtMatrix} mat   The matrix to compare with this matrix.
 *  @return {Boolean} True if equal, false if not.
 */
DvtMatrix.prototype.equals = function(mat) {
  if (!this && mat) return false;
  else if (this && !mat) return false;
  else if (!this && !mat) return true;
  else return (this._a == mat._a && this._b == mat._b && this._c == mat._c &&
      this._d == mat._d && this._tx == mat._tx && this._ty == mat._ty);
};


/**
 * Transform a point using this matrix.
 * @param {DvtPoint}  p  point to transform
 * @type {DvtPoint}
 */
DvtMatrix.prototype.transformPoint = function(p)
{
  var newX = this._a * p.x + this._b * p.y + this._tx * 1;
  var newY = this._c * p.x + this._d * p.y + this._ty * 1;
  return new DvtPoint(newX, newY);
};


/**
 * Test if this matrix is an indentity matrix.  Returns true if an identity matrix, else false.
 * @type {boolean}
 */
DvtMatrix.prototype.isIdentity = function()
{
  return (this._a == 1 && this._b == 0 && this._c == 0 && this._d == 1 && this._tx == 0 && this._ty == 0);
};

// Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.

/**
  *  Defines an (x,y) coordinate.
  *  @class DvtPoint
  *  @extends {DvtObj}
  *  @constructor
  *  @param {number} x
  *  @param {number} y
  */

var DvtPoint = function(x,y)
{
  this.Init(x, y);
};


DvtObj.createSubclass(DvtPoint, DvtObj, 'DvtPoint');

DvtPoint.prototype.Init = function(x, y)
{
  this.x = ((x === null || isNaN(x)) ? 0 : x);
  this.y = ((y === null || isNaN(y)) ? 0 : y);
};

/**
 * Compare the coordinates with another DvtPoint
 *
 * @param {DvtPoint} p  point to compare
 * @return {boolean} true if the point has the same coordinates as this
 */
DvtPoint.prototype.equals = function(p)
{
  if (p instanceof DvtPoint &&
      this.x === p.x && this.y === p.y)
    return true;

  return false;
};
// Copyright (c) 2008, 2015, Oracle and/or its affiliates. All rights reserved.



/**
  *  Defines the geometry of a rectangle. Top-left (x,y), and width and height.
  *  @class DvtRectangle
  *  @extends {DvtObj}
  *  @constructor
  *  @param {number} x
  *  @param {number} y
  *  @param {number} w
  *  @param {number} h
  *  @type {DvtRectangle}
  */
var DvtRectangle = function(x,y,w,h)
{
  this.x = ((x === null || isNaN(x)) ? 0 : x);
  this.y = ((y === null || isNaN(y)) ? 0 : y);
  this.w = ((w === null || isNaN(w)) ? 0 : w);
  this.h = ((h === null || isNaN(h)) ? 0 : h);
};

DvtObj.createSubclass(DvtRectangle, DvtObj, 'DvtRectangle');


/**
 * Creates a new DvtRectangle from an array of coordinates.
 * @param {Array} ar  an array of rectangle coordinates, where x = ar[0], y = ar[1], w = ar[2], h = ar[3].
 * @return  {DvtRectangle}
 */
DvtRectangle.create = function(ar)
{
  return new DvtRectangle(ar[0], ar[1], ar[2], ar[3]);
};


/**
 * Returns true if the rectangle contains the given point.
 */
DvtRectangle.prototype.containsPoint = function(nX, nY) 
{
  return (nX >= this.x && nX <= this.x + this.w && nY >= this.y && nY <= this.y + this.h);
};


DvtRectangle.prototype.getCenter = function()
{
  return new DvtPoint(this.x + (this.w / 2.0), this.y + (this.h / 2.0));
};


/**
 * Returns the union of this and the supplied rectangle.
 * @param {DvtRectangle}  rect  the supplied rectangle.
 * @return {DvtRectangle} a new rectangle that is the union of this and the supplied rectangle.
 */
DvtRectangle.prototype.getUnion = function(rect) 
{
  var u = new DvtRectangle();

  if (rect && rect.w !== 0 && rect.h !== 0) {  // ignore zero size rect's
    if (this.w !== 0 && this.h !== 0) {        //  ..     ..   ..    ..
      var thisR = this.x + this.w;             // this right
      var thisB = this.y + this.h;             // this bottom
      var rectR = rect.x + rect.w;             // rect right
      var rectB = rect.y + rect.h;             // rect bottom

      var minx = Math.min(this.x, rect.x);
      var miny = Math.min(this.y, rect.y);

      u.w = (thisR < rectR) ? (rectR - minx) : (thisR - minx);
      u.h = (thisB > rectB) ? (thisB - miny) : (rectB - miny);
      u.x = minx;
      u.y = miny;
    }
    else {
      u.x = rect.x;
      u.y = rect.y;
      u.w = rect.w;
      u.h = rect.h;
    }
  }
  else {
    u.x = this.x;
    u.y = this.y;
    u.w = this.w;
    u.h = this.h;
  }

  return u;
};


/**
 * Grow this rectangle to include the given coordinates.
 * @param {number}  xx  x coordinate
 * @param {number}  yy  y coordinate
 */
DvtRectangle.prototype.grow = function(xx, yy) 
{
  var minX = this.x;
  var minY = this.y;
  var maxX = this.x + this.w;
  var maxY = this.y + this.h;

  if (xx < minX) {
    minX = xx;
  }
  if (xx > maxX) {
    maxX = xx;
  }
  if (yy < minY) {
    minY = yy;
  }
  if (yy > maxY) {
    maxY = yy;
  }
  this.x = minX;
  this.y = minY;
  this.w = maxX - minX;
  this.h = maxY - minY;
};


/**
 * Returns true if the rectangle intersectes the supplied rectangle.
 * @param {DvtRectangle}  rect  the supplied rectangle.
 */
DvtRectangle.prototype.intersects = function(rect) 
{
  if (rect && rect.w !== 0 && rect.h !== 0) {  // ignore zero size rect's
    if (this.w !== 0 && this.h !== 0) {        //  ..     ..   ..    ..
      var thisR = this.x + this.w;             // this right
      var thisB = this.y + this.h;             // this bottom
      var rectR = rect.x + rect.w;             // rect right
      var rectB = rect.y + rect.h;             // rect bottom

      return !(rect.x > thisR || rectR < this.x || rect.y > thisB || rectB < this.y);
    }
  }
  return false;
};


/**
 * Returns a clone of itself.
 * @return {DvtRectangle} Its clone.
 */
DvtRectangle.prototype.clone = function() {
  return new DvtRectangle(this.x, this.y, this.w, this.h);
};

/**
 * Return true if the specified object is equal to this one.
 * @param {object} obj
 * @return {boolean}
 */
DvtRectangle.prototype.equals = function(obj) {
  return (obj instanceof DvtRectangle) && this.x == obj.x && this.y == obj.y && this.w == obj.w && this.h == obj.h;
};

/**
 * @override
 */
DvtRectangle.prototype.toString = function() {
  return this.x + ', ' + this.y + ', ' + this.w + ', ' + this.h;
};
// Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.
/*-------------------------------------------------------------------------*/
/*  DvtGeomUtils()       Utility geometry functions                        */
/*-------------------------------------------------------------------------*/

var DvtGeomUtils = {};

DvtObj.createSubclass(DvtGeomUtils, DvtObj, 'DvtGeomUtils');

DvtGeomUtils.getCenterPoint = function(rect) {
  return new DvtPoint(rect.x + rect.w / 2, rect.y + rect.h / 2);
};

DvtGeomUtils.intersects = function(rect1, rect2) {
  if (rect1.x > rect2.x + rect2.w || rect1.x + rect1.w < rect2.x || rect1.y > rect2.y + rect2.h || rect1.y + rect1.h < rect2.y)
    return false;
  return true;
};

DvtGeomUtils.getPaddedRectangle = function(rect, buffer) {
  return DvtGeomUtils.getSpecificPaddedRectangle(rect, buffer, buffer, buffer, buffer);
};

DvtGeomUtils.getSpecificPaddedRectangle = function(rect, bufferTop, bufferBottom, bufferLeft, bufferRight) {
  return new DvtRectangle(rect.x - bufferLeft, rect.y - bufferTop, rect.w + bufferLeft + bufferRight, rect.h + bufferTop + bufferBottom);
};

DvtGeomUtils.GetOffsetValues = function(objBounds, containerBounds, padding) {
  var offsetY = 0;
  var lowerY = objBounds.y;
  var higherY = objBounds.y + objBounds.h;
  if (lowerY < padding) {
    offsetY += padding - lowerY;
  } else if (higherY > containerBounds.h - padding) {
    offsetY += containerBounds.h - padding - higherY;
  }

  // Adjust position of box depending on stage bounds
  var lowerX = objBounds.x;
  var higherX = objBounds.x + objBounds.w;

  var offsetX = 0;
  if (lowerX < padding) {
    offsetX += padding - lowerX;
  } else if (higherX > containerBounds.w - padding) {
    offsetX += containerBounds.w - padding - higherX;
  }
  return {offsetX: offsetX, offsetY: offsetY};
};
// Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.
/*-------------------------------------------------------------------------*/
/*  DvtLineUtils()       Utility functions for lines                       */
/*-------------------------------------------------------------------------*/

var DvtLineUtils = {};

DvtObj.createSubclass(DvtLineUtils, DvtObj, 'DvtLineUtils');


/**
 * Computes the point of intersection of two lines in the same plane.
 * @param   {DvtPoint} p1 end point on line 1
 * @param   {DvtPoint} p2 other end point on line 1
 * @param   {DvtPoint} p3 end point on line 2
 * @param   {DvtPoint} p4 other end point on line 2
 * @param   {DvtPoint} pt optional DvtPoint object that will be updated with the
 *                     point of intersection.  If omitted, a new DvtPoint will be created
 *                     and returned.
 * @return {DvtPoint} the point of intersection. If null is returned, then either
 *                     the lines are parallel, or both of the lines have a zero length.
 */
DvtLineUtils.intersect2Lines = function(p1, p2, p3, p4, pt)
{
  //  Using Penner's Method

  var x1 = p1.x;
  var y1 = p1.y;
  var x4 = p4.x;
  var y4 = p4.y;
  var dx1 = p2.x - x1;            // the x diff
  var dx2 = p3.x - x4;            //  .. ..  ..

  if (dx1 === 0 && dx2 === 0)     // both lines vertical? (i.e. undefined slope)
    return null;

  var m1 = (p2.y - y1) / dx1;
  var m2 = (p3.y - y4) / dx2;

  if (m1 === m2)                  // both lines parallel?
    return null;

  if (! pt) {
    pt = new DvtPoint();        // return value
  }

  if (dx1 === 0) {
    pt.x = x1;
    pt.y = (m2 * (x1 - x4) + y4);
    return pt;
  }
  else if (dx2 === 0) {
    pt.x = x4;
    pt.y = (m1 * (x4 - x1) + y1);
    return pt;
  }

  var xInt = (-m2 * x4 + y4 + m1 * x1 - y1) / (m1 - m2);
  var yInt = m1 * (xInt - x1) + y1;

  pt.x = xInt;
  pt.y = yInt;
  return pt;
};


/**
  * Returns the length of a line segment with end points (x1, y1) and (x2, y2).
  * @param {number} x1  endpoint x
  * @param {number} y1  endpoint y
  * @param {number} x2  other endpoint x
  * @param {number} y2  other endpoint y
  * @return {number}   the length of the line segment with end points (x1, y1) and (x2, y2).
  */
DvtLineUtils.lineLen = function(x1, y1, x2, y2)
{
  var dx = (x2 - x1);
  var dy = (y2 - y1);
  return Math.sqrt((dx * dx) + (dy * dy));
};


/**
* Returns the midpoint (x,y) of a line segment with end points (x1,y1) and (x2,y2).
* @param {number}   x1 end point x.
* @param {number}   y1 end point y.
* @param {number}   x2 other end point x
* @param {number}   y2 other end point y.
* @param {DvtPoint} pt optional DvtPoint object that will be updated with the mid-point.
*                   If omitted, a new DvtPoint will be created.
* @return (DvtPoint} the midpoint (x,y) of the line segment in the supplied DvtPoint,
*                     or a new DvtPoint if not supplied.
*/
DvtLineUtils.midPt = function(x1, y1, x2, y2, pt)
{
  if (! pt) {
    pt = new DvtPoint();
  }
  pt.x = (x1 + x2) / 2;
  pt.y = (y1 + y2) / 2;
  return pt;
};

// Copyright (c) 2013, 2014, Oracle and/or its affiliates. All rights reserved.

var DvtVectorUtils = {};

DvtObj.createSubclass(DvtVectorUtils, DvtObj, 'DvtVectorUtils');


/**
 * Creates a vector from the origin to the specified coordinate
 *
 * @param {number} x the x coordinate of the vector
 * @param {number} y the y coordinate of the vector
 * @return {object} an object with x and y properties representing the vector
 */
DvtVectorUtils.createVector = function(x, y) {
  var v = {};
  v.x = x;
  v.y = y;
  return v;
};


/**
 * Adds two vectors
 *
 * @param {object} v1 an object with x and y properties representing the first addend
 * @param {object} v2 an object with x and y properties representing the second addend
 * @return {object} an object with x and y properties representing the sum
 */
DvtVectorUtils.addVectors = function(v1, v2) {
  return DvtVectorUtils.createVector(v1.x + v2.x, v1.y + v2.y);
};


/**
 * Subtracts two vectors
 *
 * @param {object} v1 an object with x and y properties representing the minuend
 * @param {object} v2 an object with x and y properties representing the subtrahend
 * @return {object} an object with x and y properties representing the difference
 */
DvtVectorUtils.subtractVectors = function(v1, v2) {
  return DvtVectorUtils.createVector(v1.x - v2.x, v1.y - v2.y);
};


/**
 * Scales a vector
 *
 * @param {object} v an object with x and y properties representing the vector
 * @param {number} s the scalar by which to scale the vector
 * @return {object} an object with x and y properties representing the scaled vector
 */
DvtVectorUtils.scaleVector = function(v, s) {
  return DvtVectorUtils.createVector(v.x * s, v.y * s);
};


/**
 * Scales a vector
 *
 * @param {object} v an object with x and y properties representing the vector
 * @return {number} the magnitude of the vector
 */
DvtVectorUtils.getMagnitude = function(v) {
  return Math.sqrt(v.x * v.x + v.y * v.y);
};
/**
 *  A static class for chart layout.
 *  @class DvtLayoutUtils
 *  @constructor
*/
var DvtLayoutUtils = function()
{};

DvtObj.createSubclass(DvtLayoutUtils, DvtObj, 'DvtLayoutUtils');


/**
 * Positions the specified displayable in the available space.
 * @param {DvtRectangle} availSpace The available space.
 * @param {string} position The position within the available space.  Valid values are "top", "bottom", "left", "right", "start", "end".
 * @param {DvtDisplayable} displayable The displayable to be positioned.
 * @param {number} width The width of the displayable.
 * @param {number} height The height of the displayable.
 * @param {number} gap The gap to leave between the displayable and other content.  This gap is applied only if
 *                     the displayable's area is greater than 0.
 */
DvtLayoutUtils.position = function(availSpace, position, displayable, width, height, gap) {
  if (!displayable)
    return;

  // Adjust the gap if the displayable has no area
  gap = (width * height > 0) ? gap : 0;

  if (position == 'start')
    position = DvtAgent.isRightToLeft(displayable.getCtx()) ? 'right' : 'left';
  else if (position == 'end')
    position = DvtAgent.isRightToLeft(displayable.getCtx()) ? 'left' : 'right';

  if (position == 'top') {
    displayable.setTranslate(availSpace.x + availSpace.w / 2 - width / 2, availSpace.y);
    availSpace.y += (height + gap);
    availSpace.h -= (height + gap);
  }
  else if (position == 'bottom') {
    displayable.setTranslate(availSpace.x + availSpace.w / 2 - width / 2, availSpace.y + availSpace.h - height);
    availSpace.h -= (height + gap);
  }
  else if (position == 'left') {
    displayable.setTranslate(availSpace.x, availSpace.y + availSpace.h / 2 - height / 2);
    availSpace.x += (width + gap);
    availSpace.w -= (width + gap);
  }
  else if (position == 'right') {
    displayable.setTranslate(availSpace.x + availSpace.w - width, availSpace.y + availSpace.h / 2 - height / 2);
    availSpace.w -= (width + gap);
  }
};


/**
 * Aligns the specified displayable in the available space.
 * @param {DvtRectangle} availSpace The available space.
 * @param {string} position The position within the available space.  Valid values are "start", "center", and "end".
 * @param {DvtDisplayable} displayable The displayable to be positioned.
 * @param {number} width The width of the displayable.
 */
DvtLayoutUtils.align = function(availSpace, align, displayable, width) {
  if (!displayable)
    return;

  // Account for the locale and find the position
  var position = align;
  if (position == 'start')
    position = DvtAgent.isRightToLeft(displayable.getCtx()) ? 'right' : 'left';
  else if (position == 'end')
    position = DvtAgent.isRightToLeft(displayable.getCtx()) ? 'left' : 'right';

  // Align the text
  if (position == 'left')
    displayable.setX(availSpace.x);
  else if (position == 'center')
    displayable.setX(availSpace.x + availSpace.w / 2 - width / 2);
  else if (position == 'right')
    displayable.setX(availSpace.x + availSpace.w - width);
};
// Copyright (c) 2008, 2015, Oracle and/or its affiliates. All rights reserved.
/**
 * Defines miscellaneous math constants and utilities.
 * @class DvtMath
 */
var DvtMath = new Object();

DvtObj.createSubclass(DvtMath, DvtObj, 'DvtMath');

/**
 *  Number of radians in 1 degree.
 *  @type {number}
 *  @const
 */
DvtMath.RADS_PER_DEGREE = (Math.PI / 180);

/**
 *  Number of degrees in 1 radian.
 *  @type {number}
 *  @const
 */
DvtMath.DEGREES_PER_RAD = (180 / Math.PI);

/**
 *  Twice value of Pi radians.
 *  @type {number}
 *  @const
 */
DvtMath.TWO_PI = (Math.PI * 2);

/**
 *  Half the value of Pi radians.
 *  @type {number}
 *  @const
 */
DvtMath.HALF_PI = (Math.PI / 2);

/**
 *  One quarter the value of Pi radians.
 *  @type {number}
 *  @const
 */
DvtMath.QUARTER_PI = (Math.PI / 4);

/**
 *  Fudge factor deal with floating point rounding error
 *  @type {number}
 *  @const
 */
DvtMath.TOLERANCE = 0.1;

/**
 * Cantor pairing function. Uniquely encodes two positive natural numbers (a, b) into a single natural number.
 * @param {number} a
 * @param {number} b
 * @return {number}
 */
DvtMath.cantorPairing = function(a, b) {
  if (a < 0 || b < 0)// works for non-negative integers only!
    return - 1;

  return (a + b) * (a + b + 1) / 2 + a;
};

/**
 * Converts degrees to radians.
 * @param {number} deg The value in degrees to be converted.
 * @return {number}
 */
DvtMath.degreesToRads = function(deg) {
  return (deg * DvtMath.RADS_PER_DEGREE);
};

/**
 * Converts radians to degrees.
 * @param {number} rad The value in radians to be converted.
 * @return {number}
 */
DvtMath.radsToDegrees = function(rad) {
  return (rad * DvtMath.DEGREES_PER_RAD);
};

/**
 * Interpolate a number between the original and destination values for the given percent.
 * @param {number} origVal The original value
 * @param {number} destVal The destination value
 * @param {number} percent The percent value to interpolate
 * @return {number}
 */
DvtMath.interpolateNumber = function(origVal, destVal, percent) {
  return (origVal + percent * (destVal - origVal));
};

/**
 * Returns the log base 10 of the value.
 * @param {number} value
 * @return {number}
 */
DvtMath.log10 = function(value) {
  return Math.log(value) / Math.LN10;
};
/**
 * 2D map implementation for use in improving performance.  Alternate implementation options may be added in
 * the future as needed.
 * @class DvtMap2D
 * @extends {DvtObj}
 * @constructor
 */
var DvtMap2D = function() {
  this.Init();
};

DvtObj.createSubclass(DvtMap2D, DvtObj, 'DvtMap2D');

/**
 * Initializes the map and its underlying data structures.
 */
DvtMap2D.prototype.Init = function() {
  this._map = {};
};

/**
 * Retrieves the value corresponding to the keys from the map.
 * @param {object} keyA
 * @param {object} keyB
 * @return {object}
 */
DvtMap2D.prototype.get = function(keyA, keyB) {
  return this._getInnerMap(keyA)[keyB];
};

/**
 * Stores the value corresponding to the keys in the map.
 * @param {object} keyA
 * @param {object} keyB
 * @param {object} value
 * @return {object} The previous value, if one existed.
 */
DvtMap2D.prototype.put = function(keyA, keyB, value) {
  var innerMap = this._getInnerMap(keyA);
  var oldValue = innerMap[keyB];
  innerMap[keyB] = value;
  return oldValue;
};

/**
 * Returns the inner map corresponding to the specified key, creating it if necessary.
 * @param {object} keyA
 * @return {object} The inner map.
 * @private
 */
DvtMap2D.prototype._getInnerMap = function(keyA) {
  var innerMap = this._map[keyA];
  if (!innerMap) {
    innerMap = {};
    this._map[keyA] = innerMap;
  }
  return innerMap;
};
/**
 * A specialized map used for tracking whether a set of pixel coords has been drawn to.
 * @param {number=} scale The scale factor determining how many pixels in each direction the map coords correspond to.
 *                         Defaults to 1 if not specified. The scale factor must be an exact multiple of the inner map's
 *                         scale factor.
 * @param {DvtPixelMap=} innerMap A map with smaller scale factor.
 * @class DvtPixelMap
 * @extends {DvtMap2D}
 * @constructor
 */
var DvtPixelMap = function(scale, innerMap) {
  this.Init(scale, innerMap);
};

DvtObj.createSubclass(DvtPixelMap, DvtMap2D, 'DvtPixelMap');

/**
 * Initializes the map and its underlying data structures.
 * @param {number=} scale The scale factor determining how many pixels in each direction the map coords correspond to.
 *                         Defaults to 1 if not specified. The scale factor must be an exact multiple of the inner map's
 *                         scale factor.
 * @param {DvtPixelMap=} innerMap A map with smaller scale factor.
 */
DvtPixelMap.prototype.Init = function(scale, innerMap) {
  DvtPixelMap.superclass.Init.call(this);

  // Store the inner map and add the outer map reference back to this.
  this._innerMap = innerMap;
  if (this._innerMap) {
    this._innerMap._outerMap = this;
    this._innerMap._bOuterMap = true;
  }

  // Store the scale and cache capacity.
  this._scale = scale || 1;
  this._capacity = this._scale * this._scale;

  // Cache the presence of inner and outer maps, since they are checked frequently.
  this._bInnerMap = (this._innerMap != null);
  this._bOuterMap = false; // set to true if passed to an outer map.
};

/**
 * Returns true if the specified coordinates are fully obscured.
 * @param {number} x1
 * @param {number} y1
 * @param {number} x2
 * @param {number} y2
 * @return {boolean}
 */
DvtPixelMap.prototype.isObscured = function(x1, y1, x2, y2) {
  // Evaluate the scaled areas to determine whether the coords are obscured.
  var scaledX1 = this._adjustForScale(x1);
  var scaledY1 = this._adjustForScale(y1);
  var scaledX2 = this._adjustForScale(x2);
  var scaledY2 = this._adjustForScale(y2);
  for (var xCoord = scaledX1; xCoord <= scaledX2; xCoord++) {
    for (var yCoord = scaledY1; yCoord <= scaledY2; yCoord++) {
      // Check this map's information. If known to be obscured, search the next area.
      var pixelValue = this.get(xCoord, yCoord);
      if (pixelValue !== true) {
        // Not known to be obscured, check the inner map.
        if (this._bInnerMap) {
          var innerX1 = Math.max(x1, xCoord * this._scale);
          var innerY1 = Math.max(y1, yCoord * this._scale);
          var innerX2 = Math.min(x2, ((xCoord + 1) * this._scale) - 1);
          var innerY2 = Math.min(y2, ((yCoord + 1) * this._scale) - 1);
          if (!this._innerMap.isObscured(innerX1, innerY1, innerX2, innerY2))
            return false;
        }
        else // no inner map, not obscured.
          return false;
      }
    }
  }
  // If not obscured, would've returned false earlier.
  return true;
};

/**
 * Obscures the specified coordinates.
 * @param {number} x1
 * @param {number} y1
 * @param {number} x2
 * @param {number} y2
 * @param {number} alpha The amount of the pixel to obscure.
 */
DvtPixelMap.prototype.obscure = function(x1, y1, x2, y2, alpha) {
  // Evaluate the scaled segments to determine whether the coords are obscured.
  var scaledX1 = this._adjustForScale(x1);
  var scaledY1 = this._adjustForScale(y1);
  var scaledX2 = this._adjustForScale(x2);
  var scaledY2 = this._adjustForScale(y2);
  for (var xCoord = scaledX1; xCoord <= scaledX2; xCoord++) {
    for (var yCoord = scaledY1; yCoord <= scaledY2; yCoord++) {
      // Check this map's information. If not known to be obscured, check the inner maps.
      var pixelValue = this.get(xCoord, yCoord);
      if (pixelValue !== true) {
        if (this._bInnerMap) {
          var innerX1 = Math.max(x1, xCoord * this._scale);
          var innerY1 = Math.max(y1, yCoord * this._scale);
          var innerX2 = Math.min(x2, ((xCoord + 1) * this._scale) - 1);
          var innerY2 = Math.min(y2, ((yCoord + 1) * this._scale) - 1);
          this._innerMap.obscure(innerX1, innerY1, innerX2, innerY2, alpha);
        }
        else {
          // No inner map, increment. The scale should always be 1 here.
          this._increment(xCoord, yCoord, alpha);
        }
      }
    }
  }
};

/**
 * Increments the map for the specified coordinates.
 * @param {number} x The unscaled x coordinate.
 * @param {number} y The unscaled y coordinate.
 * @param {number} incr The amount to increment.
 * @private
 */
DvtPixelMap.prototype._increment = function(x, y, incr) {
  // First adjust the coordinates for this map's scale.
  var scaledX = this._adjustForScale(x);
  var scaledY = this._adjustForScale(y);

  // Increment the value. If value is greater than capacity, store as true (occupied).
  var value = this.get(scaledX, scaledY);
  value = (value != null) ? value + incr : incr;
  if (value >= this._capacity)
    value = true;

  // Update the map.
  this.put(scaledX, scaledY, value);

  // If at capacity, update the outer map.
  if (value === true && this._bOuterMap)
    this._outerMap._increment(x, y, this._capacity);
};

/**
 * Returns the scaled value for the specified coordinate.
 * @param {number} coord The unscaled coordinate.
 * @return {number}
 * @private
 */
DvtPixelMap.prototype._adjustForScale = function(coord) {
  return Math.floor(coord / this._scale);
};
/**
 * @constructor
 * property map
 */
var DvtPropMap = function() {
  this.Init();
};

DvtPropMap.REGEXP = new RegExp('#\\{([^\\}]*)\\}', 'g');


/**
 * make DvtPropMap a subclass of DvtObj
 */
DvtObj.createSubclass(DvtPropMap, DvtObj, 'DvtPropMap');


/**
 * Initializes the instance.
 */
DvtPropMap.prototype.Init = function() {
  //Note: there is no Init method in superclass
  // DvtPropMap.superclass.Init.call(this);
  this._props = {};
};


/*-------------------------------------------------------------------------*/
/*   AfComponent properties                                                */
/*-------------------------------------------------------------------------*/
DvtPropMap.prototype.getProperty = function(propName) {
  return this._props[propName];
};

DvtPropMap.prototype.setProperty = function(propName, val) {
  this._props[propName] = val;
};


DvtPropMap.prototype.getStringProp = function(propName, defString) {
  var val = this._props[propName];
  return val ? val : defString;
};


/**
 * Returns boolean value of the specified property
 * @param {string} propName  property name
 * @param {boolean} defBool default value
 * @return {boolean} boolean value of the specified property
 */
DvtPropMap.prototype.getBooleanProp = function(propName, defBool) {
  var val = this._props[propName];
  var ret = defBool;
  if (typeof val === 'boolean')
    ret = val;
  else if (val === 0)
    ret = false;
  else if (val === 1)
    ret = true;
  else if (typeof val === 'string')
    ret = (val.toLowerCase() === 'true' || val.toLowerCase() === 'yes' || val.toLowerCase() === 'on');

  return ret;
};

DvtPropMap.prototype.getIntegerProp = function(propName, defInt) {
  var val = this._props[propName];
  var ret;
  if (val)
    ret = parseInt(val);
  return (ret) ? ret : defInt;
};

DvtPropMap.prototype.getFloatProp = function(propName, defFloat) {
  var val = this._props[propName];
  var ret;
  if (val)
    ret = parseFloat(val);
  return (ret) ? ret : defFloat;
};


/**
 * Returns the id of this component.
 * @type {String}
 */
DvtPropMap.prototype.getId = function() {
  return this.getProperty('id');
};


/**
 * Set the id of this component.
 * @param {String} id  ID for the component
 */
DvtPropMap.prototype.setId = function(id) {
  this.setProperty('id', id);
};


/**
 * set a list of properties
 * @param {NamedNodeMap} attributes array
 */
DvtPropMap.prototype.setProperties = function(attrArray) {
  for (var i = 0; i < attrArray.length; i++) {
    var attr = attrArray[i];
    if (attr.name && attr.value !== undefined) {
      this.setProperty(attr.name, attr.value);
    }
  }
};


/*-------------------------------------------------------------------------*/
/*   stamp                                                                 */
/*-------------------------------------------------------------------------*/


/**
 * Stamp out this template object only.
 * @param {} elcontext EL binding context
 * @return {DvtAfComponent} a new DvtAfComponent tree
 */
DvtPropMap.prototype.stamp = function(elcontext) {

  // create a new DvtAfComponent object of the same type
  var result = new this.constructor();

  // copy properties
  var newProps = {};
  //   var regexp = /#{([^\}]*)}/g;
  for (var attr in this._props) {
    //TODO: test for string
    if (this._props[attr] && this._props[attr].replace) {
      newProps[attr] = this._props[attr].replace(DvtPropMap.REGEXP,
          function(str, bindVar) {
            if (elcontext && elcontext[bindVar] !== undefined) {
              return elcontext[bindVar];
            }
            return str;
          }
          );
    } else {
      newProps[attr] = this._props[attr];
    }
  }

  result._props = newProps;
  return result;
};


/**
 * Convert an attribute array of a EL node to an EL context object
 * @param {DvtXmlNode} xmlNode The EL xml node
 */
DvtPropMap.toELContext = function(xmlNode) {
  var arr = xmlNode.getAttributes();
  var prop;
  var obj = {};
  for (var i = 0; i < arr.length; i++) {
    prop = arr[i];
    obj[prop.name] = prop.value;
  }
  return obj;
};

// Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.

/**
 * usage
 * DvtImageLoader.loadImage("pic.png", function(image) {
 *   alert(image.width);
 *   alert(image.height);
 * });
 *
 */


/**
 * DvtImageLoader
 */
var DvtImageLoader = {};

DvtObj.createSubclass(DvtImageLoader, DvtObj, 'DvtImageLoader');


/**
 * Load an image.
 *
 * @param {DvtContext} context The context object
 * @param src URL of the image to load
 * @param onComplete function to call when the image is loaded
 *
 * @return image if image is already loaded and onComplete
 *         function is null, otherwise null
 */
DvtImageLoader.loadImage = function(context, src, onComplete) {

  var loader = context.getImplFactory().getImageLoader();
  return loader.loadImage(src, onComplete);

};


// Copyright (c) 2012, 2016, Oracle and/or its affiliates. All rights reserved.


/**
 * JSON utilities.
 * @class
 * @export
 */
var DvtJSONUtils = new Object();

DvtObj.createSubclass(DvtJSONUtils, DvtObj, 'DvtJSONUtils');


/**
 * Returns a deep clone of the object.
 * @param {object} obj The object to clone.
 * @param {function} keyFunc An optional boolean-valued function that will be called for each key.  If the function returns false, the key will not be copied over
 * @return {object} The clone.
 * @export
 */
DvtJSONUtils.clone = function(obj, keyFunc) {
  if (obj == null)
    return null;
  var ret = null;

  if (obj instanceof Array) {
    ret = [];

    // Loop through and copy the Array
    for (var i = 0; i < obj.length; i++) {
      if (DvtJSONUtils._isDeepClonable(obj[i])) // deep clone objects
        ret[i] = DvtJSONUtils.clone(obj[i], keyFunc);
      else // copy values
        ret[i] = obj[i];
    }
  }
  else if (obj instanceof DvtCSSStyle) {
    ret = obj.clone();
  }
  else if (obj instanceof Date) { // convert Date to time millis
    ret = obj.getTime();
  }
  else if (obj instanceof Object) {
    ret = {};

    // Loop through all properties of the object
    for (var key in obj) {
      if (!keyFunc || keyFunc(key)) {
        var value = obj[key];
        if (DvtJSONUtils._isDeepClonable(value) && key != '_widgetConstructor') // deep clone objects
          ret[key] = DvtJSONUtils.clone(value, keyFunc);
        else // copy values
          ret[key] = value;
      }
    }
  }

  return ret;
};


/**
 * Returns a new object with the merged properties of the given objects.  Properties
 * in the first object take precedence.
 * @param {object} a
 * @param {object} b
 * @return {object} A new object containing the merged properties.
 * @export
 */
DvtJSONUtils.merge = function(a, b) {
  // Clone so that contents aren't modified
  var one = DvtJSONUtils.clone(a);
  var two = DvtJSONUtils.clone(b);
  if (one == null)
    return two;
  else if (two == null)
    return one;
  else {
    DvtJSONUtils._copy(one, two);
    return two;
  }
};


/**
 * Copys the properties from the first object onto the second.
 * @param {object} a The source of the properties to copy.
 * @param {object} b The destination of the copied properties.
 * @private
 */
DvtJSONUtils._copy = function(a, b) {
  for (var key in a) {
    var value = a[key];
    if ((value && (value instanceof Array)) || key == '_widgetConstructor') {
      // Copy the array over, since we don't want arrays to be merged
      // We also don't want the widget constructor to be copied/cloned
      b[key] = value;
    }
    else if (b[key] && (b[key] instanceof DvtCSSStyle)) {
      // If an object is defined as CSS in the base object, merge the CSS
      if (value instanceof DvtCSSStyle)
        b[key].merge(value);
      else // value is String
        b[key].merge(new DvtCSSStyle(value));
    }
    else if (DvtJSONUtils._isDeepClonable(value)) {
      // Deep clone if object exists in b, copy otherwise
      if (b[key])
        DvtJSONUtils._copy(value, b[key]);
      else
        b[key] = value;
    }
    else
      b[key] = value;
  }
};


/**
 * Checks the type of an object and returns whether it is deep clonable
 * @param {Object} obj The object to check the type of
 * @return {boolean} Whether the object is deep clonable
 * @private
 */
DvtJSONUtils._isDeepClonable = function(obj) {
  if (typeof obj == 'undefined')
    return false;
  else
    return (obj instanceof Object) && !(obj instanceof Boolean) && !(obj instanceof String) && !(obj instanceof Number) && !(obj instanceof Function) && !(obj.then);
};
/**
 * Abstract class for wrapper classes for native DOM events.
 * Internal events like DvtScrollEvent/DvtResizeEvent that do not wrap native DOM events should not extend this class.
 * @constructor
 */
var DvtBaseEvent = function() {};

DvtObj.createSubclass(DvtBaseEvent, DvtObj, 'DvtBaseEvent');


/**
 * Object initializer
 * @param {Object} event The native event
 * @protected
 */
DvtBaseEvent.prototype.Init = function(event)
{
  this.type = event.type;
  // Find the DvtObj corresponding to the event target
  this.target = DvtBaseEvent.FindDisplayable(event.target);
  this._isPropagationStopped = false;
  this._event = event;
};


/**
 * Returns the native event that we are wrapping
 * @return {Object} The native event that we are wrapping
 */
DvtBaseEvent.prototype.getNativeEvent = function() {
  return this._event;
};


/**
 * Prevents the default browser action that the native event would have triggered
 */
DvtBaseEvent.prototype.preventDefault = function() {
  if (this._event.cancelable)
    this._event.preventDefault();
};


/**
 * Stops propagation of the native event in the browser's event bubbling phase.
 */
DvtBaseEvent.prototype.stopPropagation = function() {
  if (this._event.stopPropagation)
    this._event.stopPropagation();
  this._event.cancelBubble = true;
  this._event.cancel = true;
  this._event.returnValue = false;
  this._isPropagationStopped = true;
};


/**
 * Checks whether event propagation was stopped
 * @return {boolean}
 */
DvtBaseEvent.prototype.isPropagationStopped = function() {
  return this._isPropagationStopped;
};


/**
 * Returns the event type for this event.
 * @return {string} The event type for this event.
 * @export
 */
DvtBaseEvent.prototype.getType = function() {
  return this.type;
};

/**
 * Given an SVG DOM target, returns the corresponding DvtDisplayable.
 * @param {DOMElement} target The original DOM element target
 * @return {DvtDisplayable} The corresponding displayable, if any.
 * @protected
 */
DvtBaseEvent.FindDisplayable = function(target) {
  while (target) {
    // If this object has a displayable, return it
    if (target._obj && target._obj.getObj && target._obj.getObj())
      return target._obj.getObj();
    else // Otherwise look at the parent
      target = target.parentNode;
  }

  return null;
};
/**
 * Base class for component level events.
 * @class The base class for component level events.
 * @constructor
 * @export
 */
var DvtBaseComponentEvent = function() {};

DvtObj.createSubclass(DvtBaseComponentEvent, DvtObj, 'DvtBaseComponentEvent');


DvtBaseComponentEvent.CLIENT_ROW_KEY = 'clientRowKey';


/**
 * @param {string} type The event type for this event.
 * @protected
 */
DvtBaseComponentEvent.prototype.Init = function(type) {
  this._type = type;
};


/**
 * Returns the event type for this event.
 * @return {string} The event type for this event.
 * @export
 */
DvtBaseComponentEvent.prototype.getType = function() {
  return this._type;
};


/**
 * Return a list of additional parameter keys
 * @return {array} paramKeys additional parameter keys
 * @export
 */
DvtBaseComponentEvent.prototype.getParamKeys = function() {
  return this._paramKeys;
};


/**
 * Return a list of additional parameter values
 * @return {array} paramValues additional parameter values
 */
DvtBaseComponentEvent.prototype._getParamValues = function() {
  return this._paramValues;
};


/**
 * Add an additional parameter (key, value) to this event (ex clientRowKey)
 * @param {String} paramKey parameter key
 * @param {String} paramValue parameter value
 */
DvtBaseComponentEvent.prototype.addParam = function(paramKey, paramValue) {
  if (! this._paramKeys) {
    this._paramKeys = [];
    this._paramValues = [];
  }

  this._paramKeys.push(paramKey);
  this._paramValues.push(paramValue);
};


/**
 * Get parameter value in this event
 * @param {String} paramKey parameter key
 * @return {String} paramValue parameter value
 * @export
 */
DvtBaseComponentEvent.prototype.getParamValue = function(paramKey) {
  if (! paramKey || ! this._paramKeys || ! this._paramValues) {
    return null;
  }

  var index = -1;
  for (var i = 0; i < this._paramKeys.length; i++) {
    if (this._paramKeys[i] == paramKey) {
      index = i;
      break;
    }
  }

  if (index != -1) {
    return this._paramValues[index];
  }

  return null;
};




// Copyright (c) 2014, 2016, Oracle and/or its affiliates. All rights reserved.
/**
 * @constructor
 * Platform independent class for Focus Events. This class roughly follows the DOM Level 3 API.
 * @param {FocusEvent} event The native FocusEvent
 */
var DvtFocusEvent = function(event) 
{
  this.Init(event);
};

DvtObj.createSubclass(DvtFocusEvent, DvtBaseEvent, 'DvtFocusEvent');

/**
 * Focus event key
 */
DvtFocusEvent.FOCUS = DvtObj.defineConstant('focus');
/**
 * Focus in event key
 */
DvtFocusEvent.FOCUSIN = DvtObj.defineConstant('focusin');
/**
 * Focus out event key
 */
DvtFocusEvent.FOCUSOUT = DvtObj.defineConstant('focusout');
/**
 * Blur event key
 */
DvtFocusEvent.BLUR = DvtObj.defineConstant('blur');

/**
 * Object initializer.
 * @param {FocusEvent} event The native FocusEvent
 * @protected
 */
DvtFocusEvent.prototype.Init = function(event)
{
  DvtFocusEvent.superclass.Init.call(this, event);
  this.bubbles = event.bubbles;
  this.cancelable = event.cancelable;
  this.view = event.view;
  // Find the DvtObj corresponding to the event target
  if (event.relatedTarget != null)
    this.relatedTarget = DvtBaseEvent.FindDisplayable(event.relatedTarget);
};
/**
 * Platform independent class for Keyboard Events.
 * @constructor
 * @param {KeyboardEvent} event The DOM KeyboardEvent
 */
var DvtKeyboardEvent = function(event)
{
  this.Init(event);
};

DvtObj.createSubclass(DvtKeyboardEvent, DvtBaseEvent, 'DvtKeyboardEvent');

// Constants for keyboard event types
//: indirectly assign the value so the closure compiler will abbreviate references to the constant

/** Key down event type **/
DvtKeyboardEvent.KEYDOWN = DvtObj.defineConstant('keydown');
/** Key up event type **/
DvtKeyboardEvent.KEYUP = DvtObj.defineConstant('keyup');

/** Key press event type **/
DvtKeyboardEvent.KEYPRESS = DvtObj.defineConstant('keypress');

/** Tab key **/
DvtKeyboardEvent.TAB = 9;
/** Enter key **/
DvtKeyboardEvent.ENTER = 13;
/** Shift key **/
DvtKeyboardEvent.SHIFT = 16;
/** Control key **/
DvtKeyboardEvent.CONTROL = 17;
/** HOME key code **/
DvtKeyboardEvent.HOME = 36;
/** END key code **/
DvtKeyboardEvent.END = 35;
/** Escape key **/
DvtKeyboardEvent.ESCAPE = 27;
/** Space key **/
DvtKeyboardEvent.SPACE = 32;
/** Page up key **/
DvtKeyboardEvent.PAGE_UP = 33;
/** Page down key **/
DvtKeyboardEvent.PAGE_DOWN = 34;
/** Up arrow key **/
DvtKeyboardEvent.UP_ARROW = 38;
/** Down arrow key **/
DvtKeyboardEvent.DOWN_ARROW = 40;
/** Delete key **/
DvtKeyboardEvent.DELETE = 46;
/** Left arrow key **/
DvtKeyboardEvent.LEFT_ARROW = 37;
/** Right arrow key **/
DvtKeyboardEvent.RIGHT_ARROW = 39;
/** Open bracket key **/
DvtKeyboardEvent.OPEN_BRACKET = 219;
/** Close bracket key **/
DvtKeyboardEvent.CLOSE_BRACKET = 221;
/** Back slash key **/
DvtKeyboardEvent.BACK_SLASH = 220;
/** Forward slash key **/
DvtKeyboardEvent.FORWARD_SLASH = 191;
/** Standard 0 key code **/
DvtKeyboardEvent.ZERO = 48;
/** Numpad 0 key code **/
DvtKeyboardEvent.NUMPAD_ZERO = 96;
/** Standard 1 key code **/
DvtKeyboardEvent.ONE = 49;
/**  Numpad 1 key code **/
DvtKeyboardEvent.NUMPAD_ONE = 97;
/** Standard 2 key code **/
DvtKeyboardEvent.TWO = 50;
/** Numpad 2 key code **/
DvtKeyboardEvent.NUMPAD_TWO = 98;
/** Standard 3 key code **/
DvtKeyboardEvent.THREE = 51;
/** Numpad 3 key code **/
DvtKeyboardEvent.NUMPAD_THREE = 99;
/** Standard 4 key code **/
DvtKeyboardEvent.FOUR = 52;
/** Numpad 4 key code **/
DvtKeyboardEvent.NUMPAD_FOUR = 100;
/** Standard 5 key code **/
DvtKeyboardEvent.FIVE = 53;
/** Numpad 5 key code **/
DvtKeyboardEvent.NUMPAD_FIVE = 101;
/** Standard 6 key code **/
DvtKeyboardEvent.SIX = 54;
/** Plus key **/
DvtKeyboardEvent.NUMPAD_PLUS = 107;
/** Minus key **/
DvtKeyboardEvent.NUMPAD_MINUS = 109;
/** Chrome/safari plus key **/
DvtKeyboardEvent.WEBKIT_PLUS = 187;
/** Chrome/safari minus key **/
DvtKeyboardEvent.WEBKIT_MINUS = 189;
/** Firefox plus key **/
DvtKeyboardEvent.GECKO_PLUS = 61;
/** Firefox minus key **/
DvtKeyboardEvent.GECKO_MINUS = 173;
/** Chrome/Safari Semicolon key code **/
DvtKeyboardEvent.WEBKIT_SEMICOLON = 186;
/** Firefox Semicolon key code **/
DvtKeyboardEvent.GECKO_SEMICOLON = 59;
/** Key code for letter A key **/
DvtKeyboardEvent.A = 65;
/** Key code for letter F key **/
DvtKeyboardEvent.F = 70;
/** Key code for letter L key **/
DvtKeyboardEvent.L = 76;
/** Key code for letter M key **/
DvtKeyboardEvent.M = 77;
/** Key code for letter N key **/
DvtKeyboardEvent.N = 78;
/** Period key **/
DvtKeyboardEvent.PERIOD = 190;
/** Numpad period key **/
DvtKeyboardEvent.NUMPAD_PERIOD = 110;
/** Single quote key **/
DvtKeyboardEvent.SINGLE_QUOTE = 222;
/** Star key **/
DvtKeyboardEvent.STAR = 56;
/** Numpad star key **/
DvtKeyboardEvent.NUMPAD_STAR = 144;
/** Open angled bracket key **/
DvtKeyboardEvent.OPEN_ANGLED_BRACKET = 188;
/** Closed angled bracket key **/
DvtKeyboardEvent.CLOSE_ANGLED_BRACKET = 190;
/** Grave accent key **/
DvtKeyboardEvent.GRAVE_ACCENT = 192;

/**
 * Object initializer.  This essentially mirrors the DOM initKeyboardEvent() API
 * @param {KeyboardEvent} event The DOM KeyboardEvent
 * @protected
 */
DvtKeyboardEvent.prototype.Init = function(event) {
  DvtKeyboardEvent.superclass.Init.call(this, event);
  this.bubbles = event.bubbles;
  this.cancelable = event.cancelable;
  this.view = event.view;
  this.charCode = event.charCode;
  this.keyCode = event.keyCode;
  this.location = event.location;
  this.ctrlKey = event.ctrlKey || event.metaKey; //treat the meat key same as ctrl;
  this.altKey = event.altKey;
  this.shiftKey = event.shiftKey;
  this.repeat = event.repeat;
  this.locale = event.locale;
};


/**
 * Utility method that returns true if the keyboard event is a plus keystroke. Handy because keycodes differ
 * across different render kits
 * @param {DvtKeyboardEvent} event
 * @return {Boolean} true if the event is a "+" keystroke
 */
DvtKeyboardEvent.isPlus = function(event)
{
  var keyCode = event.keyCode;
  if (keyCode == DvtKeyboardEvent.NUMPAD_PLUS)
    return true;

  if (DvtAgent.isPlatformGecko())
  {
    // special case for Gecko/Firefox
    if (keyCode == DvtKeyboardEvent.GECKO_PLUS && event.shiftKey)
      return true;
    else
      return false;
  }
  else
  {
    if (keyCode == DvtKeyboardEvent.WEBKIT_PLUS && event.shiftKey)
      return true;
    else
      return false;
  }
  return false;
};


/**
 * Utility method that returns true if the keyboard event is a equals keystroke. Handy because keycodes differ
 * across different render kits
 * @param {DvtKeyboardEvent} event
 * @return {Boolean} true if the event is a "+" keystroke
 */
DvtKeyboardEvent.isEquals = function(event)
{
  var keyCode = event.keyCode;

  if (DvtAgent.isPlatformGecko())
  {
    // special case for Gecko/Firefox
    if (keyCode == DvtKeyboardEvent.GECKO_PLUS && !event.shiftKey)
      return true;
    else
      return false;
  }
  else
  {
    if (keyCode == DvtKeyboardEvent.WEBKIT_PLUS && !event.shiftKey)
      return true;
    else
      return false;
  }
  return false;
};


/**
 * Utility method that returns true if the keyboard event is a minus keystroke. Handy because keycodes differ
 * across different render kits
 * @param {DvtKeyboardEvent} event
 * @return {Boolean} true if the event is a "-" keystroke
 */
DvtKeyboardEvent.isMinus = function(event)
{
  var keyCode = event.keyCode;

  if (keyCode == DvtKeyboardEvent.NUMPAD_MINUS)
    return true;

  if (DvtAgent.isPlatformGecko())
  {
    // special case for Gecko/Firefox
    if (keyCode == DvtKeyboardEvent.GECKO_MINUS && !event.shiftKey)
      return true;
    else
      return false;
  }
  else
  {
    if (keyCode == DvtKeyboardEvent.WEBKIT_MINUS && !event.shiftKey)
      return true;
    else
      return false;
  }
  return false;
};


/**
 * Utility method that returns true if the keyboard event is an underscore keystroke. Handy because keycodes differ
 * across different render kits
 * @param {DvtKeyboardEvent} event
 * @return {Boolean} true if the event is a "_" keystroke
 */
DvtKeyboardEvent.isUnderscore = function(event)
{
  var keyCode = event.keyCode;

  if (DvtAgent.isPlatformGecko())
  {
    // special case for Gecko/Firefox
    if (keyCode == DvtKeyboardEvent.GECKO_MINUS && event.shiftKey)
      return true;
    else
      return false;
  }
  else
  {
    if (keyCode == DvtKeyboardEvent.WEBKIT_MINUS && event.shiftKey)
      return true;
    else
      return false;
  }
  return false;
};
/**
 * Utility method that returns true if the keyboard event is a semicolon keystroke. Handy because keycodes differ
 * across different render kits
 * @param {DvtKeyboardEvent} event
 * @return {Boolean} true if the event is a ";" keystroke
 */
DvtKeyboardEvent.isSemicolon = function(event)
{
  var keyCode = event.keyCode;
  if (DvtAgent.isPlatformGecko())
  {
    // special case for Gecko/Firefox
    return keyCode == DvtKeyboardEvent.GECKO_SEMICOLON;
  }
  else
  {
    return keyCode == DvtKeyboardEvent.WEBKIT_SEMICOLON;
  }
};
/**
 * @constructor
 * Wrapper class for Mouse Events.  This class roughly follows the DOM Level 2 API.
 * @param {MouseEvent} event The DOM MouseEvent
 */
var DvtMouseEvent = function(event) 
{
  this.Init(event);
};

DvtObj.createSubclass(DvtMouseEvent, DvtBaseEvent, 'DvtMouseEvent');

// Constants for mouse event types
//: indirectly assign the value so the closure compiler will abbreviate references to the constant
/** @const **/
DvtMouseEvent.CLICK = DvtObj.defineConstant('click');
/** @const **/
DvtMouseEvent.DBLCLICK = DvtObj.defineConstant('dblclick');
/** @const **/
DvtMouseEvent.MOUSEOVER = DvtObj.defineConstant('mouseover');
/** @const **/
DvtMouseEvent.MOUSEOUT = DvtObj.defineConstant('mouseout');
/** @const **/
DvtMouseEvent.MOUSEDOWN = DvtObj.defineConstant('mousedown');
/** @const **/
DvtMouseEvent.MOUSEUP = DvtObj.defineConstant('mouseup');
/** @const **/
DvtMouseEvent.MOUSEMOVE = DvtObj.defineConstant('mousemove');
/** @const **/
DvtMouseEvent.MOUSEWHEEL = DvtObj.defineConstant('wheel');

/** @const **/
DvtMouseEvent.RIGHT_CLICK_BUTTON = 2;


/**
 * Object initializer. This essentially mirrors the DOM initMouseEvent() API
 * @param {MouseEvent} event The DOM MouseEvent
 * @protected
 */
DvtMouseEvent.prototype.Init = function(event) {
  DvtMouseEvent.superclass.Init.call(this, event);
  // Find the DvtObj corresponding to the event target
  if (event.relatedTarget != null)
    this.relatedTarget = DvtBaseEvent.FindDisplayable(event.relatedTarget);

  // Copy the remaining information
  this.button = event.button;
  this.ctrlKey = event.ctrlKey || event.metaKey;
  this.shiftKey = event.shiftKey;
  this.pageX = event.pageX;
  this.pageY = event.pageY;
  //: Flag indicates if the event is modified for Internet Explorer
  this._isEventModifiedForIE = false;

  if (event.wheelDeltaY != null)
    this.wheelDelta = event.wheelDeltaY / 40;
  else if (event.deltaY != null) {
    this.deltaMode = event.deltaMode;
    this.deltaY = event.deltaY;

    // Approximate the wheel delta from the deltaY and deltaMode
    if (event.deltaMode == event.DOM_DELTA_LINE)
      this.wheelDelta = -event.deltaY;
    else if (event.deltaMode == event.DOM_DELTA_PIXEL)
      this.wheelDelta = -event.deltaY / 15;
  }
  else if (event.wheelDelta != null)
    this.wheelDelta = event.wheelDelta / 40;
  else
    this.wheelDelta = event.detail;
};

/**
 * Modify the event for IE with the new event type and new target element
 * @param {string} newType  New MouseEvent type
 * @param {DOMElement} newTargetElement  New SVG DOM Target Element
 */
DvtMouseEvent.prototype.modifyEventForIE = function(newType, newTargetElement) {
  //: Set the event type as newType, relatedTarget as current target and target as displayable of newTargetElement
  //This will target the event to newTargetElement and change the event type
  //Modify the event target only once because every DvtMouseEvent instance has unique native event.
  //Doing this more than once will make relatedTarget and target same as displayable of newTargetElement
  if (!this._isEventModifiedForIE) {
    this.type = newType;
    this.relatedTarget = this.target;
    this.target = DvtBaseEvent.FindDisplayable(newTargetElement);
    this._isEventModifiedForIE = true;
  }
};
/**
 * Wrapper class for Touch Events.
 * @param {TouchEvent} event The DOM TouchEvent
 * @constructor
 */
var DvtTouchEvent = function(event) {
  this.Init(event);
};

DvtObj.createSubclass(DvtTouchEvent, DvtBaseEvent, 'DvtTouchEvent');

// Constants for touch event types
//: indirectly assign the value so the closure compiler will abbreviate references to the constant
/** @const **/
DvtTouchEvent.TOUCHSTART = DvtObj.defineConstant('touchstart');
/** @const **/
DvtTouchEvent.TOUCHMOVE = DvtObj.defineConstant('touchmove');
/** @const **/
DvtTouchEvent.TOUCHEND = DvtObj.defineConstant('touchend');
/** @const **/
DvtTouchEvent.TOUCHCANCEL = DvtObj.defineConstant('touchcancel');

/**
 * @param {TouchEvent} event The DOM TouchEvent
 * @protected
 */
DvtTouchEvent.prototype.Init = function(event) {
  DvtTouchEvent.superclass.Init.call(this, event);
  // Convert touchcancel to touchend
  if (event.type == DvtTouchEvent.TOUCHCANCEL) {
    this.type = DvtTouchEvent.TOUCHEND;
  }
  this.touches = DvtTouchEvent.createTouchArray(event.touches);
  this.targetTouches = DvtTouchEvent.createTouchArray(event.targetTouches);
  this.changedTouches = DvtTouchEvent.createTouchArray(event.changedTouches);

  this._touchManager = null;
};

/**
 * Blocks a touch hold event
 */
DvtTouchEvent.prototype.blockTouchHold = function() {
  this.getNativeEvent()._touchHoldBlocked = true;
};

/**
 * Returns true if this is the initial touch event
 * @return {boolean}
 */
DvtTouchEvent.prototype.isInitialTouch = function() {
  return (this.touches.length - this.changedTouches.length) == 0;
};

/**
 * Returns true if a touch hold event has been blocked and false otherwise.
 * @return {boolean}
 */
DvtTouchEvent.prototype.isTouchHoldBlocked = function() {
  return (this.getNativeEvent()._touchHoldBlocked) ? true : false;
};

/**
 * Creates an array of DvtTouchEvents from native TouchEvents
 * @param {Array} nativeTouchArray The array of native touch events
 * @return {Array}
 */
DvtTouchEvent.createTouchArray = function(nativeTouchArray) {
  var touches = new Array();
  for (var i = 0; i < nativeTouchArray.length; i++) {
    var nativeTouch = nativeTouchArray[i];
    var touch = new DvtTouch(nativeTouch);
    touches.push(touch);
  }
  return touches;
};

/**
 * Prevents further propagation of the current event
 */
DvtTouchEvent.prototype.stopPropagation = function() {
  DvtTouchEvent.superclass.stopPropagation.call(this);
  if (this._touchManager)
    this._touchManager.postEventBubble(this);
};


/**
 * Sets a touch manager object
 * @param {DvtTouchManager} touchManager The touch manager object for the event
 */
DvtTouchEvent.prototype.setTouchManager = function(touchManager) {
  this._touchManager = touchManager;
};
/**
 * @constructor
 * Wrapper class providing access to a Touch.
 * @extends {DvtObj}
 * @class DvtTouch
 * <p>The supported fields are:
 * <ul>
 * <li>clientX</li>
 * <li>clientY</li>
 * <li>screenX</li>
 * <li>screenY</li>
 * <li>pageX</li>
 * <li>pageY</li>
 * <li>target</li>
 * <li>identifier</li>
 * </ul>
 * <p>
 */
var DvtTouch = function(touch) {
  this.Init(touch);
};

DvtObj.createSubclass(DvtTouch, DvtObj, 'DvtTouch');


/**
 * @protected
 * @param {Touch} the DOM Touch
 */
DvtTouch.prototype.Init = function(touch) {
  this.clientX = touch.clientX;
  this.clientY = touch.clientY;
  this.screenX = touch.screenX;
  this.screenY = touch.screenY;
  this.pageX = touch.pageX;
  this.pageY = touch.pageY;
  this.target = touch.target;
  this.identifier = (touch.identifier == null || isNaN(touch.identifier)) ? 1 : touch.identifier;
};
/**
 * @constructor
 * Keeps track of the current state of touches and fires higher-level logical events
 * @extends {DvtObj}
 * @class DvtTouchManager
 */
var DvtTouchManager = function(id, context) {
  this.Init(id, context);
};

DvtObj.createSubclass(DvtTouchManager, DvtObj, 'DvtTouchManager');

DvtTouchManager.TOUCH_MODE = 'mode';
DvtTouchManager.TOUCH_MODE_DEFAULT = 'defaultMode';
DvtTouchManager.TOUCH_MODE_LONG_PRESS = 'longPressMode';

DvtTouchManager.PREV_HOVER_OBJ = 'prevHoverObj';

DvtTouchManager.HOVER_TOUCH_KEY = 'hoverTouch';


/**
 * @protected
 * Helper method called by the constructor to initialize this object.
 * @param {string} id Id for the this TouchManager instance
 * @param {DvtContext} context An application specific context
 */
DvtTouchManager.prototype.Init = function(id, context) {
  this._context = context;
  this._id = id;

  // Total number of touches on the screen
  this._touchCount = 0;

  // Single timer for touch hold
  this._touchHoldTimer = new DvtTimer(this._context, 200, this._handleTouchHoldStartTimer, this);
  this._blockTouchHold = false;

  // Stored mapping for history information on touches
  this._touchMap = new Object();

  // Save information on touches which are already associated with listeners
  this._savedTouchInfo = new Array();

  // internal listener to translate to hover
  this._addTouchHoldMoveEventListener(this._onTouchHoldHover, this);

  // Single timer for double tap
  // We are using 600 ms because 300ms is too fast in VoiceOver mode to recognize the second tap.
  // Do not change this value without checking VoiceOver.
  this._doubleTapTimer = new DvtTimer(this._context, 600, this._handleDoubleTapTimer, this, 1);

  // DvtTouch event
  this._dvtTouchEvent = null;

};


/**
 * Block touch hold event. We might want to prevent touch hold during zoom oparation.
 */
DvtTouchManager.prototype.blockTouchHold = function() {
  this._stopTouchHoldTimer();
  this._blockTouchHold = true;
};


/**
 * Releases touch hold block.
 */
DvtTouchManager.prototype.unblockTouchHold = function() {
  this._blockTouchHold = false;
};

DvtTouchManager.prototype._addTouchHoldMoveEventListener = function(listener, obj) {
  this.addTouchEventListener(DvtComponentTouchEvent.TOUCH_HOLD_START_TYPE, listener, obj);
  this.addTouchEventListener(DvtComponentTouchEvent.TOUCH_HOLD_MOVE_TYPE, listener, obj);
  this.addTouchEventListener(DvtComponentTouchEvent.TOUCH_HOLD_END_TYPE, listener, obj);
};


/**
 * Internal touch hold listener to translate to hover events
 * @private
 * @param {DvtComponentTouchEvent} evt A touch hold event.
 */
DvtTouchManager.prototype._onTouchHoldHover = function(evt) {
  var type = evt.getType();
  var touch = evt.touch;
  var nativeEvt = evt.getNativeEvent();

  var info = this._touchMap[touch.identifier];

  var obj = evt.target;
  if (type == DvtComponentTouchEvent.TOUCH_HOLD_END_TYPE) {
    var hoverEvt = new DvtComponentTouchEvent(DvtComponentTouchEvent.TOUCH_HOVER_END_TYPE, touch, obj, null, nativeEvt);
    hoverEvt._isCancelEvent = this._isCancelEvent;

    if (obj != null)
      this.FireListener(new DvtComponentTouchEvent(DvtComponentTouchEvent.TOUCH_HOVER_OUT_TYPE, touch, obj, null, nativeEvt));
    info[DvtTouchManager.PREV_HOVER_OBJ] = null;

    this.FireListener(hoverEvt);
  } else if (type == DvtComponentTouchEvent.TOUCH_HOLD_START_TYPE) {
    info[DvtTouchManager.PREV_HOVER_OBJ] = null;
    if (obj != null)
      this.FireListener(new DvtComponentTouchEvent(DvtComponentTouchEvent.TOUCH_HOVER_OVER_TYPE, touch, obj, null, nativeEvt));
    info[DvtTouchManager.PREV_HOVER_OBJ] = obj;

    this.FireListener(new DvtComponentTouchEvent(DvtComponentTouchEvent.TOUCH_HOVER_START_TYPE, touch, obj, null, nativeEvt));
  } else if (type == DvtComponentTouchEvent.TOUCH_HOLD_MOVE_TYPE) {
    this._fireHoverOverOutEvents(obj, info[DvtTouchManager.PREV_HOVER_OBJ], touch, nativeEvt);
    info[DvtTouchManager.PREV_HOVER_OBJ] = obj;
    this.FireListener(new DvtComponentTouchEvent(DvtComponentTouchEvent.TOUCH_HOVER_MOVE_TYPE, touch, obj, null, nativeEvt));

  }
};

DvtTouchManager.prototype._getObjFromTouch = function(touch) {
  var obj = null;

  if (touch) {
    // If the rendering impl doesn't define document utils for finding the element at a point, don't continue
    var documentUtils = this._context.getDocumentUtils();
    if (documentUtils) {
      obj = documentUtils.elementFromTouch(touch);
    }
  }
  return obj;
};

/**
 * @private
 * Fire logical hover events
 * @param {object} currentObj  Current element that triggered the event
 * @param {object} prevHoverObj  Previous element that triggered the event
 * @param {DvtTouch} touch A single point of contact with the surface
 * @param {TouchEvent} nativeEvt  Native touch event
 */
DvtTouchManager.prototype._fireHoverOverOutEvents = function(currentObj, prevHoverObj, touch, nativeEvt) {
  if (prevHoverObj != currentObj) {
    if (prevHoverObj != null)
      this.FireListener(new DvtComponentTouchEvent(DvtComponentTouchEvent.TOUCH_HOVER_OUT_TYPE, touch, prevHoverObj, currentObj, nativeEvt));
    if (currentObj != null)
      this.FireListener(new DvtComponentTouchEvent(DvtComponentTouchEvent.TOUCH_HOVER_OVER_TYPE, touch, currentObj, prevHoverObj, nativeEvt));
  }
};


/**
 * Adds an event listener.
 * @param {string} type One of the DvtComponentTouchEvent types
 * @param {function} listener Listener to add
 * @param {object} obj Optional object on which the listener function is defined
 */
DvtTouchManager.prototype.addTouchEventListener = function(type, listener, obj) {
  // Store a reference to the listener
  var listenersArray = this._getListeners(type, true);
  listenersArray.push(listener);
  listenersArray.push(obj);
};


/**
 * Removes an event listener.
 * @param {string} type One of the DvtComponentTouchEvent types
 * @param {function} listener Listener to remove
 * @param {object} obj Optional object on which the listener function is defined
 */
DvtTouchManager.prototype.removeTouchEventListener = function(type, listener, obj) {
  // Remove the listener
  var listenersArray = this._getListeners(type, false);
  if (listenersArray) {
    for (var i = 0; i < listenersArray.length; i += 2) {
      if (listenersArray[i] === listener &&
          listenersArray[i + 1] === obj) {
        listenersArray.splice(i, 2);
        break;
      }
    }
  }
};


/**
 * Returns the listeners of the given event type and capture mode.
 **/
DvtTouchManager.prototype._getListeners = function(type, createNew) {
  // First find the object where the listener arrays are stored
  if (!this._listenerObj) {
    if (createNew) {
      this._listenerObj = {
      };
    }
    else {
      return null;
    }
  }

  // Then find the array for this event type, creating if necessary
  var eventKey = type;
  var listenersArray = this._listenerObj[eventKey];
  if (!listenersArray && createNew) {
    listenersArray = [];
    this._listenerObj[eventKey] = listenersArray;
  }

  return listenersArray;
};


/**
 * Notifies all applicable event listeners of the given event.
 **/
DvtTouchManager.prototype.FireListener = function(event) {
  var listenersArray = this._getListeners(event.getType(), false);
  if (listenersArray) {
    for (var i = 0; i < listenersArray.length; i += 2) {
      var obj = listenersArray[i + 1];
      listenersArray[i].call(obj, event);
    }
  }
};

/**
 * Start touch hold
 * @param {DvtTouchEvent} evt  Wrapper for the native event
 */
DvtTouchManager.prototype.startTouchHold = function(evt) {
  var touchid = this._startSingleFingerTouchId;
  if (touchid != null && !isNaN(touchid)) {
    var info = this._touchMap[touchid];
    if (info) {

      var touchStartObj = info['startTarget'];
      var startTouch = info['startTouch'];
      var nativeEvt = evt.getNativeEvent();

      // If there are any immediate touches for this id, end it since touch hold has started
      var matches = this._findMatches('touchId', touchid);
      for (var i = 0; i < matches.length; i++) {
        var savedInfo = matches[i];
        var touchObj = savedInfo['touchObj'];
        var touchId = savedInfo['touchId'];
        if (touchObj != DvtTouchManager.HOVER_TOUCH_KEY) {
          var touchInfo = this.getTouchInfo(touchId);
          var touch = touchInfo['startTouch'];
          this.performAssociatedTouchEnd(touch, touchObj, null);
        }
      }

      // Save mode on touch
      info[DvtTouchManager.TOUCH_MODE] = DvtTouchManager.TOUCH_MODE_LONG_PRESS;
      this.saveProcessedTouch(touchid, DvtTouchManager.HOVER_TOUCH_KEY, null, DvtTouchManager.HOVER_TOUCH_KEY, DvtTouchManager.HOVER_TOUCH_KEY, this.HoverMoveInternal, this.HoverEndInternal, this);

      var touchHoldStartEvent = new DvtComponentTouchEvent(DvtComponentTouchEvent.TOUCH_HOLD_START_TYPE, startTouch, touchStartObj, null, nativeEvt);
      this.FireListener(touchHoldStartEvent);

    }
  }
};

/**
 * Execute listeners for logical events.
 * Note that there is no way to bubble logical events in the framework at the moment
 * @param {DvtTouchEvent} touchEvent  Dvt touch event
 */
DvtTouchManager.prototype.fireLogicalEvents = function(touchEvent) {
  var type = touchEvent.type;
  var nativeEvent = touchEvent.getNativeEvent();
  if (type == DvtTouchEvent.TOUCHSTART) {
    if (!touchEvent.isTouchHoldBlocked()) {
      this.processAssociatedTouchAttempt(touchEvent, DvtTouchManager.HOVER_TOUCH_KEY, this.HoverStartInternal, this);
    }
    if (this._doubleTapAttemptStarted) {
      touchEvent.preventDefault();
    }
  } else if (type == DvtTouchEvent.TOUCHMOVE) {
    this.processAssociatedTouchMove(touchEvent, DvtTouchManager.HOVER_TOUCH_KEY);
  } else if (type == DvtTouchEvent.TOUCHEND) {
    this.processAssociatedTouchEnd(touchEvent, DvtTouchManager.HOVER_TOUCH_KEY);
  }

  if (type == DvtTouchEvent.TOUCHEND) {
    var changedTouches = this._getStoredTouches(touchEvent.changedTouches);
    for (var i = 0; i < changedTouches.length; i++) {
      var touch = changedTouches[i];
      var identifier = touch.identifier;
      var info = this.getTouchInfo(identifier);

      var targetObj = info['currentObj'];

      if (info[DvtTouchManager.TOUCH_MODE] != DvtTouchManager.TOUCH_MODE_LONG_PRESS) {
        if (info['fireClick']) {
          var touchClickEvt = new DvtComponentTouchEvent(DvtComponentTouchEvent.TOUCH_CLICK_TYPE, touch, targetObj, null, nativeEvent);
          touchClickEvt.touchEvent = touchEvent;
          this.FireListener(touchClickEvt);

          if (this._doubleTapAttemptStarted) {
            var prevTapObj = this._doubleTapAttemptObj;
            this.resetDoubleTap();
            if (targetObj == prevTapObj) {
              var touchDblClickEvt = new DvtComponentTouchEvent(DvtComponentTouchEvent.TOUCH_DOUBLE_CLICK_TYPE, touch, targetObj, null, nativeEvent);
              touchDblClickEvt.touchEvent = touchEvent;
              this.FireListener(touchDblClickEvt);
            }
          } else {
            this.resetDoubleTap();
            this._doubleTapTimer.start();
            this._doubleTapAttemptStarted = true;
            this._doubleTapAttemptObj = targetObj;
          }
        }
      }
    }
  }
};

DvtTouchManager.prototype.getTouchInfo = function(touchId) {
  return this._touchMap[touchId];
};


/**
 * Handler for the touch event. Starts timer for the potential hover event.
 * @param {DvtTouchEvent} event Wrapper for the native event
 * @param {DvtTouch} touch Touch object for the event
 * @protected
 */
DvtTouchManager.prototype.HoverStartInternal = function(event, touch) {
  if (this._blockTouchHold)
    return;
  var identifier = touch.identifier;
  this._startSingleFingerTouchId = identifier;
  this._stopTouchHoldTimer();
  this._startTouchHoldTimer(event);
};

/**
 * Handler for the touch hover move
 * @param {DvtTouchEvent} event Wrapper for the native event
 * @param {DvtTouch} touch Touch object for the event
 * @protected
 */
DvtTouchManager.prototype.HoverMoveInternal = function(event, touch) {
  var identifier = touch.identifier;
  var info = this.getTouchInfo(identifier);
  var targetObj = info['currentObj'];
  var touchHoldMoveEvent = new DvtComponentTouchEvent(DvtComponentTouchEvent.TOUCH_HOLD_MOVE_TYPE, touch, targetObj, null, event.getNativeEvent());
  this.FireListener(touchHoldMoveEvent);
  event.preventDefault();
};

/**
 * Handler for the touch hover end.
 * @param {DvtTouchEvent} event Wrapper for the native event
 * @param {DvtTouch} touch Touch object for the event
 * @protected
 */
DvtTouchManager.prototype.HoverEndInternal = function(event, touch) {
  var identifier = touch.identifier;
  var info = this.getTouchInfo(identifier);
  var targetObj = info['currentObj'];
  var touchHoldEndEvent = new DvtComponentTouchEvent(DvtComponentTouchEvent.TOUCH_HOLD_END_TYPE, touch, targetObj, null, event.getNativeEvent());
  this.FireListener(touchHoldEndEvent);
  if (event)
    event.preventDefault();
};

/**
 * Reset touch hold
 */
DvtTouchManager.prototype.resetTouchHold = function() {
  this._startSingleFingerTouchId = null;
  this._stopTouchHoldTimer();
};


/**
 * Updates state information for current touches before logical event "bubbles"
 * @param {DvtTouchEvent} touchEvent Touch event
 */
DvtTouchManager.prototype.preEventBubble = function(touchEvent) {
  if (touchEvent.setTouchManager)
    touchEvent.setTouchManager(this);

  var type = touchEvent.type;
  if (type == DvtTouchEvent.TOUCHSTART) {
    this.processTouchStart(touchEvent);
  } else if (type == DvtTouchEvent.TOUCHMOVE) {
    this.processTouchMove(touchEvent);
  } else if (type == DvtTouchEvent.TOUCHEND) {
    this.processTouchEnd(touchEvent);
  }
};

// Updates state information after logical event is done "bubbling"
DvtTouchManager.prototype.postEventBubble = function(touchEvent) {
  var type = touchEvent.type;

  if (type == DvtTouchEvent.TOUCHSTART) {
  } else if (type == DvtTouchEvent.TOUCHMOVE) {
  } else if (type == DvtTouchEvent.TOUCHEND) {
    var changedTouches = this._getStoredTouches(touchEvent.changedTouches);
    for (var i = 0; i < changedTouches.length; i++)
    {
      var changedTouch = changedTouches[i];
      var identifier = changedTouch.identifier;

      delete this._touchMap[identifier];
      if (this._startSingleFingerTouchId == identifier) {
        this._startSingleFingerTouchId = null;
      }
      // Stop propagation may not allow touch manager to clear saved touch info.  Need to check for any remaining
      // info and remove
      var savedMatches = this._findMatches('touchId', identifier);
      for (var j = 0; j < savedMatches.length; j++) {
        var match = savedMatches[j];
        this.removeTooltipInfo(match['touchId'], match['touchObj']);
      }
    }
  }
};

DvtTouchManager.prototype.saveProcessedTouch = function(touchId, touchObj, tooltipObjOverride, grouping, type, moveListener, endListener, listenerObj) {
  if (touchId != null && !isNaN(touchId)) {
    var info = DvtTouchManager.createSavedTouchInfo(touchId, touchObj, tooltipObjOverride, grouping, type, moveListener, endListener, listenerObj);
    this._savedTouchInfo.push(info);
    return true;
  }
  return false;
};

DvtTouchManager.prototype.saveProcessedTouchDefault = function(touchId, touchObj, tooltipObjOverride, grouping, type, listenerObj) {
  var movedListener = null;
  if (listenerObj['immediateTouchMoved'])
    movedListener = listenerObj['immediateTouchMoved'];
  var endListener = null;
  if (listenerObj['immediateTouchEnded'])
    endListener = listenerObj['immediateTouchEnded'];

  this.saveProcessedTouch(touchId, touchObj, tooltipObjOverride, grouping, type, movedListener, endListener, listenerObj);
};

DvtTouchManager.prototype.processAssociatedTouch = function(event, uniqueKey, startListener, listenerObj) {
  var type = event.type;
  if (type == DvtTouchEvent.TOUCHSTART) {
    this.processAssociatedTouchAttempt(event, uniqueKey, startListener, listenerObj);
  } else if (type == DvtTouchEvent.TOUCHMOVE) {
    this.processAssociatedTouchMove(event, uniqueKey);
  } else if (type == DvtTouchEvent.TOUCHEND) {
    this.processAssociatedTouchEnd(event, uniqueKey);
  }
};

// immediateTouchObj implements a defined interface for handling single touches on the object
DvtTouchManager.prototype.processAssociatedTouchDefault = function(event, immediateTouchObj) {
  this.processAssociatedTouch(event, immediateTouchObj, immediateTouchObj['immediateTouchAttempted'], immediateTouchObj);
};

DvtTouchManager.prototype.cancelTouchHold = function() {
  var uniqueKey = DvtTouchManager.HOVER_TOUCH_KEY;
  var touchIds = this.getTouchIdsForObj(uniqueKey);
  for (var i = 0; i < touchIds.length; i++) {
    var touchId = touchIds[i];
    var info = this.getTouchInfo(touchId);
    var touch = info['startTouch'];
    if (touch) {
      this._isCancelEvent = true;
      this.performAssociatedTouchEnd(touch, uniqueKey, null);
      this._isCancelEvent = false;
      delete this._touchMap[touchId];
    }
  }

};

DvtTouchManager.prototype.performAssociatedTouchEnd = function(touch, uniqueKey, event) {
  var identifier = touch.identifier;
  var savedInfo = this.getSavedTouchInfo(identifier, uniqueKey);
  if (savedInfo) {
    var listenerObj = savedInfo['listenerObj'];
    var endListener = savedInfo['endListener'];

    // Remove tooltip info first
    this.removeTooltipInfo(identifier, uniqueKey);
    if (endListener) {
      endListener.call(listenerObj, event, touch, savedInfo);
    }
  }
};

DvtTouchManager.prototype.processAssociatedTouchAttempt = function(event, uniqueKey, startListener, listenerObj) {
  var touches = event.changedTouches;
  for (var i = 0; i < touches.length; i++) {
    var touch = touches[i];
    if (touch) {
      if (startListener)
        startListener.call(listenerObj, event, touch);
    }
  }
};

DvtTouchManager.prototype.processAssociatedTouchMove = function(event, uniqueKey) {
  var touchIds = this.getTouchIdsForObj(uniqueKey);
  for (var i = 0; i < touchIds.length; i++) {
    var touchId = touchIds[i];
    if (touchId != null && !isNaN(touchId)) {
      var touch = DvtTouchManager.getTouchById(touchId, this._getStoredTouches(event.changedTouches));
      if (touch) {
        var savedInfo = this.getSavedTouchInfo(touch.identifier, uniqueKey);
        if (savedInfo) {
          var listenerObj = savedInfo['listenerObj'];
          var moveListener = savedInfo['moveListener'];

          if (moveListener)
            moveListener.call(listenerObj, event, touch);

        }
      }
    }
  }
};

DvtTouchManager.prototype.processAssociatedTouchEnd = function(event, uniqueKey) {
  var touchIds = this.getTouchIdsForObj(uniqueKey);
  for (var i = 0; i < touchIds.length; i++) {
    var touchId = touchIds[i];
    var touch = DvtTouchManager.getTouchById(touchId, this._getStoredTouches(event.changedTouches));
    if (touch) {
      this.performAssociatedTouchEnd(touch, uniqueKey, event);
    }
  }
};

DvtTouchManager.prototype._findMatch = function(matchProp, matchValue) {
  var idx = -1;
  for (var i = 0; i < this._savedTouchInfo.length; i++) {
    var info = this._savedTouchInfo[i];
    if (info[matchProp] == matchValue) {
      idx = i;
    }
  }
  return idx;
};
DvtTouchManager.prototype._findMatches = function(matchProp, matchValue) {
  var results = new Array();
  for (var i = 0; i < this._savedTouchInfo.length; i++) {
    var info = this._savedTouchInfo[i];
    if (info[matchProp] == matchValue) {
      results.push(info);
    }
  }
  return results;
};



DvtTouchManager.prototype.getSavedTouchInfo = function(touchId, uniqueKey) {
  var matches = this._findMatches('touchId', touchId);
  for (var i = 0; i < matches.length; i++) {
    var info = matches[i];
    if (info['touchObj'] == uniqueKey) {
      return info;
    }
  }
  return null;
};
DvtTouchManager.prototype.containsTouchId = function(touchId) {
  var matches = this._findMatches('touchId', touchId);
  return matches.length > 0;
};

DvtTouchManager.prototype.getTouchIdsForObj = function(touchObj) {
  var results = new Array();
  var matches = this._findMatches('touchObj', touchObj);
  for (var i = 0; i < matches.length; i++) {
    var info = matches[i];
    var touchId = info['touchId'];
    results.push(touchId);
  }
  return results;
};

DvtTouchManager.prototype.removeTooltipInfo = function(touchId, uniqueKey) {
  var matches = this._findMatches('touchId', touchId);
  var removeObjects = new Array();
  for (var i = 0; i < matches.length; i++) {
    var info = matches[i];
    if (info['touchObj'] == uniqueKey) {
      removeObjects.push(info);
    }
  }
  for (var i = 0; i < removeObjects.length; i++) {
    var removeObj = removeObjects[i];
    var removeIdx = -1;
    for (var j = 0; j < this._savedTouchInfo.length; j++) {
      var info = this._savedTouchInfo[j];
      if (info == removeObj) {
        removeIdx = j;
      }
    }
    if (removeIdx != -1) {
      this._savedTouchInfo.splice(removeIdx, 1);
      if (this._savedTouchInfo.length == 0) {
        this._context.getTooltipManager().hideTooltip();
      }
    }
  }
};

DvtTouchManager.prototype.setTooltipEnabled = function(touchId, enabled) {
  var tooltipInfoArray = this._savedTouchInfo;
  for (var i = 0; i < tooltipInfoArray.length; i++) {
    var tooltipInfo = tooltipInfoArray[i];
    var tooltipTouchId = tooltipInfo['touchId'];
    if (tooltipTouchId == touchId) {
      tooltipInfo['allowTooltips'] = enabled;
    }
  }
};

DvtTouchManager.prototype.getTooltipInfo = function() {
  var tooltipInfoObj = new Object();
  var touchIds = new Array();
  var tooltipTarget = null;

  var firstGroup = null;
  var multipleGroups = false;

  var matches = this._findMatches('allowTooltips', true);
  for (var i = 0; i < matches.length; i++) {
    var tooltipInfo = matches[i];
    var touchId = tooltipInfo['touchId'];

    if (!firstGroup) {
      firstGroup = tooltipInfo['grouping'];
    } else {
      // Multiple groups are not supported for tooltips yet
      if (tooltipInfo['grouping'] != firstGroup) {
        multipleGroups = true;
      }
    }

    var tooltipObj;
    var touchInfo = this._touchMap[touchId];
    // By default, show tooltip for item under finger
    if (touchInfo)
      tooltipObj = touchInfo['currentObj'];
    // If an override is present, use this instead
    if (tooltipInfo['tooltipObjOverride']) {
      tooltipObj = tooltipInfo['tooltipObjOverride'];
    }

    touchIds.push(touchId);
    tooltipTarget = tooltipObj;

  }
  if (multipleGroups)
    touchIds = new Array();
  tooltipInfoObj['touchIds'] = touchIds;
  tooltipInfoObj['tooltipTarget'] = tooltipTarget;

  return tooltipInfoObj;
};


DvtTouchManager.prototype.containsGrouping = function(type) {
  var matches = this._findMatches('grouping', type);
  return matches.length > 0;
};

DvtTouchManager.prototype.processTouchStart = function(touchEvent) {
  var changedTouches = touchEvent.changedTouches;
  var touches = touchEvent.touches;

  this._touchCount = touches.length;
  for (var i = 0; i < changedTouches.length; i++)
  {
    var changedTouch = changedTouches[i];
    var screenX = changedTouch.screenX;
    var screenY = changedTouch.screenY;
    var identifier = changedTouch.identifier;
    var targetObj = this._getObjFromTouch(changedTouch);
    var touchInfo = {
      'x': screenX,
      'y': screenY,
      'prevX': screenX,
      'prevY': screenY,
      'pageX': changedTouch.pageX,
      'pageY': changedTouch.pageY,
      'prevPageX': changedTouch.pageX,
      'prevPageY': changedTouch.pageY,
      'dx': 0,
      'dy': 0,
      'fireClick': true,
      'startTarget': targetObj,
      'currentObj': targetObj,
      'touchMoved': false,
      'touchtype': null,
      'startTouch': changedTouch
    };
    touchInfo[DvtTouchManager.TOUCH_MODE] = DvtTouchManager.TOUCH_MODE_DEFAULT;
    touchInfo['origx'] = screenX;
    touchInfo['origy'] = screenY;

    this._touchMap[identifier] = touchInfo;

  }

  // For now, keep the restriction of only one finger being able to be in hover mode at a time
  if (this._isHovering() || !this._isTouchHoldAllowed()) {
    touchEvent.blockTouchHold();
  }
  return true;
};

DvtTouchManager.prototype._isTouchHoldAllowed = function() {
  var touchMoved = false;
  var count = 0;
  for (var id in this._touchMap) {
    var info = this.getTouchInfo(id);
    if (info['touchMoved'])
      touchMoved = true;
    count++;
  }
  if (count > 1 && !touchMoved) {
    this.resetTouchHold();
    return false;
  }
  return true;
};

DvtTouchManager.prototype._isHovering = function() {
  for (var id in this._touchMap) {
    var info = this.getTouchInfo(id);
    if (info[DvtTouchManager.TOUCH_MODE] == DvtTouchManager.TOUCH_MODE_LONG_PRESS) {
      return true;
    }
  }
  return false;
};

DvtTouchManager.prototype._getStoredTouches = function(touches) {
  var storedTouches = new Array();
  for (var i = 0; i < touches.length; i++) {
    var touch = touches[i];
    var touchid = touch.identifier;
    var info = this.getTouchInfo(touchid);
    if (info) {
      storedTouches.push(touch);
    }
  }
  return storedTouches;
};

/**
 * Process touch move event
 * @param {DvtTouchEvent} touchEvent Dvt touch move event
 * @return {boolean} true if the touch move event is processed successfully
 */
DvtTouchManager.prototype.processTouchMove = function(touchEvent) {
  var changedTouches = this._getStoredTouches(touchEvent.changedTouches);
  var touches = this._getStoredTouches(touchEvent.touches);

  for (var i = 0; i < changedTouches.length; i++) {
    var touch = changedTouches[i];
    var targetObj = this._getObjFromTouch(touch);
    var touchid = touch.identifier;
    var info = this.getTouchInfo(touchid);

    info['currentObj'] = targetObj;
    info['touchMoved'] = true;
    // If the single finger touch id moves, don't attempt a touch hold
    if (info[DvtTouchManager.TOUCH_MODE] != DvtTouchManager.TOUCH_MODE_LONG_PRESS) {
      var pageDx = Math.abs(info['pageX'] - touch.pageX);
      var pageDy = Math.abs(info['pageY'] - touch.pageY);

      // Reset touch hold
      if (this._startSingleFingerTouchId == touchid && (pageDx > 0 || pageDy > 0))
        this.resetTouchHold();
      // Ignore any touch move less than 3px, decreasing sensitivity for recognizing tap
      info['touchMoved'] = (pageDx > 3 || pageDy > 3);
    }

    // If the move ever goes out of the initial object, don't fire a click
    if (info['fireClick']) {
      if (info[DvtTouchManager.TOUCH_MODE] == DvtTouchManager.TOUCH_MODE_LONG_PRESS) {
      } else {
        if (info['currentObj'] != info['startTarget']) {
          info['fireClick'] = false;
        }
      }
    }

  }

  for (var i = 0; i < touches.length; i++) {
    var touch = touches[i];
    var identifier = touch.identifier;
    var info = this.getTouchInfo(identifier);
    var screenX = touch.screenX;
    var screenY = touch.screenY;
    var deltaX = screenX - info['x'];
    var deltaY = screenY - info['y'];

    info['prevX'] = info['x'];
    info['prevY'] = info['y'];
    info['dx'] = deltaX;
    info['dy'] = deltaY;
    info['x'] = screenX;
    info['y'] = screenY;
    info['prevPageX'] = info['pageX'];
    info['prevPageY'] = info['pageY'];
    info['pageX'] = touch.pageX;
    info['pageY'] = touch.pageY;
  }
  return true;
};

DvtTouchManager.prototype.processTouchEnd = function(touchEvent) {
  var changedTouches = touchEvent.changedTouches;
  this._touchCount = touchEvent.touches.length;

  for (var i = 0; i < changedTouches.length; i++) {
    var touch = changedTouches[i];
    var targetObj = this._getObjFromTouch(touch);
    var touchid = touch.identifier;
    var info = this.getTouchInfo(touchid);
    if (!info)
      continue;
    if (info['fireClick']) {
      if (info[DvtTouchManager.TOUCH_MODE] == DvtTouchManager.TOUCH_MODE_LONG_PRESS) {
        this._startSingleFingerTouchId = null;
      } else {
        var sameTarget = targetObj == info['startTarget'];
        var touchMoved = info['touchMoved'];
        var fireClick = (sameTarget && !touchMoved);
        info['fireClick'] = fireClick;
      }
    }
  }

  // 
  // Clear the cached stage position on touch end. This prevents the cached position value from being caried over
  // and breaking interaction when there are layout or device orientation changes.
  this._context.clearStageAbsolutePosition();

  return true;
};

DvtTouchManager.getTouchById = function(id, touches) {
  if (id != null && !isNaN(id)) {
    for (var i = 0; i < touches.length; i++) {
      var touch = touches[i];
      if (touch.identifier == id) {
        return touch;
      }
    }
  }
  return null;
};

DvtTouchManager.createSavedTouchInfo = function(touchId, touchObj, tooltipObjOverride, grouping, type, moveListener, endListener, listenerObj) {
  var obj = {'touchId' : touchId, 'tooltipObjOverride' : tooltipObjOverride, 'grouping' : grouping, 'type' : type, 'touchObj' : touchObj, 'allowTooltips' : true};
  obj['moveListener'] = moveListener;
  obj['endListener'] = endListener;
  obj['listenerObj'] = listenerObj;
  return obj;
};

/**
 * @private
 * Timer used for touch hold event
 */
DvtTouchManager.prototype._handleTouchHoldStartTimer = function() {
  var event = this._dvtTouchEvent;
  this._stopTouchHoldTimer();
  this.startTouchHold(event);
};

/**
 * @private
 * Start touch hold timer
 * @param {DvtTouchEvent} evt  Wrapper for the native event
 */
DvtTouchManager.prototype._startTouchHoldTimer = function(evt) {
  this._dvtTouchEvent = evt;
  if (this._touchHoldTimer)
    this._touchHoldTimer.start();
};

/**
 * @private
 * Stop touch hold timer
 */
DvtTouchManager.prototype._stopTouchHoldTimer = function() {
  this._dvtTouchEvent = null;
  if (this._touchHoldTimer)
    this._touchHoldTimer.stop();
};

DvtTouchManager.prototype._handleDoubleTapTimer = function() {
  this.resetDoubleTap();
};

DvtTouchManager.prototype.resetDoubleTap = function() {
  this._doubleTapAttemptStarted = false;
  this._doubleTapAttemptObj = null;
  this._doubleTapTimer.stop();
};


/**
 * Returns a map containing touch data for two finger touch events.
 * The map contins the following:
 * dz - The distance moved since the last touch event
 * cx - The current center of the two finger touch
 * dcx - The horizontal distance moved for the center of the two finger touch since the last touch event
 * dcy - The vertical distance moved for the center of the two finger touch since the last tch event
 */
DvtTouchManager.prototype.getMultiTouchData = function(touchIds) {
  if (touchIds.length == 2) {
    var touch1Data = this._touchMap[touchIds[0]];
    var touch2Data = this._touchMap[touchIds[1]];
    if (touch1Data == null || touch2Data == null)
      return null;

    if (touch1Data['dx'] == 0 && touch2Data['dy'] == 0)
      return null;

    //: use page coords instead of screen coords, which the component can then turn into
    //stage-relative coords

    // current distance 2 fingers are apart
    var dx = touch1Data.pageX - touch2Data.pageX;
    var dy = touch1Data.pageY - touch2Data.pageY;
    var dist = Math.sqrt(dx * dx + dy * dy);

    // previous distance 2 fingers are apart
    var prevdx = touch1Data['prevPageX'] - touch2Data['prevPageX'];
    var prevdy = touch1Data['prevPageY'] - touch2Data['prevPageY'];
    var prevdist = Math.sqrt(prevdx * prevdx + prevdy * prevdy);

    var dz = (dist - prevdist);

    // calculate the distance the center btwn the two fingers has moved
    var cx = (touch1Data.pageX + touch2Data.pageX) / 2;
    var cy = (touch1Data.pageY + touch2Data.pageY) / 2;
    var prevcx = (touch1Data['prevPageX'] + touch2Data['prevPageX']) / 2;
    var prevcy = (touch1Data['prevPageY'] + touch2Data['prevPageY']) / 2;
    var dcx = (cx - prevcx);
    var dcy = (cy - prevcy);

    return {dz: dz, cx: cx, cy: cy, dcx: dcx, dcy: dcy, dist: dist};
  }
  return null;
};

// pan code
DvtTouchManager.prototype.getMultiTouchDelta = function(touchIds)
{

  //Touches are a list of those currently being tracked
  // When a touch is moved, we will compare its screenX and screenY from its last known point.
  // We will then call the handlerCallback, passing in the deltaX and deltaY information.
  //var touches = touchEvent.touches;
  // Handle the case when the number of touches on the surfaces is equal to this._touchCount:
  if (touchIds)
  {
    var touchData;
    var touchType;
    // Have we determined the type of touch this is (only applicable for two finger touches)?
    if (touchIds.length == 2)
    {
      var touch1Data = this._touchMap[touchIds[0]];
      var touch2Data = this._touchMap[touchIds[1]];
      if (touch1Data == null || touch2Data == null)
      {
        // Missing touch data
        return;
      }

      if (touch1Data['touchtype'] == null)
      {
        // Determine if the touches are going away from each other, towards each other, or are
        // moving in unison.
        var touch1Direction = this._determineTouchDirection(touch1Data);
        if (touch1Direction != null)
        {
          var touch2Direction = this._determineTouchDirection(touch2Data);
          if (touch2Direction != null)
          {

            // We have enough data to determine which direction each touch is going.
            touchType = this._isSameDirection(touch1Direction, touch2Direction) ?
                'scroll' : 'pinch';

            touch1Data['touchtype'] = touchType;
          }
        }
      }

      touchType = touch1Data['touchtype'];
      if (touchType == null)
      {
        return;
      }
      else if (touchType == 'pinch')
      {
        return null;
      }
    }
    // If we have the right number of touches that were moved or less (the devices tend to pick up
    // one finger on occassion).
    //if (changedTouches.length <= this._touchCount)
    // {
    // Compute the average deltas:
    var averageXDelta = 0;
    var averageYDelta = 0;
    for (var j = 0; j < touchIds.length; j++)
    {
      touchData = this._touchMap[touchIds[j]];
      averageXDelta += touchData['dx'];
      averageYDelta += touchData['dy'];
    }
    averageXDelta /= touchIds.length;
    averageYDelta /= touchIds.length;

    // Determine if each delta was within a small tolerance from the average:
    var changesWereMovement = true;
    /*
      for (j=0; j<touchIds.length; j++)
      {
        touchId = touchIds[j];
        touchData = this._touchMap[touchId];
        var DISTANCE_TOLERANCE = 20; // pixels
        if (Math.abs(touchData["dx"] - averageXDelta) > DISTANCE_TOLERANCE ||
            Math.abs(touchData["dy"] - averageYDelta) > DISTANCE_TOLERANCE)
        {
          changesWereMovement = false;
          break;
        }
      }

    */
    if (changesWereMovement)
    {
      // Prevent the default event handling if we've determined that the touch event was in fact
      // for a movement.
      //touchEvent.preventDefault();

      // If there was non-zero movement:
      //      if (averageXDelta != 0 || averageYDelta != 0)
      //    {
      var scaleFactor = 1;//(window.outerWidth / window.innerWidth);
      return {deltaX: averageXDelta * scaleFactor, deltaY: averageYDelta * scaleFactor};
      // Notify the registered function of the deltas:
      //this._handlerCallback(averageXDelta * scaleFactor, averageYDelta * scaleFactor);
      //  }
    }
  }
  return null;
};


/**
 * Given two directions (see _determineTouchDirection) determine if they are moving roughly in
 * the same direction or opposite directions (pinch vs. scroll).
 */
DvtTouchManager.prototype._isSameDirection = function(
    direction1,
    direction2)
{
  if (direction1 == direction2)
  {
    return true;
  }

  // Code below determines that the directions are the same if they are adjacent to each other.
  // Example: treat "ul" as the same direction as "l" and "u".
  if (direction1.length == 2 && direction2.length == 1)
  {
    return direction1.charAt(0) == direction2 || direction1.charAt(1) == direction2;
  }
  else if (direction1.length == 1 && direction2.length == 2)
  {
    return direction1 == direction2.charAt(0) || direction2 == direction1.charAt(1);
  }
  else
  {
    return false;
  }
};


/**
 * Given a touch data object (see _handleTouchMove), determine which direction it is moving.
 * Values are "ul", "u", "ur", "l", "r", "dl", "d" or "dr",
 * where "u" is up, "l" is left, "r" is right and "d" is down.
 * "
 * @return {String} the direction or null if the distance is not significant enough.
 */
DvtTouchManager.prototype._determineTouchDirection = function(touchData)
{
  var origX = touchData['origx'];
  var origY = touchData['origy'];

  if (origX == null || origY == null)
  {
    return null;
  }

  var currentX = touchData['x'];
  var currentY = touchData['y'];

  var MINIMUM_DISTANCE_REQUIRED_RATIO = 0.01; // 1% of zoomed screen

  // Distance formula = sqrt( (x2 - x1)^2 + (y2 - y2)^2 )
  var distanceX = currentX - origX;
  var distanceY = currentY - origY;

  var distance = Math.sqrt(Math.pow(distanceX, 2) + Math.pow(distanceY, 2));
  var minDistance = window.innerWidth * MINIMUM_DISTANCE_REQUIRED_RATIO;
  if (distance < minDistance)
  {
    // Touch has not moved far enough to determine
    return null;
  }

  // Given a change to both the x and the y coordinates, determine if one is insignificant.
  var INSIGNIFICANT_RATIO = 0.25;
  var directionX = null;
  if (Math.abs(distanceX / distanceY) >= INSIGNIFICANT_RATIO)
  {
    directionX = (distanceX < 0) ? 'l' : 'r'; // note that we are not considering LTR/RTL here.
    // This is okay as we are not currently concerned with left or right, only if the touches
    // are in the same or different directions.
  }

  var directionY = null;
  if (Math.abs(distanceY / distanceX) >= INSIGNIFICANT_RATIO)
  {
    directionY = (distanceY < 0) ? 'u' : 'd';
  }

  if (directionX != null && directionY != null)
  {
    return directionY + directionX;
  }
  else if (directionX == null)
  {
    return directionY;
  }
  else if (directionY == null)
  {
    return directionX;
  }

  // Should never reach here
  return null;
};

DvtTouchManager.prototype.calcAveragePosition = function(touchIds) {
  var pointX = 0;
  var pointY = 0;
  var touchCount = touchIds.length;
  for (var i = 0; i < touchCount; i++) {
    var touchId = touchIds[i];
    var touchData = this.getTouchInfo(touchId);
    pointX += touchData.pageX;
    pointY += touchData.pageY;
  }
  pointX /= touchCount;
  pointY /= touchCount;
  return new DvtPoint(pointX, pointY);
};


/**
 * Returns an array of start targets for corresponding touch ids
 * @param {array} touchIds An array of touch ids
 * @return {array} An array of touch targets
 */
DvtTouchManager.prototype.getStartTargetsByIds = function(touchIds) {
  var targets = new Array();
  for (var i = 0; i < touchIds.length; i++) {
    var touchData = this.getTouchInfo(touchIds[i]);
    targets.push(touchData['startTarget']);
  }
  return targets;
};


/**
 * Resets touch info, touch map and timers.
 */
DvtTouchManager.prototype.reset = function() {
  this._touchMap = new Object();
  this._savedTouchInfo = new Array();
  this.resetTouchHold();
  this.resetDoubleTap();
};
/**
 * @constructor
 * Abstract class for DvtRestoreCollapse Events.
 *
 * <p>The supported fields are:
 * <ul>
 * <li>state</li>
 * </ul>
 * <p>
 */
var DvtListItemEvent = function(listItemId, attributeGroupId, showHide, evt)
{
  this.Init(DvtListItemEvent.TYPE);
  this._listItemId = listItemId;
  this._attrGroupId = attributeGroupId;
  this._showHide = showHide;
  this._evt = evt;
};

DvtListItemEvent.TYPE = 'listItemShowHide';
DvtListItemEvent.SHOW = 'show';
DvtListItemEvent.HIDE = 'hide';

DvtObj.createSubclass(DvtListItemEvent, DvtBaseComponentEvent, 'DvtListItemEvent');

DvtListItemEvent.prototype.getNativeEvent = function() {
  return this._evt;
};

DvtListItemEvent.prototype.getListItemId = function() 
{
  return this._listItemId;
};

DvtListItemEvent.prototype.getShowHide = function() 
{
  return this._showHide;
};

DvtListItemEvent.prototype.getAttributeGroupId = function() 
{
  return this._attrGroupId;
};
/**
 * @constructor
 */
var ViewportChangeEvent = function(oldDim, newDim, evt) {
  this.Init(ViewportChangeEvent.TYPE);
  this._oldDim = oldDim;
  this._newDim = newDim;
  this._evt = evt;
};

ViewportChangeEvent.TYPE = 'viewportChange';

DvtObj.createSubclass(ViewportChangeEvent, DvtBaseComponentEvent, 'ViewportChangeEvent');

ViewportChangeEvent.prototype.getNativeEvent = function() {
  return this._evt;
};

ViewportChangeEvent.prototype.getOldDimensions = function() {
  return this._oldDim;
};

ViewportChangeEvent.prototype.getNewDimensions = function() {
  return this._newDim;
};
// Events when a custom tooltip action menu is interacted with
/**
 * @constructor
 */
var DvtActionTooltipEvent = function(type, target) {
  this.Init(type);
  this.target = target;
};

DvtActionTooltipEvent.TOOLTIP_CLOSED_TYPE = 'actiontooltipclosed';
DvtActionTooltipEvent.TOOLTIP_STARTED_TYPE = 'actiontooltipstarted';

DvtObj.createSubclass(DvtActionTooltipEvent, DvtBaseComponentEvent, 'DvtActionTooltipEvent');

DvtActionTooltipEvent.prototype.Init = function(type) {
  DvtActionTooltipEvent.superclass.Init.call(this, type);
};
/**
 * @constructor
 * A higher-level class that represents a single touch event.
 * The target and the relatedTarget simulate target and relatedTarget of the MouseEvent
 * and the target does not match target on the native TouchEvent.
 * @param {string} type One of the DvtComponentTouchEvent event types.
 * @param {DvtTouch} touch A single point of contact with the surface
 * @param {object} target An element that triggered the event
 * @param {object} relatedTarget An element related to the element that triggered the event
 * @param {TouchEvent} nativeEvent  Native touch event
 * @extends {DvtBaseComponentEvent}
 * @class DvtComponentTouchEvent
 * @export
 */
var DvtComponentTouchEvent = function(type, touch, target, relatedTarget, nativeEvent) {
  this.Init(type, touch, target, relatedTarget, nativeEvent);
};


/**
 * Touch hold start event
 * @const
 */
DvtComponentTouchEvent.TOUCH_HOLD_START_TYPE = 'touchholdstart';


/**
 * Touch hold move event
 * @const
 */
DvtComponentTouchEvent.TOUCH_HOLD_MOVE_TYPE = 'touchholdmove';


/**
 * Touch hold end event
 * @const
 */
DvtComponentTouchEvent.TOUCH_HOLD_END_TYPE = 'touchholdend';


/**
 * Touch hover start event
 * @const
 */
DvtComponentTouchEvent.TOUCH_HOVER_START_TYPE = 'touchhoverstart';


/**
 * Touch hover move event
 * @const
 */
DvtComponentTouchEvent.TOUCH_HOVER_MOVE_TYPE = 'touchhovermove';


/**
 * Touch hover end event
 * @const
 * @export
 */
DvtComponentTouchEvent.TOUCH_HOVER_END_TYPE = 'touchhoverend';


/**
 * Touch hover over event
 * @const
 */
DvtComponentTouchEvent.TOUCH_HOVER_OVER_TYPE = 'touchhoverover';


/**
 * Touch hover out event
 * @const
 */
DvtComponentTouchEvent.TOUCH_HOVER_OUT_TYPE = 'touchhoverout';


/**
 * Touch click event
 * @const
 */
DvtComponentTouchEvent.TOUCH_CLICK_TYPE = 'touchclick';


/**
 * Touch double click event
 * @const
 */
DvtComponentTouchEvent.TOUCH_DOUBLE_CLICK_TYPE = 'touchdblclick';

DvtObj.createSubclass(DvtComponentTouchEvent, DvtBaseComponentEvent, 'DvtComponentTouchEvent');


/**
 * Helper method called by the constructor to initialize this object.
 * @param {string} type One of the DvtComponentTouchEvent event types
 * @param {DvtTouch} touch A single point of contact with the surface
 * @param {object} target An element that triggered the event
 * @param {object} relatedTarget An element related to the element that triggered the event
 * @param {TouchEvent} nativeEvent  Native touch event
 */
DvtComponentTouchEvent.prototype.Init = function(type, touch, target, relatedTarget, nativeEvent) {
  DvtComponentTouchEvent.superclass.Init.call(this, type);
  this.target = target;
  this.touch = touch;
  this.relatedTarget = relatedTarget;
  this._isPropagationStopped = false;
  this._nativeEvent = nativeEvent;
};

// Stub methods so that mouse click handlers don't break
DvtComponentTouchEvent.prototype.preventDefault = function() {
};

DvtComponentTouchEvent.prototype.stopPropagation = function() {
  this._isPropagationStopped = true;
};

DvtComponentTouchEvent.prototype.isPropagationStopped = function() {
  return this._isPropagationStopped;
};

/**
 * Get native touch event
 * @return {TouchEvent}  native touch event
 * @export
 */
DvtComponentTouchEvent.prototype.getNativeEvent = function() {
  return this._nativeEvent;
};
// Copyright (c) 2012, 2016, Oracle and/or its affiliates. All rights reserved.
/**
 * @param {number} ww The width of the resize
 * @param {number} hh The height of the resize
 * @param {number} xx The x coordinate of the resize
 * @param {number} yy The y coordinate of the resize
 * @constructor
 */
var DvtResizeEvent = function(ww, hh, xx, yy) {
  this.Init(ww, hh, xx, yy);
};

DvtObj.createSubclass(DvtResizeEvent, DvtObj, 'DvtResizeEvent');

/** @const **/
DvtResizeEvent.RESIZE_EVENT = 'dvtResizeEvent';

/**
 * Helper initiailizer method
 * @param {number} ww The width of the resize
 * @param {number} hh The height of the resize
 * @param {number} xx The x coordinate of the resize
 * @param {number} yy The y coordinate of the resize
 * @protected
 */
DvtResizeEvent.prototype.Init = function(ww, hh, xx, yy) {
  this.type = DvtResizeEvent.RESIZE_EVENT;
  this._ww = ww;
  this._hh = hh;
  this._xx = xx;
  this._yy = yy;
};

/**
 * Returns the width of the resize event
 * @return {number}
 */
DvtResizeEvent.prototype.getWidth = function() {
  return this._ww;
};

/**
 * Returns the height of the resize event
 * @return {number}
 */
DvtResizeEvent.prototype.getHeight = function() {
  return this._hh;
};

/**
 * Returns the x coordinate of the resize event
 * @return {number}
 */
DvtResizeEvent.prototype.getX = function() {
  return this._xx;
};

/**
 * Returns the y coordinate of the resize event
 * @return {number}
 */
DvtResizeEvent.prototype.getY = function() {
  return this._yy;
};

/**
 * Returns the event type for this event.
 * @return {string} The event type for this event.
 * @export
 */
DvtResizeEvent.prototype.getType = function() {
  return this.type;
};
// Copyright (c) 2012, 2016, Oracle and/or its affiliates. All rights reserved.
/**
 * @param {number} x The x coordinate of the scroll
 * @param {number} y The y coordinate of the scroll
 * @constructor
 */
var DvtScrollEvent = function(x, y) {
  this.Init(x, y);
};

DvtObj.createSubclass(DvtScrollEvent, DvtObj, 'DvtScrollEvent');

/** @const **/
DvtScrollEvent.SCROLL_EVENT = 'dvtScrollEvent';


/**
 * Initializer
 * @param {number} x The x coordinate of the scroll
 * @param {number} y The y coordinate of the scroll
 * @protected
 */
DvtScrollEvent.prototype.Init = function(x, y) {
  this.type = DvtScrollEvent.SCROLL_EVENT;
  this._x = x;
  this._y = y;
};

/**
 * Returns the x coordinate of the scroll event
 * @return {number}
 */
DvtScrollEvent.prototype.getX = function() {
  return this._x;
};

/**
 * Returns the y coordinate of the scroll event
 * @return {number}
 */
DvtScrollEvent.prototype.getY = function() {
  return this._y;
};

/**
 * Returns the event type for this event.
 * @return {string} The event type for this event.
 * @export
 */
DvtScrollEvent.prototype.getType = function() {
  return this.type;
};
/**
 * @constructor
 * @param {string} type Event type.
 * @param {number} x Marquee x.
 * @param {number} y Marquee y.
 * @param {number} w Marquee w.
 * @param {number} h Marquee h.
 * @param {boolean} ctrlKey Whether the ctrl key is pressed.
 */
var DvtMarqueeEvent = function(subtype, x, y, w, h, ctrlKey) {
  this.Init(DvtMarqueeEvent.TYPE);
  this.subtype = subtype;
  this.x = x;
  this.y = y;
  this.w = w;
  this.h = h;
  this.ctrlKey = ctrlKey;
};

DvtObj.createSubclass(DvtMarqueeEvent, DvtBaseComponentEvent, 'DvtMarqueeEvent');

DvtMarqueeEvent.TYPE = 'dvtMarquee';

DvtMarqueeEvent.SUBTYPE_START = 'dvtMarqueeStartEvent';
DvtMarqueeEvent.SUBTYPE_MOVE = 'dvtMarqueeMoveEvent';
DvtMarqueeEvent.SUBTYPE_END = 'dvtMarqueeEndEvent';


/**
 * @return {number} Event subtype.
 */
DvtMarqueeEvent.prototype.getSubtype = function() {
  return this.subtype;
};
/**
 * @constructor
 * @param {string} type Event subtype.
 * @param {number} dxMin The delta of the xMin.
 * @param {number} dxMax The delta of the xMax.
 * @param {number} dyMin The delta of the yMin.
 * @param {number} dyMax The delta of the yMax.
 * @param {number=} dxMinTotal The total delta of the xMin (relative to the beginning of action).
 * @param {number=} dxMaxTotal The total delta of the xMax (relative to the beginning of action).
 * @param {number=} dyMinTotal The total delta of the yMin (relative to the beginning of action).
 * @param {number=} dyMaxTotal The total delta of the yMax (relative to the beginning of action).
 */
var DvtPanZoomEvent = function(subtype, dxMin, dxMax, dyMin, dyMax, dxMinTotal, dxMaxTotal, dyMinTotal, dyMaxTotal) {
  this.Init(DvtPanZoomEvent.TYPE);
  this.subtype = subtype;
  this.dxMin = dxMin;
  this.dxMax = dxMax;
  this.dyMin = dyMin;
  this.dyMax = dyMax;
  this.dxMinTotal = dxMinTotal;
  this.dxMaxTotal = dxMaxTotal;
  this.dyMinTotal = dyMinTotal;
  this.dyMaxTotal = dyMaxTotal;
};

DvtObj.createSubclass(DvtPanZoomEvent, DvtBaseComponentEvent, 'DvtPanZoomEvent');

DvtPanZoomEvent.TYPE = 'dvtPanZoom';

DvtPanZoomEvent.SUBTYPE_PAN_START = 'dvtPanStartEvent';
DvtPanZoomEvent.SUBTYPE_PAN_MOVE = 'dvtPanMoveEvent';
DvtPanZoomEvent.SUBTYPE_PAN_END = 'dvtPanEndEvent';
DvtPanZoomEvent.SUBTYPE_ZOOM = 'dvtZoomEvent';
DvtPanZoomEvent.SUBTYPE_PINCH_START = 'dvtPinchStartEvent';
DvtPanZoomEvent.SUBTYPE_PINCH_MOVE = 'dvtPinchMoveEvent';
DvtPanZoomEvent.SUBTYPE_PINCH_END = 'dvtPinchEndEvent';


/**
 * @return {string} Event subtype.
 */
DvtPanZoomEvent.prototype.getSubtype = function() {
  return this.subtype;
};
/**
 * An event fired by DvtSimpleScrollbar.
 * @param {string} subtype The subtype of event.
 * @param {number} newMin The new scrollbar minimum.
 * @param {number} newMax The new scrollbar maximum.
 * @class
 * @constructor
 */
var DvtSimpleScrollbarEvent = function(subtype, newMin, newMax) {
  this.Init(DvtSimpleScrollbarEvent.TYPE);
  this._subtype = subtype;
  this._newMin = newMin;
  this._newMax = newMax;
};

DvtObj.createSubclass(DvtSimpleScrollbarEvent, DvtBaseComponentEvent, 'DvtSimpleScrollbarEvent');

/** @const */
DvtSimpleScrollbarEvent.TYPE = 'dvtSimpleScrollbar';

/** @const */
DvtSimpleScrollbarEvent.SUBTYPE_MOVE = 'dvtMoveEvent';
/** @const */
DvtSimpleScrollbarEvent.SUBTYPE_END = 'dvtEndEvent';

/**
 * @return {string} subtype
 */
DvtSimpleScrollbarEvent.prototype.getSubtype = function() {
  return this._subtype;
};

/**
 * @return {number} new minimum
 */
DvtSimpleScrollbarEvent.prototype.getNewMin = function() {
  return this._newMin;
};

/**
 * @return {number} new maximum
 */
DvtSimpleScrollbarEvent.prototype.getNewMax = function() {
  return this._newMax;
};
var DvtEventFactory = new Object();

DvtObj.createSubclass(DvtEventFactory, DvtObj, 'DvtEventFactory');

// Note: this doesn't need to live in the factory because it will always be called
// by impl specific code looking to wrap the event.
/**
 * Creates a DVT wrapper for a mouse, keyboard, focus or touch event
 * @param {MouseEvent|KeyboardEvent|TouchEvent|FocusEvent} nativeEvent native event
 * @param {DvtContext} context rendering context
 * @return {DvtBaseEvent} a wrapper for a mouse, keyboard, focus or touch event
 */
DvtEventFactory.newEvent = function(nativeEvent, context) {
  // TODO detect the event type and perform wrapping as needed
  var eventType = nativeEvent.type;
  if (eventType == DvtTouchEvent.TOUCHSTART || eventType == DvtTouchEvent.TOUCHMOVE || eventType == DvtTouchEvent.TOUCHEND || eventType == DvtTouchEvent.TOUCHCANCEL) {
    return new DvtTouchEvent(nativeEvent);
  }
  else if (eventType == DvtKeyboardEvent.KEYDOWN || eventType == DvtKeyboardEvent.KEYUP || eventType == DvtKeyboardEvent.KEYPRESS) {
    return new DvtKeyboardEvent(nativeEvent);
  }
  else {
    //: if the native event is the same as the last one, return the stored logical event,
    //otherwise create a new logical event and store the pair of events
    if (context._nativeEvent != nativeEvent) {
      context._nativeEvent = nativeEvent;
      if (eventType == DvtFocusEvent.FOCUS || eventType == DvtFocusEvent.FOCUSIN || eventType == DvtFocusEvent.FOCUSOUT || eventType == DvtFocusEvent.BLUR) {
        context._logicalEvent = new DvtFocusEvent(nativeEvent);
      }
      else { // default to mouse event
        context._logicalEvent = new DvtMouseEvent(nativeEvent);
      }
    }
    return context._logicalEvent;
  }
};


/**
 * Returns a DvtMouseEvent that wraps the given keyboard event.  The given stageX and stageY coordinates are used to
 * compute the DvtMouseEvent's pageX and pageY fields
 *
 * @param {DvtKeyboardEvent} keyboardEvent
 * @param {DvtContext} context
 * @param {String} eventType
 * @param {DvtStage} stage
 * @param {Number} stageX
 * @param {Number} stageY
 * @return {DvtMouseEvent}
 */
DvtEventFactory.generateMouseEventFromKeyboardEvent = function(keyboardEvent, context, eventType, stage, stageX, stageY)
{
  var nativeEvent = null;

  if (document.createEvent)
  {
    nativeEvent = document.createEvent('MouseEvents');

    var pageCoord = context.stageToPageCoords(stageX, stageY);

    nativeEvent.initMouseEvent(eventType, true, true, window, 1, pageCoord.x, pageCoord.y, pageCoord.x, pageCoord.y,
        keyboardEvent.ctrlKey, keyboardEvent.altKey, keyboardEvent.shiftKey, keyboardEvent.metaKey,
        0, null);
  }

  if (nativeEvent)
  {
    var mouseEvent = DvtEventFactory.newEvent(nativeEvent, context);
    mouseEvent.target = keyboardEvent.target;
    return mouseEvent;
  }
  else
    return null;
};
// Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.
/*-------------------------------------------------------------------------------------------------*/
/*  Dvt3rdPartyPathUtils()       Utility functions for SVG paths taken from 3rd party sources      */
/*-------------------------------------------------------------------------------------------------*/

var Dvt3rdPartyPathUtils = {};

DvtObj.createSubclass(Dvt3rdPartyPathUtils, DvtObj, 'Dvt3rdPartyPathUtils');

/**
 * Adapted from D3.js -- d3_svg_lineLinear
 * @param {array} points Points in the form of [[p0x p0y] [p1x p1y] ...].
 * @return {string} Path commands.
 */
Dvt3rdPartyPathUtils.lineLinear = function(points) {
  return points.join('L');
};

/**
 * Adapted from D3.js -- d3_svg_lineCardinalClosed
 * @param {array} points Points in the form of [[p0x p0y] [p1x p1y] ...].
 * @param {number} tension A number from 0 to 1 specifying the tension.
 * @return {string} Path commands.
 */
Dvt3rdPartyPathUtils.lineCardinalClosed = function(points, tension) {
  return points.length < 3 ? Dvt3rdPartyPathUtils.lineLinear(points) : points[0] + Dvt3rdPartyPathUtils.lineHermite((points.push(points[0]),
      points), Dvt3rdPartyPathUtils.lineCardinalTangents([points[points.length - 2]].concat(points, [points[1]]), tension));
};

/**
 * Adapted from D3.js -- d3_svg_lineCardinal
 * @param {array} points Points in the form of [[p0x p0y] [p1x p1y] ...].
 * @param {number} tension A number from 0 to 1 specifying the tension.
 * @return {string} Path commands.
 */
Dvt3rdPartyPathUtils.lineCardinal = function(points, tension) {
  return points.length < 3 ? Dvt3rdPartyPathUtils.lineLinear(points) : points[0] + Dvt3rdPartyPathUtils.lineHermite(points, Dvt3rdPartyPathUtils.lineCardinalTangents(points, tension));
};

/**
 * Adapted from D3.js -- d3_svg_lineHermite
 * @param {array} points Points in the form of [[p0x p0y] [p1x p1y] ...].
 * @param {array} tangents Tangents in the form of [[t0x t0y] [t1x t1y] ...].
 * @return {string} Path commands.
 */
Dvt3rdPartyPathUtils.lineHermite = function(points, tangents) {
  if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
    return Dvt3rdPartyPathUtils.lineLinear(points);
  }
  var quad = points.length != tangents.length, path = '', p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
  if (quad) {
    path += 'Q' + Math.round(p[0] - t0[0] * 2 / 3) + ',' + Math.round(p[1] - t0[1] * 2 / 3) + ',' + Math.round(p[0]) + ',' + Math.round(p[1]);
    p0 = points[1];
    pi = 2;
  }
  if (tangents.length > 1) {
    t = tangents[1];
    p = points[pi];
    pi++;
    path += 'C' + Math.round(p0[0] + t0[0]) + ',' + Math.round(p0[1] + t0[1]) + ',' + Math.round(p[0] - t[0]) + ',' + Math.round(p[1] - t[1]) + ',' + Math.round(p[0]) + ',' + Math.round(p[1]);
    for (var i = 2; i < tangents.length; i++, pi++) {
      p = points[pi];
      t = tangents[i];
      path += 'S' + Math.round(p[0] - t[0]) + ',' + Math.round(p[1] - t[1]) + ',' + Math.round(p[0]) + ',' + Math.round(p[1]);
    }
  }
  if (quad) {
    var lp = points[pi];
    path += 'Q' + Math.round(p[0] + t[0] * 2 / 3) + ',' + Math.round(p[1] + t[1] * 2 / 3) + ',' + Math.round(lp[0]) + ',' + Math.round(lp[1]);
  }
  return path;
};

/**
 * Adapted from D3.js -- d3_svg_lineCardinalTangents
 * @param {array} points Points in the form of [[p0x p0y] [p1x p1y] ...].
 * @param {number} tension A number from 0 to 1 specifying the tension.
 * @return {array} Tangents in the form of [[t0x t0y] [t1x t1y] ...].
 */
Dvt3rdPartyPathUtils.lineCardinalTangents = function(points, tension) {
  var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
  while (++i < n) {
    p0 = p1;
    p1 = p2;
    p2 = points[i];
    tangents.push([a * (p2[0] - p0[0]), a * (p2[1] - p0[1])]);
  }
  return tangents;
};

/**
 * Adapted from D3.js -- d3_svg_lineSlope
 * @param {array} p0 Point in the form of [x y].
 * @param {array} p1 Point in the form of [x y].
 * @return {number} Slope.
 */
Dvt3rdPartyPathUtils.lineSlope = function(p0, p1) {
  return (p1[1] - p0[1]) / (p1[0] - p0[0]);
};

/**
 * Adapted from D3.js -- d3_svg_lineFiniteDifferences
 * @param {array} points Points in the form of [[p0x p0y] [p1x p1y] ...].
 * @return {array} Finite differences.
 */
Dvt3rdPartyPathUtils.lineFiniteDifferences = function(points) {
  var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = Dvt3rdPartyPathUtils.lineSlope(p0, p1);
  while (++i < j) {
    m[i] = (d + (d = Dvt3rdPartyPathUtils.lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
  }
  m[i] = d;
  return m;
};

/**
 * Adapted from D3.js -- d3_svg_lineMonotoneTangents
 * @param {array} points Points in the form of [[p0x p0y] [p1x p1y] ...].
 * @param {boolean} isHoriz If true, the spline is monotonic in X. Otherwise, it is monotonic in Y.
 * @return {array} Tangents in the form of [[t0x t0y] [t1x t1y] ...].
 */
Dvt3rdPartyPathUtils.lineMonotoneTangents = function(points, isHoriz) {
  if (isHoriz) // swap x and y
    points = Dvt3rdPartyPathUtils._rotatePoints(points);

  var tangents = [], d, a, b, s, m = Dvt3rdPartyPathUtils.lineFiniteDifferences(points), i = -1, j = points.length - 1;
  while (++i < j) {
    d = Dvt3rdPartyPathUtils.lineSlope(points[i], points[i + 1]);
    if (Math.abs(d) < 1e-6) {
      m[i] = m[i + 1] = 0;
    } else {
      a = m[i] / d;
      b = m[i + 1] / d;
      s = a * a + b * b;
      if (s > 9) {
        s = d * 3 / Math.sqrt(s);
        m[i] = s * a;
        m[i + 1] = s * b;
      }
    }
  }
  i = -1;
  while (++i <= j) {
    s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
    tangents.push([s || 0, m[i] * s || 0]);
  }

  if (isHoriz) // swap x and y again
    tangents = Dvt3rdPartyPathUtils._rotatePoints(tangents);

  return tangents;
};

/**
 * Adapted from D3.js -- d3_svg_lineMonotone
 * @param {array} points Points in the form of [[p0x p0y] [p1x p1y] ...].
 * @param {boolean} isHoriz If true, the spline is monotonic in X. Otherwise, it is monotonic in Y.
 * @return {string} Path commands.
 */
Dvt3rdPartyPathUtils.lineMonotone = function(points, isHoriz) {
  return points.length < 3 ? Dvt3rdPartyPathUtils.lineLinear(points) : points[0] + Dvt3rdPartyPathUtils.lineHermite(points, Dvt3rdPartyPathUtils.lineMonotoneTangents(points, isHoriz));
};

/**
 * Rotate the points by swapping the x and y.
 * @param {array} points Points in the form of [[p0x p0y] [p1x p1y] ...].
 * @return {array} Rotated points.
 * @private
 */
Dvt3rdPartyPathUtils._rotatePoints = function(points) {
  var rPoints = [];
  for (var i = 0; i < points.length; i++)
    rPoints.push([points[i][1], points[i][0]]);
  return rPoints;
};
/*---------------------------------------------------------------------*/
/*   DvtDisplayableUtils          Static Utility Functions             */
/*---------------------------------------------------------------------*/



/**
 *   Static Utility Functions for DvtDisplayable
 *   @class DvtDisplayableUtils
 *   @constructor
 */
var DvtDisplayableUtils = function()
{};

DvtObj.createSubclass(DvtDisplayableUtils, DvtObj, 'DvtDisplayableUtils');

/*
 * Temporarily add the display object to the stage to get dimensions.
 * Remove it from stage after done
 */
DvtDisplayableUtils.getDimensionsForced = function(context, obj) {
  //save original parent and index
  var oParent = obj.getParent();
  var oIndex;
  if (oParent)
    oIndex = oParent.getChildIndex(obj);

  var stage = context.getStage();
  stage.addChild(obj);

  var dim = obj.getDimensions();
  stage.removeChild(obj);

  //restore original parent
  if (oParent) {
    oParent.addChildAt(obj, oIndex);
  }

  return dim;
};


/*
 * Temporarily add the display object to the stage to get dimensions.
 * Remove it from stage after done
 * cached dimensions in obj._dim
 */
DvtDisplayableUtils.getDimForced = function(context, obj) {
  //if there is a cache or context is null, return it.
  if (obj._dim || ! context) {
    return obj._dim;
  }

  var dim = DvtDisplayableUtils.getDimensionsForced(context, obj);

  //cached the dimensions
  DvtDisplayableUtils._setDimForced(obj, dim);
  return dim;
};


/*
 * cached dimensions in obj._dim
 */
DvtDisplayableUtils._setDimForced = function(obj, dim) {
  //cached the dimensions
  obj._dim = dim;
};


/**
 * Determine if a displayable is an ancestor of another displayable.
 *
 * @param {DvtDisplayable} ancestor  The potential ancestor displayable.
 * @param {DvtDisplayable} descendant  The potential descendant displayable.
 * @type {Boolean}
 */
DvtDisplayableUtils.isAncestor = function(ancestor, descendant) {
  var disp = descendant;
  while (disp) {
    if (disp == ancestor) {
      return true;
    }
    if (disp instanceof DvtContainer) {
      disp = disp.getParent();
    }
  }
  return false;
};


// Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.
/*---------------------------------------------------------------------*/
/*  DvtPathUtils()       Utility functions for SVG paths               */
/*---------------------------------------------------------------------*/

var DvtPathUtils = {};

DvtObj.createSubclass(DvtPathUtils, DvtObj, 'DvtPathUtils');

DvtPathUtils.SPLINE_TYPE_MONOTONE_VERTICAL = 'mv';
DvtPathUtils.SPLINE_TYPE_MONOTONE_HORIZONTAL = 'mh';
DvtPathUtils.SPLINE_TYPE_CARDINAL_CLOSED = 'cc';
DvtPathUtils.SPLINE_TYPE_CARDINAL = 'c';

/**
 * Returns a path command for a move to the specified coordinates
 * @param x the destination x coordinate
 * @param y the destination y coordinate
 * @return the moveTo path command
 */
DvtPathUtils.moveTo = function(x,y) {
  return 'M' + DvtToolkitUtils.roundDecimal(x) + ',' + DvtToolkitUtils.roundDecimal(y);
};


/**
 * Returns a path command for a line to the specified coordinates
 * @param x the destination x coordinate
 * @param y the destination y coordinate
 * @return the lineTo path command
 */
DvtPathUtils.lineTo = function(x,y) {
  return 'L' + DvtToolkitUtils.roundDecimal(x) + ',' + DvtToolkitUtils.roundDecimal(y);
};

DvtPathUtils.quadTo = function(x1,y1,x,y) {
  return 'Q' + DvtToolkitUtils.roundDecimal(x1) + ',' + DvtToolkitUtils.roundDecimal(y1) + ',' +
      DvtToolkitUtils.roundDecimal(x) + ',' + DvtToolkitUtils.roundDecimal(y);
};

DvtPathUtils.cubicTo = function(x1,y1,x2,y2,x,y) {
  return 'C' + DvtToolkitUtils.roundDecimal(x1) + ',' + DvtToolkitUtils.roundDecimal(y1) + ',' +
      DvtToolkitUtils.roundDecimal(x2) + ',' + DvtToolkitUtils.roundDecimal(y2) + ',' +
          DvtToolkitUtils.roundDecimal(x) + ',' + DvtToolkitUtils.roundDecimal(y);
};


/**
 * Returns a path command for an arc to the specified coordinates
 * @param rx the x radius of the ellipse whose arc will be drawn
 * @param ry the y radius of the ellipse whose arc will be drawn
 * @param angleExtent the sweep of the arc to be drawn
 * @param direction 1 for clockwise, 0 for counter-clockwise
 * @param x the ending x coordinate
 * @param y the ending y coordinate
 */
DvtPathUtils.arcTo = function(rx, ry, angleExtent, direction, x, y) {
  var cmd = 'A' + DvtToolkitUtils.roundDecimal(rx) + ',' + DvtToolkitUtils.roundDecimal(ry) + ',0,';
  if (angleExtent > Math.PI) {
    cmd += '1,';
  }
  else {
    cmd += '0,';
  }
  cmd += (direction + ',' + DvtToolkitUtils.roundDecimal(x) + ',' + DvtToolkitUtils.roundDecimal(y));
  return cmd;
};


/**
 * Returns a path command that closes the path.
 */
DvtPathUtils.closePath = function() {
  return 'Z';
};


/**
 * Returns a path command for a rounded rectangle.
 * @param {number} x Rectangle x.
 * @param {number} y Rectangle y.
 * @param {number} w Rectangle width.
 * @param {number} h Rectangle height.
 * @param {number} tlcr Top left corner radius.
 * @param {number} trcr Top right corner radius.
 * @param {number} brcr Bottom right corner radius.
 * @param {number} blcr Bottom left corner radius.
 * @return {string} Path command.
 */
DvtPathUtils.roundedRectangle = function(x, y, w, h, tlcr, trcr, brcr, blcr) {
  var cmd = DvtPathUtils.moveTo(x + tlcr, y) +
            DvtPathUtils.lineTo(x + w - trcr, y) +
            DvtPathUtils.arcTo(trcr, trcr, Math.PI / 2, 1, x + w, y + trcr) +
            DvtPathUtils.lineTo(x + w, y + h - brcr) +
            DvtPathUtils.arcTo(brcr, brcr, Math.PI / 2, 1, x + w - brcr, y + h) +
            DvtPathUtils.lineTo(x + blcr, y + h) +
            DvtPathUtils.arcTo(blcr, blcr, Math.PI / 2, 1, x, y + h - blcr) +
            DvtPathUtils.lineTo(x, y + tlcr) +
            DvtPathUtils.arcTo(tlcr, tlcr, Math.PI / 2, 1, x + tlcr, y) +
            DvtPathUtils.closePath();

  return cmd;
};


/**
 * Returns a polyline path cmd based on the points array.
 * @param {array} points Polyline points array.
 * @param {boolean} connectWithLine Whether the first point is reached using lineTo. Otherwise, moveTo is used.
 * @return {string} Path command.
 */
DvtPathUtils.polyline = function(points, connectWithLine) {
  if (points.length < 2)
    return '';

  var cmd = connectWithLine ? DvtPathUtils.lineTo(points[0], points[1]) : DvtPathUtils.moveTo(points[0], points[1]);
  for (var i = 2; i < points.length; i += 2) {
    cmd += DvtPathUtils.lineTo(points[i], points[i + 1]);
  }

  return cmd;
};

/**
 * Returns a curved path command, based on cubic hermite splines, that goes through the points in the points array.
 * @param {array} points Polyline points array.
 * @param {boolean} connectWithLine Whether the first point is reached using lineTo. Otherwise, moveTo is used.
 * @param {string} type The spline type.
 * @return {string} Path commands.
 */
DvtPathUtils.curveThroughPoints = function(points, connectWithLine, splineType) {
  if (points.length == 0)
    return '';

  var pts = [];
  for (var i = 0; i < points.length; i += 2) // convert to D3 points format
    pts.push([points[i], points[i + 1]]);
  var prefix = connectWithLine ? 'L' : 'M';

  if (splineType == DvtPathUtils.SPLINE_TYPE_MONOTONE_VERTICAL)
    return prefix + Dvt3rdPartyPathUtils.lineMonotone(pts, false);
  else if (splineType == DvtPathUtils.SPLINE_TYPE_MONOTONE_HORIZONTAL)
    return prefix + Dvt3rdPartyPathUtils.lineMonotone(pts, true);
  else if (splineType == DvtPathUtils.SPLINE_TYPE_CARDINAL_CLOSED)
    return prefix + Dvt3rdPartyPathUtils.lineCardinalClosed(pts, 0.7);
  else
    return prefix + Dvt3rdPartyPathUtils.lineCardinal(pts, 0.7);
};

/**
  *  Creates an array of path/coords from an Svg path string.
  *  @param {String} cmds A string containing SVG path command sequences.
  *  @return {Array}  an array of consecutive path command/coords, or null
  *                    if no command string supplied.
  */
DvtPathUtils.createPathArray = function(sCmds)
{
  if (! sCmds)
    return null;

  //  Unpack into an array of commands and coords.
  var cmds = sCmds.replace(/([mlqhvzca])/gi, ',$1,'); // create array of coords from the string
  var ar = cmds.split(/[ ,]/g);
  var len = ar.length;
  var i;
  //  Convert coordinates in command array to floats.
  for (i = 0; i < len; i++) {
    var s = ar[i];
    if (!s) {
      ar.splice(i, 1);
      i--;
      len--;
    }
    else if (!isNaN(s)) {
      ar[i] = parseFloat(s);
    }
  }

  return ar;
};


/**
 * Returns the bounding box of the supplied path commands.
 * @param {Array} arCmds the path commands.
 * @return {DvtRectangle} the bounding box of the supplied path commands.
 */
DvtPathUtils.getDimensions = function(aCmds)
{
  if (! (aCmds && aCmds.length)) {
    return new DvtRectangle();
  }

  var len = aCmds.length;
  var c;
  var xSubPath, ySubPath;
  var bFirst = true;           // false after first command
  var bRel;                    // true if relative command
  var x, y, x2, y2, x3, y3;

  var minX = Number.MAX_VALUE;
  var maxX = Number.MIN_VALUE;
  var minY = Number.MAX_VALUE;
  var maxY = Number.MIN_VALUE;
  var aPos = [];
  var i, j, k;

  for (i = 0; i < len; i++) {
    bRel = false;
    var iMulti = 0;
    j = 0;

    c = aCmds[i];

    switch (c)
    {
      case 'm' : bRel = true;
      case 'M' : do {
        x = aCmds[i + 1];
        y = aCmds[i + 2];

        if (bFirst) {        // note if first is 'm', it is treated as absolute.
          bFirst = false;
        }
        else if (bRel) {
          x += xSubPath;
          y += ySubPath;
        }
        xSubPath = x;
        ySubPath = y;

        aPos[j++] = x;
        aPos[j++] = y;
        iMulti++;
        i += 2;
      } while (! isNaN(aCmds[i + 1]));
      break;

      case 'c' : bRel = true;
      case 'C' : do {
        x = aCmds[i + 1];
        y = aCmds[i + 2];
        x2 = aCmds[i + 3];
        y2 = aCmds[i + 4];
        x3 = aCmds[i + 5];
        y3 = aCmds[i + 6];

        if (bRel) {
          x += xSubPath;
          y += ySubPath;
          x2 += xSubPath;
          y2 += ySubPath;
          x3 += xSubPath;
          y3 += ySubPath;
        }
        xSubPath = x3;
        ySubPath = y3;

        aPos[j++] = x3;
        aPos[j++] = y3;
        iMulti++;
        i += 6;
      } while (! isNaN(aCmds[i + 1]));
      break;

      case 'q' : bRel = true;
      case 'Q' : do {
        x = aCmds[i + 1];
        y = aCmds[i + 2];
        x2 = aCmds[i + 3];
        y2 = aCmds[i + 4];
        if (bRel) {
          x += xSubPath;
          y += ySubPath;
          x2 += xSubPath;
          y2 += ySubPath;
        }
        xSubPath = x2;
        ySubPath = y2;

        aPos[j++] = x2;
        aPos[j++] = y2;
        iMulti++;
        i += 4;
      } while (! isNaN(aCmds[i + 1]));
      break;

      case 'l' : bRel = true;
      case 'L' :
        do {
          x = aCmds[i + 1];
          y = aCmds[i + 2];
          if (bRel) {
            x += xSubPath;
            y += ySubPath;
          }
          xSubPath = x;
          ySubPath = y;

          aPos[j++] = x;
          aPos[j++] = y;
          iMulti++;
          i += 2;
        } while (! isNaN(aCmds[i + 1]));
        break;

      case 'h' : bRel = true;
      case 'H' :
        do {
          x = aCmds[i + 1];
          if (bRel) {
            x += xSubPath;
          }
          xSubPath = x;

          aPos[j++] = x;
          aPos[j++] = ySubPath;
          iMulti++;
          i += 1;
        } while (! isNaN(aCmds[i + 1]));
        break;

      case 'v' : bRel = true;
      case 'V' :
        do {
          y = aCmds[i + 1];
          if (bRel) {
            y += ySubPath;
          }
          ySubPath = y;

          aPos[j++] = xSubPath;
          aPos[j++] = y;
          iMulti++;
          i += 1;
        } while (! isNaN(aCmds[i + 1]));
        break;

      case 'z' :
      case 'Z' : break;

      default : break;
    }                                    // end switch

    j = 0;
    for (k = 0; k < iMulti; k++) {
      x = aPos[j++];
      y = aPos[j++];
      minX = Math.min(minX, x);
      maxX = Math.max(maxX, x);
      minY = Math.min(minY, y);
      maxY = Math.max(maxY, y);
    }
  }

  return new DvtRectangle(minX, minY, Math.abs(maxX - minX), Math.abs(maxY - minY));
};


/**
 *  Converts a platform independent array of consecutive commands and coords
 *  to an SVG path string.
 *  @param {Array} ar  The array of commands and coordinates to be converted.
 *  @type {String}
 */
DvtPathUtils.getPathString = function(ar)
{
  var sOut = '';
  var len = ar.length;
  var s;

  for (var i = 0; i < len; i++) {
    s = ar[i];
    if (s !== undefined && s !== null)
      sOut += (((i > 0) ? ' ' : '') + ar[i]);
  }

  return sOut;
};


/**
  *  Initializes the shape to the specified coordinates.
  *  @private
  */
DvtPathUtils.transformPath = function(sCmds, x, y, sx, sy)
{
  var scaledPath = '';                   // return string
  if (! sCmds)
    return;

  // Split the commands (command is recognized as a single letter followed
  // by any number of non-letter characters)

  var commands = sCmds.match(/[a-z][^a-z]*/ig);

  for (var i = 0; i < commands.length; i++)
  {
    var command = commands[i];
    var cmdType = command.charAt(0);
    var absCmd = cmdType === cmdType.toUpperCase();

    scaledPath += (cmdType + ' ');
    var strArgs = command.substring(1);

    strArgs = strArgs.replace(/,/g, ' ');         // replace all commas with spaces
    strArgs = strArgs.replace(/^\s+|\s+$/g, '');  // trim leading and trailing whitespace

    if (strArgs.length > 0)
    {
      var args = strArgs.split(/\s+/g); // split on whitespace
      if (cmdType.toUpperCase() === 'A')
      {
        // (rx ry x-axis-rotation large-arc-flag sweep-flag x y)  only rx, ry, x, y should be scaled
        // only x,y should be translated for 'A', no translation for 'a'

        for (var j = 0; j < args.length; j += 7)            // loop to support multi-arc
        {
          scaledPath += (DvtToolkitUtils.roundDecimal(parseFloat(args[j]) * sx) + ' ');                      // rx
          scaledPath += (DvtToolkitUtils.roundDecimal(parseFloat(args[j + 1]) * sy) + ' ');                    // ry
          scaledPath += (DvtToolkitUtils.roundDecimal(args[j + 2]) + ' ');                                     // x-axis-rotation
          scaledPath += (DvtToolkitUtils.roundDecimal(args[j + 3]) + ' ');                                     // large-arc-flag
          scaledPath += (DvtToolkitUtils.roundDecimal(args[j + 4]) + ' ');                                     // sweep-flag
          scaledPath += (DvtToolkitUtils.roundDecimal(parseFloat(args[j + 5]) * sx + (absCmd ? x : 0)) + ' ');   // x
          scaledPath += (DvtToolkitUtils.roundDecimal(parseFloat(args[j + 6]) * sy + (absCmd ? y : 0)) + ' ');   // y
        }
      }
      else
      {
        // For all other cmdTypes, all numbers should be scaled
        // For all absolute cmdTypes, all numbers should be translated

        var scales = [];
        var translates = [];
        if (cmdType.toUpperCase() === 'H')
        {
          scales.push(sx); // All numbers should be scaled by sx
          translates.push(absCmd ? x : 0); // All numbers should be translated by x
        }
        else if (cmdType.toUpperCase() === 'V')
        {
          scales.push(sy); // All numbers should be scaled by sy
          translates.push(absCmd ? y : 0); // All numbers should be translated by y
        }
        else
        {
          // All other commands take a set of points, so even indices should be scaled
          //  by sx, odd indices by sy
          scales.push(sx);
          scales.push(sy);
          // For absolute commands, even indices should be translated by x, odd indices by y
          translates.push(absCmd ? x : 0);
          translates.push(absCmd ? y : 0);
        }

        for (var j = 0; j < args.length; j++)
        {
          var s = scales[j % scales.length];
          var t = translates[j % translates.length];

          scaledPath += (DvtToolkitUtils.roundDecimal(parseFloat(args[j]) * s + t) + ' ');  // scale and translate
        }
      }
    }
  }         // end for

  return scaledPath;
};


/**
 * Helper function for path simplification
 * @param {number} xMove The number of pixels that will be moved in the horizontal coordinate space.
 * @param {number} yMove The number of pixels that will be moved in the vertical coordinate space.
 * @param {number} scale The scale to test if the the x/y movement will show
 * @return {boolean} Whether or not the x/y movement will show in the given scale.
 */
DvtPathUtils._fitsInScale = function(xMove, yMove, scale) {
  return (Math.abs(xMove) > scale || Math.abs(yMove) > scale);
};


/**
 * Simplifies a given path by scaling it down and discarding pixel movements that are too small to be seen in the
 * given scale.
 * @param {array} cmdAr The array of commands and coordinates to be converted.
 * @param {number} scale The scale to simplify the path to.
 * @return {string} The simplified string of path commands and coordinates.
 */
DvtPathUtils.simplifyPath = function(cmdAr, scale) {
  var cmd;
  var simplifiedCmdStr = '';
  var tempSimplifiedStr = '';
  var partialX = 0;
  var partialY = 0;
  var simplifiedCmd;
  var mx = 0;
  var my = 0;
  // we expect all path commands to start with an m and end with a z
  var numCmds = 0;
  for (var i = 0; i < cmdAr.length; i++) {
    if (isNaN(cmdAr[i])) {
      cmd = cmdAr[i];
      if (cmd == 'Z' || cmd == 'z') {
        simplifiedCmd = cmd;
        tempSimplifiedStr += cmd;
        // if a command only contains move commands i.e. m[x] [y]z, do not add it but keep track of the relative position
        if (numCmds > 0) {
          simplifiedCmdStr += tempSimplifiedStr;
          mx = 0;
          my = 0;
        }
        tempSimplifiedStr = '';
        numCmds = 0;
        partialX = 0;
        partialY = 0;
      }
      continue;
    }

    switch (cmd) {
      case 'M':
        mx = 0;
        my = 0;
      case 'm':
        mx += cmdAr[i];
        my += cmdAr[i + 1];
        tempSimplifiedStr = tempSimplifiedStr + cmd + mx + ' ' + my;
        simplifiedCmd = cmd;
        i++;
        break;
      case 'l':
        partialX += cmdAr[i];
        partialY += cmdAr[i + 1];
        if (DvtPathUtils._fitsInScale(partialX, partialY, scale)) {
          if (simplifiedCmd != cmd) {
            simplifiedCmd = cmd;
            tempSimplifiedStr += cmd;
          } else {
            tempSimplifiedStr += ' ';
          }
          tempSimplifiedStr = tempSimplifiedStr + partialX + ' ' + partialY;
          partialX = 0;
          partialY = 0;
          numCmds++;
        }
        i++;
        break;
      case 'h':
      case 'v':
        if (cmd == 'h')
          partialX += cmdAr[i];
        else
          partialY += cmdAr[i];
        if (DvtPathUtils._fitsInScale(partialX, partialY, scale)) {
          if (partialX != 0 && partialY != 0) {
            if (simplifiedCmd != 'l') {
              simplifiedCmd = 'l';
              tempSimplifiedStr += 'l';
            } else {
              tempSimplifiedStr += ' ';
            }
            tempSimplifiedStr = tempSimplifiedStr + partialX + ' ' + partialY;
          } else {
            simplifiedCmd = cmd;
            tempSimplifiedStr = tempSimplifiedStr + cmd + (cmd == 'h' ? partialX : partialY);
          }
          partialX = 0;
          partialY = 0;
          numCmds++;
        }
        break;
      default:
    }
  }
  return simplifiedCmdStr;
};
/**
 * @constructor
 * DvtMarkerDefElem
 */
var DvtMarkerDefElem = function() {
  this.Init();
};

/*
 * make DvtMarkerDefElem a subclass of DvtObj
 */
DvtObj.createSubclass(DvtMarkerDefElem, DvtPropMap, 'DvtMarkerDefElem');

// DvtMarkerDef Attributes
DvtMarkerDefElem.ATTR_ELEMENTS = 'elements';
DvtMarkerDefElem.ATTR_SHAPE = 'shape';
DvtMarkerDefElem.ATTR_BORDER_COLOR = 'bc';
DvtMarkerDefElem.ATTR_FILL_COLOR = 'fc';
DvtMarkerDefElem.ATTR_FILL_PATTERN = 'fp';
DvtMarkerDefElem.ATTR_FILL_GRADIENT = 'fg';
DvtMarkerDefElem.ATTR_DATA = 'd';
DvtMarkerDefElem.ATTR_POINTS = 'p';
DvtMarkerDefElem.ATTR_LINE_WIDTH = 'lw';

DvtMarkerDefElem.ATTR_FILL_GRAD_COLORS = 'c';
DvtMarkerDefElem.ATTR_FILL_GRAD_STOPS = 'p';
DvtMarkerDefElem.ATTR_FILL_GRAD_BOUNDS = 'b';
DvtMarkerDefElem.ATTR_FILL_GRAD_DIR = 'dir';
DvtMarkerDefElem.ATTR_FILL_GRAD_DIR_RADIAL = 'gdR';
DvtMarkerDefElem.ATTR_FILL_GRAD_DIR_RIGHT = 'gdRi';
DvtMarkerDefElem.ATTR_FILL_GRAD_DIR_DOWN = 'gdD';
DvtMarkerDefElem.ATTR_FILL_GRAD_DIR_45 = 'gdD45';
DvtMarkerDefElem.ATTR_FILL_GRAD_DIR_135 = 'gdD135';
DvtMarkerDefElem.ATTR_FILL_GRAD_CX = 'cx';
DvtMarkerDefElem.ATTR_FILL_GRAD_CY = 'cy';
DvtMarkerDefElem.ATTR_FILL_GRAD_RADIUS = 'r';
DvtMarkerDefElem.ATTR_FILL_GRAD_RADIUSX = 'rx';
DvtMarkerDefElem.ATTR_FILL_GRAD_RADIUSY = 'ry';

DvtMarkerDefElem.ATTR_ANGLES = 'ang';
DvtMarkerDefElem.ATTR_CLOSURE_TYPE = 'ct';

DvtMarkerDefElem.ATTR_TRANSFORM = 'transform';


/*
 * Initializes the instance.
 */
DvtMarkerDefElem.prototype.Init = function() {
  DvtMarkerDefElem.superclass.Init.call(this);
};


/*-------------------------------------------------------------------------*/
/*   DvtMarkerDef attributes                                                */
/*-------------------------------------------------------------------------*/


/**
 * Gets the shape of the marker. The list of shapes are :
 * "circle"
 * "ellipse"
 * "line"
 * "path"
 * "polygone"
 * "polyline"
 * "rectangle"
 *
 * @return the shape of the marker
 */
DvtMarkerDefElem.prototype.getShape = function() {
  return this.getProperty(DvtMarkerDefElem.ATTR_SHAPE);
};


/**
 * Specifies the shape of the marker. The list of shapes are :
 * "circle"
 * "ellipse"
 * "line"
 * "path"
 * "polygone"
 * "polyline"
 * "rectangle"
 *
 * @param shape the shape of the marker
 */
DvtMarkerDefElem.prototype.setShape = function(shape) {
  this.setProperty(DvtMarkerDefElem.ATTR_SHAPE, shape);
};


/**
 * Gets the data of the component.
 * @return data of the component
 */
DvtMarkerDefElem.prototype.getData = function() {
  return this.getProperty(DvtMarkerDefElem.ATTR_DATA);
};


/**
 * Sets the data of the component.
 * @param data data of the component
 */
DvtMarkerDefElem.prototype.setData = function(data) {
  return this.setProperty(DvtMarkerDefElem.ATTR_DATA, data);
};


/**
 * Gets the points of the component.
 * @return points of the component
 */
DvtMarkerDefElem.prototype.getPoints = function() {
  return this.getProperty(DvtMarkerDefElem.ATTR_POINTS);
};


/**
 * Sets the points of the component.
 * @param points points of the component
 */
DvtMarkerDefElem.prototype.setPoints = function(points) {
  this.setProperty(DvtMarkerDefElem.ATTR_POINTS, points);
};


/**
 * Gets the closure type of the component.
 * @return closure type of the component
 */
DvtMarkerDefElem.prototype.getClosureType = function() {
  return this.getProperty(DvtMarkerDefElem.ATTR_CLOSURE_TYPE);
};


/**
 * Sets the closure type of the component.
 * @param closureType closure type of the component
 */
DvtMarkerDefElem.prototype.setClosureType = function(closureType) {
  this.setProperty(DvtMarkerDefElem.ATTR_CLOSURE_TYPE, closureType);
};


/**
 * Gets the angles of the component.
 * @return angles of the component
 */
DvtMarkerDefElem.prototype.getAngles = function() {
  return this.getProperty(DvtMarkerDefElem.ATTR_ANGLES);
};


/**
 * Sets the angles of the component.
 * @param angles angles of the component
 */
DvtMarkerDefElem.prototype.setAngles = function(angles) {
  return this.setProperty(DvtMarkerDefElem.ATTR_ANGLES, angles);
};


/**
 * Gets the border color of the component.
 * @return border color of the component
 */
DvtMarkerDefElem.prototype.getBorderColor = function() {
  return this.getProperty(DvtMarkerDefElem.ATTR_BORDER_COLOR);
};


/**
 * Sets the border color of the component.
 * @param borderColor border color of the component
 */
DvtMarkerDefElem.prototype.setBorderColor = function(borderColor) {
  this.setProperty(DvtMarkerDefElem.ATTR_BORDER_COLOR, borderColor);
};


/**
 * Gets the line width of the component.
 * @return line width of the component
 */
DvtMarkerDefElem.prototype.getLineWidth = function() {
  return this.getProperty(DvtMarkerDefElem.ATTR_LINE_WIDTH);
};


/**
 * Sets the line width of the component.
 * @param lineWidth line width of the component
 */
DvtMarkerDefElem.prototype.setLineWidth = function(lineWidth) {
  this.setProperty(DvtMarkerDefElem.ATTR_LINE_WIDTH, lineWidth);
};


/**
 * Gets the fill color of the component.
 * @return fill color of the component
 */
DvtMarkerDefElem.prototype.getFillColor = function() {
  return this.getProperty(DvtMarkerDefElem.ATTR_FILL_COLOR);
};


/**
 * Sets the fill color of the component.
 * @param fillColor fill color of the component
 */
DvtMarkerDefElem.prototype.setFillColor = function(fillColor) {
  this.setProperty(DvtMarkerDefElem.ATTR_FILL_COLOR, fillColor);
};


/**
 * Gets the fill pattern of the component.
 * @return fill pattern of the component
 */
DvtMarkerDefElem.prototype.getFillPattern = function() {
  return this.getProperty(DvtMarkerDefElem.ATTR_FILL_PATTERN);
};


/**
 * Sets the fill pattern of the component.
 * @param fillPattern fill pattern of the component
 */
DvtMarkerDefElem.prototype.setFillPattern = function(fillPattern) {
  this.setProperty(DvtMarkerDefElem.ATTR_FILL_PATTERN, fillPattern);
};


/**
 * Gets the fill gradient of the component.
 * @return fill gradient of the component
 */
DvtMarkerDefElem.prototype.getFillGradient = function() {
  return this.getProperty(DvtMarkerDefElem.ATTR_FILL_GRADIENT);
};


/**
 * Sets the fill gradient of the component.
 * @param fillGradient fill gradient of the component
 */
DvtMarkerDefElem.prototype.setFillGradient = function(fillGradient) {
  this.setProperty(DvtMarkerDefElem.ATTR_FILL_GRADIENT, fillGradient);
};


/**
 *   Gets the gradient color array of the component.
 */

DvtMarkerDefElem.prototype.getGradColors = function() {
  var s = this.getProperty(DvtMarkerDefElem.ATTR_FILL_GRAD_COLORS);
  var a = s.split(',');
  return a;
};

/**
 *   Gets the gradient stops of the component.
 */

DvtMarkerDefElem.prototype.getGradStops = function() {
  var s = this.getProperty(DvtMarkerDefElem.ATTR_FILL_GRAD_STOPS);
  var a = s.split(',');
  DvtArrayUtils.toFloat(a);

  return a;
};

/**
 *   Gets the gradient bounds of the component.
 */

DvtMarkerDefElem.prototype.getGradBounds = function() {
  var s = this.getProperty(DvtMarkerDefElem.ATTR_FILL_GRAD_BOUNDS);
  var a = s.split(',');
  DvtArrayUtils.toFloat(a);
  return a;
};


/**
 *   Gets the gradient direction.
 */

DvtMarkerDefElem.prototype.getGradDir = function() {
  return this.getProperty(DvtMarkerDefElem.ATTR_FILL_GRAD_DIR);
};



/**
 *   Gets the radial gradient radius
 */

DvtMarkerDefElem.prototype.getGradRadius = function() {
  return this.getProperty(DvtMarkerDefElem.ATTR_FILL_GRAD_RADIUS);
};


/**
 *   Gets the radial gradient x-radius
 */

DvtMarkerDefElem.prototype.getGradRadiusX = function() {
  return this.getProperty(DvtMarkerDefElem.ATTR_FILL_GRAD_RADIUSX);
};


/**
 *   Gets the radial gradient y-radius
 */

DvtMarkerDefElem.prototype.getGradRadiusY = function() {
  return this.getProperty(DvtMarkerDefElem.ATTR_FILL_GRAD_RADIUSY);
};

/**
 *   Gets the radial gradient cx.
 */

DvtMarkerDefElem.prototype.getGradCx = function() {
  return this.getProperty(DvtMarkerDefElem.ATTR_FILL_GRAD_CX);
};


/**
 *   Gets the radial gradient cxy
 */

DvtMarkerDefElem.prototype.getGradCy = function() {
  return this.getProperty(DvtMarkerDefElem.ATTR_FILL_GRAD_CY);
};


/**
 * Gets the transform of the component.
 * @return transform of the component
 */
DvtMarkerDefElem.prototype.getTransform = function() {
  return this.getProperty(DvtMarkerDefElem.ATTR_TRANSFORM);
};


/**
 * Sets the transform of the component.
 * @param transform transform of the component
 */
DvtMarkerDefElem.prototype.setTransform = function(transform) {
  return this.setProperty(DvtMarkerDefElem.ATTR_TRANSFORM, transform);
};

/**
 * @constructor
 * DvtMarkerDef
 */
var DvtMarkerDef = function() {
  this.Init();
};

/*
 * make DvtMarkerDef a subclass of DvtObj
 */
DvtObj.createSubclass(DvtMarkerDef, DvtPropMap, 'DvtMarkerDef');

DvtMarkerDef.MARKER_DEF = 'markerDef';

// List of marker shapes
DvtMarkerDef.MARKER_DEF_CIRCLE = 'c';
DvtMarkerDef.MARKER_DEF_ELLIPSE = 'o';
DvtMarkerDef.MARKER_DEF_LINE = 'l';
DvtMarkerDef.MARKER_DEF_PATH = 'p';
DvtMarkerDef.MARKER_DEF_POLYGON = 'pg';
DvtMarkerDef.MARKER_DEF_POLYLINE = 'pl';
DvtMarkerDef.MARKER_DEF_RECT = 'r';


// DvtMarkerDef Attributes
DvtMarkerDef.ATTR_ELEMENTS = 'elements';
DvtMarkerDef.ATTR_BORDER_COLOR = 'bc';
DvtMarkerDef.ATTR_LINE_WIDTH = 'lw';
DvtMarkerDef.ATTR_FILL_COLOR = 'fc';
DvtMarkerDef.ATTR_FILL_PATTERN = 'fp';
DvtMarkerDef.ATTR_FILL_GRADIENT = 'fg';



DvtMarkerDef.BI_DEFAULT_MARKER_SIZE = 9;

DvtMarkerDef.HUMAN_CMDS = 'M 38.07,36.467856 q 13.414,0 13.414,-13.406 l 0,-9.258 q 0,-13.4039999 -13.414,' +
    '-13.4039999 -13.414,0 -13.414,13.4039999 l 0,9.258 q 0,13.406 13.414,13.406 l 0,0 z m 16.219,7.275 -32.435999,' +
    '0 q -10.139552,0 -15.9400009,7.443875 Q 0.5,58.133383 0.5,69.156856 l 0,54.396004 12.746001,0 0,-51.609004 q 0,' +
    '-2.824 0.793,-2.824 0.742,0 0.742,2.709 l 0,124.267994 q 0,2.82401 2.823999,2.82401 l 12.531,0 q 2.824,0 2.824,' +
    '-2.824 l 0,-66.25 10.219,0 0,66.25 q 0,2.824 2.824,2.824 l 12.528,0 q 2.825,0 2.825,-2.824 l 0,-124.268004 q 0,' +
    '-2.709 0.839,-2.709 0.792,0 0.792,2.824 l 0,51.609004 12.65,0 0,-54.396004 Q 75.6386,58.132927 70.227626,' +
    '51.186731 64.428999,43.742856 54.289,43.742856 l 0,0 z';

DvtMarkerDef.HUMAN2_CMDS = 'M 306.40625 386.78125 C 304.19988 386.78125 302.40625 389.07579 302.40625 391.90625 ' +
    'C 302.40625 394.73671 304.19988 397.03125 306.40625 397.03125 C 308.61263 397.03125 310.40625 394.73671 310.40625 ' +
    '391.90625 C 310.40625 389.07579 308.61263 386.78125 306.40625 386.78125 z M 301.78125 396.0625 C 300.43025 397.2945 ' +
    '298.28125 400.28125 298.90625 403.15625 C 302.41725 405.79925 309.20225 406.154 314.03125 403 C 314.21825 399.828 ' +
    '312.68325 397.5635 310.90625 396.0625 C 308.65625 400.7185 304.28125 399.7815 301.78125 396.0625 z ';

/** Commands for creating a star shape */
DvtMarkerDef.SHAPE_STAR_CMDS = [- 50, - 11.22, - 16.69, - 17.94, 0, - 47.55, 16.69, - 17.94, 50, - 11.22, 26.69, 13.8,
  30.9, 47.56, 0, 33.42, - 30.9, 47.56, - 26.69, 13.8];

/*
 * Initializes the instance.
 */
DvtMarkerDef.prototype.Init = function() {
  DvtMarkerDef.superclass.Init.call(this);
};



/*-------------------------------------------------------------------------*/
/*   DvtMarkerDef attributes                                                */
/*-------------------------------------------------------------------------*/


/**
 * Gets the border color of the component.
 * @return border color of the component
 */
DvtMarkerDef.prototype.getBorderColor = function() {
  return this.getProperty(DvtMarkerDef.ATTR_BORDER_COLOR);
};


/**
 * Sets the border color of the component.
 * @param borderColor border color of the component
 */
DvtMarkerDef.prototype.setBorderColor = function(borderColor) {
  this.setProperty(DvtMarkerDef.ATTR_BORDER_COLOR, borderColor);
};


/**
 * Gets the line width of the component.
 * @return line width of the component
 */
DvtMarkerDef.prototype.getLineWidth = function() {
  return this.getProperty(DvtMarkerDef.ATTR_LINE_WIDTH);
};


/**
 * Sets the line width of the component.
 * @param lineWidth line width of the component
 */
DvtMarkerDef.prototype.setLineWidth = function(lineWidth) {
  this.setProperty(DvtMarkerDef.ATTR_LINE_WIDTH, lineWidth);
};


/**
 * Gets the fill color of the component.
 * @return fill color of the component
 */
DvtMarkerDef.prototype.getFillColor = function() {
  return this.getProperty(DvtMarkerDef.ATTR_FILL_COLOR);
};


/**
 * Sets the fill color of the component.
 * @param fillColor fill color of the component
 */
DvtMarkerDef.prototype.setFillColor = function(fillColor) {
  this.setProperty(DvtMarkerDef.ATTR_FILL_COLOR, fillColor);
};


/**
 * Gets the fill pattern of the component.
 * @return fill pattern of the component
 */
DvtMarkerDef.prototype.getFillPattern = function() {
  return this.getProperty(DvtMarkerDef.ATTR_FILL_PATTERN);
};


/**
 * Sets the fill pattern of the component.
 * @param fillPattern fill pattern of the component
 */
DvtMarkerDef.prototype.setFillPattern = function(fillPattern) {
  this.setProperty(DvtMarkerDef.ATTR_FILL_PATTERN, fillPattern);
};


/**
 * Gets the fill gradient of the component.
 * @return fill gradient of the component
 */
DvtMarkerDef.prototype.getFillGradient = function() {
  return this.getProperty(DvtMarkerDef.ATTR_FILL_GRADIENT);
};


/**
 * Sets the fill gradient of the component.
 * @param fillGradient fill gradient of the component
 */
DvtMarkerDef.prototype.setFillGradient = function(fillGradient) {
  this.setProperty(DvtMarkerDef.ATTR_FILL_GRADIENT, fillGradient);
};


/**
 * Gets the dimensions of the component.
 * @return dimensions of the component
 */
DvtMarkerDef.prototype.getDimensions = function() {
  var x = this.getProperty('dx');
  var y = this.getProperty('dy');
  var w = this.getProperty('dw');
  var h = this.getProperty('dh');

  if (w && h) {
    return new DvtRectangle(x, y, w, h);
  }
  return null;
};


/**
 * Gets the elements of the marker. The list of elementss are :
 *
 * @return the elements of the marker
 */
DvtMarkerDef.prototype.getElements = function() {
  return this.getProperty(DvtMarkerDef.ATTR_ELEMENTS);
};


/**
 * Add an element to the marker.
 *
 * @param {DvtMarkerDefElem} element to be added
 */
DvtMarkerDef.prototype.addElement = function(element) {
  var elems = this.getElements();
  if (! elems) {
    elems = [];
    this.setProperty(DvtMarkerDef.ATTR_ELEMENTS, elems);
  }
  elems.push(element);
};


var DvtMarkerGradient = function() {};

DvtObj.createSubclass(DvtMarkerGradient, DvtObj, 'DvtMarkerGradient');

DvtMarkerGradient.createMarkerGradient = function(color, marker, opacity)
{
  var arColors = [];
  var arRatios = [];
  var arAlphas = [opacity, opacity, opacity, opacity];
  var gfs = null;

  var shapeType = marker.getType();
  var dim = DvtDisplayableUtils.getDimForced(marker.getCtx(), marker);
  var center = dim.getCenter();
  var size = Math.min(dim.w, dim.h);

  if (shapeType != DvtMarker.HUMAN)
  {
    arRatios = [0.0, 0.5, 0.75, 1];
    var c0 = DvtColorUtils.getPastel(color, 0.20);
    var c1 = DvtColorUtils.getPastel(color, 0.10);
    var c2 = DvtColorUtils.getDarker(color, 0.8);

    var radius = size / 2.0;
    var cx = center.x;
    var cy = center.y;
    var arColors = [DvtColorUtils.getPound(c0), DvtColorUtils.getPound(c1), color, DvtColorUtils.getPound(c2)];
    var bound = new DvtRectangle(-radius, -radius, radius * 2.0, radius * 2.0);
    var arBound = [bound.x, bound.y, bound.w, bound.h];
    gfs = new DvtRadialGradientFill(arColors, arAlphas, arRatios, cx, cy, radius, arBound);
  } else
  {
    arRatios = [0.0, 0.3, 0.7, 1];
    var c0 = DvtColorUtils.getPastel(color, 0.20);
    var c1 = DvtColorUtils.getDarker(color, 0.9);
    var c2 = DvtColorUtils.getDarker(color, 0.8);
    var arColors = [DvtColorUtils.getPound(c0), DvtColorUtils.getPound(c1), color, DvtColorUtils.getPound(c2)];
    var bound = new DvtRectangle(-size / 2.0, -size / 2.0, size, size);
    var arBound = [bound.x, bound.y, bound.w, bound.h];
    gfs = new DvtLinearGradientFill(135, arColors, arAlphas, arRatios, arBound);
  }

  return gfs;
};
/**
 * DvtMarkerUtils
 */
var DvtMarkerUtils = {_cache: {}};

DvtObj.createSubclass(DvtMarkerUtils, DvtObj, 'DvtMarkerUtils');


/**
 * @this {DvtMarkerUtils}
 * parse markerDefXmlString and return a markerDef object
 */
DvtMarkerUtils.createMarkerDef = function(context, markerDefNode) {

  var markerDef = new DvtMarkerDef();
  markerDef.setProperties(markerDefNode.getAttributes());

  var childNodes = markerDefNode.getChildNodes();
  var childElems;

  for (var i = 0; i < childNodes.length; i++) {
    var child = childNodes[i];
    if (child) {
      childElems = new DvtMarkerDefElem();

      if (child.getName() == 'fillDef') {
        if (child.getChildNodes()) {
          child = child.getChildNodes()[0];    // want the child ( e.g. <g> )
        }
      }

      childElems.setProperties(child.getAttributes());
      childElems.setShape(child.getName());
      markerDef.addElement(childElems);
    }
  }

  if (markerDef) {
    this._addMarkerDef(context, markerDef);
  }
  return markerDef;
};


/**
 * @this {DvtMarkerUtils}
 * add a markerDef object to the marker list
 */
DvtMarkerUtils._addMarkerDef = function(context, markerDef) {
  var stageId = context.getStage().getId();
  var markerId = markerDef.getId();
  var markerList = DvtMarkerUtils.getMarkerList(stageId);

  //first look for a cached copy of the custom marker
  //if not found, add to the custom marker list
  if (! markerList[markerId]) {
    var marker = this.createMultiPaths(context, markerDef, markerId);
    if (marker) {
      // set id on the root
      marker.setId('custom' + markerId);
      markerList[markerId] = marker;

      // get custom dimensions and cache it in the shape object
      var dim = markerDef.getDimensions();
      if (dim) {
        DvtDisplayableUtils._setDimForced(marker, dim);
      }
    }
  }
};


/**
 * @this {DvtMarkerUtils}
 * Get Custom Marker List
 */
DvtMarkerUtils.getMarkerList = function(stageId)
{
  if (!this._cache[stageId]) {
    this._cache[stageId] = {};
  }
  return this._cache[stageId];
};


/**
 * @this {DvtMarkerUtils}
 * Returns a DvtPath
 *
 * @param context  the context
 * @param markerDef the custom marker definition
 */
DvtMarkerUtils.createMarkerShape = function(context, markerDefElem, markerDef, markerId) {

  var marker;
  var type = markerDefElem.getShape();

  if (type == DvtMarkerDef.MARKER_DEF_PATH) {
    marker = this.createPathMarker(context, markerDefElem, markerId);
  }
  /*
  else if (type == DvtMarkerDef.MARKER_DEF_CIRCLE ||
      type == DvtMarkerDef.MARKER_DEF_ELLIPSE) {
    marker = this.createCircleMarker(context, markerDef, markerId, type);
  }
  else if (type == DvtMarkerDef.MARKER_DEF_LINE) {
    marker = this.createLineMarker(context, markerDef, markerId);
  }
  else if (type == DvtMarkerDef.MARKER_DEF_POLYGON) {
    marker = this.createPolygoneMarker(context, markerDef, markerId);
  }
  else if (type == DvtMarkerDef.MARKER_DEF_POLYLINE) {
    marker = this.createPolylineMarker(context, markerDef, markerId);
  }
  else if (type == DvtMarkerDef.MARKER_DEF_RECT_TYPE) {
    marker = this.createRectMarker(context, markerDef, markerId);
  }
  */

  //set common attributes
  if (marker) {
    DvtMarkerUtils.setCommonAttrs(markerDefElem, markerDef, marker);
  }

  return marker;
};


/**
 * @type {DvtPath or DvtContainer (contains a list of DvtPaths)}
 */
DvtMarkerUtils.createMultiPaths = function(context, markerDef, markerId) {
  var shapes = markerDef.getElements();
  if (! shapes || shapes.length == 0)
    return null;

  var root;
  if (shapes.length == 1) {
    root = DvtMarkerUtils.createMarkerShape(context, shapes[0], markerDef, markerId);
  }
  else {
    root = new DvtContainer(context, markerId);
    var child;
    var childElem;
    for (var i = 0; i < shapes.length; i++) {
      child = shapes[i];
      childElem = DvtMarkerUtils.createMarkerShape(context, child, markerDef, markerId + '_' + i);
      if (childElem)
        root.addChild(childElem);
    }
  }
  return root;

};

// type: circle or ellipse
DvtMarkerUtils.createCircleMarker = function(context, markerDef, markerId, type) {
  var points = markerDef.getPoints();
  var cx = points[0];
  var cy = points[1];
  var rx = points[2];
  var ry;
  if (type == DvtMarkerDef.MARKER_DEF_ELLIPSE) {
    ry = points[3];
  }
  var marker;
  var closureType = markerDef.getClosureType();
  if (closureType) {
    var angles = markerDef.getAngles();
    var anglesStart;
    var anglesExtent;
    if (angles) {
      anglesStart = angles[0];
      anglesExtent = angles[1];
    }
    marker = new DvtArc(context, cx, cy, rx, ry,
                        anglesStart, anglesExtent, closureType, markerId);
  }
  else {
    marker = new DvtCircle(context, cx, cy, rx, markerId);
  }

  return marker;
};


DvtMarkerUtils.createRectMarker = function(context, markerDef, markerId) {
  var points = markerDef.getPoints();
  var x = points[0];
  var y = points[1];
  var w = points[2];
  var h = points[3];

  return new DvtRect(context, x, y, w, h, markerId);
};


DvtMarkerUtils.createLineMarker = function(context, markerDef, markerId) {
  var points = markerDef.getPoints();
  var x1 = points[0];
  var y1 = points[1];
  var x2 = points[2];
  var y2 = points[3];

  return new DvtLine(context, x1, y1, x2, y2, markerId);
};

DvtMarkerUtils.createPathMarker = function(context, markerDefElem, markerId) {
  var data = markerDefElem.getData();

  return new DvtPath(context, data, markerId);
};


DvtMarkerUtils.createPolygoneMarker = function(context, markerDef, markerId) {
  var points = markerDef.getPoints();

  return new DvtPolygon(context, points, markerId);
};


DvtMarkerUtils.createPolylineMarker = function(context, markerDef, markerId) {
  var points = markerDef.getPoints();

  return new DvtPolyline(context, points, markerId);
};


DvtMarkerUtils.setCommonAttrs = function(markerDefElem, markerDef, marker) {
  // solid, gradient, pattern fill?
  var fc = markerDefElem.getFillColor();
  var fa = null; //TODO getAlpha
  var fg = markerDefElem.getFillGradient();
  var fp = markerDefElem.getFillPattern();

  if (fp) {
    marker.setFill(new DvtPatternFill(fp, fc));
  }
  else if (fg) {                           // look for matching fillDef gradient id
    var elems = markerDef.getElements();
    var fd;
    var len = elems.length;
    for (var i = 0; i < len; i++) {
      var fillDef = elems[i];
      if (fillDef.getShape() == 'g' && fillDef.getId() == fg) {
        fd = fillDef;
        break;
      }
    }

    var stops;
    var bounds;
    var dir;
    var gradCx;
    var gradCy;
    var rad;
    if (fd) {
      fc = fd.getGradColors();
      stops = fd.getGradStops();
      bounds = fd.getGradBounds();
      dir = fd.getGradDir();
      if (dir == DvtMarkerDefElem.ATTR_FILL_GRAD_DIR_RADIAL) {
        gradCx = parseFloat(fd.getGradCx());
        gradCy = parseFloat(fd.getGradCy());
        rad = parseFloat(fd.getGradRadius());
        if (! rad) {
          var radX = parseFloat(fd.getGradRadiusX());    // svg doesn't support rx, ry
          var radY = parseFloat(fd.getGradRadiusY());
          rad = Math.max(radX, radY);
        }
        marker.setFill(new DvtRadialGradientFill(fc, fa, stops, gradCx, gradCy, rad, bounds));
      }
      else {
        var angle = 0;
        if (dir == DvtMarkerDefElem.ATTR_FILL_GRAD_DIR_45)
          angle = -135;
        else if (dir == DvtMarkerDefElem.ATTR_FILL_GRAD_DIR_135)
          angle = -45;
        else if (dir == DvtMarkerDefElem.ATTR_FILL_GRAD_DIR_DOWN)
          angle = -90;
        marker.setFill(new DvtLinearGradientFill(angle, fc, fa, stops, bounds));
      }
    }
    else {
      marker.setFill(new DvtLinearGradientFill(0, ['#000', '#fff']));
    }
  }
  else if (fc || fa) {
    marker.setSolidFill(fc, fa);
  }

  var lw = parseFloat(markerDefElem.getLineWidth());
  var bc = markerDefElem.getBorderColor();

  if (lw || bc) {
    if (! lw)
      lw = 1;
    if (! bc)
      bc = 'black';

    var stroke = new DvtSolidStroke(bc, 1, lw);
    marker.setStroke(stroke);
  }

};


/**
 * get a markerDef from the marker list
 * @type {DvtPath or DvtContainer (contains a list of DvtPaths)}
 */
DvtMarkerUtils.getCustomMarkerInfo = function(context, markerId) {
  var stageId = context.getStage().getId();
  var markerList = DvtMarkerUtils.getMarkerList(stageId);

  if (markerList) {
    return markerList[markerId];
  }
  else {
    return undefined;
  }
};


/**
 * Returns the built in marker shape given the marker type and skin
 * @param {DvtContext} The platform specific context object
 * @param {String} markerType The marker type
 * @param {String} skin The skin name
 * @return {DvtShape} The built in marker shape
 */
DvtMarkerUtils.getBuiltinMarkerInfo = function(context, markerType, skin) {
  var stageId = context.getStage().getId();
  var markerList = DvtMarkerUtils.getMarkerList(stageId);
  var markerId = skin ? markerType + '_' + skin : markerType;
  var defId = markerList[markerId];
  // if the marker is not in cache, add it to markerList
  if (! defId) {
    if (markerType) {
      var tmarker = new DvtPath(context, DvtCSSStyle.afterSkinAlta(skin) ? DvtMarkerDef.HUMAN2_CMDS : DvtMarkerDef.HUMAN_CMDS, 'dvtHuman');
      // cache the dimensions in the shape object
      DvtDisplayableUtils.getDimForced(context, tmarker);
      markerList[markerId] = tmarker;
    }
  }
  return markerList[markerId];
};


/**
 * @this {DvtMarkerUtils}
 * For internal use only
 */
DvtMarkerUtils.clearCached = function(context) {
  var stageId = context.getStage().getId();
  this._cache[stageId] = undefined;
};


// Copyright (c) 2008, 2015, Oracle and/or its affiliates. All rights reserved.
/*---------------------------------------------------------------------*/
/*  DvtPolygonUtils()       Utility functions for Polygons             */
/*---------------------------------------------------------------------*/

var DvtPolygonUtils = {};

DvtObj.createSubclass(DvtPolygonUtils, DvtObj, 'DvtPolygonUtils');


/**
 * Returns the bounding box of the supplied polygon coords.
 * @param {Array} aPts an array of consecutive x,y coordinate pairs.
 * @return {DvtRectangle} the bounding box of the supplied polygon.
 */
DvtPolygonUtils.getDimensions = function(aPts)
{
  if ((! aPts) || (aPts.length === 0)) {
    return new DvtRectangle();
  }

  var minX = Number.MAX_VALUE;
  var maxX = Number.MIN_VALUE;
  var minY = Number.MAX_VALUE;
  var maxY = Number.MIN_VALUE;

  var len = aPts.length;
  var x, y;
  for (var i = 0; i < len; i++) {

    x = aPts[i++];
    y = aPts[i];
    minX = Math.min(minX, x);
    maxX = Math.max(maxX, x);
    minY = Math.min(minY, y);
    maxY = Math.max(maxY, y);
  }

  return new DvtRectangle(minX, minY, Math.abs(maxX - minX), Math.abs(maxY - minY));
};


/**
 * Gets the points array for a regular polygon with n sides and radius r.
 * @param {number} cx Center x.
 * @param {number} cy Center y.
 * @param {number} n The number of sides.
 * @param {number} r the radius (distance from center to vertex).
 * @param {number} theta The angle of the first vertex (from top center).
 * @param {number=} direction 1 for clockwise, 0 for counter-clockwise. Default is clockwise.
 * @return {array} Points array.
 * @private
 */
DvtPolygonUtils.getRegularPolygonPoints = function(cx, cy, n, r, theta, direction) {
  var points = [];
  var angle;
  for (var i = 0; i < n; i++) {
    angle = theta + (i / n * 2 * Math.PI) * (direction == 0 ? -1 : 1);
    points.push(cx + r * Math.sin(angle), cy - r * Math.cos(angle));
  }
  return points;
};


/**
 * Scales and returns the points array for a polygon.
 * @param {array} points
 * @param {number} sx
 * @param {number} sy
 * @return {array}
 */
DvtPolygonUtils.scale = function(points, sx, sy) {
  var ret = [];
  for (var i = 0; i < points.length - 1; i += 2) {
    ret.push(points[i] * sx);
    ret.push(points[i + 1] * sy);
  }
  return ret;
};


/**
 * Translates and returns the points array for a polygon.
 * @param {array} points
 * @param {number} tx
 * @param {number} ty
 * @return {array}
 */
DvtPolygonUtils.translate = function(points, tx, ty) {
  var ret = [];
  for (var i = 0; i < points.length - 1; i += 2) {
    ret.push(points[i] + tx);
    ret.push(points[i + 1] + ty);
  }
  return ret;
};
// Copyright (c) 2008, 2015, Oracle and/or its affiliates. All rights reserved.
/**
 * Utility functions for text.
 * @class
 */
var DvtTextUtils = {};

DvtObj.createSubclass(DvtTextUtils, DvtObj, 'DvtTextUtils');

/** @private */
DvtTextUtils._cachedTextDimensions = {};
/** @const */
DvtTextUtils.EMPTY_TEXT_BUFFER = 2;

/**
 * Returns the maximum dimensions for the DvtOutputText objects in the specified array.
 * @param {array} textArray An array of DvtOutputText objects.
 * @return {DvtDimension}
 */
DvtTextUtils.getMaxTextDimensions = function(textArray) {
  var maxWidth = 0;
  var maxHeight = 0;

  for (var i = 0; i < textArray.length; i++) {
    if (textArray[i] == null)
      continue;

    var dims = textArray[i].getDimensions();
    maxWidth = Math.max(maxWidth, dims.w);
    maxHeight = Math.max(maxHeight, dims.h);
  }

  return new DvtDimension(maxWidth, maxHeight);
};

/**
 * Returns the text dimensions (width and height) given a textString and cssStyle. It looks up the the cache,
 * and creates a text elem only if the value is not found in the cache.
 * @param {DvtContext} context
 * @param {string} textString
 * @param {DvtCSSStyle} cssStyle
 * @return {DvtRectangle} The text dimensions. Only the w and h should be used. The x and y are meaningless.
 */
DvtTextUtils.getTextStringDimensions = function(context, textString, cssStyle) {
  // Look for the value in the cache and return it if found. Otherwise, create an elem and measure the dimensions.
  var cachedDims = DvtOutputText.getCachedDimensions(textString, cssStyle);
  if (cachedDims != null)
    return cachedDims;
  else {
    var text = new DvtOutputText(context, textString);
    text.setCSSStyle(cssStyle);
    return text.getDimensions();
  }
};

/**
 * Returns the text width given a DvtOutputText.
 * @param {DvtOutputText} text
 * @return {number} The text height.
 */
DvtTextUtils.getTextWidth = function(text) {
  // getDimensions is already optimized to take advantage of cache. This function exists only for API consistency.
  return text.getDimensions().w;
};

/**
 * Returns the text width given a textString and cssStyle.
 * @param {DvtContext} context
 * @param {string} textString
 * @param {DvtCSSStyle} cssStyle
 * @return {number} The text width.
 */
DvtTextUtils.getTextStringWidth = function(context, textString, cssStyle) {
  return DvtTextUtils.getTextStringDimensions(context, textString, cssStyle).w;
};

/**
 * Returns the text height given a DvtOutputText.
 * @param {DvtOutputText} text
 * @return {number} The text height.
 */
DvtTextUtils.getTextHeight = function(text) {
  return DvtTextUtils.guessTextDimensions(text).h;
};

/**
 * Returns the text height given a cssStyle.
 * @param {DvtContext} context
 * @param {DvtCSSStyle} cssStyle
 * @return {number} The text height.
 */
DvtTextUtils.getTextStringHeight = function(context, cssStyle) {
  // Check whether a cached size is already available
  var cssStyleKey = (cssStyle != null) ? cssStyle.hashCodeForTextMeasurement() : '';
  var cachedDims = DvtTextUtils._cachedTextDimensions[cssStyleKey];
  if (cachedDims == null) {
    var text = new DvtOutputText(context);
    text.setCSSStyle(cssStyle);
    cachedDims = DvtTextUtils._cacheRepresentativeDimensions(text, cssStyleKey);
  }

  return cachedDims.h;
};

/**
 * Conservatively estimates the width and height of the specified text object.  This function uses a cache to
 * guess the width and height of the specified text string.  This function relies on the fact that
 * all text strings with the same CSS style return the same height from getDimensions.  Users of
 * this function can avoid expensive getDimensions calls when checking to see if a text string
 * would fit in a certain size.
 * @param {DvtOutputText} text
 * @param {number=} minChars The minimum number of characters that should be displayed before ellipsis if
 *                            truncation occurs. If this argument is skipped, the default is 1 character.
 * @return {Object} An object with fields w, h, and wMin.  w and h correspond to the conservative estimate of the
 *                  text size, while wMin corresponds to the minimum width necessary to show truncated text with the
 *                  specified minimum number of characters.
 */
DvtTextUtils.guessTextDimensions = function(text, minChars) {
  var textString = text.getTextString();
  var cssStyle = text.getCSSStyle();
  var cssStyleKey = (cssStyle != null) ? cssStyle.hashCodeForTextMeasurement() : '';

  // Check whether a cached size is already available
  var cachedDims = DvtTextUtils._cachedTextDimensions[cssStyleKey];

  // Compute the dimensions of a representative character and add to the cache
  if (cachedDims == null)
    cachedDims = DvtTextUtils._cacheRepresentativeDimensions(text, cssStyleKey);

  // Use the cached size to guess at the string length
  var w = cachedDims.w * DvtTextUtils._getTextLength(textString);

  // Esimate the minimum truncated length using fudge factor and by estimating the ellipsis as 2 characters
  minChars = (isNaN(minChars) || minChars == null) ? 1 : minChars;
  var wMin = Math.min(0.3 * w, cachedDims.w * ((0.3 * minChars) + 2));

  if ((text instanceof DvtMultilineText) || (text instanceof DvtBackgroundMultilineText))
    return {w: w, h: cachedDims.h * text.getLineCount(), wMin: wMin};
  return {w: w, h: cachedDims.h, wMin: wMin};
};

/**
 * Fits text in the provided space. This function uses DvtTextUtils.guessTextDimensions before calling setMaxWidth
 * in order to avoid expensive getDimensions calls. It adds the text to the container, and removes it if the text cannot
 * fit at all in the container.
 * @param {DvtOutputText} text
 * @param {number} maxWidth The maximum width of the text
 * @param {number} maxHeight The maximum height of the text
 * @param {DvtContainer} container The parent of the text
 * @param {number=} minChars The minimum number of characters that should be displayed before ellipsis if
 *                            truncation occurs. If this argument is skipped, the default is 1 character.
 * @return {boolean} false if the text cannot fit at all, true otherwise.
 */
DvtTextUtils.fitText = function(text, maxWidth, maxHeight, container, minChars) {
  minChars = (isNaN(minChars) || minChars == null) ? 1 : minChars;
  var untruncatedTextString = text.getTextString();

  var guess = DvtTextUtils._guessFit(text, maxWidth, maxHeight, container, minChars);
  if (guess == true) {
    container.addChild(text);
    return true;
  }
  else if (guess == false) {
    // Remove from parent in this case to be consistent
    var parent = text.getParent();
    if (parent)
      parent.removeChild(text);

    return false;
  }

  // At this point, truncation may be needed.  Try to truncate the text.
  container.addChild(text);

  if (text instanceof DvtMultilineText || text instanceof DvtBackgroundMultilineText) {
    // DvtOutputText will manage removal from container and setting of untruncated text string
    return text.__fitText(maxWidth, maxHeight, minChars);
  }
  else if (text instanceof DvtOutputText || text instanceof DvtBackgroundOutputText)
    DvtTextUtils._truncateOutputText(text, maxWidth, minChars);
  else
    text.setMaxWidth(maxWidth, minChars);

  // Check if the truncated text can fit
  if (text.getTextString() == '') {
    container.removeChild(text);
    return false;
  }
  else {
    if (text.getTextString() != untruncatedTextString)
      text.setUntruncatedTextString(untruncatedTextString);

    return true;
  }
};

/**
 * Creates and adds an 'Empty Text' message to a container
 * @param {DvtContainer} container The container to add the empty text message to
 * @param {string} textStr The emtpy text message
 * @param {DvtRectangle} space The available space to render the emtpy text message in
 * @param {DvtEventManager} eventManager The event manager to associate any tooltips with for truncated text
 * @param {DvtCSSStyle} style The CSS style to apply to the empty text
 * @return {DvtOutputText}
 */
DvtTextUtils.renderEmptyText = function(container, textStr, space, eventManager, style) {
  // Create and position the text
  var text = new DvtOutputText(container.getCtx(), textStr, space.x + space.w / 2, space.y + space.h / 2);
  if (style)
    text.setCSSStyle(style);
  text.alignCenter();
  text.alignMiddle();

  // Truncate the text to fit horizontally.  Note, we do not account for vertical size, because displaying a
  // cut off "No Data" message is better than displaying none at all.
  var maxWidth = space.w - 2 * DvtTextUtils.EMPTY_TEXT_BUFFER;
  if (DvtTextUtils.fitText(text, maxWidth, Infinity, container, 0)) {
    // Add tooltip if truncated
    if (text.isTruncated())
      eventManager.associate(text, new DvtSimpleObjPeer(text.getUntruncatedTextString()));

    // WAI-ARIA
    text.setAriaProperty('hidden', null);
  }
  return text;
};

/**
 * Caches the size of representative characters for the cssStyleKey using the DvtOutputText instance.
 * @param {DvtOutputText} text
 * @param {string} cssStyleKey The key to use for caching.
 * @return {object} An object with fields w and h.
 * @private
 */
DvtTextUtils._cacheRepresentativeDimensions = function(text, cssStyleKey) {
  // Measure M and W, which are usually the longest characters. Also safe for CJK, which is always monospace.
  var textString = text.getTextString();
  text.setTextString(DvtOutputText.REPRESENTATIVE_TEXT);
  var dims = text.measureDimensions();
  text.setTextString(textString);

  // Cache the dims of a single character. Conservative because real strings are not solely longest characters.
  var cachedDims = {w: 0.50 * dims.w, h: dims.h};
  DvtTextUtils._cachedTextDimensions[cssStyleKey] = cachedDims;
  return cachedDims;
};

/**
 * Centers text vertically adjusting for browser alignment differences
 * @param {object} text The text needed to be centered. Can be either DvtOutputText or DvtMultilineText.
 * @param {number} centerY The y axis midpoint of the bounds.
 */
DvtTextUtils.centerTextVertically = function(text, centerY) {
  if (DvtAgent.isPlatformIE()) {
    text.setY(centerY);
    text.alignMiddle();
  }
  else {
    var textHeight = 0;
    if (text instanceof DvtOutputText)
      textHeight = DvtTextUtils.getTextHeight(text);
    else if (text instanceof DvtMultilineText)
      textHeight = text.getDimensions().h;
    text.setY(centerY - textHeight / 2);
  }
};

/**
 * Uses estimates to quickly determine whether the text can fit in the specified area.  Returns true if the text will
 * definitely fit, false if the text will definitely not fit, and null if further calculation is needed.
 * @param {DvtOutputText} text
 * @param {number} maxWidth The maximum width of the text
 * @param {number} maxHeight The maximum height of the text
 * @param {DvtContainer} container The parent of the text
 * @param {number} minChars The minimum number of characters that should be displayed before ellipsis
 * @return {object} false if the text won't fit, true if it will, null if further calculation needed
 * @private
 */
DvtTextUtils._guessFit = function(text, maxWidth, maxHeight, container, minChars) {
  if (text instanceof DvtMultilineText) {
    // Can optimize in the future if needed
    return null;
  }
  else {
    // Estimate the dims conservatively
    var estimatedDims = DvtTextUtils.guessTextDimensions(text, minChars);

    // The "estimated" height is always accurate and estimated min width is conservative. Safe to quit if it doesn't
    // fit. Don't quit if the string is short, since the cache is less accurate.
    if (estimatedDims.h > maxHeight || (estimatedDims.wMin > maxWidth && DvtTextUtils._getTextLength(text.getTextString()) > 3))
      return false;

    // The estimated width is conservative, ensuring that truncation is not necessary if the estimate < maxWidth.
    if (estimatedDims.w < maxWidth)
      return true;

    // No determination could be made
    return null;
  }
};


/**
 * Truncates the text instance to fit within the given width.  Sets the text string of the text to an empty string if
 * truncated text does not fit.
 * @param {DvtOutputText} text The text instance to be truncated.
 * @param {number} maxWidth The maximum width of the text.
 * @param {number} minChars The minimum number of characters that should be displayed before ellipsis after truncation.
 * @private
 */
DvtTextUtils._truncateOutputText = function(text, maxWidth, minChars) {
  // Initial check using accurate dimensions
  var dims = text.measureDimensions();
  if (dims.w <= maxWidth)
    return;

  // Determine avg pixels per char and make an initial guess at the truncation
  var textString = text.getTextString();
  var textLength = textString.length;
  var avgPixelsPerChar = dims.w / DvtTextUtils._getTextLength(textString);
  var maxNumChars = Math.max(Math.floor(maxWidth / avgPixelsPerChar) - 2, minChars); // Subtract 2 for the ellipsis

  // Determine whether we can use context to measure text.
  // If so, don't need to call getDimensions() at all, and only need to setTextString() at the very end.
  var truncatedTextString = textString.substring(0, maxNumChars) + DvtOutputText.ELLIPSIS;
  text.setTextString(truncatedTextString);
  dims = text.measureDimensions();

  // Add characters if initial guess is too short.  Keep track of the previous string and dims in case we overshoot
  var prevTextString = truncatedTextString;
  var prevDims = dims;
  while (dims.w < maxWidth) {
    if (maxNumChars >= textString.length)
      break;

    // Calculate the availWidth and use that to estimate the number of characters to increment
    var availWidth = maxWidth - dims.w;

    // estimatedIncrement: The smaller of the chars remaining and the estimate of characters than can fit
    var estimatedIncrement = Math.min(textLength - maxNumChars, Math.max(Math.floor(availWidth / avgPixelsPerChar), 1));

    // Add chars and measure again
    maxNumChars += estimatedIncrement;
    truncatedTextString = textString.substring(0, maxNumChars) + DvtOutputText.ELLIPSIS;
    text.setTextString(truncatedTextString);
    dims = text.measureDimensions();

    // If we overshot and the increment was only 1, then restore the old string
    if (estimatedIncrement == 1 && dims.w > maxWidth) {
      text.setTextString(prevTextString);
      dims = prevDims;
      break;
    }

    // Otherwise update the previous string and dims
    prevTextString = truncatedTextString;
    prevDims = dims;
  }

  // Remove characters if initial guess is too long
  while (dims.w > maxWidth) {
    if (maxNumChars <= minChars) {
      // minChars doesn't fit, return ""
      text.setTextString('');
      break;
    }

    // Truncate 1 char at a time
    maxNumChars -= 1;
    truncatedTextString = textString.substring(0, maxNumChars) + DvtOutputText.ELLIPSIS;
    text.setTextString(truncatedTextString);
    dims = text.measureDimensions();
  }
};


/**
 * Returns the number of characters in a text string after stripping off the zero-width characters.
 * @param {string} textString
 * @return {number} String length excluding the zero-width characters
 * @private
 */
DvtTextUtils._getTextLength = function(textString) {
  textString = textString.replace(/[\u200A\u200B\u200C\u200D\u200E\u200F\uFEFF]/g, '');
  return textString.length;
};
// Copyright (c) 2008, 2015, Oracle and/or its affiliates. All rights reserved.
/**
 *   Static Shape Utility Functions
 *   @class DvtSvgShapeUtils
 *   @constructor
 */
var DvtSvgShapeUtils = function()
{};

DvtObj.createSubclass(DvtSvgShapeUtils, DvtObj, 'DvtSvgShapeUtils');

/**
 * @private
 */
DvtSvgShapeUtils._uniqueSeed = 0;  // for unique Id creation

/**
 * Adds a clipping region to the global defs element.
 * @param {DvtClipPath} cp The DvtClipPath object specifying the clipping region(s).
 * @param {DvtContext} context The rendering context.
 * @return {boolean} True if the clipping paths was successfully or already added, else false.
 */
DvtSvgShapeUtils.addClipPath = function(cp, context) {
  var id = cp.getId();
  if (! id) {
    return false;    // essential to have an id to reference
  }

  var elemDefs = context.getDefs();
  if (! elemDefs) {
    return false;
  }

  // Check if clipping path for this id is already defined.
  var defsChildren = elemDefs.childNodes;
  var len = defsChildren.length;
  for (var i = 0; i < len; i++) {
    var el = defsChildren[i];
    if (el.id === id)
      return true;
  }

  var elemClip = DvtSvgShapeUtils.createElement('clipPath', id);
  context.appendDefs(elemClip);

  var regions = cp.getRegions();
  for (var i = 0; i < regions.length; i++) {
    var region = regions[i];
    if (region) {
      var elem = null;
      if (region.type === DvtClipPath.RECT) {
        elem = DvtSvgShapeUtils.createElement('rect');
        DvtToolkitUtils.setAttrNullNS(elem, 'x', region.x);
        DvtToolkitUtils.setAttrNullNS(elem, 'y', region.y);
        DvtToolkitUtils.setAttrNullNS(elem, 'width', region.w);
        DvtToolkitUtils.setAttrNullNS(elem, 'height', region.h);
        if (region.rx)
          DvtToolkitUtils.setAttrNullNS(elem, 'rx', region.rx);
        if (region.ry)
          DvtToolkitUtils.setAttrNullNS(elem, 'ry', region.ry);
      }
      else if (region.type === DvtClipPath.PATH) {
        elem = DvtSvgShapeUtils.createElement('path');
        DvtToolkitUtils.setAttrNullNS(elem, 'd', region.d);
      }
      else if (region.type === DvtClipPath.POLYGON) {
        elem = DvtSvgShapeUtils.createElement('polygon');
        DvtToolkitUtils.setAttrNullNS(elem, 'points', region.points);
      }
      else if (region.type === DvtClipPath.ELLIPSE) {
        elem = DvtSvgShapeUtils.createElement('ellipse');
        DvtToolkitUtils.setAttrNullNS(elem, 'cx', region.cx);
        DvtToolkitUtils.setAttrNullNS(elem, 'cy', region.cy);
        DvtToolkitUtils.setAttrNullNS(elem, 'rx', region.rx);
        DvtToolkitUtils.setAttrNullNS(elem, 'ry', region.ry);
      }
      else if (region.type === DvtClipPath.CIRCLE) {
        elem = DvtSvgShapeUtils.createElement('circle');
        DvtToolkitUtils.setAttrNullNS(elem, 'cx', region.cx);
        DvtToolkitUtils.setAttrNullNS(elem, 'cy', region.cy);
        DvtToolkitUtils.setAttrNullNS(elem, 'r', region.r);
      }

      if (elem)
        DvtToolkitUtils.appendChildElem(elemClip, elem);
    }
  }

  return true;
};

/**
 * Adds a mask to the global defs element.
 * @param {DvtMask} mask The mask to add to the global defs
 * @param {DvtContext} context The context to add the gradient defs element to
 * @return {boolean} True if the mask was successfully or already added, else false
 */
DvtSvgShapeUtils.addMask = function(mask, context) {
  var id = mask.getId();
  if (!id) {
    return false;
  }

  var elemDefs = context.getDefs();
  if (!elemDefs) {
    return false;
  }

  // Check if mask for this id is already defined
  var defsChildren = elemDefs.childNodes;
  var len = defsChildren.length;
  for (var i = 0; i < len; i++) {
    var el = defsChildren[i];
    if (el.id === id)
      return true;
  }

  var elemMask = DvtSvgShapeUtils.createElement('mask', id);
  context.appendDefs(elemMask);

  var gradient = mask.getGradient();
  DvtSvgShapeUtils.addSpecialFill(gradient, context);

  var bounds = mask.getBounds();
  var rectElem = DvtSvgShapeUtils.createElement('rect');
  DvtToolkitUtils.setAttrNullNS(rectElem, 'x', bounds.x);
  DvtToolkitUtils.setAttrNullNS(rectElem, 'y', bounds.y);
  DvtToolkitUtils.setAttrNullNS(rectElem, 'width', bounds.w);
  DvtToolkitUtils.setAttrNullNS(rectElem, 'height', bounds.h);
  DvtToolkitUtils.setAttrNullNS(rectElem, 'fill', DvtToolkitUtils.getUrlById(gradient.getId()));
  DvtToolkitUtils.appendChildElem(elemMask, rectElem);
  return true;
};

/**
 * Adds a gradient or linear fill to the global defs element.
 * @param {DvtGradientFill|DvtPatternFill} fill The fill to add to the global defs
 * @param {DvtContext} context The context to add the gradient defs element to
 */
DvtSvgShapeUtils.addSpecialFill = function(fill, context) {
  var id;
  if (!fill.isLocked()) {
    id = fill.getId();
    if (!id) {
      if (fill instanceof DvtPatternFill) {
        id = DvtSvgShapeUtils.getUniqueId('pat');// no id - create unique internal id
      }
      else {
        id = DvtSvgShapeUtils.getUniqueId('Gr');// no id - create unique internal id
      }
      fill.setId(id);
    }
  }
  else {
    id = fill.getId();
  }
  if (!fill._defPresent) {
    var elem = fill._defElem;
    if (!elem) {
      if (fill instanceof DvtGradientFill)
        elem = DvtSvgGradientUtils.createElem(fill, id);
      else if (fill instanceof DvtImageFill)
        elem = DvtSvgImageFillUtils.createElem(fill, id);
      else if (fill instanceof DvtPatternFill)
        elem = DvtSvgPatternFillUtils.createElem(fill, id);
    }
    fill._defElem = elem;
    context.appendDefs(elem);
    fill._defPresent = true;
  }
};

/**
 * Adds a gradient stroke to the global defs element.
 * @param {DvtGradientStroke} stroke The stroke to add to the global defs
 * @param {DvtContext} context The context to add the gradient defs element to
 */
DvtSvgShapeUtils.addSpecialStroke = function(stroke, context) {
  var id;
  if (!stroke.isLocked()) {
    id = stroke.getId();
    if (!id) {
      id = DvtSvgShapeUtils.getUniqueId('Gr');// no id - create unique internal id
      stroke.setId(id);
    }
  }
  else {
    id = stroke.getId();
  }

  if (!stroke._defPresent) {
    var elem = stroke._defElem;
    if (!elem)
      elem = DvtSvgGradientUtils.createElem(stroke, id);// create SVG DOM elem
    stroke._defElem = elem;
    context.appendDefs(elem);
    stroke._defPresent = true;
  }
};

/**
 * Creates an SVG DOM element.
 * @param {String} name
 * @param {String} id  Optional ID to be applied to the created DOM element.
 * @return {Element} the DOM element
 */
DvtSvgShapeUtils.createElement = function(name, id)
{
  var elem = document.createElementNS(DvtToolkitUtils.SVG_NS, name);

  if (id) {
    DvtToolkitUtils.setAttrNullNS(elem, 'id', id);
  }

  return elem;
};


/**
 * Creates a unique ID string
 * @param {String} sPrefix  Optional string used as a prefix for the generated ID. If
 *                          omitted, the ID generated will be prefixed with '$'.
 * @return {String}        A unique ID string
 */
DvtSvgShapeUtils.getUniqueId = function(sPrefix)
{
  return (sPrefix ? sPrefix : '$') + DvtSvgShapeUtils._uniqueSeed++;
};


/**
 * Converts an array of x,y coordinate pairs into an SVG style string.
 * @param {array} arPoints the array of points
 * @return {Array}  the string usable by SVG polygons and polylines
 */
DvtSvgShapeUtils.convertPointsArray = function(arPoints) {
  var len = arPoints.length;   // convert to svg space separated list
  var s = '';

  for (var i = 0; i < len; i++) {
    if (i > 0) {
      s += ' ';
    }
    s += DvtToolkitUtils.roundDecimal(arPoints[i]);
  }
  return s;
};
// Copyright (c) 2008, 2015, Oracle and/or its affiliates. All rights reserved.
/**
 *  Abstract base class for displayable objects.
 *  @extends {DvtObj}
 *  @class
 *  @constructor
 */
var DvtDisplayable = function() {
  // This class should never be instantiated directly
};

DvtObj.createSubclass(DvtDisplayable, DvtObj, 'DvtDisplayable');


/**
 * Array of SVG attributes that should be transferred to the outer element.
 * @private
 */
DvtDisplayable._ATTRS_TRANSFERABLE_TO_OUTER = [/*'filter',*/'clip-path'];


/**
 * A mapping between event types and the string needed to create a new event for dispatch
 * @private
 */
DvtDisplayable._CREATE_EVENT_TYPE_MAP = {
  'click': DvtMouseEvent.CLICK,
  'mouseover': DvtMouseEvent.MOUSEOVER,
  'mouseout': DvtMouseEvent.MOUSEOUT,
  'mousemove': DvtMouseEvent.MOUSEMOVE,
  'keydown': DvtKeyboardEvent.KEYDOWN,
  'keyup': DvtKeyboardEvent.KEYUP,
  'keypress': DvtKeyboardEvent.KEYPRESS
};

/**
 * A boolean to toggle whether displayable IDs are sent to the DOM or not.  false for performance reasons but can be
 * changed to true for debugging purposes.
 */
DvtDisplayable.SET_ID_ON_DOM = false;

/**
 * @param {DvtContext} context
 * @param {string} type The type of SVG element to be created.
 * @param {string=} id The optional id for the corresponding DOM element.
 * @protected
 */
DvtDisplayable.prototype.Init = function(context, type, id) {
  this._context = context;
  this._elem = DvtSvgShapeUtils.createElement(type);
  this._elem._obj = this;//  pointer back to this object
  this.setId(id);
  // TODO  Removal of null initialization routines
  this._bVisible = true;
  this._pixelHinting = false;
  this._cursor = null;
  this._bMouseEnabled = true;
  this._alpha = 1;
  this._matrix = null;

  this._ariaProperties = {
  };

  /**
   * Property map used to cache SVG property values to avoid DOM access.
   * @private
   */
  this._properties = {};
};


/**
 * Returns the application context.
 * @return {DvtContext}
 */
DvtDisplayable.prototype.getCtx = function() {
  return this._context;
};


/**
 * Internal DVT toolkit framework use only.
 * @protected
 * @return {DvtDisplayable}
 */
DvtDisplayable.prototype.getImpl = function() {
  // TODO  Deprecated.  Will start removing usages outside of the shapes layer once the new toolkit is merged.
  return this;
};


/**
 *  @return {DvtDisplayable}  the controlling (js) object.
 */
DvtDisplayable.prototype.getObj = function()// TODO  REMOVE
{
  // TODO  Deprecated.  Will start removing usages outside of the shapes layer once the new toolkit is merged.
  return this;
};


/**
 *  Returns the SVG DOM element representing this displayable object.
 *  @return {DOM_element}  An SVG DOM element representing this displayable object.
 */
DvtDisplayable.prototype.getElem = function() {
  return this._elem;
};


/**
 * Returns the outermost SVG DOM element of this displayable.  This should be used when
 * removing this displayable from the DOM.
 * @return {DvtDisplayable}
 */
DvtDisplayable.prototype.getOuterElem = function() {
  return this._outerElem ? this._outerElem : this.getElem();
};


/**
 * Returns the id of this displayable.
 * @return {string}
 */
DvtDisplayable.prototype.getId = function() {
  return this._id;
};

/**
 * Specifies the id of this displayable.
 * @param {string} id The id to set
 * @param {boolean} bForce True if we should always set id on DOM. Used for VoiceOver .
 */
DvtDisplayable.prototype.setId = function(id, bForce) {
  if (this._id !== id) {
    if (id && id.length === 0) {
      id = null;
    }
    this._id = id;
    if (DvtDisplayable.SET_ID_ON_DOM || bForce) {
      if (id)
        DvtToolkitUtils.setAttrNullNS(this.getOuterElem(), 'id', id);
      else
        DvtToolkitUtils.removeAttrNullNS(this.getOuterElem(), 'id');
    }
  }
};


/**
 * Returns the parent of this object.
 * @return {DvtDisplayable}
 */
DvtDisplayable.prototype.getParent = function() {
  return this._parent;
};


/**
 * Sets the parent of this object.
 * @param {DvtDisplayable} parent
 */
DvtDisplayable.prototype.setParent = function(parent) {
  this._parent = parent;
};

/**
 * Returns true if this object is a descendant of the specified object.
 * @param {DvtObj} obj
 * @return {boolean}
 */
DvtDisplayable.prototype.isDescendantOf = function(obj) {
  if (!obj || !this.getParent())
    return false;
  else if (this.getParent() == obj)
    return true;
  else
    return this.getParent().isDescendantOf(obj);
};

/**
 * Returns true if pixel hinting is enabled.
 * @return {boolean}
 */
DvtDisplayable.prototype.getPixelHinting = function() {
  return this._pixelHinting;
};


/**
 * Specifies whether pixel hinting is enabled.
 * @param {boolean} bHint
 */
DvtDisplayable.prototype.setPixelHinting = function(bHint) {
  this._pixelHinting = bHint;
  if (bHint)
    DvtToolkitUtils.setAttrNullNS(this._elem, 'shape-rendering', 'crispEdges');
  else
    DvtToolkitUtils.removeAttrNullNS(this._elem, 'shape-rendering');
};


/**
 *  Gets the visibility of this object.
 *  @return {boolean}  True if the object is visible, else false.
 */
DvtDisplayable.prototype.getVisible = function() {
  return this._bVisible;
};


/**
 *  Enables/disables the visibility of this object.
 *  @param {boolean}  bVis  True if the object is to be visible, else false if
 *  it is to be hidden.
 */
DvtDisplayable.prototype.setVisible = function(bVis) {
  if (this._bVisible !== bVis) {
    this._bVisible = bVis;
    var elem = (this instanceof DvtMarker) ? this._elem : this.getElem();

    // - HTML5: VISIBILITY="VISIBLE" LEFT ON ELEMENT AFTER ANIMATION
    //Since the default value for visibility is true, just remove the 'visibility' attribute.
    //This change is needed to avoid the attribute visibility="visible" left on
    //this element after animation.
    //Note: in SVG, the visibility attribute doesn't behave like Flash,
    //Ex: if a child has visibility="visible" and its container has visibility=hidden
    //the child is still visible
    if (bVis) {
      DvtToolkitUtils.removeAttrNullNS(elem, 'visibility');
    }
    else {
      DvtToolkitUtils.setAttrNullNS(elem, 'visibility', 'hidden');
    }
  }
};


/**
 *  Sets a clipping region for this object.
 *  @param {DvtClipPath}  cp  the DvtClipPath object specifying the clipping region.
 */
DvtDisplayable.prototype.setClipPath = function(cp) {
  // Update clip path reference count on the context
  if (cp) {
    if (this.ClipPathId == cp.getId()) {
      return;
    } else {
      if (this.ClipPathId)
        this._context.decreaseGlobalDefReference(this.ClipPathId);
      this.ClipPathId = cp.getId();
      this._context.increaseGlobalDefReference(this.ClipPathId);

      // Create an outer group if there is a matrix defined, since SVG applies transforms before clip paths.
      if (!this._outerElem && this._matrix)
        this._createOuterGroupElem();

      var id = cp.getId();
      if (id) {
        // essential to have an id to reference
        var context = this.getCtx();

        if (DvtSvgShapeUtils.addClipPath(cp, context)) {
          // add to global defs
          // Set the clip path on the outer element of the shape
          DvtToolkitUtils.setAttrNullNS(this.getOuterElem(), 'clip-path', DvtToolkitUtils.getUrlById(id));
        }
      }
    }
  }
  else if (!cp && this.ClipPathId) {
    this._context.decreaseGlobalDefReference(this.ClipPathId);
    this.ClipPathId = null;
    DvtToolkitUtils.removeAttrNullNS(this.getOuterElem(), 'clip-path');
    return;
  }
};

/**
 * Adds a mask to the global defs element.
 * @param {DvtMask} mask
 */
DvtDisplayable.prototype.setMask = function(mask) {
  // Update clip path reference count on the context
  if (mask) {
    if (this.MaskId == mask.getId()) {
      return;
    } else {
      if (this.MaskId)
        this._context.decreaseGlobalDefReference(this.MaskId);
      this.MaskId = mask.getId();
      this._context.increaseGlobalDefReference(this.MaskId);

      // Create an outer group if there is a matrix defined, since SVG applies transforms before clip paths.
      if (!this._outerElem && this._matrix)
        this._createOuterGroupElem();

      var id = mask.getId();
      if (id) {
        // essential to have an id to reference
        var context = this.getCtx();

        if (DvtSvgShapeUtils.addMask(mask, context)) {
          // add to global defs
          // Set the clip path on the outer element of the shape
          DvtToolkitUtils.setAttrNullNS(this.getOuterElem(), 'mask', DvtToolkitUtils.getUrlById(id));
        }
      }
    }
  }
  else if (!mask && this.MaskId) {
    this._context.decreaseGlobalDefReference(this.MaskId);
    this.MaskId = null;
    DvtToolkitUtils.removeAttrNullNS(this.getOuterElem(), 'mask');
    return;
  }
};

/**
 * Converts the DvtRectangle in the local coordinate system to the target displayable's coordinate system.
 * @param {DvtRectangle} rect
 * @param {DvtDisplayable} targetCoordinateSpace
 * @return {DvtRectangle}
 */
DvtDisplayable.prototype.ConvertCoordSpaceRect = function(rect, targetCoordinateSpace) {
  if (!targetCoordinateSpace || targetCoordinateSpace === this)
    return rect;

  // First calculate relative to the stage
  var stageP1 = this.localToStage(new DvtPoint(rect.x, rect.y));
  var stageP2 = this.localToStage(new DvtPoint(rect.x + rect.w, rect.y + rect.h));

  // Then convert relative to target
  var targetP1 = targetCoordinateSpace.stageToLocal(stageP1);
  var targetP2 = targetCoordinateSpace.stageToLocal(stageP2);

  return new DvtRectangle(targetP1.x, targetP1.y, targetP2.x - targetP1.x, targetP2.y - targetP1.y);
};


/**
 * Returns the dimensions of the displayable by calling getBBox.
 * @return {DvtRectangle}
 */
DvtDisplayable.prototype.GetSvgDimensions = function() {
  try {
    var bbox = this.getElem().getBBox();
  }
  catch (e) {
    if (DvtAgent.isEnvironmentTest())
      print('Error in DvtDisplayable.prototype.GetSvgDimensions: ' + e);

    return null;
  }
  //don't return bbox directly because we don't want calling code
  //to depend on platform-specific API, so instead turn it into
  //a DvtRectangle
  return new DvtRectangle(bbox.x, bbox.y, bbox.width, bbox.height);
};


/**
 * Returns the bounds of the displayable relative to the target coordinate space.  If the target
 * coordinate space is not specified, returns the bounds relative to this displayable.
 * @param {DvtDisplayable} targetCoordinateSpace The displayable defining the target coordinate space.
 * @return {DvtRectangle} The bounds of the displayable relative to the target coordinate space.
 */
DvtDisplayable.prototype.getDimensions = function(targetCoordinateSpace) {
  var bounds = this.GetSvgDimensions();
  return this.ConvertCoordSpaceRect(bounds, targetCoordinateSpace);
};


//:
/**
 * Returns the bounds of the displayable relative to the target coordinate space, including stroke width.  If the target
 * coordinate space is not specified, returns the bounds relative to this displayable.
 * @param {DvtDisplayable} targetCoordinateSpace The displayable defining the target coordinate space.
 * @return {DvtRectangle} The bounds of the displayable relative to the target coordinate space.
 */
DvtDisplayable.prototype.getDimensionsWithStroke = function(targetCoordinateSpace) {
  var bounds = this.GetDimensionsWithStroke();
  return this.ConvertCoordSpaceRect(bounds, targetCoordinateSpace);
};

//:
/**
 * Returns the dimensions of the displayable relative to the target space.
 * @param {DvtRectangle} targetCoordinateSpace
 * @return {DvtRectangle}
 * @protected
 */
DvtDisplayable.prototype.GetDimensionsWithStroke = function(targetCoordinateSpace) {
  //get dims for the shape elem, and change coord space if necessary
  var dims = this.GetElemDimensionsWithStroke();
  if (!targetCoordinateSpace || targetCoordinateSpace === this)
    return dims;
  else {
    // Calculate the bounds relative to the target space
    return this.ConvertCoordSpaceRect(dims, targetCoordinateSpace);
  }
};

//:
/**
 * Returns the dimensions of the displayable by calling getBBox.
 * @return {DvtRectangle}
 * @protected
 */
DvtDisplayable.prototype.GetElemDimensionsWithStroke = function() {
  //the method is overridden in DvtShape to account for the stroke
  return this.GetSvgDimensions();
};


/**
 * Returns true if any of the specified attribute names are present on the element.
 * @param {object} elem  The SVG DOM element.
 * @param {array} attrNames The array of attribute names to look for.
 * @protected
 * @return {boolean}
 */
DvtDisplayable.HasAttributes = function(elem, attrNames) {
  if (attrNames) {
    var numAttrs = attrNames.length;
    for (var i = 0; i < numAttrs; i++) {
      if (DvtToolkitUtils.getAttrNullNS(elem, attrNames[i]))// TODO  This should be hasAttrNullNS
        return true;
    }
  }
  return false;
};


/**
 * Transfer relevant attributes from the original SVG DOM element to the new SVG DOM element.
 * @param {object} fromElem  The SVG DOM element.
 * @param {object} toElem  The new SVG DOM element.
 * @param {array} attrNames The array of attribute names to transfer.
 * @protected
 */
DvtDisplayable.TransferAttributes = function(fromElem, toElem, attrNames) {
  if (attrNames) {
    var attrName;
    var attrValue;
    var numAttrs = attrNames.length;
    for (var i = 0; i < numAttrs; i++) {
      attrName = attrNames[i];
      attrValue = DvtToolkitUtils.getAttrNullNS(fromElem, attrName);
      if (attrValue) {
        DvtToolkitUtils.removeAttrNullNS(fromElem, attrName);
        DvtToolkitUtils.setAttrNullNS(toElem, attrName, attrValue);
        if (DvtAgent.isPlatformIE()) {
          // , prev removeAttributeNS()
          DvtToolkitUtils.setAttrNullNS(fromElem, attrName, null);// fails for IE9 (9.0.8112.16421)
        }
      }
    }
  }
};


/**
 * Creates an outer group element to workaround issues with filters and clip paths.
 * @private
 */
DvtDisplayable.prototype._createOuterGroupElem = function() {
  if (this._outerElem)
    return;

  var outerId = this._id ? this._id + '_outer' : null;
  this._outerElem = DvtSvgShapeUtils.createElement('g', outerId);

  // Reparent the DOM elements
  var parent = this.getParent();
  if (parent) {
    var parentElem = parent.getElem();
    parentElem.replaceChild(this._outerElem, this.getElem());
  }
  DvtToolkitUtils.appendChildElem(this._outerElem, this.getElem());

  // Transfer attributes from the old outermost SVG element to the new outer element
  DvtDisplayable.TransferAttributes(this.getElem(), this._outerElem, DvtDisplayable._ATTRS_TRANSFERABLE_TO_OUTER);
};


/**
 * @return {DvtCssStyle} the DvtCSSStyle of this object.
 */
DvtDisplayable.prototype.getCSSStyle = function() {
  return this._cssStyle;
};


/**
 * Sets the DvtCSSStyle of this object.
 * @param {DvtCssStyle} style The DvtCSSStyle of this object.
 */
DvtDisplayable.prototype.setCSSStyle = function(style) {
  this._cssStyle = style;// TODO  Should we have this on non-text-objects?
};


/**
 * Sets the cursor on this object.
 * @param {string} cursorType
 */
DvtDisplayable.prototype.setCursor = function(cursorType) {
  this._cursor = cursorType;

  // Batik has trouble with certain cursor syntax.
  if (DvtAgent.isEnvironmentBatik())
    return;

  // Update the DOM
  if (cursorType)
    DvtToolkitUtils.setAttrNullNS(this.getElem(), 'cursor', cursorType);
  else
    DvtToolkitUtils.removeAttrNullNS(this.getElem(), 'cursor');
};


/**
 * Gets the cursor used on this object.
 * @return {String}
 */
DvtDisplayable.prototype.getCursor = function() {
  return this._cursor;
};


/**
 * Sets whether mouse events are enabled on this object.
 * @param {boolean} bEnabled whether mouse events are enabled
 */
DvtDisplayable.prototype.setMouseEnabled = function(bEnabled) {
  this._bMouseEnabled = bEnabled;
  var val = bEnabled ? 'visiblePainted' : 'none';
  DvtToolkitUtils.setAttrNullNS(this.getElem(), 'pointer-events', val);
};


/**
 * Gets whether mouse events are enabled on this object.
 * @return {boolean}
 */
DvtDisplayable.prototype.isMouseEnabled = function() {
  return this._bMouseEnabled;
};


/**
 *  Returns the alpha channel value.
 *  @return {number} A value between 0 (invisible) and 1 (opaque).
 */
DvtDisplayable.prototype.getAlpha = function() {
  return this._alpha;
};


/**
 *  Sets the alpha.
 *  @param {number} alpha  A value between 0 (invisible) and 1 (opaque).
 */
DvtDisplayable.prototype.setAlpha = function(alpha) {
  //when animating alpha, small values are turned into strings like
  //"3.145e-8", which SVG incorrectly clamps to 1, so just cut off
  //small values here and make them 0
  if (alpha < 0.00001)
    alpha = 0;

  if (alpha !== this._alpha) {
    this._alpha = alpha;
    DvtToolkitUtils.setAttrNullNS(this.getElem(), 'opacity', this._alpha, 1);
  }
};


/**
 * Applies deferred aria role and properties to the DOM.
 */
DvtDisplayable.prototype.applyAriaProperties = function() {
  if (DvtAgent.deferAriaCreation()) {
    // Apply Aria Role
    if (this._ariaRole)
      this._setAriaRole(this._ariaRole);

    // Apply Aria Properties
    for (var property in this._ariaProperties) {
      this._setAriaProperty(property, this._ariaProperties[property]);
    }
  }
};


/**
 * Sets the WAI-ARIA role.
 * @param {String} role The role attribute value.
 */
DvtDisplayable.prototype.setAriaRole = function(role) {
  if (!DvtAgent.deferAriaCreation())
    this._setAriaRole(role);

  this._ariaRole = role;
};


/**
 * Sets the WAI-ARIA role.
 * @param {String} role The role attribute value.
 * @private
 */
DvtDisplayable.prototype._setAriaRole = function(role) {
  var elem = this.GetAriaElem();
  if (role)
    DvtToolkitUtils.setAttrNullNS(elem, 'role', role);
  else
    DvtToolkitUtils.removeAttrNullNS(elem, 'role');
};


/**
 * Gets the WAI-ARIA role.
 * @return {String} The role attribute value.
 */
DvtDisplayable.prototype.getAriaRole = function() {
  return this._ariaRole;
};

/**
 * Returns the DOM element to add WAI-ARIA attributes to. Allows subclasses to return the outer group element if
 * needed (see ).
 * @return {SVGElement} The SVG DOM element to add wai-aria attributes to
 * @protected
 */
DvtDisplayable.prototype.GetAriaElem = function() {
  return this.getElem();
};

/**
 * Sets the WAI-ARIA property/state.
 * @param {string} property The property/state attribute name. The prefix "aria-" should be skipped.
 * @param {string|number} value The property/state attribute value.
 */
DvtDisplayable.prototype.setAriaProperty = function(property, value) {
  if (!property)
    return;

  if (!DvtAgent.deferAriaCreation())
    this._setAriaProperty(property, value);

  this._ariaProperties[property] = value;
};


/**
 * Sets the WAI-ARIA property/state.
 * @param {string} property The property/state attribute name. The prefix "aria-" should be skipped.
 * @param {string|number} value The property/state attribute value.
 * @private
 */
DvtDisplayable.prototype._setAriaProperty = function(property, value) {
  var elem = this.GetAriaElem();
  if (value != null && value !== '') {
    // Make replacements on the text string as needed
    if (property == 'label')
      value = DvtStringUtils.processAriaLabel(value);

    DvtToolkitUtils.setAttrNullNS(elem, 'aria-' + property, value);
  }
  else
    DvtToolkitUtils.removeAttrNullNS(elem, 'aria-' + property);
};


/**
 * Gets the WAI-ARIA property/state.
 * @param {String} property The property/state attribute name. The prefix "aria-" should be skipped.
 * @return {String} The property/state attribute value.
 */
DvtDisplayable.prototype.getAriaProperty = function(property) {
  if (property) {
    return this._ariaProperties[property];
  } else {
    return null;
  }
};

/**
 * Convert a point from stage coords to local coords.
 * @param {DvtPoint}  point  point in stage coords
 * @return {DvtPoint}
 */
DvtDisplayable.prototype.stageToLocal = function(point) {
  var pathToStage = this.getPathToStage();
  var mat;
  var retPoint = point;
  for (var i = pathToStage.length - 1; i >= 0; i--) {
    mat = pathToStage[i].getMatrix().clone();
    mat.invert();
    retPoint = mat.transformPoint(retPoint);
  }
  return retPoint;
};


/**
 * Convert a point from local coords to stage coords.
 * @param {DvtPoint}  point  point in local coords
 * @return {DvtPoint}
 */
DvtDisplayable.prototype.localToStage = function(point) {
  var pathToStage = this.getPathToStage();
  var mat;
  var retPoint = point;
  for (var i = 0; i < pathToStage.length; i++) {
    mat = pathToStage[i].getMatrix();
    retPoint = mat.transformPoint(retPoint);
  }
  return retPoint;
};


/**
 * Get an array of objects in the tree from this displayable to the stage.
 * The returned array is ordered with this displayable first and the stage
 * last, like [this, this.getParent(), ... , stage].
 * @return {array}
 */
DvtDisplayable.prototype.getPathToStage = function()
{
  var displayable = this;
  var array = [];
  while (displayable)
  {
    array.push(displayable);
    displayable = displayable.getParent();
  }
  return array;
};


/**
 *    Destroy the displayable.  It should no longer be used or displayed
 */
DvtDisplayable.prototype.destroy = function()
{
  //: Remove all draw effects at once, because removing
  //them one by one results in the remaining ones being reapplied at each
  //iteration.  Since this object is being destroyed, it is most likely
  //disconnected from the display list.  When the draw effects are applied,
  //they may call getBBox() on the element, which can result in errors in
  //Firefox when the object is disconnected, and the view not being rendered.
  this.removeAllDrawEffects();
  if (this.ClipPathId)
    this.setClipPath(null);
};


/**
 * Creates a copy of this displayable wrapped by a new container
 * @return {DvtContainer} a copy of this displayable
 */
DvtDisplayable.prototype.createCopy = function() {
  var container = new DvtContainer(this.getCtx(), 'clonedContainer');
  var clonedSvg = this.getElem().cloneNode(true);
  DvtToolkitUtils.appendChildElem(container.getElem(), clonedSvg);
  this._disableEvents(clonedSvg);
  return container;
};

/**
 * Disables mouse events on the specified svg element and its children.
 * @param {object} svgElem
 * @private
 */
DvtDisplayable.prototype._disableEvents = function(svgElem) {
  var child = svgElem.firstChild;
  //loop over all children
  while (child != null) {
    if (child.setAttributeNS) {
      DvtToolkitUtils.setAttrNullNS(child, 'pointer-events', 'none');
      DvtToolkitUtils.setAttrNullNS(child, 'id', null);
    }
    this._disableEvents(child);
    child = child.nextSibling;
  }
};

/**
 * Dispatches the native event to the internal dom element
 * Note: Use with caution
 * @param {Object} event
 * @override
 */
DvtDisplayable.prototype.dispatchNativeEvent = function(event) {
};


/**
 * Helper function to access the value of a property that was set using SetProperty.
 * @param {string} name the name of the attribute.
 * @return {object}
 * @protected
 */
DvtDisplayable.prototype.GetProperty = function(name) {
  return this._properties[name];
};


/**
 * Helper function to store the value of a property. Protects against attribute name collision with subclasses by
 * storing the value on a child object.
 * @param {string} name The name of the attribute.
 * @param {string} value The value of the attribute.
 * @return {DvtDisplayable} Returns this instance to support chaining.
 * @protected
 */
DvtDisplayable.prototype.SetProperty = function(name, value) {
  if (value !== this._properties[name]) {
    this._properties[name] = value;
  }
  return this;
};


/**
 * Helper function to set the specified SVG attribute on the DOM element.  Optimizes getters by storing a copy of the
 * value using SetAttr so that DOM access isn't required. If the property value has been updated in the DOM, then
 * SvgPropertyChanged will be called to allow for additional processing if needed.
 * @param {string} name The name of the attribute.
 * @param {string} value The value of the attribute.
 * @param {string=} defaultValue The default value of the attribute, which can be provided to optimize performance.
 * @return {DvtDisplayable} Returns this instance to support chaining.
 * @protected
 */
DvtDisplayable.prototype.SetSvgProperty = function(name, value, defaultValue) {
  if (value !== this._properties[name]) {
    this._properties[name] = value;
    DvtToolkitUtils.setAttrNullNS(this._elem, name, value, defaultValue);
    this.SvgPropertyChanged(name);
  }
  return this;
};


/**
 * Callback that is notified whenever an SVG DOM property is changed by SetSvgProperty. Subclasses can override to
 * perform additional processing, such as updating the selection feedback, when properties are changed.
 * @param {string} name The name of the attribute.
 * @protected
 */
DvtDisplayable.prototype.SvgPropertyChanged = function(name) {
  // subclasses can override
};

/**
  * Prepares an aria-label for a data object.
  * The aria-label is composed of an application provided description and the data object's current states.
  * @param {String} shortDesc  The short description for a data object
  * @param {Array} states An array of states to populate in the aria label
  * @return {String}
  */
DvtDisplayable.generateAriaLabel = function(shortDesc, states) {
  var label = '';
  var hasStates = states && states.length > 0;
  if (shortDesc) {
    var descDelim = DvtBundle.getTranslatedString(DvtBundle.UTIL_PREFIX, 'ARIA_LABEL_DESC_DELIMITER');
    label = shortDesc;
    if (hasStates)
      label += descDelim;
  }

  if (hasStates) {
    var statesDelim = DvtBundle.getTranslatedString(DvtBundle.UTIL_PREFIX, 'ARIA_LABEL_STATE_DELIMITER');
    for (var i = 0; i < states.length; i++) {
      label = label + states[i];
      if (i != (states.length - 1))
        label += statesDelim;
    }
  }

  return label;
};
// File containing all draw effect (filter) related functions defined on DvtDisplayable.

DvtDisplayable.prototype.getNumDrawEffects = function()
{
  if (!this._drawEffects)
  {
    return 0;
  }

  return this._drawEffects.length;
};

DvtDisplayable.prototype.addDrawEffect = function(effect) 
{
  if (!this._drawEffects)
  {
    this._drawEffects = [];
  }

  //lock the effect
  effect.__lock();

  this._drawEffects.push(effect);

  this._applyDrawEffects(this._drawEffects);
};

DvtDisplayable.prototype.addDrawEffectAt = function(effect, index) 
{
  if (!this._drawEffects)
  {
    this._drawEffects = [];
  }

  //lock the effect
  effect.__lock();

  if (index >= this._drawEffects.length)
  {
    this._drawEffects.push(effect);
  }
  else
  {
    this._drawEffects.splice(index, 0, effect);
  }

  this._applyDrawEffects(this._drawEffects);
};

DvtDisplayable.prototype.removeDrawEffect = function(effect)
{
  var index = this.getDrawEffectIndex(effect);
  if (index > - 1)
  {
    this._drawEffects.splice(index, 1);
    this._applyDrawEffects(this._drawEffects);
  }
};

DvtDisplayable.prototype.removeDrawEffectAt = function(index)
{
  if (this._drawEffects)
  {
    var numEffects = this._drawEffects.length;
    if (index >= 0 && index < numEffects)
    {
      this._drawEffects.splice(index, 1);
      this._applyDrawEffects(this._drawEffects);
    }
  }
};

DvtDisplayable.prototype.removeAllDrawEffects = function() 
{
  if (this._drawEffects)
  {
    this._drawEffects = null;
    this._applyDrawEffects(this._drawEffects);
  }
};

DvtDisplayable.prototype.getDrawEffectIndex = function(effect)
{
  if (this._drawEffects)
  {
    var numEffects = this._drawEffects.length;
    for (var i = 0; i < numEffects; i++)
    {
      if (effect === this._drawEffects[i])
      {
        return i;
      }
    }
  }
  return - 1;
};

DvtDisplayable.prototype._applyDrawEffects = function() {
  var effects = this._drawEffects;

  // remove current filter
  // should be done before creating a new outerElem because the current filter lives in the current outerElem
  if (this._filter) {
    DvtToolkitUtils.removeAttrNullNS(this.getOuterElem(), 'filter');
    this.getCtx().removeDefs(this._filter);
    this._filter = null;
  }

  // Create an outer group if there is a matrix defined, since SVG applies transforms before filters.
  if (!this._outerElem && this._matrix)
    this._createOuterGroupElem();

  //add new filter if necessary
  if (effects && effects.length > 0) {
    //: Repaint bug in Firefox requires us to force a repaint after removing filter
    //At worst we will create n empty filters where n=# markers
    this._filter = DvtSvgFilterUtils.createFilter(effects, this);
    if (this._filter) {
      this.getCtx().appendDefs(this._filter);
      var filterId = DvtToolkitUtils.getAttrNullNS(this._filter, 'id');
      DvtToolkitUtils.setAttrNullNS(this.getOuterElem(), 'filter', DvtToolkitUtils.getUrlById(filterId));
    }
  }
};
// File containing all event listener related functions defined on DvtDisplayable.


/**
 * Adds an event listener.
 * @param {string} type the event type
 * @param {function} listener the function to call
 * @param {string} useCapture whether the listener operates in the capture phase
 * @param {object} obj instance of the object the listener is defined on
 */
DvtDisplayable.prototype.addEvtListener = function(type, listener, useCapture, obj) {
  // Store a reference to the listener
  var listenersArray = this._getListeners(type, useCapture, true);
  listenersArray.push(listener);
  listenersArray.push(obj);

  // Call the impl so that it can add the actual listener
  this._addListener(type, useCapture);
};


/**
 * Removes an event listener.
 * @param {string} type the event type
 * @param {function} listener the function to call
 * @param {string} useCapture whether the listener operates in the capture phase
 * @param {object} obj instance of the object the listener is defined on
 */
DvtDisplayable.prototype.removeEvtListener = function(type, listener, useCapture, obj) {
  // Remove the listener
  var listenersArray = this._getListeners(type, useCapture, false);
  if (listenersArray) {
    for (var i = 0; i < listenersArray.length; i += 2) {
      if (listenersArray[i] === listener && listenersArray[i + 1] === obj) {
        listenersArray.splice(i, 2);
        break;
      }
    }
  }

  // Call the impl so that it can remove the actual listener.
  // Note that the array itself is intentionally not removed.
  if (listenersArray && listenersArray.length <= 0)
    this._removeListener(type, useCapture);
};


/**
 * Dispatch event
 * @param {String} eventType event type
 * @param {String|DvtKeyboardEvent} params additional parameters for the generated event that can be passes as a string or event object
 */
DvtDisplayable.prototype.dispatchDisplayableEvent = function(eventType, params) {
  var createEventType = DvtDisplayable._CREATE_EVENT_TYPE_MAP[eventType];
  var context;
  if (DvtMouseEvent.CLICK == createEventType || DvtMouseEvent.MOUSEOVER == createEventType || DvtMouseEvent.MOUSEOUT == createEventType || DvtMouseEvent.MOUSEMOVE == createEventType) {
    if (document.createEvent) {
      context = this.getCtx();
      var dim = this.getDimensions();
      var elementPosition = this.localToStage(new DvtPoint(dim.x, dim.y));
      var absoluteStagePos = context.getStageAbsolutePosition();
      var absoluteElementPosition = new DvtPoint(absoluteStagePos.x + elementPosition.x, absoluteStagePos.y + elementPosition.y);
      var event = document.createEvent('MouseEvents');
      event.initMouseEvent(createEventType, true, true, window, 1, absoluteElementPosition.x, absoluteElementPosition.y, absoluteElementPosition.x, absoluteElementPosition.y, false, false, false, false, 0, null);
      this.getElem().dispatchEvent(event);
    }
  }
  else if (DvtKeyboardEvent.KEYDOWN == createEventType || DvtKeyboardEvent.KEYUP == createEventType || DvtKeyboardEvent.KEYPRESS == createEventType) {
    if (document.createEvent) {
      var keyboardEvent = document.createEvent('KeyboardEvent');
      var keycode;

      if (params instanceof DvtKeyboardEvent) {
        keycode = params.keyCode;
        this._ctrlKeyPressed = params.ctrlKey;
        this._shiftKeyPressed = params.shiftKey;
      }
      else {
        keycode = parseInt(params);

        if (this._ctrlKeyPressed === undefined)
          this._ctrlKeyPressed = false;

        if (this._shiftKeyPressed === undefined)
          this._shiftKeyPressed = false;

        if (keycode == DvtKeyboardEvent.CONTROL) {
          if (this._ctrlKeyPressed && createEventType == DvtKeyboardEvent.KEYUP)
            this._ctrlKeyPressed = false;
          else if (!this._ctrlKeyPressed && createEventType == DvtKeyboardEvent.KEYDOWN)
            this._ctrlKeyPressed = true;
        }
        else if (keycode == DvtKeyboardEvent.SHIFT) {
          if (this._shiftKeyPressed && createEventType == DvtKeyboardEvent.KEYUP)
            this._shiftKeyPressed = false;
          else if (!this._shiftKeyPressed && createEventType == DvtKeyboardEvent.KEYDOWN)
            this._shiftKeyPressed = true;
        }
      }
      if (typeof (keyboardEvent.initKeyboardEvent) != 'undefined') {
        keyboardEvent.initKeyboardEvent(createEventType, true, true, window, this._ctrlKeyPressed, false, this._shiftKeyPressed, false, keycode, keycode);
      }
      else {
        keyboardEvent.initKeyEvent(createEventType, true, true, window, this._ctrlKeyPressed, false, false, this._shiftKeyPressed, keycode, keycode);
      }

      /*
        ideally, we would just create the native keyboard event and disptach it to the wrapping div, but we
        can't for two reasons
        1. when the keyboardEvent is initialized above, the initKeyboardEvent method used by Webkit doesn't initialize
           the event with the right keycode; it is always 0.  This is a known bug tracked in Chromium and at Webkit
           see http://code.google.com/p/chromium/issues/detail?id=27048 (Chromium) and
           https://bugs.webkit.org/show_bug.cgi?id=16735 (Webkit)
        2. since the native event doesn't work, I tried dispatching a DvtKeyboardEvent to the wrapping div.
           however, this generates a DOM EventException of type UNSPECIFIED_EVENT_TYPE_ERR, even though the
           type of the DvtKeyboardEvent was specified.

        So, instead, we will directly call the bubble listener that we attach to the wrapping div
        */

      var svgKeyboardEvent = DvtEventFactory.newEvent(keyboardEvent);
      svgKeyboardEvent.keyCode = keycode;
      svgKeyboardEvent.ctrlKey = this._ctrlKeyPressed;
      svgKeyboardEvent.shiftKey = this._shiftKeyPressed;

      context = this.getCtx();
      var stage = context.getStage();
      var wrappingDiv = stage.getSVGRoot().parentNode;
      DvtHtmlKeyboardListenerUtils._bubbleListener.call(wrappingDiv, svgKeyboardEvent);
    }
  }
};


/**
 * Adds listener to the DOM element.
 * @param {string} type
 * @param {function} listener
 * @param {boolean} useCapture
 * @protected
 */
DvtDisplayable.prototype.AddElemListener = function(type, listener, useCapture) {
  DvtToolkitUtils.addDomEventListener(this.getElem(), type, listener, useCapture);
  if (type == DvtTouchEvent.TOUCHEND) {
    DvtToolkitUtils.addDomEventListener(this.getElem(), DvtTouchEvent.TOUCHCANCEL, listener, useCapture);
  }
};


/**
 * Notifies all applicable event listeners of the given event.
 * @param {DvtMouseEvent} event
 * @param {boolean} useCapture whether the listener operates in capture phase
 * @protected
 */
DvtDisplayable.prototype.FireListener = function(event, useCapture) {
  // workaround for 
  var type = event.getType ? event.getType() : event.type;
  var listenersArray = this._getListeners(type, useCapture, false);
  if (listenersArray) {
    for (var i = 0; i < listenersArray.length; i += 2) {
      var obj = listenersArray[i + 1];
      if (listenersArray[i]) {
        listenersArray[i].call(obj, event);
      }
    }
  }
};

/**
 * Notifies all applicable event listeners of the given keyboard event.
 * @param {DvtKeyboardEvent} event
 * @param {boolean} useCapture whether the listener operates in capture phase
 */
DvtDisplayable.prototype.fireKeyboardListener = function(event, useCapture) {
  this.FireListener(event, useCapture);
};

/**
 * Returns the listeners of the given event type and capture mode.
 * @param {string} type the event type
 * @param {string} useCapture whether the listener operates in the capture phase
 * @param {boolean} createNew whether the array should be created if it doesn't exist
 * @return {array} the mutable Array of listeners
 * @private
 */
DvtDisplayable.prototype._getListeners = function(type, useCapture, createNew) {
  // First find the object where the listener arrays are stored
  if (!this._listenerObj) {
    if (createNew) {
      this._listenerObj = {
      };
    }
    else {
      return null;
    }
  }

  // Then find the array for this event type, creating if necessary
  var eventKey = type + '_' + (useCapture ? true : false);// for example: "click_true"
  var listenersArray = this._listenerObj[eventKey];
  if (!listenersArray && createNew) {
    listenersArray = [];
    this._listenerObj[eventKey] = listenersArray;
  }

  return listenersArray;
};


/**
 * Adds an event listener.
 * @param {String} type the event type
 * @param {String} useCapture whether the listener operates in the capture phase
 * @private
 */
DvtDisplayable.prototype._addListener = function(type, useCapture) {
  var listener = this._getListener(useCapture);
  // on keyboard events, add the listener to the component's wrapping div, since SVG
  // DOM elements don't support keystrokes.
  if (type == DvtKeyboardEvent.KEYUP || type == DvtKeyboardEvent.KEYDOWN || type == DvtKeyboardEvent.KEYPRESS ||
      type == DvtFocusEvent.FOCUS || type == DvtFocusEvent.FOCUSIN || type == DvtFocusEvent.FOCUSOUT || type == DvtFocusEvent.BLUR) {
    var context = this.getCtx();
    var stage = context.getStage();
    var wrappingDiv = stage.getSVGRoot().parentNode;
    if (!wrappingDiv)
      return;

    // allow support for multiple displayables to receive keyboard events
    // TODO: replace this with a singular compound event manager that
    //       will dispatch keyboard events to individual event managers
    if (!wrappingDiv._obj) {
      wrappingDiv._obj = [];
    }
    if (DvtArrayUtils.getIndex(wrappingDiv._obj, this) == - 1) {
      wrappingDiv._obj.push(this);
    }
    listener = DvtHtmlKeyboardListenerUtils.getListener(useCapture);
    DvtToolkitUtils.addDomEventListener(wrappingDiv, type, listener, useCapture);
  }
  else {
    this.AddElemListener(type, listener, useCapture);
  }
};


/**
 * Removes an event listener.
 * @param {string} type the event type
 * @param {boolean} useCapture whether the listener operates in the capture phase
 * @private
 */
DvtDisplayable.prototype._removeListener = function(type, useCapture) {
  var listener = this._getListener(useCapture);

  if (type == DvtKeyboardEvent.KEYUP || type == DvtKeyboardEvent.KEYDOWN || type == DvtKeyboardEvent.KEYPRESS ||
      type == DvtFocusEvent.FOCUS || type == DvtFocusEvent.FOCUSIN || type == DvtFocusEvent.FOCUSOUT || type == DvtFocusEvent.BLUR)
  {
    // Keyboard listeners are attached to the wrapping div and tracked via an array stored using _obj.
    var wrappingDiv = this.getCtx().getStage().getSVGRoot().parentNode;
    DvtToolkitUtils.removeDomEventListener(wrappingDiv, type, listener, useCapture);
    var index = DvtArrayUtils.getIndex(wrappingDiv._obj, this);
    if (index !== -1)
      wrappingDiv._obj.splice(index, 1);
  }
  else
    DvtToolkitUtils.removeDomEventListener(this.getElem(), type, listener, useCapture);
};

/**
 * Returns a function that will handle events with the specified useCapture value.
 * @param {boolean} useCapture
 * @return {function}
 * @private
 */
DvtDisplayable.prototype._getListener = function(useCapture) {
  var thisRef = this;
  if (useCapture) {
    if (!this._captureClosure) {
      this._captureClosure = function(event) {
        thisRef._captureListener(event);
      };
    }
    return this._captureClosure;
  }
  else {
    if (!this._bubbleClosure) {
      this._bubbleClosure = function(event) {
        thisRef._bubbleListener(event);
      };
    }
    return this._bubbleClosure;
  }
};


/**
 * The event listener that is called by the implementation object's bubble phase listeners.
 * This function will wrap the event and delegate to the real event listeners.
 * @param {object} event the DOM event object
 * @this {object} the platform object actively processing the event object with an event listener
 * @private
 */
DvtDisplayable.prototype._bubbleListener = function(event) {
  if (DvtAgent.isPlatformIE()) {
    // Moving an object in the dom for IE causes mouse over events to fire if the moved item is under the mouse
    // Ensure mouse over is not repeatedly called in such a case
    if (event.type == DvtMouseEvent.MOUSEOVER) {
      if (this._bubbleHoverItem) {
        if (this._bubbleHoverItem == event.target) {
          // Prevent infinite loop
          return;
        }
        else {
          //MOUSEOVER event on a DOM element stores the element in _bubbleHoverItem and MOUSEOUT event clears _bubbleHoverItem.
          //If a MOUSEOVER event is not followed by MOUSEOUT event, _bubbleHoverItem won't be cleared.
          //During the subsequent MOUSEOVER event if the event target is different than _bubbleHoverItem,
          //that indicates the browser have missed to fire MOUSEOUT event for previous DOM element stored in _bubbleHoverItem.
          //So building a new MOUSEOUT event for _bubbleHoverItem.
          var dvtEvent = DvtEventFactory.newEvent(event, this.getCtx());
          //: Set the event as MOUSEOUT event, target as _bubbleHoverItem, relatedTarget as event.target
          //This is equivalent to firing new MOUSEOUT event for _bubbleHoverItem
          dvtEvent.modifyEventForIE(DvtMouseEvent.MOUSEOUT, this._bubbleHoverItem);
          this.FireListener(dvtEvent, false);
        }
      }
      this._bubbleHoverItem = event.target;
    }
    else if (event.type == DvtMouseEvent.MOUSEOUT) {
      this._bubbleHoverItem = null;
    }
  }

  var dvtEvent = DvtEventFactory.newEvent(event, this.getCtx());
  this.FireListener(dvtEvent, false);
};


/**
 * The event listener that is called by the implementation object's capture phase listeners.
 * This function will wrap the event and delegate to the real event listeners.
 * @param {object} event the DOM event object
 * @this {object} the platform object actively processing the event object with an event listener
 * @private
 */
DvtDisplayable.prototype._captureListener = function(event) {
  if (DvtAgent.isPlatformIE()) {
    // Moving an object in the dom for IE causes mouse over events to fire if the moved item is under the mouse
    // Ensure mouse over is not repeatedly called in such a case
    if (event.type == DvtMouseEvent.MOUSEOVER) {
      if (this._captureHoverItem) {
        if (this._captureHoverItem == event.target) {
          // Prevent infinite loop
          return;
        }
        else {
          //MOUSEOVER event on a DOM element stores the element in _captureHoverItem and MOUSEOUT event clears _captureHoverItem.
          //If a MOUSEOVER event is not followed by MOUSEOUT event, _captureHoverItem won't be cleared.
          //During the subsequent MOUSEOVER event if the event target is different than _captureHoverItem,
          //that indicates the browser have missed to fire MOUSEOUT event for previous DOM element stored in _captureHoverItem.
          //So building a new MOUSEOUT event for _captureHoverItem.
          var dvtEvent = DvtEventFactory.newEvent(event, this.getCtx());
          //: Set the event as MOUSEOUT event, target as _captureHoverItem, relatedTarget as event.target
          //This is equivalent to firing new MOUSEOUT event for _captureHoverItem
          dvtEvent.modifyEventForIE(DvtMouseEvent.MOUSEOUT, this._captureHoverItem);
          this.FireListener(dvtEvent, true);
        }
      }
      this._captureHoverItem = event.target;
    }
    else if (event.type == DvtMouseEvent.MOUSEOUT) {
      this._captureHoverItem = null;
    }
  }
  var dvtEvent = DvtEventFactory.newEvent(event, this.getCtx());
  this.FireListener(dvtEvent, true);
};
// File containing all paint (fill and stroke) related functions defined on DvtDisplayable.

/**
 * Returns the fill for this shape.
 * @return {DvtFill}
 */
DvtDisplayable.prototype.getFill = function() {
  return this.GetProperty('fill');
};

/**
 * Specifies a fill to be applied to the shape.
 * @param {DvtFill} fill
 */
DvtDisplayable.prototype.setFill = function(fill) {
  this._manageDefinitions(this.GetProperty('fill'), fill);

  if (!fill) {
    DvtToolkitUtils.setAttrNullNS(this._elem, 'fill', 'none');
    DvtToolkitUtils.removeAttrNullNS(this._elem, 'fill-opacity');
    this.SetProperty('fill', null);
    return;
  }
  else {
    if (this.GetProperty('fill') === fill) {
      return;
    }
  }

  this.SetProperty('fill', fill);

  if (fill instanceof DvtGradientFill || fill instanceof DvtImageFill || fill instanceof DvtPatternFill) {
    DvtSvgShapeUtils.addSpecialFill(fill, this.getCtx());
    DvtToolkitUtils.setAttrNullNS(this._elem, 'fill', DvtToolkitUtils.getUrlById(fill.getId()));
  } else {
    //Basic fill
    var fillObj = DvtColorUtils.fixColorForPlatform(fill.getColor(), fill.getAlpha());
    if (fillObj && fillObj['color']) {
      DvtToolkitUtils.setAttrNullNS(this._elem, 'fill', fillObj['color']);
      if (fillObj['alpha'] != null)
        DvtToolkitUtils.setAttrNullNS(this._elem, 'fill-opacity', fillObj['alpha'], 1);
    }
  }

  // Make the fill immutable now that it has been applied.
  fill.__lock();

  this.UpdateSelectionEffect();
};


/**
 *  Sets a solid fill on this shape.
 *  @param {String}  color  The hex or RGB representation of the solid fill
 *  @param {number}  alpha  The fill opacity. Defaults to 1 if none specified.
 *  If null is specified, a transparent fill is applied.
 */
DvtDisplayable.prototype.setSolidFill = function(color, alpha) {
  this.setFill(new DvtSolidFill(color, alpha));
};

/**
 *  Sets an invisible fill on this shape.
 */
DvtDisplayable.prototype.setInvisibleFill = function() {
  this.setFill(DvtSolidFill.invisibleFill());
};

/**
 * Returns the stroke for this shape.
 * @return {DvtStroke}
 */
DvtDisplayable.prototype.getStroke = function() {
  return this._stroke;
};


/**
 *  Sets the stroke properties on this shape from the supplied stroke object.
 *  If the stroke object is null, any existing stroke is removed.
 *  @param {DvtStroke} stroke A stroke object.
 */
DvtDisplayable.prototype.setStroke = function(stroke) {
  this._manageDefinitions(this._stroke, stroke);

  this._stroke = stroke;

  if (!stroke) {
    DvtToolkitUtils.removeAttrNullNS(this._elem, 'stroke');
    DvtToolkitUtils.removeAttrNullNS(this._elem, 'stroke-opacity');
    DvtToolkitUtils.removeAttrNullNS(this._elem, 'stroke-width');
    DvtToolkitUtils.removeAttrNullNS(this._elem, 'stroke-dasharray');
    DvtToolkitUtils.removeAttrNullNS(this._elem, 'stroke-dashoffset');
    DvtToolkitUtils.removeAttrNullNS(this._elem, 'stroke-linejoin');
    DvtToolkitUtils.removeAttrNullNS(this._elem, 'stroke-linecap');
    DvtToolkitUtils.removeAttrNullNS(this._elem, 'stroke-miterlimit');
    return;
  }

  //  Stroke color/alpha
  // gradient
  if (stroke instanceof DvtGradientStroke) {
    DvtSvgShapeUtils.addSpecialStroke(stroke, this.getCtx());
    DvtToolkitUtils.setAttrNullNS(this._elem, 'stroke', DvtToolkitUtils.getUrlById(stroke.getId()));
    var alpha = stroke.getAlpha();
    if (alpha != null) {
      DvtToolkitUtils.setAttrNullNS(this._elem, 'stroke-opacity', alpha);
    }
  }
  else {
    var strokeObj = DvtColorUtils.fixColorForPlatform(stroke.getColor(), stroke.getAlpha());
    if (strokeObj && strokeObj['color']) {
      DvtToolkitUtils.setAttrNullNS(this._elem, 'stroke', strokeObj['color']);
      if (strokeObj['alpha'] != null)
        DvtToolkitUtils.setAttrNullNS(this._elem, 'stroke-opacity', strokeObj['alpha'], 1);
    }
    else {
      DvtToolkitUtils.removeAttrNullNS(this._elem, 'stroke');
      DvtToolkitUtils.removeAttrNullNS(this._elem, 'stroke-opacity');
    }
  }

  //  Stroke width
  DvtToolkitUtils.setAttrNullNS(this._elem, 'stroke-width', stroke.getWidth(), 1);

  if (stroke.isFixedWidth())
    DvtToolkitUtils.setAttrNullNS(this._elem, 'vector-effect', 'non-scaling-stroke');

  //  Stroke type/style
  var st = stroke.getType();
  if (st !== DvtStroke.SOLID) {
    DvtToolkitUtils.setAttrNullNS(this._elem, 'stroke-dasharray', stroke.getDash());
    if (stroke.getDashOffset()) {
      DvtToolkitUtils.setAttrNullNS(this._elem, 'stroke-dashoffset', stroke.getDashOffset());
    }
  }
  else {
    DvtToolkitUtils.removeAttrNullNS(this._elem, 'stroke-dasharray');
    DvtToolkitUtils.removeAttrNullNS(this._elem, 'stroke-dashoffset');
  }

  //  Line-joining attribute
  var attrib = stroke.getLineJoin();
  if (attrib) {
    DvtToolkitUtils.setAttrNullNS(this._elem, 'stroke-linejoin', attrib);
  }

  //  Line-ending attribute
  attrib = stroke.getLineEnd();
  if (attrib) {
    DvtToolkitUtils.setAttrNullNS(this._elem, 'stroke-linecap', attrib);
  }

  //  miter limit attribute
  attrib = stroke.getMiterLimit();
  if (attrib) {
    DvtToolkitUtils.setAttrNullNS(this._elem, 'stroke-miterlimit', attrib);
  }

  // Make the stroke immutable now that it has been applied.
  stroke.__lock();
};


/**
 *  Sets a solid stroke on this shape.
 *  @param {String}  color  The hex or RGB representation of the solid fill
 *  @param {number}  alpha  The fill opacity. Defaults to 1 if none specified.
 *  @param {number}  strokeWidth  The stroke width. Defaults to 1 if none specified.
 *  If null is specified, a transparent fill is applied.
 */
DvtDisplayable.prototype.setSolidStroke = function(color, alpha, strokeWidth) {
  this.setStroke(new DvtSolidStroke(color, alpha, strokeWidth));
};

/**
 * Manage the gradient/filter definitions for svg by keeping a reference count and removing unreferenced defs.
 * @param {object} oldObj The old gradient or filter definition.
 * @param {object} newObj The new gradient or filter definition.
 * @private
 */
DvtDisplayable.prototype._manageDefinitions = function(oldObj, newObj) {
  // If a new obj is specified, adjust reference counts and remove def if 0 references
  if (oldObj != newObj) {
    // Decrease count on existing obj
    if (oldObj) {
      oldObj._referenceCount--;
      if (oldObj._referenceCount == 0) {
        if (oldObj._defElem) {
          this.getCtx().removeDefs(oldObj._defElem);
          oldObj._defPresent = false;
        }
      }

    }
    if (newObj) {
      if (!newObj._referenceCount)
        newObj._referenceCount = 0;
      newObj._referenceCount++;
    }
  }
};
// File containing all transformation related functions defined on DvtDisplayable.


/**
 * Sets the horizontal and vertical translation to apply to this container.
 * @param {Number} tx   The horizontal translation to apply, in pixels.
 * @param {Number} ty   The vertical translation to apply, in pixels.
 */
DvtDisplayable.prototype.setTranslate = function(tx, ty) {
  //the matrix is the ultimate source of truth, because
  //it contains all the transform information
  var mat = this.getMatrix().clone();
  var decomp = mat._decompose();
  if (tx != null)
    decomp[DvtMatrix._DECOMP_TX] = tx;
  if (ty != null)
    decomp[DvtMatrix._DECOMP_TY] = ty;
  mat._recompose(decomp);
  this.setMatrix(mat);
};


/**
 * Returns the horizontal translation applied to this container.
 * @return {Number} horizontal translation, in pixels
 */
DvtDisplayable.prototype.getTranslateX = function() {
  var matrix = this.getMatrix();
  if (matrix) {
    //get the value from the matrix because other
    //transformations may have changed it
    return matrix._decompose()[DvtMatrix._DECOMP_TX];
  }

  return 0;
};


/**  Set the horizontal translation to apply to this container.
 *  @param {Number} tx   The horizontal translation to apply, in pixels.
 */
DvtDisplayable.prototype.setTranslateX = function(tx) {
  //the matrix is the ultimate source of truth, because
  //it contains all the transform information
  var mat = this.getMatrix().clone();
  var decomp = mat._decompose();
  decomp[DvtMatrix._DECOMP_TX] = tx;
  mat._recompose(decomp);
  this.setMatrix(mat);
};


/**
 * Return the vertical translation applied to this container.
 * @return {Number} vertical translation, in pixels
 */
DvtDisplayable.prototype.getTranslateY = function() {
  var matrix = this.getMatrix();
  if (matrix) {
    //get the value from the matrix, because other
    //transformations may have changed it
    return matrix._decompose()[DvtMatrix._DECOMP_TY];
  }

  return 0;
};


/**  Set the vertical translation to apply to this container.
 *  @param {Number} ty   The vertical translation to apply, in pixels.
 */
DvtDisplayable.prototype.setTranslateY = function(ty) {
  //the matrix is the ultimate source of truth, because
  //it contains all the transform information
  var mat = this.getMatrix().clone();
  var decomp = mat._decompose();
  decomp[DvtMatrix._DECOMP_TY] = ty;
  mat._recompose(decomp);
  this.setMatrix(mat);
};


/**
 * Sets the horizontal and vertical scale to apply to this container.
 * @param {Number} sx   The horizontal scale to apply.
 * @param {Number} sy   The vertical scale to apply.
 */
DvtDisplayable.prototype.setScale = function(sx, sy) {
  //the matrix is the ultimate source of truth, because
  //it contains all the transform information
  var mat = this.getMatrix().clone();
  var decomp = mat._decompose();
  if (sx)
    decomp[DvtMatrix._DECOMP_SX] = sx;
  if (sy)
    decomp[DvtMatrix._DECOMP_SY] = sy;
  mat._recompose(decomp);
  this.setMatrix(mat);
};


/**
 * Return the horizontal scale applied to this container.
 * @return {number}  horizontal scale
 */
DvtDisplayable.prototype.getScaleX = function() {
  var matrix = this.getMatrix();
  if (matrix) {
    //get the value from the matrix, because other
    //transformations may have changed it
    return matrix._decompose()[DvtMatrix._DECOMP_SX];
  }

  return 1;
};


/**  Set the horizontal scale to apply to this container.
 *  @param {Number} sx   The horizontal scale to apply.
 */
DvtDisplayable.prototype.setScaleX = function(sx) {
  //the matrix is the ultimate source of truth, because
  //it contains all the transform information
  var mat = this.getMatrix().clone();
  var decomp = mat._decompose();
  decomp[DvtMatrix._DECOMP_SX] = sx;
  mat._recompose(decomp);
  this.setMatrix(mat);
};


/**
 * Return the vertical scale applied to this container.
 * @return {number}  vertical scale
 */
DvtDisplayable.prototype.getScaleY = function() {
  var matrix = this.getMatrix();
  if (matrix) {
    //get the value from the matrix, because other
    //transformations may have changed it
    return matrix._decompose()[DvtMatrix._DECOMP_SY];
  }

  return 1;
};


/**  Set the vertical scale to apply to this container.
 *  @param {Number} sy   The horizontal scale to apply.
 */
DvtDisplayable.prototype.setScaleY = function(sy) {
  //the matrix is the ultimate source of truth, because
  //it contains all the transform information
  var mat = this.getMatrix().clone();
  var decomp = mat._decompose();
  decomp[DvtMatrix._DECOMP_SY] = sy;
  mat._recompose(decomp);
  this.setMatrix(mat);
};


/**
 * Return the rotation applied to this container.
 * @return {number}  rotation, in radians
 */
DvtDisplayable.prototype.getRotation = function() {
  var matrix = this.getMatrix();
  if (matrix) {
    //get the value from the matrix, because other
    //transformations may have changed it
    return matrix._decompose()[DvtMatrix._DECOMP_R];
  }

  return 0;
};


/**  Set the rotation to apply to this container.
 *  @param {Number} angleRads   The rotation to apply, in radians.
 */
DvtDisplayable.prototype.setRotation = function(angleRads) {
  //the matrix is the ultimate source of truth, because
  //it contains all the transform information
  var mat = this.getMatrix().clone();
  var decomp = mat._decompose();
  decomp[DvtMatrix._DECOMP_R] = angleRads;
  mat._recompose(decomp);
  this.setMatrix(mat);
};


/**
 * Return the transformation matrix applied to this container.
 * @return {DvtMatrix} transformation matrix
 */
DvtDisplayable.prototype.getMatrix = function() {
  if (this._matrix) {
    return this._matrix;
  }

  return new DvtMatrix();
};


/**
 * Set the transformation matrix to apply to this container.
 * When set, the matrix becomes permanently locked so that it becomes immutable.
 * A clone must be created if any updates to the matrix need to be made.
 * The same matrix can be set on more than one displayable irregardless of locking.
 * @param {DvtMatrix} mat   The transformation matrix to apply.
 */
DvtDisplayable.prototype.setMatrix = function(mat) {
  // treat setting identity matrix same as setting null matrix
  if (mat && mat.isIdentity())
    mat = null;

  if (this._matrix != mat) {
    this._matrix = mat;

    // Lock the new matrix if it isn't already locked, before setting it on this displayable.
    // The same matrix can be set on more than one displayable irregardless of locking.
    if (this._matrix && !this._matrix.isLocked())
      this._matrix.__lock();

    // Create an outer elem if needed
    if (!this._outerElem && DvtDisplayable.HasAttributes(this.getElem(), DvtDisplayable._ATTRS_TRANSFERABLE_TO_OUTER))
      this._createOuterGroupElem();

    this._matrix = mat;
    //apply the new matrix if it's non-null
    if (mat) {
      var sMat = 'matrix(' + DvtToolkitUtils.roundDecimal(mat.getA()) + ',' + DvtToolkitUtils.roundDecimal(mat.getC()) +
          ',' + DvtToolkitUtils.roundDecimal(mat.getB()) + ',' + DvtToolkitUtils.roundDecimal(mat.getD()) + ','
                  + DvtToolkitUtils.roundDecimal(mat.getTx()) + ',' + DvtToolkitUtils.roundDecimal(mat.getTy()) + ')';

      //set the transform attribute on the outer SVG element of this shape
      DvtToolkitUtils.setAttrNullNS(this.getElem(), 'transform', sMat, 'matrix(1,0,0,1,0,0)');

      //set the vector-effect attribute to prevent the stroke-width
      //from scaling with the transform
      //NOTE: this is commented out for now because it causes strange rendering
      //artifacts when scaling to a small value
      //DvtToolkitUtils.setAttrNullNS(this.getElem(), 'vector-effect', 'non-scaling-stroke') ;
    }
    //if clearing the existing matrix by setting a null or undefined mat,
    //then remove the existing attribute from the DOM
    else {
      var transformAttr = DvtToolkitUtils.getAttrNullNS(this.getElem(), 'transform');
      if (transformAttr) {
        DvtToolkitUtils.removeAttrNullNS(this.getElem(), 'transform');
        if (DvtAgent.isPlatformIE()) {
          // , prev removeAttributeNS()
          DvtToolkitUtils.setAttrNullNS(this.getElem(), 'transform', null);// fails for IE9 (9.0.8112.16421)
        }

      }
      //NOTE: this is commented out for now because it causes strange rendering
      //artifacts when scaling to a small value
      var vectorEffectAttr;// = DvtToolkitUtils.getAttrNullNS(this.getElem(), 'vector-effect');
      if (vectorEffectAttr) {
        DvtToolkitUtils.removeAttrNullNS(this.getElem(), 'vector-effect');
      }
    }
  }
};
// Copyright (c) 2008, 2016, Oracle and/or its affiliates. All rights reserved.
/**
 * Container for displayable objects.
 * @extends {DvtDisplayable}
 * @param {DvtContext} context
 * @param {string=} id The optional id for the corresponding DOM element.
 * @class
 * @constructor
 */
var DvtContainer = function(context, id) {
  this.Init(context, 'g', id);
};

DvtObj.createSubclass(DvtContainer, DvtDisplayable, 'DvtContainer');


/**
 * @override
 */
DvtContainer.prototype.Init = function(context, type, id) {
  // For the SVG implementation, we need to know whether this is a standard
  // non-shape container, or a shape "container".  Since elementary objects
  // may not be nested, e.g. a rect containing another rect, an artificial
  // group must be constructed to group the parent and the children.  That
  // is they actually become grouped siblings.
  this._bShapeContainer = (this instanceof DvtShape);// if shape "container"
  DvtContainer.superclass.Init.call(this, context, type != null ? type : 'g', id);
  this._childGroupElem = null;// child surround group
};


/**
 * @protected
 * Array of SVG attributes that should be transferred from the shape
 * tag to the group when this shape becomes a group (when children
 * are added to it).
 */
DvtContainer.AttributesTransferableToGroup = ['transform', 'opacity', 'style', 'visibility', 'pointer-events', 'clip-path', 'cursor'];


/**
 *  Adds the specified object as a child of this container. The object is
 *  added to the end of the child list.  If the object is already a child,
 *  it will be moved to the end of the child list.
 *   @param {DvtDisplayable} obj The object to be added.
 */
DvtContainer.prototype.addChild = function(obj) {

  if (obj) {
    // Remove the object from its current parent
    var oldParent = obj.getParent();
    if (oldParent)
      oldParent.removeChild(obj);

    //initialize _arList after removing child from parent in case
    //this container was the parent, which could result in removeChild()
    //setting _arList to null if the last child was removed
    if (!this._arList) {
      this._arList = [];
    }

    // Add the object to this container
    obj.setParent(this);

    if (this._bShapeContainer) {
      //  This is a shape "container".
      //  If no previous children, will create a group DOM element for the this
      //  (parent) object and add the new child to the child group DOM element.
      //  else will add the object directly to the shape group container element.
      this.CreateChildGroupElem(false);
    }

    //   - GET RID OF DVTGOLINK AND IMPLS
    //  if there is an anchor elem <a> for this container
    //  append child to the <a> element
    //  otherwise append child directly to this container group element
    var containerElem = this.getContainerElem();
    DvtToolkitUtils.appendChildElem(containerElem, obj.getOuterElem());

    this._arList.push(obj);
  }
};


/**
 *  Adds the specified object as a child of this container at the specified index. Returns
 *  immediately if the index position doesn't already exist in the child list (unless the
 *  index equals the number of children).  If a currently occupied index is specified, the
 *  current child at that position and all subsequent children are moved one position
 *  higher in the list.  If the object is a child of another container, it is removed and
 *  reparented in the new container. Note that the action of this method is to remove the
 *  object from the current container (which may also be the container that it will be
 *  added to), so for an object "move" in the same container, all objects with a higher
 *  index will now move one position lower.  The object is now inserted at the supplied
 *  index.
 *  @param {DvtObj} obj  The object to be added (must be a descendent of {@link DvtObj}).
 *  @param {number} index The index at which to add this object
 */
DvtContainer.prototype.addChildAt = function(obj, index) {
  this.AddChildAt(obj, index);
};

// TODO JSDoc, exists so that shapes can call without being confused by the additional shapes for selection
DvtContainer.prototype.AddChildAt = function(obj, index) {
  if ((index >= 0) && (index <= this.getNumChildren()) && obj)// validate index
  {
    var curIndex = this._findChild(obj);// note if obj is child of this container
    if ((curIndex >= 0) && (curIndex == index))// do nothing if child of this container
      return;// and move is to current position
    var oldParent = obj.getParent();// remove object from current parent
    if (oldParent)
      oldParent.removeChild(obj);
    obj.setParent(this);// reparent

    // If obj is child of this container and the intent is to place it after the last
    // object (before the above remove was done), decrement the index.
    if (curIndex >= 0) {
      if (index == (this.getNumChildren() + 1))
        index--;
    }

    var idx = index;

    if (this._bShapeContainer) {
      //  This is a shape "container".
      //  If no previous children, will create a group DOM element for the this
      //  (parent) object and add the new child to the child group DOM element.
      //  else will add the object directly to the shape group container element.
      this.CreateChildGroupElem(false);

      //need to increment the index to account for the shape dom element,
      //which should be the first child of the childGroupElem
      idx++;
    }

    //   - GET RID OF DVTGOLINK AND IMPLS
    //  if there is an anchor elem <a> for this container
    //  append child to the <a> element
    //  otherwise append child directly to this container group element
    var containerElem = this.getContainerElem();
    var existingNode = containerElem.childNodes[idx];
    // : IE9 cannot handle a value of undefined in insertBefore.  Set to null in such a case.
    if (!existingNode)
      existingNode = null;
    containerElem.insertBefore(obj.getOuterElem(), existingNode);//@HTMLUpdateOK

    if (!this._arList) {
      this._arList = [];
    }
    this._arList.splice(index, 0, obj);
  }
};


/**
 * Returns true if the specified displayable is a direct child of this container.
 * @param {DvtDisplayable} obj The object to be searched for.
 * @return {boolean} True if object is contained by this container, else false.
 */
DvtContainer.prototype.contains = function(obj) {
  return (this._findChild(obj) >= 0);
};


/**
 * Returns index of specified child obj in the internal list, or -1 if not
 * found.
 * @type {DvtObj}
 * @private
 */
DvtContainer.prototype._findChild = function(obj) {
  var idx = - 1;

  if (this._arList) {
    var len = this._arList.length;
    for (var i = 0; i < len; i++) {
      // find the obj
      if (this._arList[i] === obj) {
        idx = i;
        break;
      }
    }
  }

  return idx;
};


/**
 *   Returns the child after the specified object, or null if it is the last
 *   in the list.
 *   @param {DvtObj} obj  The object whose successor is required.
 *   @type {DvtObj}
 */
DvtContainer.prototype.getChildAfter = function(obj) {
  var o = null;
  var idx = this._findChild(obj);

  if ((idx >= 0) && (++idx < this._arList.length)) {
    o = this._arList[idx];
  }

  return o;
};


/**
 *   Returns the child before the specified object, or null if the is the first
 *   in the list.
 *   @param {DvtObj} obj  The object whose predecessor is required.
 *   @type {DvtObj}
 */
DvtContainer.prototype.getChildBefore = function(obj) {
  var o = null;
  var idx = this._findChild(obj);

  if (idx > 0) {
    o = this._arList[--idx];
  }

  return o;
};


/**
 *   Returns the child at the specified zero-relative position, or null if
 *   there is no child represented by the position.
 *   @param {number} idx  The zero-relative index to the child object.
 *   @type {DvtObj}
 */
DvtContainer.prototype.getChildAt = function(idx) {
  var o = null;

  if (this._arList && (this._arList.length > idx) && (idx >= 0)) {
    o = this._arList[idx];
  }

  return o;
};


/**
 *   Returns the container index of the specified object, or -1 if the object
 *   is not a direct child of the container.
 *   @param {DvtObj} obj  The object whose container index is required.
 *   @type {number}
 */
DvtContainer.prototype.getChildIndex = function(obj) {
  return this._findChild(obj);
};


/**
 *   Returns the number of direct children of this container
 *   @type {number}
 */
DvtContainer.prototype.getNumChildren = function() {
  return (this._arList ? this._arList.length : 0);
};


/**
 *   Removes the specified child object from this container.
 *   @param {DvtObj} obj  The object to be removed.
 */
DvtContainer.prototype.removeChild = function(obj) {
  var idx = this._findChild(obj);// is child in container
  if (idx !== - 1) {
    this._removeObj(obj, idx);
  }
};


/**
 *   Removes the specified child object from this container.
 *   @param {DvtDisplayable} obj The object to be removed.
 */
DvtContainer.prototype.removeChildImpl = function(obj) {
  var elemObj = obj.getOuterElem();// obj's outer DOM element
  var parent = obj.getParent();// get parent object (the container or the shape group container)

  if (elemObj && parent) {
    //  - GET RID OF DVTGOLINK AND IMPLS
    var elem = this.getContainerElem();
    elem.removeChild(elemObj);
  }

  //  If no more children, can remove the added group for child containership,
  //  and reparent the containing shape directly back to its parent in the
  //  position that the added child group container occupied.
  //  - GET RID OF DVTGOLINK AND IMPLS
  // don't remove the childGroupElem because we need it to hold the anchor
  if (!this._anchorElem && this._bShapeContainer && this.getNumChildren() === 1) {
    var childGroupElem = this._childGroupElem;
    var childGroupElemParent = (childGroupElem ? childGroupElem.parentNode : null);

    if (childGroupElemParent) {
      DvtDisplayable.TransferAttributes(childGroupElem, this._elem, this.GetAttributesTransferableToGroup());
      childGroupElemParent.replaceChild(this._elem, childGroupElem);
      this._childGroupElem = null;
    }
  }
};


/**
 *   Removes the specified child object at the index specfied from this container.
 *   @param {number} idx  The index of the object to be removed.
 *   @return {DvtObj}  The object removed.
 */
DvtContainer.prototype.removeChildAt = function(idx) {
  var obj = this.getChildAt(idx);

  if (obj) {
    this._removeObj(obj, idx);
  }

  return obj;
};


/**
 *   Removes all child object's from this container.
 */
DvtContainer.prototype.removeChildren = function() {
  if (this._arList) {
    var ar = this._arList;

    while (this.getNumChildren() > 0) {
      this._removeObj(ar[0], 0);
    }
  }
};


/**
 *   Removes the specified object from this container.
 *   @param {DvtObj}  obj   The object to be removed.
 *   @param {number}  idx   The index position (zero relative) of the child
 *                          in the container's list of chhildren.
 *    @private
 */
DvtContainer.prototype._removeObj = function(obj, idx) {
  //  obj must be in the container.
  this.removeChildImpl(obj);// perform platform remove
  obj.setParent(null);

  this._arList.splice(idx, 1);// remove from list
  if (this._arList.length === 0) {
    this._arList = null;
  }
};


/**
 *    Destroy the container.  It should no longer be used or displayed
 */
DvtContainer.prototype.destroy = function() {
  DvtContainer.superclass.destroy.call(this);
  var childCount = this.getNumChildren();
  for (var i = 0; i < childCount; i++) {
    var child = this.getChildAt(i);
    child.destroy();
  }
};


/**
 * Gets the hyperlink information for this object
 */
DvtContainer.prototype.getHyperlink = function() {
  return this._linkObj;
};


/**
 * Returns an rray of SVG attributes that should be transferred from the shape
 * tag to the group when this shape becomes a group (when children are added to it).
 * @return {array}
 */
DvtContainer.prototype.GetAttributesTransferableToGroup = function() {
  return DvtContainer.AttributesTransferableToGroup;
};


/**
 * @override
 */
DvtContainer.prototype.getElem = function() {
  return (this._childGroupElem ? this._childGroupElem : this._elem);
};

/**
 * Create a group element for adding children.
 * @param {boolean} rmChildren True if all children should be removed
 * @param {boolean} forced True always create a child group element for shape container
 * @protected
 */
DvtContainer.prototype.CreateChildGroupElem = function(rmChildren, forced) {
  //  This is a shape "container".
  //  If no previous children, will create a group DOM element for the this
  //  (parent) object and add the new child to the child group DOM element.
  //  else will add the object directly to the shape group container element.
  if (!this._childGroupElem && (forced || this.getNumChildren() === 0)) {
    var childGroupId = (DvtDisplayable.SET_ID_ON_DOM && this._id) ? this._id + '_g' : null;
    this._childGroupElem = DvtSvgShapeUtils.createElement('g', childGroupId);

    //  Remove this's DOM element from the parent, and append to child group DOM element.
    var parent = this.getParent();
    var elemParent;
    if (parent) {
      elemParent = parent.getElem();
      elemParent.replaceChild(this._childGroupElem, this._elem);
    }
    if (!rmChildren)
      DvtToolkitUtils.appendChildElem(this._childGroupElem, this._elem);// add shape to new group
    //transfer attributes from the old outermost SVG element to the
    //new outer group element
    DvtDisplayable.TransferAttributes(this._elem, this._childGroupElem, this.GetAttributesTransferableToGroup());

    //Note need to copy _obj reference to the new group element so that events can be propagated.
    if (this._elem._obj) {
      this._childGroupElem._obj = this._elem._obj;
    }

    // Track the number of child group elements created, so that we can move away from this pattern
    if (DvtAgent.isEnvironmentTest())
      document.shapeContainerCount++;
  }
  else if (rmChildren) {
    this.removeChildren();
  }

};


//:
/**
 * @override
 */
DvtContainer.prototype.getDimensionsWithStroke = function() {
  //a pure container has no shape of its own, so calculate the
  //dims for all child shapes in the subtree rooted at this container
  //build an initial array of all direct children of this container
  var ar = [];
  var numChildren = this.getNumChildren();
  for (var i = 0; i < numChildren; i++) {
    ar.push(this.getChildAt(i));
  }

  //loop over the array of children until it's empty
  var totalDims = null;
  while (ar.length > 0) {
    //remove the first object from the array
    var child = ar.shift();
    //get dims in coordinate space of this container, because we're
    //processing whole subtree of children under this container
    var dims = child.GetDimensionsWithStroke(this);
    if (dims) {
      if (!totalDims) {
        totalDims = dims;
      }
      else {
        totalDims = totalDims.getUnion(dims);
      }
    }

    //add any children of current object to end of array
    numChildren = child.getNumChildren();
    for (var i = 0; i < numChildren; i++) {
      ar.push(child.getChildAt(i));
    }
  }
  return totalDims;
};

//:
DvtContainer.prototype.GetDimensionsWithStroke = function(targetCoordinateSpace) {
  //pure container doesn't have its own dimensions
  return null;
};

/*
 * move children from source to target element
 */
DvtContainer._reparentChildren = function(target, source) {
  var childNodes = source.childNodes;

  if (childNodes) {
    var node;
    var lastNode;

    for (var i = childNodes.length - 1; i >= 0; i--) {
      node = childNodes[i];
      if (lastNode) {
        target.insertBefore(node, lastNode);//@HTMLUpdateOK
      }
      else {
        DvtToolkitUtils.appendChildElem(target, node);
      }
      lastNode = node;
    }
  }
};


/**
 * Returns the anchor element if exists.
 */
DvtContainer.prototype.getContainerElem = function() {
  return this._anchorElem ? this._anchorElem : this.getElem();
};


/**
 * Dispatches the native event to the internal dom element
 * Note: Use with caution
 * @param {Object} event
 */
DvtContainer.prototype.dispatchNativeEvent = function(event) {
  var nativeEvent = event.getNativeEvent();
  var target = null;

  if (this._bShapeContainer)
    target = this._childGroupElem;
  else if (this._anchorElem)
    target = this._anchorElem;
  else
    target = this._elem;

  if (target.dispatchEvent)
    target.dispatchEvent(nativeEvent);
};
// Copyright (c) 2008, 2015, Oracle and/or its affiliates. All rights reserved.
/**
 * Top level container for all displayables contained within the SVG document.  This class should not be extended.
 * @extends {DvtContainer}
 * @param {DvtContext} context
 * @param {SVGElement} svgRoot The containing SVG document.
 * @param {string=} id The optional id for the corresponding DOM element.
 * @class
 * @constructor
 * @export
 */
var DvtStage = function(context, svgRoot, id) {
  // Note: Initialization code in constructor to prevent subclassing.
  this.Init(context, 'g', id);

  this._SVGRoot = svgRoot;// containing SVG DOM element

  //to disable ability to select text, 
  this.disableSelection(this._elem);

  //set cursor to default to avoid text cursors on text objects
  this.setCursor('default');
};

DvtObj.createSubclass(DvtStage, DvtContainer, 'DvtStage');


/**
 * @override
 * @export
 */
DvtStage.prototype.addChild = function(obj) {
  // Note: This function exists to ensure that applications can add children to the stage.  Do not remove.
  DvtStage.superclass.addChild.call(this, obj);
};


/**
 * Appends the specified element to the defs element for this stage.
 * @param {object} elem
 */
DvtStage.prototype.appendDefs = function(elem) {
  DvtToolkitUtils.appendChildElem(this._elemDefs, elem);
};


/**
 * Returns the defs element for this stage.
 * @return {object}
 */
DvtStage.prototype.getDefs = function() {
  return this._elemDefs;
};


/**
 * Returns the root SVG document.
 * @return {object}
 */
DvtStage.prototype.getSVGRoot = function() {
  return this._SVGRoot;
};

// TODO  CLEANUP
DvtStage.prototype.disableSelection = function(target) {
  target.onselectstart = function() {
    return false;
  };
  target.onselect = function() {
    return false;
  };
};
// Copyright (c) 2008, 2015, Oracle and/or its affiliates. All rights reserved.
/**
 *  Abstract base class for shape displayables.
 *  @extends {DvtContainer}
 *  @class
 *  @constructor
 */
var DvtShape = function() {
  // This class should never be instantiated directly
};

//  Allow shapes to become 'containers' themselves.  Note: this does not
//  provide a true parent/child relationship since this not available in SVG. TODO  reconsider this decision
DvtObj.createSubclass(DvtShape, DvtContainer, 'DvtShape');


/**
 * @override
 */
DvtShape.prototype.Init = function(context, type, id) {
  DvtShape.superclass.Init.call(this, context, type, id);

  // TODO : For all properties that default to null or false, remove from constructor
  this._bSelectable = false;
  this.IsSelected = false;
  this.InnerShape = null;
  this.HoverInnerStroke = null;
  this.HoverOuterStroke = null;
  this.SelectedInnerStroke = null;
  this.SelectedOuterStroke = null;
  this.SelectedHoverInnerStroke = null;
  this.SelectedHoverOuterStroke = null;
  this.OriginalStroke = null;
  this._isOriginalStrokeSet = false;
  this.IsShowingHoverEffect = false;
};

/**  Changes the shape to an outline shape format.  Used for legends
 *  markers that represent a hidden state for the associated series risers.
 *  @param {String} fc Border color for hollow shape in format of #aarrggbb
 *  @param {number} strokeWidth Stroke width used for shapes that were transofrmed (optional)
 */
DvtShape.prototype.setHollow = function(fc, strokeWidth) {
  if (!this._bHollow) {
    // Save original fill and stroke to restore
    this._origFill = this.GetProperty('fill');
    this._origStroke = this.getStroke();
    // Set hollow shape fill and stroke based on shape fill
    var hollowFill = DvtSolidFill.invisibleFill();
    var hollowStroke;
    if (fc) {
      hollowStroke = new DvtSolidStroke(DvtColorUtils.getRGB(fc), DvtColorUtils.getAlpha(fc), strokeWidth);
    }
    else {
      hollowStroke = new DvtSolidStroke(this.GetProperty('fill').getColor(), this.GetProperty('fill').getAlpha(), strokeWidth);
    }
    this.setFill(hollowFill);
    this.setStroke(hollowStroke);
    this._bHollow = true;
  }
  else {
    this.setFill(this._origFill);
    this.setStroke(this._origStroke);
    this._bHollow = false;
  }
};


/**  Returns whether a shape is hollow.
 *  @return {boolean} True if the shape is hollow
 */
DvtShape.prototype.isHollow = function() {
  return this._bHollow;
};


/**
 *    Destroy the shape.  It should no longer be used or displayed
 */
DvtShape.prototype.destroy = function() {
  DvtShape.superclass.destroy.call(this);
  this.setFill(null);
  this.setStroke(null);
};

//:
/**
 * @override
 */
DvtShape.prototype.getDimensionsWithStroke = function() {
  //get the dims for this shape by itself
  var dims = this.GetElemDimensionsWithStroke();
  //get the dims for any children of this container
  var containerDims = DvtShape.superclass.getDimensionsWithStroke.call(this);
  //create union of shape and container dims
  if (dims && containerDims) {
    dims = dims.getUnion(containerDims);
  }
  else if (containerDims) {
    dims = containerDims;
  }

  return dims;
};

//:
DvtShape.prototype.GetDimensionsWithStroke = function(targetCoordinateSpace) {
  //get the dims for this shape by itself
  var dims = this.GetElemDimensionsWithStroke();
  if (!targetCoordinateSpace || targetCoordinateSpace === this)
    return dims;
  else {
    // Calculate the bounds relative to the target space
    return this.ConvertCoordSpaceRect(dims, targetCoordinateSpace);
  }
};

//:
DvtShape.prototype.GetElemDimensionsWithStroke = function() {
  //get the dims for this shape by itself
  var dims = DvtShape.superclass.GetElemDimensionsWithStroke.call(this);
  //assume that stroke touches every edge of bounding box, so push out
  //every edge by half the stroke width
  var stroke = this.getStroke();
  if (dims && stroke) {
    var sw = stroke.getWidth();
    if (sw) {
      var halfSw = .5 * sw;
      dims.x -= halfSw;
      dims.y -= halfSw;
      dims.w += sw;
      dims.h += sw;
    }
  }
  return dims;
};


/**
 * Updates the geometries of the DvtShape used for the selection effects.
 * @protected
 */
DvtShape.prototype.UpdateSelectionEffect = function() {
  if (this.isSelected() || this.isHoverEffectShown()) {
    var stroke;
    if (this.InnerShape) {
      stroke = this.InnerShape.getStroke();
      this.removeChild(this.InnerShape);
    }
    this.InnerShape = this.copyShape();
    this.InnerShape.setMouseEnabled(false);
    this.InnerShape.setFill(this.getFill());
    if (stroke)
      this.InnerShape.setStroke(stroke);
    this.InnerShape.setMouseEnabled(false);
    this.InnerShape.setCursor(DvtSelectionEffectUtils.getSelectingCursor());
    this.AddChildAt(this.InnerShape, 0);
  }
};


/**
 * Sets the hover inner and outer strokes for this shape.
 * If there is only one stroke color for this effect, only innerStroke needs to be set.
 * @param {DvtStroke} innerStroke The inner stroke color for this effect
 * @param {DvtStroke} outerStroke The outer stroke color for this effect
 * @return {DvtShape} To be used for chaining
 */
DvtShape.prototype.setHoverStroke = function(innerStroke, outerStroke) {
  this.HoverInnerStroke = innerStroke;
  this.HoverOuterStroke = outerStroke;
  return this;
};


/**
 * Sets the selected inner and outer strokes for this shape.
 * If there is only one stroke color for this effect, only innerStroke needs to be set.
 * @param {DvtStroke} innerStroke The inner stroke color for this effect
 * @param {DvtStroke} outerStroke The outer stroke color for this effect
 * @return {DvtShape} To be used for chaining
 */
DvtShape.prototype.setSelectedStroke = function(innerStroke, outerStroke) {
  this.SelectedInnerStroke = innerStroke;
  this.SelectedOuterStroke = outerStroke;
  return this;
};


/**
 * Sets the selected hover inner and outer stroke for this shape.
 * If there is only one stroke color for this effect, only innerStroke needs to be set.
 * If none are given, default will be to use the selected outer and hover inner strokes.
 * @param {DvtStroke} innerStroke The inner stroke color for this effect
 * @param {DvtStroke} outerStroke The outer stroke color for this effect
 * @return {DvtShape} To be used for chaining
 */
DvtShape.prototype.setSelectedHoverStroke = function(innerStroke, outerStroke) {
  this.SelectedHoverInnerStroke = innerStroke;
  this.SelectedHoverOuterStroke = outerStroke;
  return this;
};


/**
 * Implemented for DvtSelectable
 */
DvtShape.prototype.setSelectable = function(bSelectable) {
  this._bSelectable = bSelectable;
  if (this._bSelectable)
    this.setCursor(DvtSelectionEffectUtils.getSelectingCursor());
  else
    this.setCursor(null);
};


/**
 * Implemented for DvtSelectable
 */
DvtShape.prototype.isSelectable = function() {
  return this._bSelectable;
};


/**
 * Implemented for DvtSelectable
 */
DvtShape.prototype.isSelected = function() {
  return this.IsSelected;
};


/**
 * Implemented for DvtSelectable
 * @override
 */
DvtShape.prototype.setSelected = function(selected) {
  if (this.IsSelected == selected)
    return;

  if (!this._isOriginalStrokeSet) {
    this._isOriginalStrokeSet = true;
    this.OriginalStroke = this.getStroke();
  }

  this.IsSelected = selected;

  if (this.isSelected()) {
    // on selection, set the outer border treatment on the DvtShape and the inner border treatment
    // on its copy which is placed in front of it with the same fill
    this.UpdateSelectionEffect();

    if (this.isHoverEffectShown()) {
      this.CreateSelectedHoverStrokes();
      this.InnerShape.setStroke(this.SelectedHoverInnerStroke);
      this.setStroke(this.SelectedHoverOuterStroke);
    }
    else {
      this.InnerShape.setStroke(this.SelectedInnerStroke);
      this.setStroke(this.SelectedOuterStroke);
    }
  }
  else {
    this.removeChild(this.InnerShape);
    this.setStroke(this.OriginalStroke);
  }
};


/**
 * Implemented for DvtSelectable
 * @override
 */
DvtShape.prototype.showHoverEffect = function() {
  if (this.IsShowingHoverEffect)
    return;

  this.IsShowingHoverEffect = true;

  if (!this._isOriginalStrokeSet) {
    this._isOriginalStrokeSet = true;
    this.OriginalStroke = this.getStroke();
  }

  this.UpdateSelectionEffect();

  if (this.isSelected()) {
    this.CreateSelectedHoverStrokes();
    this.InnerShape.setStroke(this.SelectedHoverInnerStroke);
    this.setStroke(this.SelectedHoverOuterStroke);
  }
  else {
    this.InnerShape.setStroke(this.HoverInnerStroke);
    this.setStroke(this.HoverOuterStroke);
  }
};


/**
 * Initializes the selected hover strokes
 * @protected
 */
DvtShape.prototype.CreateSelectedHoverStrokes = function() {
  if (!this.SelectedHoverInnerStroke)
    this.SelectedHoverInnerStroke = this.HoverInnerStroke.clone();
  if (!this.SelectedHoverOuterStroke) {
    this.SelectedHoverOuterStroke = this.SelectedOuterStroke.clone();
    this.SelectedHoverOuterStroke.setWidth(this.SelectedOuterStroke.getWidth() + (this.HoverInnerStroke.getWidth() - this.SelectedInnerStroke.getWidth()));
  }
};


/**
 * Implemented for DvtSelectable
 */
DvtShape.prototype.hideHoverEffect = function() {
  if (!this.IsShowingHoverEffect)
    return;

  this.IsShowingHoverEffect = false;
  if (this.isSelected()) {
    this.InnerShape.setStroke(this.SelectedInnerStroke);
    this.setStroke(this.SelectedOuterStroke);
  }
  else {
    this.removeChild(this.InnerShape);
    this.setStroke(this.OriginalStroke);
  }
};


/**
 * Determine if the selection hover effect is shown.
 * @type {boolean}
 */
DvtShape.prototype.isHoverEffectShown = function() {
  return this.IsShowingHoverEffect;
};


/**
 * Override DvtContainer's addChildAt to account for the selection shape
 * @override
 */
DvtShape.prototype.addChildAt = function(obj, idx) {
  DvtShape.superclass.addChildAt.call(this, obj, idx + this._getInnerShapeCount());
};


/**
 * Override DvtContainer's getChildAt to account for the selection shape
 * @override
 */
DvtShape.prototype.getChildAt = function(obj, idx) {
  return DvtShape.superclass.getChildAt.call(this, obj, idx + this._getInnerShapeCount());
};


/**
 * Override DvtContainer's getChildIndex to account for the selection shape
 * @override
 */
DvtShape.prototype.getChildIndex = function(obj) {
  var idx = DvtShape.superclass.getChildIndex.call(this, obj);
  return (this.isSelected() || this.isHoverEffectShown()) ? idx + 1 : idx;
};


/**
 * Override DvtContainer's removeChildAt to account for the selection shape
 * @override
 */
DvtShape.prototype.removeChildAt = function(idx) {
  DvtShape.superclass.removeChildAt.call(this, idx + this._getInnerShapeCount());
};


/**
 * @override
 */
DvtShape.prototype.getDimensions = function(targetCoordinateSpace) {
  // Optimized implementation that allows container geometry to be taken into account to avoid costly DOM calls
  if (this.getDimensionsSelf && (this.getNumChildren() - this._getInnerShapeCount() == 0))
    return this.getDimensionsSelf(targetCoordinateSpace);
  else
    return DvtShape.superclass.getDimensions.call(this, targetCoordinateSpace);
};


/**
 * Returns the number of inner shapes that are part of the child list.  This value should be used as an offset to find
 * the true child count.
 * @private
 */
DvtShape.prototype._getInnerShapeCount = function() {
  // TODO CLEANUP:  Technically we should override getNumChildren, but I'm nervous about changing this behavior.
  //               We'll end up fine once shapes can no longer be child containers.
  return (this.isSelected() || this.isHoverEffectShown()) ? 1 : 0;
};


/**
 * @override
 */
DvtShape.prototype.SvgPropertyChanged = function(name) {
  this.UpdateSelectionEffect();
};


/**
 * Makes and returns a copy of the shape with the same geometries. The original shape's fill, stroke, and id will not
 * be copied over.
 * @return {DvtShape} A copy of this shape with the same constructor arguments.
 */
DvtShape.prototype.copyShape = function() {
  // subclasses should implement
  return null;
};
// Copyright (c) 2008, 2015, Oracle and/or its affiliates. All rights reserved.
/**
 * Abstract base class for circular displayable that is drawn around a point.
 * @extends {DvtShape}
 * @class
 * @constructor
 */
var DvtCircularShape = function() {
  // This class should never be instantiated directly
};

DvtObj.createSubclass(DvtCircularShape, DvtShape, 'DvtCircularShape');


/**
 * @param {DvtContext} context
 * @param {string} type The type of SVG element to be created.
 * @param {number} cx The x coordinate of the center of the shape.
 * @param {number} cy The y coordinate of the center of the shape.
 * @param {string=} id The optional id for the corresponding DOM element.
 * @protected
 */
DvtCircularShape.prototype.Init = function(context, type, cx, cy, id) {
  DvtCircularShape.superclass.Init.call(this, context, type, id);
  this.setCx(cx).setCy(cy);
};


/**
 * Returns the x coordinate of the center of the shape.
 * @return {number}
 */
DvtCircularShape.prototype.getCx = function() {
  return this.GetProperty('cx');
};


/**
 * Specifies the x coordinate of the center of the shape.
 * @param {number} cx
 * @return {DvtCircularShape}
 */
DvtCircularShape.prototype.setCx = function(cx) {
  return this.SetSvgProperty('cx', cx, 0);
};


/**
 * Returns the y coordinate of the center of the shape.
 * @return {number}
 */
DvtCircularShape.prototype.getCy = function() {
  return this.GetProperty('cy');
};


/**
 * Specifies the y coordinate of the center of the shape.
 * @param {number} cy
 * @return {DvtCircularShape}
 */
DvtCircularShape.prototype.setCy = function(cy) {
  return this.SetSvgProperty('cy', cy, 0);
};
// Copyright (c) 2008, 2015, Oracle and/or its affiliates. All rights reserved.
/**
 * Abstract base class for polygon displayable that is defined by an array of points.
 * @extends {DvtShape}
 * @class
 * @constructor
 */
var DvtPolygonalShape = function() {
  // This class should never be instantiated directly
};

DvtObj.createSubclass(DvtPolygonalShape, DvtShape, 'DvtPolygonalShape');


/**
 * @param {DvtContext} context
 * @param {string} type The type of SVG element to be created.
 * @param {array} arPoints The array of coordinates for this polygon, in the form [x1,y1,x2,y2...].
 * @param {string=} id The optional id for the corresponding DOM element.
 * @protected
 */
DvtPolygonalShape.prototype.Init = function(context, type, arPoints, id) {
  DvtPolygonalShape.superclass.Init.call(this, context, type, id);

  if (arPoints)
    this.setPoints(arPoints);
};


/**
 * Returns the array of coordinates for this shape, in the form [x1,y1,x2,y2...].
 * @return {array}
 */
DvtPolygonalShape.prototype.getPoints = function() {
  return this.GetProperty('arPoints');
};


/**
 * Specifies the array of coordinates for this shape, in the form [x1,y1,x2,y2...].
 * @param {array} arPoints
 * @return {DvtPolygonalShape}
 */
DvtPolygonalShape.prototype.setPoints = function(arPoints) {
  this.SetProperty('arPoints', arPoints);
  return this.SetSvgProperty('points', DvtSvgShapeUtils.convertPointsArray(arPoints));
};


/**
 * Returns the bounds of the displayable relative to the target coordinate space.  If the target
 * coordinate space is not specified, returns the bounds relative to this displayable.  This function does not take
 * into account any child displayables.
 * @param {DvtDisplayable} targetCoordinateSpace The displayable defining the target coordinate space.
 * @return {DvtRectangle} The bounds of the displayable relative to the target coordinate space.
 */
DvtPolygonalShape.prototype.getDimensionsSelf = function(targetCoordinateSpace) {
  // Note: In the near future, we will not support children for shapes, so this routine will be refactored into the
  //       existing getDimensions calls.  For now, components must be aware of the presence of children to use this.
  var bounds = DvtPolygonUtils.getDimensions(this.getPoints());
  return this.ConvertCoordSpaceRect(bounds, targetCoordinateSpace);
};
// Copyright (c) 2008, 2015, Oracle and/or its affiliates. All rights reserved.
/**
 * Arc displayable.
 * @param {DvtContext} context
 * @param {number} cx The x coordinate of the center of the arc.
 * @param {number} cy The y coordinate of the center of the arc.
 * @param {number} rx The horizontal radius of the arc.
 * @param {number} ry The vertical radius of the arc.
 * @param {number} startAngle The starting angle in degrees (following the normal anti-clockwise is positive convention).
 * @param {number} angleExtent The angle extent in degrees (following the normal anti-clockwise is positive convention).
 * @param {String=} closureType An optional closure type for the arc. Closure types are {@link DvtArc#OPEN} (the default),
 *                              {@link DvtArc#CHORD} and {@link DvtArc#PIE}. TODO  cleanup types
 * @param {string=} id The optional id for the corresponding DOM element.
 * @extends {DvtShape}
 * @class
 * @constructor
 */
var DvtArc = function(context, cx, cy, rx, ry, startAngle, angleExtent, closureType, id)
{
  this.Init(context, cx, cy, rx, ry, startAngle, angleExtent, closureType, id);
};

DvtObj.createSubclass(DvtArc, DvtShape, 'DvtArc');

// TODO  we should find out if this shape is needed at all.  If so, major cleanup needed
// TODO  this class is setting a bunch of non-path properties on paths
// TODO  the usage of createArc is inconsistent
// TODO  add linkages to self on return


/**
 * Closure type - arc is not closed.
 * @type {String}
 */
DvtArc.OPEN = 'OPEN';


/**
 * Closure type - arc is closed to create a segment.
 * @type {String}
 */
DvtArc.CHORD = 'CHORD';


/**
 * Closure type - arc is closed to create a sector.
 * @type {String}
 */
DvtArc.PIE = 'PIE';


/**
 * @param {DvtContext} context
 * @param {number} cx The x coordinate of the center of the arc.
 * @param {number} cy The y coordinate of the center of the arc.
 * @param {number} rx The horizontal radius of the arc.
 * @param {number} ry The vertical radius of the arc.
 * @param {number} startAngle The starting angle in degrees (following the normal anti-clockwise is positive convention).
 * @param {number} angleExtent The angle extent in degrees (following the normal anti-clockwise is positive convention).
 * @param {String=} closureType An optional closure type for the arc. Closure types are {@link DvtArc#OPEN} (the default),
 *                              {@link DvtArc#CHORD} and {@link DvtArc#PIE}. TODO  cleanup types
 * @param {string=} id The optional id for the corresponding DOM element.
 * @protected
 */
DvtArc.prototype.Init = function(context, cx, cy, rx, ry, startAngle, angleExtent, closureType, id) {
  DvtArc.superclass.Init.call(this, context, 'path', id);

  this._sa = 0;// TODO  cleanup
  this._ae = 0;

  ry = ((ry === null || isNaN(ry)) ? rx : ry);

  this._bInInit = true;// performance - avoid multiple createArc()'s
  this.setCx(cx);
  this.setCy(cy);
  this.setRx(rx);
  this.setRy(ry);
  this.setAngleStart(startAngle);
  this.setAngleExtent(angleExtent);
  this.setClosure(closureType ? closureType : DvtArc.OPEN);
  this._bInInit = false;// finally allow createArc to work.
  this._createArc();
};


/** @private */
DvtArc.prototype._addClosure = function(p) {
  if (this._ct === DvtArc.CHORD) {
    p += ' z';
  }
  else if (this._ct === DvtArc.PIE) {
    p += ' L ' + this._cx + ',' + this._cy + ' z';
  }
  else if (this._ct === DvtArc.OPEN) {
    this.setFill(null);
  }

  return p;
};


/**
 * @private
 */
DvtArc.prototype._createArc = function() {
  if (this._bInInit) {
    // don't need to do this until end of Init()
    return;
  }

  var sa = (this._sa * DvtMath.RADS_PER_DEGREE);
  var ae = (this._ae * DvtMath.RADS_PER_DEGREE);

  var x1 = this._cx + (this._rx * Math.cos(sa));// get arc
  var y1 = this._cy - (this._ry * Math.sin(sa));// end points
  var x2 = this._cx + (this._rx * Math.cos(sa + ae));
  var y2 = this._cy - (this._ry * Math.sin(sa + ae));

  var nLargeArc = (Math.abs(this._ae) > 180) ? '1' : '0';
  var nSweepFlag = (this._ae > 0) ? '0' : '1';// 0 == svg +ve angle
  var path = 'M ' + DvtToolkitUtils.roundDecimal(x1) + ' ' + DvtToolkitUtils.roundDecimal(y1) + ' A ' +
      DvtToolkitUtils.roundDecimal(this._rx) + ',' + DvtToolkitUtils.roundDecimal(this._ry) + ' ' + '0' + ' ' +
              nLargeArc + ',' + nSweepFlag + ' ' + DvtToolkitUtils.roundDecimal(x2) + ',' + DvtToolkitUtils.roundDecimal(y2);
  path = this._addClosure(path);

  DvtToolkitUtils.setAttrNullNS(this._elem, 'd', path);
  if (this._stroke !== null) {
    this.setStroke(this._stroke);
  }
};


/**
 * Returns the angle subtended by the arc.
 * @return {number}  The angle subtended by the arc (following the normal anti-clockwise
 * is positive convention).
 */
DvtArc.prototype.getAngleExtent = function() {
  return this._ae;
};


/**
 * Returns the angle subtended by the arc.
 * @return {number}  The angle subtended by the arc.
 * is positive convention).
 */
DvtArc.prototype.setAngleExtent = function(ae) {
  ae = ((ae === null || isNaN(ae)) ? 0 : ae);
  if (this._ae !== ae) {

    //  From https://developer.mozilla.org/en/SVG/Tutorial/Paths
    //  "Complete circles and ellipses are actually the one object paths have trouble drawing.
    //  Because the start and end points for any path going around a circle are the same, there
    //  are an infinite number of circles that could be chosen, and the actual path is undefined.
    //  It's possible to approximate them by making the start and end points of your path slightly askew"
    if (ae === 360) {
      // 
      ae = 359.99;// cannnot use any precision higher than this!
    }

    this._ae = ae;
    this._createArc();
    this.UpdateSelectionEffect();
  }
};


/**
 * Returns the start angle for an arc.
 * @return {number}  The starting angle (following the normal anti-clockwise
 * is positive convention).
 */
DvtArc.prototype.getAngleStart = function() {
  return this._sa;
};


/**
 * Sets the start angle of the arc.
 * @param {number}  The starting angle (following the normal anti-clockwise
 * is positive convention).
 */
DvtArc.prototype.setAngleStart = function(sa) {
  sa = ((sa === null || isNaN(sa)) ? 0 : sa);
  if (this._sa !== sa) {
    this._sa = sa;
    this._createArc();
    this.UpdateSelectionEffect();
  }
};


/**
 *    Returns the closure type of the arc.
 *    @type {String}
 *    @return The closure type,  such as {@link DvtArc#OPEN}
 */
DvtArc.prototype.getClosure = function() {
  return this._ct;
};


/**
 * Sets the closure type of the arc.
 * @param {String} ct   The closure type,  such as {@link DvtArc#OPEN}
 */
DvtArc.prototype.setClosure = function(ct) {
  if (ct !== this._ct) {
    this._ct = ct;
    this._createArc();
    this.UpdateSelectionEffect();
  }
};


/**
 * Returns the x coordinate of the center.
 * @type {number}
 */
DvtArc.prototype.getCx = function() {
  return this._cx;
};


/**
 * Sets the x coordinate of the center.
 * @param {number} cx  The center x position.
 */
DvtArc.prototype.setCx = function(cx) {  // TODO  not a valid SVG attribute
  if (cx !== this._cx) {
    this._cx = cx;
    DvtToolkitUtils.setAttrNullNS(this._elem, 'cx', cx);
    this.UpdateSelectionEffect();
  }
};


/**
 * Returns the y coordinate of the center.
 * @type {number}
 */
DvtArc.prototype.getCy = function() {
  return this._cy;
};


/**
 * Sets the y coordinate of the center.
 * @param {number} cy  The center y position.
 *
 */
DvtArc.prototype.setCy = function(cy) {  // TODO  not a valid SVG attribute
  if (cy !== this._cy) {
    this._cy = cy;
    DvtToolkitUtils.setAttrNullNS(this._elem, 'cy', cy);
    this.UpdateSelectionEffect();
  }
};


/**
 * Returns the horizontal radius of the ellipse.
 * @type {number}
 */
DvtArc.prototype.getRx = function() {
  return this._rx;
};


/**
 * Sets the horizontal radii of the ellipse.
 * @param {number} rx  The horizontal radius of the ellipse.
 */
DvtArc.prototype.setRx = function(rx) {  // TODO  not a valid SVG attribute
  if (rx !== this._rx) {
    this._rx = rx;
    DvtToolkitUtils.setAttrNullNS(this._elem, 'rx', this._rx);
    this._createArc();
    this.UpdateSelectionEffect();
  }
};


/**
 * Returns the vertical radius of the ellipse.
 * @type {number}
 */
DvtArc.prototype.getRy = function() {
  return this._ry;
};


/**
 * Sets the vertical radius of the ellipse.
 * @param {number} ry  The vertical radius of the ellipse.
 */
DvtArc.prototype.setRy = function(ry) {  // TODO  not a valid SVG attribute
  if (ry !== this._ry) {
    this._ry = ry;
    DvtToolkitUtils.setAttrNullNS(this._elem, 'ry', this._ry);
    this._createArc();
    this.UpdateSelectionEffect();
  }
};


/**
 * Defines the position and extent of the arc.
 * @param {number} sa  The starting angle in degrees (following the normal
 * anti-clockwise is positive convention).
 * @param {number} ae  The angle extent in degrees (following the normal
 * anti-clockwise is positive convention).
 */
DvtArc.prototype.setArc = function(sa, ae) { // TODO  check usages
  this.setAngleStart(sa);
  this.setAngleExtentStart(ae);
};


/**
 * Sets both the horizontal and vertical radii of the ellipse/circle.
 * @param {number} rx  The horizontal radius of the ellipse.
 * @param {number} ry  The vertical radius of the ellipse.
 */
DvtArc.prototype.setRadius = function(rx, ry) { // TODO  check usages
  this.setRx(rx);
  this.setRy(ry);
};


/**
 * @override
 */
DvtArc.prototype.copyShape = function() {
  return new DvtArc(this.getCtx(), this.getCx(), this.getCy(), this.getRx(), this.getRy(), this.getAngleStart(), this.getAngleExtent(), this.getClosure());
};

/**
 * @override
 */
DvtArc.prototype.GetAriaElem = function() {
  if (DvtAgent.isTouchDevice())
    this.CreateChildGroupElem(false, true);
  return DvtArc.superclass.GetAriaElem.call(this);
};
// Copyright (c) 2008, 2015, Oracle and/or its affiliates. All rights reserved.
/**
 * Circle displayable.
 * @param {DvtContext} context
 * @param {number} cx The x coordinate of the center of the circle.
 * @param {number} cy The y coordinate of the center of the circle.
 * @param {number} r The radius of the circle.
 * @param {string=} id The optional id for the corresponding DOM element.
 * @extends {DvtCircularShape}
 * @class
 * @constructor
 */
var DvtCircle = function(context, cx, cy, r, id) {
  this.Init(context, cx, cy, r, id);
};

DvtObj.createSubclass(DvtCircle, DvtCircularShape, 'DvtCircle');


/**
 * @param {DvtContext} context
 * @param {number} cx The x coordinate of the center of the circle.
 * @param {number} cy The y coordinate of the center of the circle.
 * @param {number} r The radius of the circle.
 * @param {string=} id The optional id for the corresponding DOM element.
 * @protected
 */
DvtCircle.prototype.Init = function(context, cx, cy, r, id) {
  DvtCircle.superclass.Init.call(this, context, 'circle', cx, cy, id);
  this.setRadius(r);
};


/**
 * Returns the radius of the circle.
 * @return {number}
 */
DvtCircle.prototype.getRadius = function() {
  return this.GetProperty('r');
};


/**
 * Specifies the radius of the circle.
 * @param {number} r
 * @return {DvtCircle}
 */
DvtCircle.prototype.setRadius = function(r) {
  return this.SetSvgProperty('r', r);
};


/**
 * @override
 */
DvtCircle.prototype.copyShape = function() {
  return new DvtCircle(this.getCtx(), this.getCx(), this.getCy(), this.getRadius());
};


/**
 * Returns the bounds of the displayable relative to the target coordinate space.  If the target
 * coordinate space is not specified, returns the bounds relative to this displayable.  This function does not take
 * into account any child displayables.
 * @param {DvtDisplayable} targetCoordinateSpace The displayable defining the target coordinate space.
 * @return {DvtRectangle} The bounds of the displayable relative to the target coordinate space.
 */
DvtCircle.prototype.getDimensionsSelf = function(targetCoordinateSpace) {
  // Note: In the near future, we will not support children for shapes, so this routine will be refactored into the
  //       existing getDimensions calls.  For now, components must be aware of the presence of children to use this.
  var bounds = new DvtRectangle(this.getCx() - this.getRadius(), this.getCy() - this.getRadius(), this.getRadius() * 2, this.getRadius() * 2);
  return this.ConvertCoordSpaceRect(bounds, targetCoordinateSpace);
};
// Copyright (c) 2011, 2015, Oracle and/or its affiliates. All rights reserved.
/**
 * Image displayable.
 * @param {DvtContext} context
 * @param {string} src The url for the image
 * @param {number} x The top left x-coordinate of the image
 * @param {number} y The top left y-coordinate of the image
 * @param {number} w The image width
 * @param {number} h The image height
 * @param {string=} id The optional id for the corresponding DOM element.
 * @extends {DvtShape}
 * @class
 * @constructor
 */
var DvtImage = function(context, src, x, y, w, h, id) {
  this.Init(context, src, x, y, w, h, id);
};

DvtObj.createSubclass(DvtImage, DvtShape, 'DvtImage');// TODO  this should extend displayable

DvtImage.XLINK_NS = 'http://www.w3.org/1999/xlink';


/**
 * Helper method called by the constructor for initializing this object
 * @param {string} src The url for the image
 * @param {number} x The top left x-coordinate of the image
 * @param {number} y The top left y-coordinate of the image
 * @param {number} w The image width
 * @param {number} h The image height
 * @param {string} id The identifier for the image
 * @private
 */
DvtImage.prototype.Init = function(context, src, x, y, w, h, id) {
  DvtImage.superclass.Init.call(this, context, 'image', id);
  // IE doesn't allow interactivity unless there's a fill
  if (DvtAgent.isPlatformIE()) {
    DvtToolkitUtils.setAttrNullNS(this._elem, 'fill', '#FFFFFF');
    DvtToolkitUtils.setAttrNullNS(this._elem, 'fill-opacity', '0');
  }
  this.setImage(src, x, y, w, h);

  // By default, hide images from VoiceOver
  this.setAriaProperty('hidden', 'true');
};


/**
 * Returns the x coordinate of the image.
 * @return {number}
 */
DvtImage.prototype.getX = function() {
  return this.GetProperty('x');
};


/**
 * Specifies the x coordinate of the image.
 * @param {number} x
 * @return {DvtImage}
 */
DvtImage.prototype.setX = function(x) {
  return this.SetSvgProperty('x', x);
};


/**
 * Returns the y coordinate of the image.
 * @return {number}
 */
DvtImage.prototype.getY = function() {
  return this.GetProperty('y');
};


/**
 * Specifies the y coordinate of the image.
 * @param {number} y
 * @return {DvtImage}
 */
DvtImage.prototype.setY = function(y) {
  return this.SetSvgProperty('y', y);
};


/**
 * Returns the width of the image.
 * @return {number}
 */
DvtImage.prototype.getWidth = function() {
  return this.GetProperty('width');
};


/**
 * Specifies the width of the image.
 * @param {number} w The width of the image.
 * @return {DvtImage}
 */
DvtImage.prototype.setWidth = function(w) {
  return this.SetSvgProperty('width', w);
};


/**
 * Returns the height of the image.
 * @return {number}
 */
DvtImage.prototype.getHeight = function() {
  return this.GetProperty('height');
};


/**
 * Specifies the height of the image.
 * @param {number} h The height of the image.
 * @return {DvtImage}
 */
DvtImage.prototype.setHeight = function(h) {
  return this.SetSvgProperty('height', h);
};


/**
 * Returns the src of the image.
 * @return (String) the src of the image.
 */
DvtImage.prototype.getSrc = function() {
  return this._src;
};


/**
 * Sets the src of the image.
 * @param {String} src  The src of the image.
 * @return {DvtImage} self DvtImage object
 */
DvtImage.prototype.setSrc = function(src) {
  if (src !== this._src) {
    var uri = src;
    this._src = src;
    if (DvtAgent.isEnvironmentBatik()) {
      var imageInfo = DvtJavaImageLoader.getImageInfo(src);
      if (imageInfo) {
        uri = imageInfo.uri;
      }
    }

    DvtToolkitUtils.setAttrNS(this._elem, DvtImage.XLINK_NS, 'xlink:href', uri);
  }

  // Return self for linking setters
  return this;
};

DvtImage.prototype.getPos = function() { // TODO  CLEANUP
  return new DvtPoint(this._x, this._y);
};

DvtImage.prototype.setPos = function(x, y) { // TODO  CLEANUP
  this.setX(x).setY(y);
};


/**
 *     Sets the position and size and src of the image
 *     Maybe specified as individual values or using a DvtImage object.
 *
 *   e.g. Image = factory.newImage('pic'png', 10, 10, 50, 100);  or
 *
 *        Image = factory.newImage(myImage);   where myImage = new DvtImage('pic.png', 10, 10, 50, 100);
 */
DvtImage.prototype.setImage = function(src, x, y, w, h) { // TODO  CLEANUP
  if (x instanceof DvtImage) {
    this.setSrc(src.src);
    this.setPos(src.x, src.y);
    this.setWidth(src.w);
    this.setHeight(src.h);
  }
  else {
    this.setSrc(src);
    this.setPos(x, y);
    this.setWidth(w);
    this.setHeight(h);
  }

  //TODO: set preserveAspectRatio="none" for now
  DvtToolkitUtils.setAttrNullNS(this._elem, 'preserveAspectRatio', 'none');
};


/**
 * @override
 */
DvtImage.prototype.getDimensions = function(targetCoordinateSpace) {
  // Optimized implementation that allows container geometry to be taken into account to avoid costly DOM calls
  if (this.getDimensionsSelf && (this.getNumChildren() - this._getInnerShapeCount() == 0))
    return this.getDimensionsSelf(targetCoordinateSpace);
  else {
    var bbox = this.getElem().getBBox();
    if (bbox.width && bbox.height)
      bbox = new DvtRectangle(bbox.x, bbox.y, bbox.width, bbox.height);
    else
      bbox = new DvtRectangle(bbox.x, bbox.y, this.getWidth(), this.getHeight());

    return this.ConvertCoordSpaceRect(bbox, targetCoordinateSpace);
  }
};


/**
 * Convenience method for setting the width and height of the image.
 * @param {object} dims An object with width and height properties.
 */
DvtImage.prototype.__setDimensions = function(dims) {
  this.setWidth(dims.width);
  this.setHeight(dims.height);
};


/**
 * @override
 */
DvtImage.prototype.UpdateSelectionEffect = function() {
  // noop: Does not participate in selection effects
};


/**
 * @override
 */
DvtImage.prototype.copyShape = function() {
  return new DvtImage(this.getCtx(), this.getSrc(), this.getX(), this.getY(), this.getWidth(), this.getHeight());
};


/**
 * Returns the bounds of the displayable relative to the target coordinate space.  If the target
 * coordinate space is not specified, returns the bounds relative to this displayable.  This function does not take
 * into account any child displayables.
 * @param {DvtDisplayable} targetCoordinateSpace The displayable defining the target coordinate space.
 * @return {DvtRectangle} The bounds of the displayable relative to the target coordinate space.
 */
DvtImage.prototype.getDimensionsSelf = function(targetCoordinateSpace) {
  // Note: In the near future, we will not support children for shapes, so this routine will be refactored into the
  //       existing getDimensions calls.  For now, components must be aware of the presence of children to use this.
  var bounds = new DvtRectangle(this.getX(), this.getY(), this.getWidth(), this.getHeight());
  return this.ConvertCoordSpaceRect(bounds, targetCoordinateSpace);
};

/**
 * @override
 */
DvtImage.prototype.setAriaProperty = function(property, value) {
  DvtImage.superclass.setAriaProperty.call(this, property, value);
  if (property != 'hidden')
    DvtImage.superclass.setAriaProperty.call(this, 'hidden', null);
};
// Copyright (c) 2008, 2015, Oracle and/or its affiliates. All rights reserved.
/**
 * Line displayable.
 * @param {DvtContext} context
 * @param {number} x1 The x coordinate of the first point.
 * @param {number} y1 The y coordinate of the first point.
 * @param {number} x2 The x coordinate of the second point.
 * @param {number} y2 The y coordinate of the second point.
 * @param {string=} id The optional id for the corresponding DOM element.
 * @extends {DvtShape}
 * @class
 * @constructor
 */
var DvtLine = function(context, x1, y1, x2, y2, id) {
  this.Init(context, x1, y1, x2, y2, id);
};

DvtObj.createSubclass(DvtLine, DvtShape, 'DvtLine');


/**
 * @param {DvtContext} context
 * @param {number} x1 The x coordinate of the first point.
 * @param {number} y1 The y coordinate of the first point.
 * @param {number} x2 The x coordinate of the second point.
 * @param {number} y2 The y coordinate of the second point.
 * @param {string=} id The optional id for the corresponding DOM element.
 * @protected
 */
DvtLine.prototype.Init = function(context, x1, y1, x2, y2, id) {
  DvtLine.superclass.Init.call(this, context, 'line', id);

  this.setX1(x1).setY1(y1).setX2(x2).setY2(y2);
  this._bHollow = false; // TODO  CLEANUP: The whole bHollow thing is pretty strange.
};


/**
 * Returns the x coordinate of the first point.
 * @return {number}
 */
DvtLine.prototype.getX1 = function() {
  return this.GetProperty('x1');
};


/**
 * Specifies the x coordinate of the first point.
 * @param {number} x1
 * @return {DvtLine}
 */
DvtLine.prototype.setX1 = function(x1) {
  return this.SetSvgProperty('x1', x1, 0);
};


/**
 * Returns the y coordinate of the first point.
 * @return {number}
 */
DvtLine.prototype.getY1 = function() {
  return this.GetProperty('y1');
};


/**
 * Specifies the y coordinate of the first point.
 * @param {number} y1
 * @return {DvtLine}
 */
DvtLine.prototype.setY1 = function(y1) {
  return this.SetSvgProperty('y1', y1, 0);
};


/**
 * Returns the x coordinate of the second point.
 * @return {number}
 */
DvtLine.prototype.getX2 = function() {
  return this.GetProperty('x2');
};


/**
 * Specifies the x coordinate of the second point.
 * @param {number} x2
 * @return {DvtLine}
 */
DvtLine.prototype.setX2 = function(x2) {
  return this.SetSvgProperty('x2', x2, 0);
};


/**
 * Returns the y coordinate of the second point.
 * @return {number}
 */
DvtLine.prototype.getY2 = function() {
  return this.GetProperty('y2');
};


/**
 * Specifies the y coordinate of the second point.
 * @param {number} y2
 * @return {DvtLine}
 */
DvtLine.prototype.setY2 = function(y2) {
  return this.SetSvgProperty('y2', y2, 0);
};


/**
 * Changes the shape to an outline shape format.  Used for legend that represent a hidden state.
 * @override
 */
DvtLine.prototype.setHollow = function() {
  var parentElem = this._elem.parentNode;

  if (!this._bHollow) {
    this._origElem = this._elem;
    var hollowMarker;
    var width = this.getX2() - this.getX1();// Legend lines are always horizontal, so take width as height
    var height = width;
    var startY = this.getY1() - width / 2;
    var stroke = this.getStroke();

    hollowMarker = DvtSvgShapeUtils.createElement('rect');
    DvtToolkitUtils.setAttrNullNS(hollowMarker, 'x', this.getX1());
    DvtToolkitUtils.setAttrNullNS(hollowMarker, 'y', startY);
    DvtToolkitUtils.setAttrNullNS(hollowMarker, 'width', this.getX2() - this.getX1());
    DvtToolkitUtils.setAttrNullNS(hollowMarker, 'height', height);
    var color = stroke.getColor();
    if (color) {
      var alpha = stroke.getAlpha();
      // Workaround for Safari where versions < 5.1 draw rgba values as black
      if (DvtAgent.isBrowserSafari() && color.indexOf('rgba') !== - 1) {
        DvtToolkitUtils.setAttrNullNS(hollowMarker, 'stroke', DvtColorUtils.getRGB(color));
        // Use alpa in rgba value as a multiplier to the alpha set on the object as this is what svg does.
        if (alpha != null)
          DvtToolkitUtils.setAttrNullNS(hollowMarker, 'stroke-opacity', DvtColorUtils.getAlpha(color) * alpha);
        else
          DvtToolkitUtils.setAttrNullNS(hollowMarker, 'stroke-opacity', DvtColorUtils.getAlpha(color));
      }
      else {
        DvtToolkitUtils.setAttrNullNS(hollowMarker, 'stroke', color);
        if (alpha != null)
          DvtToolkitUtils.setAttrNullNS(hollowMarker, 'stroke-opacity', alpha);
      }
    }
    DvtToolkitUtils.setAttrNullNS(hollowMarker, 'fill', '#ffffff');
    DvtToolkitUtils.setAttrNullNS(hollowMarker, 'fill-opacity', '0.001');// need this or hit detection fails on center
    DvtToolkitUtils.setAttrNullNS(hollowMarker, 'shape-rendering', 'crispEdges');
    hollowMarker._obj = this;// replace the elem's _obj backpointer
    parentElem.replaceChild(hollowMarker, this._elem);
    this._elem = hollowMarker;
    DvtToolkitUtils.setAttrNullNS(this._elem, 'opacity', this._alpha);
    this._bHollow = true;
  }
  else if (this._origElem) {
    parentElem.replaceChild(this._origElem, this._elem);
    DvtToolkitUtils.setAttrNullNS(this._origElem, 'opacity', this._alpha);
    this._elem = this._origElem;
    this._origElem = null;
    this._bHollow = false;
  }
};


/**
 * @override
 */
DvtLine.prototype.getDimensions = function(targetCoordinateSpace) {
  // TODO  CLEANUP: It seems like this can just call getDimensionsSelf
  var bounds = DvtLine.superclass.getDimensions.call(this, targetCoordinateSpace);
  // : Vertical/horizontal lines in svg are ignored when group containers wrap them
  if (this._childGroupElem && this._elem) {
    var groupBox = this._childGroupElem.getBBox();
    // Empty bounding box is an indication of only vertical/horizontal lines present in this group
    // In this case, use the original line itself to get the bounds as an approximation
    if (groupBox.x == 0 && groupBox.y == 0 && groupBox.width == 0 && groupBox.height == 0) {
      var lineBounds = this._elem.getBBox();
      bounds = new DvtRectangle(lineBounds.x, lineBounds.y, lineBounds.width, lineBounds.height);
    }
  }
  return bounds;
};


/**
 * @override
 */
DvtLine.prototype.copyShape = function() {
  return new DvtLine(this.getCtx(), this.getX1(), this.getY1(), this.getX2(), this.getY2());
};


/**
 * Returns the bounds of the displayable relative to the target coordinate space.  If the target
 * coordinate space is not specified, returns the bounds relative to this displayable.  This function does not take
 * into account any child displayables.
 * @param {DvtDisplayable} targetCoordinateSpace The displayable defining the target coordinate space.
 * @return {DvtRectangle} The bounds of the displayable relative to the target coordinate space.
 */
DvtLine.prototype.getDimensionsSelf = function(targetCoordinateSpace) {
  // Note: In the near future, we will not support children for shapes, so this routine will be refactored into the
  //       existing getDimensions calls.  For now, components must be aware of the presence of children to use this.
  var x = Math.min(this.getX1(), this.getX2());
  var y = Math.min(this.getY1(), this.getY2());
  var w = Math.abs(this.getX1() - this.getX2());
  var h = Math.abs(this.getY1() - this.getY2());

  var bounds = new DvtRectangle(x, y, w, h);
  return this.ConvertCoordSpaceRect(bounds, targetCoordinateSpace);
};
// Copyright (c) 2008, 2015, Oracle and/or its affiliates. All rights reserved.
/**
  *  A marker object for lines, scatter and bubble charts and legend areas.
  *  @param {DvtContext} context
  *  @param {Object} type An string representing the type of the marker (see {@link DvtMarker}),
  *                       a string URI for the shape path for a custom svg marker,
  *                       or an array of image URIs for each of the 4 marker states (active, hover, selected, hoverSelected).
  *  @param {number} x  The x position of the top left corner of the marker.
  *  @param {number} y  The y position of the top left corner of the marker.
  *  @param {number} w  The width of the marker.
  *  @param {number} h  The height of the marker.
  *  @param {number} sx  Optional The horizontal scale factor of the marker.
  *  @param {number} sy  Optional The vertical scale factor of the marker.
  *  @param {String} id  Optional ID for the shape (see {@link  DvtDisplayable#setId}).
  *  @param {boolean} maintainAspect Optional Indicates whether aspect ratio should be maintained (false is not specified)
  *  @class DvtMarker A marker object for lines, scatter and bubble charts and legend areas.
  *  @extends {DvtShape}
  *  @constructor
  */
var DvtMarker = function(context, type, skin, x, y, w, h, id, sx, sy, maintainAspect) {
  this.Init(context, type, skin, x, y, w, h, id, sx, sy, maintainAspect);
};

DvtObj.createSubclass(DvtMarker, DvtShape, 'DvtMarker');


// TODO : This class is a mess after collapsing the toolkit, but that reflects its state before the collapse.  We
// should refactor the code for creating a marker shape into a separate, simple marker class.
/**
 * No marker shape defined.
 */
DvtMarker.NONE = 'none';


/**
 * A circular marker.
 */
DvtMarker.CIRCLE = 'circle';


/**
 * A square marker.
 */
DvtMarker.SQUARE = 'square';


/**
 * A diamond shaped marker.
 */
DvtMarker.DIAMOND = 'diamond';


/**
 * A triangular shaped marker with a vertex at the top.
 */
DvtMarker.TRIANGLE_UP = 'triangleUp';


/**
 * A triangular shaped marker with a vertex at the bottom.
 */
DvtMarker.TRIANGLE_DOWN = 'triangleDown';


/**
 * A plus-shaped marker.
 */
DvtMarker.PLUS = 'plus';


/**
 * A human figure shaped marker.
 */
DvtMarker.HUMAN = 'human';


/**
 * A rectangular marker with rounded corners.
 */
DvtMarker.ROUNDED_RECTANGLE = 'roundedRect';


/**
 * A custom svg shaped marker.
 */
DvtMarker.CUSTOM = 'custom';


/**
 * An image marker.
 */
DvtMarker.IMAGE = 'image';


/**
 * @protected
 */
DvtMarker.SELECTION_STROKE_COLOR = '#000000';


/**
 * @protected
 */
DvtMarker.SELECTION_STROKE_ALPHA = 1;

// Array indicies if an array of image URIs are passed in type parameter
DvtMarker.IMAGE_SOURCE = 0;
DvtMarker.IMAGE_SOURCE_SELECTED = 1;
DvtMarker.IMAGE_SOURCE_HOVER = 2;
DvtMarker.IMAGE_SOURCE_HOVER_SELECTED = 3;

// The reference coords and sizes that the shapes will be initialized to.
DvtMarker._REFERENCE_X = 0;
DvtMarker._REFERENCE_Y = 0;
DvtMarker._REFERENCE_W = 10;
DvtMarker._REFERENCE_H = 10;

DvtMarker.MARKER_CIRCLE_ELEM_NAME = 'circle';
DvtMarker.MARKER_ELLIPSE_ELEM_NAME = 'ellipse';
DvtMarker.MARKER_LINE_ELEM_NAME = 'line';
DvtMarker.MARKER_PATH_ELEM_NAME = 'path';
DvtMarker.MARKER_POLYGON_ELEM_NAME = 'polygon';
DvtMarker.MARKER_POLYLINE_ELEM_NAME = 'polyline';
DvtMarker.MARKER_RECT_ELEM_NAME = 'rect';


/**
 *  Object initializer.
 *  @protected
 */
DvtMarker.prototype.Init = function(context, type, skin, x, y, w, h, id, sx, sy, maintainAspect) {
  //: save initial parameters in case we want to create
  //a copy of this marker
  this._skin = skin;
  this._xx = x;
  this._yy = y;
  this._ww = w;
  this._hh = h;
  this._sx = sx ? sx : 1;
  this._sy = sy ? sy : 1;
  this._maintainAspect = maintainAspect;
  this._initType = type;

  var etype;
  var markerDef;

  if (type instanceof Array) {
    this._setMarkerImageStates(type);
    type = DvtMarker.IMAGE;
  }
  else {
    if (!DvtMarker.isBuiltInShape(type)) {
      markerDef = DvtMarkerUtils.getCustomMarkerInfo(context, type);
      if (markerDef) {
        // Custom marker is always DvtPath or DvtContainer containing a collection of DvtPaths
        etype = (markerDef instanceof DvtPath ? 'path' : 'g');
        if (!w || !h) {
          var dim = DvtDisplayableUtils.getDimForced(context, markerDef);
          w = w ? w : dim.w;
          h = h ? h : dim.h;
          this._ww = w;
          this._hh = h;
        }
        type = DvtMarker.CUSTOM;
      }
      else {
        // no markerDef found, default to rect
        type = DvtMarker.SQUARE;
      }
    }
    else {
      type = DvtMarker.convertShapeString(type);
    }
  }

  // Create the impl shape
  var elemType;
  if (etype) {
    elemType = etype;
  }
  else {
    elemType = (type === DvtMarker.CIRCLE ? 'ellipse' : (type === DvtMarker.SQUARE ? 'rect' : (type === DvtMarker.ROUNDED_RECTANGLE ? 'rect' : (type === DvtMarker.TRIANGLE_UP ? 'polygon' : (type === DvtMarker.TRIANGLE_DOWN ? 'polygon' : (type === DvtMarker.DIAMOND ? 'polygon' : (type === DvtMarker.PLUS ? 'polygon' : (type === DvtMarker.HUMAN ? 'path' : (type === DvtMarker.IMAGE ? 'image' : 'rect')))))))));
  }
  DvtMarker.superclass.Init.call(this, context, elemType, id);

  // Store the type
  this._type = type;

  //default scale of the marker used to force it to the reference size
  this._defaultScale = 1;

  if (type === DvtMarker.HUMAN) {
    markerDef = DvtMarkerUtils.getBuiltinMarkerInfo(context, 'human', this.getSkin());
  }

  // Update the width and height with the scale factors
  var ww = this.getScaledWidth();
  var hh = this.getScaledHeight();
  this._size = Math.max(ww, hh);

  // Position and size the marker
  this.setBounds(x, y, ww, hh, markerDef);

  // Store other params
  this._dataColor = '#000000';

  //properties related to selection
  this._savedStroke = null;
  this._savedFill = null;
  this._bSavedStroke = false;
  this._bSavedFill = false;
  this._selStrokeWidth = null;
  this._selStrokeColor = null;
  this._selStrokeAlpha = null;
};


/**
 *  Returns the greater of the width and height measurement.
 *  @return {number} the size of the marker.
 */
DvtMarker.prototype.getSize = function() {
  return this._size;
};


/**
 *  Returns the type of the marker that was passed into the constructor.
 *  The type can be a string indicating a built-in marker type, an array of image paths,
 *  or a single path for custom svg marker.
 *  @return {Object} the type of the marker
 */
DvtMarker.prototype.getInitType = function() {
  return this._initType;
};


/**
 * Sets the position and size of the marker.
 * @param {number} x The top left x-coordinate of the marker's bounding rectangle.
 * @param {number} y The top left y-coordinate of the marker's bounding rectangle.
 * @param {number} w The width of the marker's bounding rectangle.
 * @param {number} h The height of the marker's bounding rectangle.
 * @param {DvtMarkerDef} markerDef
 */
DvtMarker.prototype.setBounds = function(x, y, w, h, markerDef) {
  // Initialize the shape to the reference coords
  if (!this._shapeInitialized)
    this.InitShape(this._type, markerDef, x, y, w, h);
};


/**
 * Initializes the shape to the specified coordinates.
 * @param {string} type The marker type
 * @param {DvtMarkerDef} markerDef The marker definition used for custom markers generated on the server
 * @param {number} x The top left x-coordinate of the marker's bounding rectangle.
 * @param {number} y The top left y-coordinate of the marker's bounding rectangle.
 * @param {number} w The width of the marker's bounding rectangle.
 * @param {number} h The height of the marker's bounding rectangle.
 * @private
 */
DvtMarker.prototype.InitShape = function(type, markerDef, x, y, w, h) {
  // Only need to do this once
  this._shapeInitialized = true;

  // Save info for underlay positioning
  this._x = x;
  this._y = y;
  this._w = w;
  this._h = h;

  var multiPathRoot;
  if (type === DvtMarker.CUSTOM || type === DvtMarker.HUMAN) {
    // Calculate the scale factor to get to the right size
    var dim = DvtDisplayableUtils.getDimForced(this.getCtx(), markerDef);
    var maxDim = Math.max(dim.w, dim.h);

    var sx = 1;
    var sy = 1;

    // Calculate the transform to get to the right position
    if (type === DvtMarker.CUSTOM) {
      sx = w / (this.getMaintainAspect() ? maxDim : dim.w);
      sy = h / (this.getMaintainAspect() ? maxDim : dim.h);
      var dx = x + (- dim.x * sx) + (w - (dim.w * sx)) / 2;
      var dy = y + (- dim.y * sy) + (h - (dim.h * sy)) / 2;
      multiPathRoot = this._setCustomMarker(markerDef, dx, dy, sx, sy);
    }
    else if (type === DvtMarker.HUMAN) {
      sx = w / maxDim;
      sy = h / maxDim;
      var dx = x + (- dim.x * sx) + (w - (dim.w * sx)) / 2;
      var dy = y + (- dim.y * sy) + (h - (dim.h * sy)) / 2;
      var humanCmds = DvtCSSStyle.afterSkinAlta(this.getSkin()) ? DvtMarkerDef.HUMAN2_CMDS : DvtMarkerDef.HUMAN_CMDS;
      this._setCmds(DvtPathUtils.transformPath(humanCmds, dx, dy, sx, sy));
    }
    var scale = (dim.h === maxDim) ? (h / maxDim) : (w / maxDim);
    //save the default scale used to force the marker to the reference size
    //because we may need it later for inversely scaling the selection stroke
    this._defaultScale = scale;
  }
  else if (type === DvtMarker.IMAGE) {
    var src = this.GetMarkerImage(DvtMarker.IMAGE_SOURCE);
    this._setX(x);
    this._setY(y);
    this._setWidth(w);
    this._setHeight(h);
    this.setSource(src);
    DvtToolkitUtils.setAttrNullNS(this._elem, 'preserveAspectRatio', 'none');
    // IE doesn't allow interactivity unless there's a fill
    if (DvtAgent.isPlatformIE()) {
      DvtToolkitUtils.setAttrNullNS(this._elem, 'fill', '#FFFFFF');
      DvtToolkitUtils.setAttrNullNS(this._elem, 'fill-opacity', '0');
    }
  }
  else if (type === DvtMarker.SQUARE) {
    this._setX(x);
    this._setY(y);
    this._setWidth(w);
    this._setHeight(h);
  }
  else if (type === DvtMarker.ROUNDED_RECTANGLE) {
    this._setX(x);
    this._setY(y);
    this._setWidth(w);
    this._setHeight(h);
    var rx = 6;
    var ry = 6;
    if (w / 4 < rx || h / 4 < ry) {
      rx = Math.min(w, h) / 4;
      ry = rx;
    }
    this._setRX(rx);
    this._setRY(ry);
  }
  else if (type === DvtMarker.CIRCLE) {
    this._setCx(x + w / 2);
    this._setCy(y + h / 2);
    this._setRX(w / 2);
    this._setRY(h / 2);
  }
  else {
    var ar = [];
    var halfWidth = w / 2;
    var halfHeight = h / 2;

    if (type === DvtMarker.TRIANGLE_UP) {
      ar.push(x);
      ar.push(y + h);
      ar.push(x + w);
      ar.push(y + h);
      ar.push(x + halfWidth);
      ar.push(y);
      this._setPolygon(ar);
    }
    else if (type === DvtMarker.TRIANGLE_DOWN) {
      ar.push(x);
      ar.push(y);
      ar.push(x + w);
      ar.push(y);
      ar.push(x + halfWidth);
      ar.push(y + h);
      this._setPolygon(ar);
    }
    else if (type === DvtMarker.DIAMOND) {
      ar.push(x + halfWidth);
      ar.push(y);
      ar.push(x + w);
      ar.push(y + halfHeight);
      ar.push(x + halfWidth);
      ar.push(y + h);
      ar.push(x);
      ar.push(y + halfHeight);
      this._setPolygon(ar);
    }
    else if (type === DvtMarker.PLUS) {
      var wThird = w / 3;
      var wTwoThird = 2 * wThird;
      var hThird = h / 3;
      var hTwoThird = 2 * hThird;

      ar.push(x + wThird);
      ar.push(y);
      ar.push(x + wTwoThird);
      ar.push(y);
      ar.push(x + wTwoThird);
      ar.push(y + hThird);
      ar.push(x + w);
      ar.push(y + hThird);
      ar.push(x + w);
      ar.push(y + hTwoThird);
      ar.push(x + wTwoThird);
      ar.push(y + hTwoThird);
      ar.push(x + wTwoThird);
      ar.push(y + h);
      ar.push(x + wThird);
      ar.push(y + h);
      ar.push(x + wThird);
      ar.push(y + hTwoThird);
      ar.push(x);
      ar.push(y + hTwoThird);
      ar.push(x);
      ar.push(y + hThird);
      ar.push(x + wThird);
      ar.push(y + hThird);
      ar.push(x + wThird);
      ar.push(y);
      this._setPolygon(ar);
    }
  }
};


/**
 *  Returns the default scale of the marker used to force it to the
 *  reference size.
 *  @type {number}
 */
DvtMarker.prototype.getDefaultScale = function() {
  return this._defaultScale;
};


/**
 *  Returns the skin of the marker.
 *  @return {String} the skin name
 */
DvtMarker.prototype.getSkin = function() {
  return this._skin;
};


/**
 *  Returns the x-coord of the marker.
 *  @return {number} the x-coord of the marker
 */
DvtMarker.prototype.getX = function() {
  return this._xx;
};


/**
 *  Returns the y-coord of the marker.
 *  @return {number} the y-coord of the marker
 */
DvtMarker.prototype.getY = function() {
  return this._yy;
};


/**
 *  Returns the width of the marker, before any scale is applied.
 *  @return {number} the width of the marker
 */
DvtMarker.prototype.getWidth = function() {
  return this._ww;
};


/**
 *  Returns the height of the marker, before any scale is applied.
 *  @return {number} the height of the marker
 */
DvtMarker.prototype.getHeight = function() {
  return this._hh;
};


/**
 *  Returns the width of the marker, after any scale is applied.
 *  @return {number} the scaled width of the marker
 */
DvtMarker.prototype.getScaledWidth = function() {
  return this._sx ? this._ww * this._sx : this._ww;
};


/**
 *  Returns the height of the marker, after any scale is applied.
 *  @return {number} the scaled height of the marker
 */
DvtMarker.prototype.getScaledHeight = function() {
  return this._sy ? this._hh * this._sy : this._hh;
};


/**
 *  Returns the type of the marker (such as {@link DvtMarker#CIRCLE}.
 *  @type {number}
 */
DvtMarker.prototype.getType = function() {
  return this._type;
};


/**
 *  Returns the horizontal scale of the marker.
 *  @return {number} the horizontal scale of the marker
 */
DvtMarker.prototype.getSx = function() {
  return this._sx;
};


/**
 *  Returns the vertical scale of the marker.
 *  @return {number} the vertical scale of the marker
 */
DvtMarker.prototype.getSy = function() {
  return this._sy;
};


/**
 *  Returns whether aspect ratio should be maintained.
 *  @return {boolean} whether aspect ratio should be maintained
 */
DvtMarker.prototype.getMaintainAspect = function() {
  return this._maintainAspect == true;
};


/**
 * @protected
 */
DvtMarker.prototype.SetStrokeWidth = function(sw) {
  var stroke = this.getStroke();
  if (stroke) {
    stroke = stroke.clone();
    stroke.setWidth(sw);
    this.setStroke(stroke);
  }
};


/**
 * @protected
 */
DvtMarker.prototype.GetStrokeWidth = function() {
  var stroke = this.getStroke();
  if (stroke) {
    return stroke.getWidth();
  }
  return 0;
};


/**
 * @override
 */
DvtMarker.prototype.showHoverEffect = function() {
  if (this.getType() === DvtMarker.IMAGE) {
    this.IsShowingHoverEffect = true;
    if (this.isSelected())
      this.setSource(this.GetMarkerImage(DvtMarker.IMAGE_SOURCE_HOVER_SELECTED));
    else
      this.setSource(this.GetMarkerImage(DvtMarker.IMAGE_SOURCE_HOVER));
  }
  else
    DvtMarker.superclass.showHoverEffect.call(this);
};


/**
 * @override
 */
DvtMarker.prototype.hideHoverEffect = function() {
  if (this.getType() === DvtMarker.IMAGE) {
    this.IsShowingHoverEffect = false;
    if (this.isSelected())
      this.setSource(this.GetMarkerImage(DvtMarker.IMAGE_SOURCE_SELECTED));
    else
      this.setSource(this.GetMarkerImage(DvtMarker.IMAGE_SOURCE));
  }
  else
    DvtMarker.superclass.hideHoverEffect.call(this);
};


/**
 * @override
 */
DvtMarker.prototype.setSelected = function(selected) {
  if (this.IsSelected == selected)
    return;

  if (this.getType() === DvtMarker.IMAGE) {
    this.IsSelected = selected;
    if (selected) {
      if (this.isHoverEffectShown())
        this.setSource(this.GetMarkerImage(DvtMarker.IMAGE_SOURCE_HOVER_SELECTED));
      else
        this.setSource(this.GetMarkerImage(DvtMarker.IMAGE_SOURCE_SELECTED));
    }
    else {
      this.setSource(this.GetMarkerImage(DvtMarker.IMAGE_SOURCE));
    }
  }
  else
    DvtMarker.superclass.setSelected.call(this, selected);
};


/**
 * Specifies the color of the data item and its selection feedback, if different from the default.
 * @param {string} dataColor The CSS color string of the primary color of the data item.
 * @param {boolean} bSkipStroke True if the hover and selected stroke creation should be skipped.
 */
DvtMarker.prototype.setDataColor = function(dataColor, bSkipStroke) {
  this._dataColor = dataColor;
  if (!bSkipStroke) {
    var hoverColor = DvtColorUtils.adjustHSL(dataColor, 0, 0, 0.15);
    var sis = new DvtSolidStroke('#FFFFFF', 1, 1.5);
    this.setHoverStroke(new DvtSolidStroke(hoverColor, 1, 2));
    this.setSelectedStroke(sis, new DvtSolidStroke('#5A5A5A', 1, 4.5));
    this.setSelectedHoverStroke(sis, new DvtSolidStroke(hoverColor, 1, 4.5));
    this.HoverInnerStroke.setFixedWidth(true);
    this.SelectedInnerStroke.setFixedWidth(true);
    this.SelectedOuterStroke.setFixedWidth(true);
    this.SelectedHoverInnerStroke.setFixedWidth(true);
    this.SelectedHoverOuterStroke.setFixedWidth(true);
  }
};


/**
 * Get the data color used as a base for selection colors.
 *
 * @type {string}
 */
DvtMarker.prototype.getDataColor = function() {
  return this._dataColor;
};


/**
 * Changes the shape to an outline shape format.  Used for legend
 * markers that represent a hidden state for the associated series risers.
 * @param {String} color Border color for hollow shape in format of #aarrggbb
 * @override
 */
DvtMarker.prototype.setHollow = function(color) {
  //scale the stroke width inversely proportional to the marker scale
  //so that the stroke width appears to be the same for all markers
  var scaleX = this.getScaleX();
  var scaleY = this.getScaleY();
  var scale = Math.min(scaleX, scaleY);
  var strokeWidth = this.GetStrokeWidth();
  strokeWidth = (strokeWidth ? strokeWidth : 1) / scale;

  //save the stroke width so that we can reset it if needed
  DvtMarker.superclass.setHollow.call(this, color, strokeWidth);
};


/**  Adds reference for legend text to marker
 *  @param {DvtText} text Legend text
 */
DvtMarker.prototype.setText = function(text) {
  this._markerText = text;
};


/**  Adds reference for legend text to marker
 *  @param {number} alpha Opacity of object
 *  @override
 */
DvtMarker.prototype.setAlpha = function(alpha) {
  DvtMarker.superclass.setAlpha.call(this, alpha);
  if (this._markerText)
    this._markerText.setAlpha(alpha);
  this.UpdateSelectionEffect();
};


/**
 * @private
 */
DvtMarker.prototype._setCx = function(cx) {
  DvtToolkitUtils.setAttrNullNS(this._elem, 'cx', cx);
};


/**
 * @private
 */
DvtMarker.prototype._setCy = function(cy) {
  DvtToolkitUtils.setAttrNullNS(this._elem, 'cy', cy);
};


/**
 * @private
 */
DvtMarker.prototype._setX = function(x) {
  DvtToolkitUtils.setAttrNullNS(this._elem, 'x', x);
};


/**
 * @private
 */
DvtMarker.prototype._setY = function(y) {
  DvtToolkitUtils.setAttrNullNS(this._elem, 'y', y);
};


/**
 * @private
 */
DvtMarker.prototype._setWidth = function(w) {
  DvtToolkitUtils.setAttrNullNS(this._elem, 'width', w);
};


/**
 * @private
 */
DvtMarker.prototype._setHeight = function(h) {
  DvtToolkitUtils.setAttrNullNS(this._elem, 'height', h);
};


/**
 * @private
 */
DvtMarker.prototype._setRadius = function(r) {
  DvtToolkitUtils.setAttrNullNS(this._elem, 'r', r);
};


/**
 *   @private
 */
DvtMarker.prototype._setPolygon = function(ar) {
  var sPoints = DvtSvgShapeUtils.convertPointsArray(ar);
  DvtToolkitUtils.setAttrNullNS(this._elem, 'points', sPoints);
};


/**
 *   @private
 */
DvtMarker.prototype._setCmds = function(cmds) {
  if (cmds !== this._cmds) {
    this._cmds = cmds;
    DvtToolkitUtils.setAttrNullNS(this._elem, 'd', cmds);
  }
};

DvtMarker.prototype.UpdateMarkerImage = function(imgSrc) {
  this.setSource(imgSrc);
};


/**
 * Updates the marker image source based on the current selection state
 * @param {string} src The image uri to set for the current marker state
 */
DvtMarker.prototype.setSource = function(src) {
  if (DvtAgent.isEnvironmentBatik()) {
    var imageInfo = DvtJavaImageLoader.getImageInfo(src);
    if (imageInfo)
      src = imageInfo.uri;
  }
  DvtToolkitUtils.setAttrNS(this._elem, DvtImage.XLINK_NS, 'xlink:href', src);
};


/**
 * @export
 * Converts the specified shape string to its constant value.
 * @param {string} shape The shape string.
 * @return {number} The corresponding constant value.
 */
DvtMarker.convertShapeString = function(shape) {
  if (shape == DvtMarker.CIRCLE || shape == 'c')
    return DvtMarker.CIRCLE;
  else if (shape == DvtMarker.SQUARE || shape == 's')
    return DvtMarker.SQUARE;
  else if (shape == DvtMarker.DIAMOND || shape == 'd')
    return DvtMarker.DIAMOND;
  else if (shape == DvtMarker.TRIANGLE_UP || shape == 'tu' || shape == 't')
    return DvtMarker.TRIANGLE_UP;
  else if (shape == DvtMarker.TRIANGLE_DOWN || shape == 'td')
    return DvtMarker.TRIANGLE_DOWN;
  else if (shape == DvtMarker.PLUS || shape == 'p')
    return DvtMarker.PLUS;
  else if (shape == DvtMarker.HUMAN || shape == 'h')
    return DvtMarker.HUMAN;
  else if (shape == DvtMarker.ROUNDED_RECTANGLE || shape == 'rr')
    return DvtMarker.ROUNDED_RECTANGLE;
  else
    return DvtMarker.NONE;
};


/**
 * @override
 */
DvtMarker.prototype.GetAttributesTransferableToGroup = function() {
  var attrNames = DvtContainer.AttributesTransferableToGroup.slice(0);
  // Check to see if matrix set since we don't transfer the 'transform' attr, bc it affects the clip path for custom markers.
  if (!this.getMatrix()) {
    var transformIndex = DvtArrayUtils.getIndex(attrNames, 'transform');
    attrNames.splice(transformIndex, 1);
  }
  var visibilityIndex = DvtArrayUtils.getIndex(attrNames, 'visibility');
  attrNames.splice(visibilityIndex, 1);
  return attrNames;
};


/**
 * Sets whether mouse events are enabled on this object.
 * @param {boolean} whether mouse events are enabled
 */
DvtMarker.prototype.setMouseEnabled = function(bEnabled) {
  DvtMarker.superclass.setMouseEnabled.call(this, bEnabled);
  if (this._childGroupElem) {
    var val;
    if (bEnabled) {
      val = 'visiblePainted';
    }
    else {
      val = 'none';
    }
    DvtToolkitUtils.setAttrNullNS(this._childGroupElem, 'pointer-events', val);
  }
};

DvtMarker.prototype._setCustomMarker = function(markerDef, x, y, sx, sy) {
  if (this._isMultiPaths()) {
    var root = this._cloneMultiPaths(markerDef, x, y, sx, sy);
    this.addChild(root);

    // return container of multi paths
    return root;
  }
  else {
    this._setSingleShape(markerDef, x, y, sx, sy);
    return null;
  }
};

DvtMarker.prototype._setSingleShape = function(markerDef, x, y, sx, sy) {
  var type = markerDef.getElem().nodeName;

  if (type == DvtMarker.MARKER_PATH_ELEM_NAME) {
    this._setCmds(DvtPathUtils.transformPath(markerDef.getCmds(), x, y, sx, sy));
  }
  /*
  else if (type == DvtMarker.MARKER_CIRCLE_ELEM_NAME ||
           type == DvtMarker.MARKER_ELLIPSE_ELEM_NAME) {
    this._setCx(markerDef.getCx());
    this._setCy(markerDef.getCy());
    this._setRadius(markerDef.getRadius());
  }

  else if (type == DvtMarker.MARKER_LINE_ELEM_NAME) {
    this._setX1(defImpl.getX1());
    this._setX2(defImpl.getX2());
    this._setY1(defImpl.getY1());
    this._setY2(defImpl.getY2());
  }
  else if (type == DvtMarker.MARKER_POLYGON_ELEM_NAME) {
    this._setPoints(defImpl._sPoints);
  }
  else if (type == DvtMarker.MARKER_POLYLINE_ELEM_NAME) {
    this._setPoints(defImpl._sPoints);
  }
  else if (type == DvtMarker.MARKER_RECT_TYPE_ELEM_NAME) {
    this._setX(markerDef.getX());
    this._setY(markerDef.getY());
    this._setWidth(markerDef.getWidth());
    this._setHeight(markerDef.getHeight());
  }
  */

  var fill = markerDef.getFill();
  if (fill) {
    this.setFill(fill);
  }
  var alpha = markerDef.getAlpha();
  if (alpha) {
    this.setAlpha(alpha);
  }
  var stroke = markerDef.getStroke();
  if (stroke) {
    var scaledStroke = stroke.clone();
    scaledStroke.setWidth(Math.min(sx, sy) * scaledStroke.getWidth());
    this.setStroke(scaledStroke);
  }
};


/**
 *   @private
 */
DvtMarker.prototype._setPoints = function(points) {
  if (points !== this._points) {
    this._points = points;
    DvtToolkitUtils.setAttrNullNS(this._elem, 'points', points);
  }
};


/**
 * @private
 */
DvtMarker.prototype._setX1 = function(x1) {
  DvtToolkitUtils.setAttrNullNS(this._elem, 'x1', x1);
};


/**
 * @private
 */
DvtMarker.prototype._setY1 = function(y1) {
  DvtToolkitUtils.setAttrNullNS(this._elem, 'y1', y1);
};


/**
 * @private
 */
DvtMarker.prototype._setX2 = function(x2) {
  DvtToolkitUtils.setAttrNullNS(this._elem, 'x2', x2);
};


/**
 * @private
 */
DvtMarker.prototype._setY2 = function(y2) {
  DvtToolkitUtils.setAttrNullNS(this._elem, 'y2', y2);
};


/**
 * @private
 */
DvtMarker.prototype._setRX = function(rx) {
  DvtToolkitUtils.setAttrNullNS(this._elem, 'rx', rx);
};


/**
 * @private
 */
DvtMarker.prototype._setRY = function(ry) {
  DvtToolkitUtils.setAttrNullNS(this._elem, 'ry', ry);
};


/**
 * @private
 */
DvtMarker.prototype._cloneMultiPaths = function(markerDef, x, y, sx, sy) {
  var context = this.getCtx();
  var root = new DvtContainer(context, markerDef.getId() + '_x');

  var childCnt = markerDef.getNumChildren();
  var childDef;
  var child;
  for (var i = 0; i < childCnt; i++) {
    childDef = markerDef.getChildAt(i);
    child = new DvtPath(context, DvtPathUtils.transformPath(childDef.getCmds(), x, y, sx, sy), childDef.getId());

    if (childDef.getFill()) {
      child.setFill(childDef.getFill());
    }
    if (childDef.getAlpha()) {
      child.setAlpha(childDef.getAlpha());
    }
    if (childDef.getStroke()) {
      var scaledStroke = childDef.getStroke().clone();
      scaledStroke.setWidth(Math.min(sx, sy) * scaledStroke.getWidth());
      child.setStroke(scaledStroke);
    }
    root.addChild(child);
  }

  return root;
};


/**
 * @override
 */
DvtMarker.prototype.addChild = function(obj) {
  // if this marker has multi paths, don't add an additonal childGroupElem
  if (this._isMultiPaths()) {
    DvtToolkitUtils.appendChildElem(this.getElem(), obj.getOuterElem());
  }
  else {
    DvtMarker.superclass.addChild.call(this, obj);
  }
};

DvtMarker.prototype._isMultiPaths = function() {
  return (this.getElem().nodeName == 'g' && this.getType() != DvtMarker.IMAGE);
};


/**
 * @override
 */
DvtMarker.prototype.getDimensions = function() {
  // Added in order to prevent getDimensions returning null or a 0 width and height while waiting for an image load
  if (this._type == DvtMarker.IMAGE) {
    var w = this.getScaledWidth();
    var h = this.getScaledHeight();
    return new DvtRectangle(this._x, this._y, w, h);
  }
  else {
    return DvtMarker.superclass.getDimensions.call(this);
  }
};


/**
 * @override
 */
DvtMarker.prototype.GetElemDimensionsWithStroke = function() {
  if (this._type == DvtMarker.IMAGE)
    return this.getDimensions();// images don't have borders
  else
    return DvtMarker.superclass.GetElemDimensionsWithStroke.call(this);
};


/**
 *  Enables/disables the visibility of marker and text if reference exists.
 *  @param {Boolean}  bVis  True if the object is to be visible, else false if
 *  it is to be hidden.
 *  @override
 */
DvtMarker.prototype.setVisible = function(bVis) {
  DvtMarker.superclass.setVisible.call(this, bVis);
  if (this._markerText)
    this._markerText.setVisible(bVis);
};

DvtMarker.prototype._setMarkerImageStates = function(imageURIs) {
  // at a minimum an image URI will be provided for the active marker state
  var sourceImage = imageURIs[0];
  this._imageStates = [sourceImage];
  this._imageStates.push(imageURIs[1] ? imageURIs[1] : sourceImage);// sourceSelected
  this._imageStates.push(imageURIs[2] ? imageURIs[2] : sourceImage);// sourceHover
  this._imageStates.push(imageURIs[3] ? imageURIs[3] : this._imageStates[1]);// sourceHoverSelected
};

DvtMarker.prototype.GetMarkerImage = function(state) {
  if (this._imageStates)
    return this._imageStates[state];
  return null;
};


/**
 * Determines if the specified marker shape is a built-in shape.
 * @param {string} shape The shape. For custom markers this would be the shape path.
 * @return {boolean} True if shape is built-in.
 */
DvtMarker.isBuiltInShape = function(shape) {
  var shp = DvtMarker.convertShapeString(shape);
  if (shp == DvtMarker.CIRCLE || shp == DvtMarker.SQUARE || shp == DvtMarker.DIAMOND || shp == DvtMarker.TRIANGLE_UP || shp == DvtMarker.TRIANGLE_DOWN || shp == DvtMarker.PLUS || shp == DvtMarker.HUMAN || shp == DvtMarker.ROUNDED_RECTANGLE) {
    return true;
  }
  else {
    return false;
  }
};


/**
 * @override
 */
DvtMarker.prototype.copyShape = function() {
  return new DvtMarker(this.getCtx(), this.getInitType(), this.getSkin(), this.getX(), this.getY(), this.getWidth(), this.getHeight(), null, this.getSx(), this.getSy(), this.getMaintainAspect());
};


/**
 * @override
 */
DvtMarker.prototype.getDimensions = function(targetCoordinateSpace) {
  // Transforms on markers are not transferred to the outer group element so we must return dimensions of child
  // element which has the matrix
  if (this.InnerShape && this.InnerShape.getParent())
    return this.InnerShape.getDimensions(targetCoordinateSpace);
  else
    return DvtMarker.superclass.getDimensions.call(this, targetCoordinateSpace);
};


/**
 * Returns the bounds of the displayable relative to the target coordinate space.  If the target
 * coordinate space is not specified, returns the bounds relative to this displayable.  This function does not take
 * into account any child displayables.
 * @param {DvtDisplayable} targetCoordinateSpace The displayable defining the target coordinate space.
 * @return {DvtRectangle} The bounds of the displayable relative to the target coordinate space.
 */
DvtMarker.prototype.getDimensionsSelf = function(targetCoordinateSpace) {
  // Note: In the near future, we will not support children for shapes, so this routine will be refactored into the
  //       existing getDimensions calls.  For now, components must be aware of the presence of children to use this.
  var bounds = new DvtRectangle(this.getX(), this.getY(), this.getScaledWidth(), this.getScaledHeight());
  return this.ConvertCoordSpaceRect(bounds, targetCoordinateSpace);
};
// Copyright (c) 2014, 2015, Oracle and/or its affiliates. All rights reserved.

/**
 *  @param {DvtContext} context
 *  @param {String} shape Marker shape
 *  @param {String} skin The skin being used
 *  @param {number} cx  The x position of the center of the marker.
 *  @param {number} cy  The y position of the center of the marker.
 *  @param {number} width  The width of the marker.
 *  @param {number} height  The height of the marker.
 *  @param {boolean=} bMaintainAspectRatio Optional boolean true if keeping aspect ratio.  True by default
 *  and only applies to built-in non-human shapes
 *  @param {String=} id  Optional ID for the shape.
 *
 *  @extends {DvtShape}
 *  @constructor
 */
var DvtSimpleMarker = function(context, shape, skin, cx, cy, width, height, bMaintainAspectRatio, id) {
  this.Init(context, shape, skin, cx, cy, width, height, bMaintainAspectRatio, id);
};

DvtObj.createSubclass(DvtSimpleMarker, DvtShape, 'DvtSimpleMarker');


// MARKER SHAPES
/**
 * A circular marker.
 */
DvtSimpleMarker.CIRCLE = 'circle';

/**
 * An elliptical marker.
 */
DvtSimpleMarker.ELLIPSE = 'ellipse';

/**
 * A square marker.
 */
DvtSimpleMarker.SQUARE = 'square';

/**
 * A rectangular marker.
 */
DvtSimpleMarker.RECTANGLE = 'rectangle';

/**
 * A rectangular marker with rounded corners.
 */
DvtSimpleMarker.ROUNDED_RECT = 'roundedRect';

/**
 * A diamond shaped marker.
 */
DvtSimpleMarker.DIAMOND = 'diamond';

/**
 * A triangular shaped marker with a vertex at the top.
 */
DvtSimpleMarker.TRIANGLE_UP = 'triangleUp';

/**
 * A triangular shaped marker with a vertex at the bottom.
 */
DvtSimpleMarker.TRIANGLE_DOWN = 'triangleDown';

/**
 * A plus-shaped marker.
 */
DvtSimpleMarker.PLUS = 'plus';

/**
 * A human figure shaped marker.
 */
DvtSimpleMarker.HUMAN = 'human';

/**
 * A star figure shaped marker.
 */
DvtSimpleMarker.STAR = 'star';

/**
 * Circle SVG element
 * @private
 */
DvtSimpleMarker._CIRCLE_ELEM = 'circle';

/**
 * Ellipse SVG element
 * @private
 */
DvtSimpleMarker._ELLIPSE_ELEM = 'ellipse';

/**
 * Rect SVG element
 * @private
 */
DvtSimpleMarker._RECT_ELEM = 'rect';

/**
 * Path SVG element
 * @private
 */
DvtSimpleMarker._PATH_ELEM = 'path';

/**
 * Polygon SVG element
 * @private
 */
DvtSimpleMarker._POLYGON_ELEM = 'polygon';

/**
 * Mapping from shape to element type
 * @private
 */
DvtSimpleMarker._SHAPE_ELEM_MAP = {};
DvtSimpleMarker._SHAPE_ELEM_MAP[DvtSimpleMarker.CIRCLE] = DvtSimpleMarker._CIRCLE_ELEM;
DvtSimpleMarker._SHAPE_ELEM_MAP[DvtSimpleMarker.ELLIPSE] = DvtSimpleMarker._ELLIPSE_ELEM;
DvtSimpleMarker._SHAPE_ELEM_MAP[DvtSimpleMarker.SQUARE] = DvtSimpleMarker._RECT_ELEM;
DvtSimpleMarker._SHAPE_ELEM_MAP[DvtSimpleMarker.RECTANGLE] = DvtSimpleMarker._RECT_ELEM;
DvtSimpleMarker._SHAPE_ELEM_MAP[DvtSimpleMarker.ROUNDED_RECT] = DvtSimpleMarker._RECT_ELEM;
DvtSimpleMarker._SHAPE_ELEM_MAP[DvtSimpleMarker.DIAMOND] = DvtSimpleMarker._POLYGON_ELEM;
DvtSimpleMarker._SHAPE_ELEM_MAP[DvtSimpleMarker.TRIANGLE_UP] = DvtSimpleMarker._POLYGON_ELEM;
DvtSimpleMarker._SHAPE_ELEM_MAP[DvtSimpleMarker.TRIANGLE_DOWN] = DvtSimpleMarker._POLYGON_ELEM;
DvtSimpleMarker._SHAPE_ELEM_MAP[DvtSimpleMarker.PLUS] = DvtSimpleMarker._POLYGON_ELEM;
DvtSimpleMarker._SHAPE_ELEM_MAP[DvtSimpleMarker.HUMAN] = DvtSimpleMarker._PATH_ELEM;
DvtSimpleMarker._SHAPE_ELEM_MAP[DvtSimpleMarker.STAR] = DvtSimpleMarker._POLYGON_ELEM;

/**
 * Default border radius for rounded rect
 * @private
 */
DvtSimpleMarker._DEFAULT_BORDER_RADIUS = 6;


/**
 * Object initializer.
 * @param {DvtContext} context
 * @param {String} shape Marker shape or path commands for a custom shape
 * @param {String} skin The skin being used
 * @param {number} cx  The x position of the center of the marker.
 * @param {number} cy  The y position of the center of the marker.
 * @param {number} width  The width of the marker.
 * @param {number} height  The height of the marker.
 * @param {boolean=} bMaintainAspectRatio Optional boolean true if keeping aspect ratio. True by default
 * and only applies to built-in non-human shapes
 * @param {String=} id  Optional ID for the shape.
 * @protected
 */
DvtSimpleMarker.prototype.Init = function(context, shape, skin, cx, cy, width, height, bMaintainAspectRatio, id) {

  this._bMaintainAspectRatio = true;
  if (bMaintainAspectRatio === false) {
    this._bMaintainAspectRatio = false;
    if (shape == DvtSimpleMarker.CIRCLE) {
      shape = DvtSimpleMarker.ELLIPSE;
    }
  }
  this._skin = skin;
  this._shape = shape ? shape : DvtSimpleMarker.RECTANGLE;
  this._dataColor = '#000000';
  var type = shape ? DvtSimpleMarker._SHAPE_ELEM_MAP[shape] : DvtSimpleMarker._RECT_ELEM;


  if (type == null) {
    this._isCustomShape = true;
    this._path = new DvtPath(context, shape);
    type = DvtSimpleMarker._PATH_ELEM;
  }

  DvtSimpleMarker.superclass.Init.call(this, context, type, id);

  if (this._shape == DvtSimpleMarker.HUMAN)
    this._path = DvtMarkerUtils.getBuiltinMarkerInfo(context, DvtSimpleMarker.HUMAN, this._skin);

  this._propertyChange = {};
  this.setCenter(cx, cy, true).setSize(width, height);
};

/**
 * Sets the dimensions (cx, cy, width, height) of the marker with a DvtRectangle.
 * x, y values of DvtRectangle correspond to the marker's center.
 * @param {DvtRectangle} rect
 *
 * @return {DvtSimpleMarker}
 */
DvtSimpleMarker.prototype.setCenterDimensions = function(rect) {
  return this.setCenter(rect.x, rect.y, true).setSize(rect.w, rect.h);
};

/**
 * Gets the dimensions (cx, cy, width, height) of the marker as a DvtRectangle.
 * x, y values of DvtRectangle correspond to the marker's center.
 *
 * @return {DvtRectangle}
 */
DvtSimpleMarker.prototype.getCenterDimensions = function() {
  return new DvtRectangle(this._cx, this._cy, this._width, this._height);
};

/**
 * Sets the size of the marker.
 * @param {number} width The width of the marker.
 * @param {number} height The height of the marker.
 * @param {boolean} bDefer Defer SetSvgProperty
 *
 * @return {DvtSimpleMarker}
 */
DvtSimpleMarker.prototype.setSize = function(width, height, bDefer) {
  return this.setWidth(width, true).setHeight(height, bDefer);
};

/**
 * Sets the center coordinates of the marker.
 * @param {number} cx  The x position of the center of the marker.
 * @param {number} cy  The y position of the center of the marker.
 * @param {boolean} bDefer Defer SetSvgProperty
 *
 * @return {DvtSimpleMarker}
 */
DvtSimpleMarker.prototype.setCenter = function(cx, cy, bDefer) {
  return this.setCx(cx, true).setCy(cy, bDefer);
};

/**
 * Updates relevant SVG properties of the marker
 * @return {DvtSimpleMarker}
 * @private
 */
DvtSimpleMarker.prototype._updateSvgProperties = function() {
  if (this._propertyChange.width || this._propertyChange.height) {
    var s = Math.min(this._width, this._height);
    this._propertyChange.s = (this._s != s);
    this._s = s;
  }
  if (this._shape == DvtSimpleMarker.SQUARE) {
    var width = this.getMaintainAspectRatio() ? this._s : this._width;
    var height = this.getMaintainAspectRatio() ? this._s : this._height;
    if (this._propertyChange.cx || this._propertyChange.s)
      DvtToolkitUtils.setAttrNullNS(this._elem, 'x', this._cx - width / 2, 0);
    if (this._propertyChange.cy || this._propertyChange.s)
      DvtToolkitUtils.setAttrNullNS(this._elem, 'y', this._cy - height / 2, 0);
    if (this.getMaintainAspectRatio() ? this._propertyChange.s :
        (this._propertyChange.width || this._propertyChange.height)) {
      DvtToolkitUtils.setAttrNullNS(this._elem, 'width', width, 0);
      DvtToolkitUtils.setAttrNullNS(this._elem, 'height', height, 0);
    }
  }

  else if (this._shape == DvtSimpleMarker.RECTANGLE ||
           this._shape == DvtSimpleMarker.ROUNDED_RECT) {
    if (this._propertyChange.cx || this._propertyChange.width)
      DvtToolkitUtils.setAttrNullNS(this._elem, 'x', this._cx - this._width / 2, 0);
    if (this._propertyChange.cy || this._propertyChange.height)
      DvtToolkitUtils.setAttrNullNS(this._elem, 'y', this._cy - this._height / 2, 0);
    if (this._propertyChange.width)
      DvtToolkitUtils.setAttrNullNS(this._elem, 'width', this._width, 0);
    if (this._propertyChange.height)
      DvtToolkitUtils.setAttrNullNS(this._elem, 'height', this._height, 0);

    if (this._shape == DvtSimpleMarker.ROUNDED_RECT) {
      if (this._propertyChange.s) {
        var r = this._s / 4 < DvtSimpleMarker._DEFAULT_BORDER_RADIUS ? this._s / 4 : DvtSimpleMarker._DEFAULT_BORDER_RADIUS;
        DvtToolkitUtils.setAttrNullNS(this._elem, 'rx', r, 0);
        DvtToolkitUtils.setAttrNullNS(this._elem, 'ry', r, 0);
      }
    }
  }

  else if (this._shape == DvtSimpleMarker.CIRCLE ||
           this._shape == DvtSimpleMarker.ELLIPSE) {
    if (this._propertyChange.cx)
      DvtToolkitUtils.setAttrNullNS(this._elem, 'cx', this._cx, 0);
    if (this._propertyChange.cy)
      DvtToolkitUtils.setAttrNullNS(this._elem, 'cy', this._cy, 0);

    if (this._shape == DvtSimpleMarker.CIRCLE) {
      if (this._propertyChange.s)
        DvtToolkitUtils.setAttrNullNS(this._elem, 'r', this._s / 2, 0);
    }
    else {
      if (this._propertyChange.width)
        DvtToolkitUtils.setAttrNullNS(this._elem, 'rx', this._width / 2, 0);
      if (this._propertyChange.height)
        DvtToolkitUtils.setAttrNullNS(this._elem, 'ry', this._height / 2, 0);
    }
  }

  else if (this._isPolygon()) {
    if (this._propertyChange.s || this._propertyChange.cx || this._propertyChange.cy)
      this._setPolygon(this._getPolygonArray());
  }

  else if (this._isPath()) {
    if (this._propertyChange.s || this._propertyChange.cx || this._propertyChange.cy)
      this._setCmds(this._getCmds());
  }

  this.UpdateSelectionEffect();
  this._propertyChange = {};
  return this;
};


/**
 * Returns the x coordinate of the center of the marker.
 * @return {number}
 */
DvtSimpleMarker.prototype.getCx = function() {
  return this._cx;
};

/**
 * Specifies the x coordinate of the center of the marker.
 * @param {number} cx
 * @param {boolean} bDefer Defer updating the svg properties
 * @return {DvtSimpleMarker}
 */
DvtSimpleMarker.prototype.setCx = function(cx, bDefer) {
  this._propertyChange.cx = (this._cx != cx);
  this._cx = cx;
  return (bDefer ? this : this._updateSvgProperties());
};

/**
 * Returns the y coordinate of the center of the marker.
 * @return {number}
 */
DvtSimpleMarker.prototype.getCy = function() {
  return this._cy;
};

/**
 * Specifies the y coordinate of the center of the marker.
 * @param {number} cy
 * @param {boolean} bDefer Defer updating the svg properties
 * @return {DvtSimpleMarker}
 */
DvtSimpleMarker.prototype.setCy = function(cy, bDefer) {
  this._propertyChange.cy = (this._cy != cy);
  this._cy = cy;
  return (bDefer ? this : this._updateSvgProperties());

};

/**
 *  Returns the size of the marker.
 *  @return {number}
 */
DvtSimpleMarker.prototype.getSize = function() {
  // Note: This currently returns the smaller of the width and height, while the marker field returns the greater of the
  // two. This needs to be reconciled.
  return this._s;
};

/**
 * Returns the width of the marker.
 * @return {number}
 */
DvtSimpleMarker.prototype.getWidth = function() {
  return this._width;
};

/**
 * Specifies the width of the marker.
 * @param {number} width
 * @param {boolean} bDefer Defer updating the svg properties
 * @return {DvtSimpleMarker}
 */
DvtSimpleMarker.prototype.setWidth = function(width, bDefer) {
  this._propertyChange.width = (this._width != width);
  this._width = width;
  return (bDefer ? this : this._updateSvgProperties());
};

/**
 * Returns the height of the marker.
 * @return {number}
 */
DvtSimpleMarker.prototype.getHeight = function() {
  return this._height;
};

/**
 * Specifies the height of the marker.
 * @param {number} height
 * @param {boolean} bDefer Defer updating the svg properties
 * @return {DvtSimpleMarker}
 */
DvtSimpleMarker.prototype.setHeight = function(height, bDefer) {
  this._propertyChange.height = (this._height != height);
  this._height = height;
  return (bDefer ? this : this._updateSvgProperties());
};

/**
 * Returns polygon array for given dimensions.
 *
 * @return {array} array of polygon coordinates
 * @private
 */
DvtSimpleMarker.prototype._getPolygonArray = function() {
  var ar = [];

  var cx = this._cx;
  var cy = this._cy;

  var halfx = this.getMaintainAspectRatio() ? this._s / 2 : this._width / 2;
  var halfy = this.getMaintainAspectRatio() ? this._s / 2 : this._height / 2;
  var sixthx = this.getMaintainAspectRatio() ? this._s / 6 : this._width / 6;
  var sixthy = this.getMaintainAspectRatio() ? this._s / 6 : this._height / 6;

  if (this._shape == DvtSimpleMarker.TRIANGLE_UP) {
    ar = [
      cx - halfx,
      cy + halfy,
      cx,
      cy - halfy,
      cx + halfx,
      cy + halfy
    ];
  }
  else if (this._shape == DvtSimpleMarker.TRIANGLE_DOWN) {
    ar = [
      cx - halfx,
      cy - halfy,
      cx,
      cy + halfy,
      cx + halfx,
      cy - halfy
    ];
  }
  else if (this._shape == DvtSimpleMarker.DIAMOND) {
    ar = [
      cx - halfx,
      cy,
      cx,
      cy - halfy,
      cx + halfx,
      cy,
      cx,
      cy + halfy
    ];
  }
  else if (this._shape == DvtSimpleMarker.PLUS) {
    ar = [
      cx - halfx,
      cy - sixthy,
      cx - sixthx,
      cy - sixthy,
      cx - sixthx,
      cy - halfy,
      cx + sixthx,
      cy - halfy,
      cx + sixthx,
      cy - sixthy,
      cx + halfx,
      cy - sixthy,
      cx + halfx,
      cy + sixthy,
      cx + sixthx,
      cy + sixthy,
      cx + sixthx,
      cy + halfy,
      cx - sixthx,
      cy + halfy,
      cx - sixthx,
      cy + sixthy,
      cx - halfx,
      cy + sixthy
    ];
  }
  else if (this._shape == DvtSimpleMarker.STAR) {
    ar = DvtMarkerDef.SHAPE_STAR_CMDS;

    // Scale and translate from center of (0,0)
    ar = DvtPolygonUtils.scale(ar, this.getMaintainAspectRatio() ? this._s / 100 : this._width / 100,
        this.getMaintainAspectRatio() ? this._s / 100 : this._height / 100);
    ar = DvtPolygonUtils.translate(ar, cx, cy);
  }
  return ar;
};

/**
 * Sets the polygon shape of the marker
 * @param {array} ar
 * @private
 */
DvtSimpleMarker.prototype._setPolygon = function(ar) {
  DvtToolkitUtils.setAttrNullNS(this._elem, 'points', DvtSvgShapeUtils.convertPointsArray(ar));
};

/**
 * Calculates and returns path commands for given dimensions
 *
 * @return {string} commands
 * @private
 */
DvtSimpleMarker.prototype._getCmds = function() {
  var dim = DvtDisplayableUtils.getDimForced(this.getCtx(), this._path);

  var max = Math.max(dim.w, dim.h);
  var scalex = this.getMaintainAspectRatio() ? this._s / max : this._width / max;
  var scaley = this.getMaintainAspectRatio() ? this._s / max : this._height / max;

  var dx = this._cx - (dim.x * scalex) - (dim.w * scalex) / 2;
  var dy = this._cy - (dim.y * scaley) - (dim.h * scaley) / 2;
  return DvtPathUtils.transformPath(this._path.getCmds(), dx, dy, scalex, scaley);
};

/**
 * Sets the path of the marker
 * @param {string} cmds
 * @private
 */
DvtSimpleMarker.prototype._setCmds = function(cmds) {
  DvtToolkitUtils.setAttrNullNS(this._elem, 'd', cmds);
};

/**
 * Gets the type of the marker
 * @return {string}
 */
DvtSimpleMarker.prototype.getType = function() {
  return this._shape;
};

/**
 * @private
 * @return {boolean}
 */
DvtSimpleMarker.prototype._isPolygon = function() {
  return (this._shape == DvtSimpleMarker.TRIANGLE_UP ||
          this._shape == DvtSimpleMarker.TRIANGLE_DOWN ||
          this._shape == DvtSimpleMarker.DIAMOND ||
          this._shape == DvtSimpleMarker.PLUS ||
          this._shape == DvtSimpleMarker.STAR);
};

/**
 * @private
 * @return {boolean}
 */
DvtSimpleMarker.prototype._isPath = function() {
  return this._shape == DvtSimpleMarker.HUMAN || this._isCustomShape;
};


/**
 * @param {number} sw Stroke width
 * @protected
 */
DvtSimpleMarker.prototype.SetStrokeWidth = function(sw) {
  var stroke = this.getStroke();
  if (stroke) {
    stroke = stroke.clone();
    stroke.setWidth(sw);
    this.setStroke(stroke);
  }
};

/**
 * @protected
 * @return {number} Stroke width
 */
DvtSimpleMarker.prototype.GetStrokeWidth = function() {
  var stroke = this.getStroke();
  if (stroke) {
    return stroke.getWidth();
  }
  return 0;
};

/**
 * Specifies the color of the data item and its selection feedback, if different from the default.
 * @param {string} dataColor The CSS color string of the primary color of the data item.
 * @param {boolean} bSkipStroke True if the hover and selected stroke creation should be skipped.
 */
DvtSimpleMarker.prototype.setDataColor = function(dataColor, bSkipStroke) {
  this._dataColor = dataColor;
  if (!bSkipStroke) {
    var hoverColor = DvtSelectionEffectUtils.getHoverBorderColor(dataColor);
    var innerColor = '#FFFFFF';
    var outerColor = '#5A5A5A';

    this.setHoverStroke(new DvtSolidStroke(innerColor, 1, 1), new DvtSolidStroke(hoverColor, 1, 3.5));
    this.setSelectedStroke(new DvtSolidStroke(innerColor, 1, 1.5), new DvtSolidStroke(outerColor, 1, 4.5));
    this.setSelectedHoverStroke(new DvtSolidStroke(innerColor, 1, 1.5), new DvtSolidStroke(hoverColor, 1, 4.5));

    this.HoverInnerStroke.setFixedWidth(true);
    this.HoverOuterStroke.setFixedWidth(true);
    this.SelectedInnerStroke.setFixedWidth(true);
    this.SelectedOuterStroke.setFixedWidth(true);
    this.SelectedHoverInnerStroke.setFixedWidth(true);
    this.SelectedHoverOuterStroke.setFixedWidth(true);
  }
};


/**
 * Get the data color used as a base for selection colors.
 * @return {string} data color
 */
DvtSimpleMarker.prototype.getDataColor = function() {
  return this._dataColor;
};


/**
 * Changes the shape to an outline shape format.  Used for legend
 * markers that represent a hidden state for the associated series risers.
 * @param {String} color Border color for hollow shape in format of #aarrggbb
 * @override
 */
DvtSimpleMarker.prototype.setHollow = function(color) {
  //scale the stroke width inversely proportional to the marker scale
  //so that the stroke width appears to be the same for all markers
  //  var scaleX = this.getScaleX();
  //  var scaleY = this.getScaleY();
  //  var scale = Math.min(scaleX, scaleY);
  var strokeWidth = this.GetStrokeWidth();
  strokeWidth = (strokeWidth ? strokeWidth : 1); // / scale;

  //save the stroke width so that we can reset it if needed
  DvtSimpleMarker.superclass.setHollow.call(this, color, strokeWidth);
};


/**
 * Adds reference for legend text to marker
 * @param {DvtText} text Legend text
 */
DvtSimpleMarker.prototype.setText = function(text) {
  this._markerText = text;
};


/**
 * Adds reference for legend text to marker
 * @param {number} alpha Opacity of object
 * @override
 */
DvtSimpleMarker.prototype.setAlpha = function(alpha) {
  DvtSimpleMarker.superclass.setAlpha.call(this, alpha);
  if (this._markerText)
    this._markerText.setAlpha(alpha);
  this.UpdateSelectionEffect();
};

/**
 * @return {DvtSimpleMarker} copy of the marker
 * @override
 */
DvtSimpleMarker.prototype.copyShape = function() {
  return new DvtSimpleMarker(this.getCtx(), this._shape, this._skin, this.getCx(), this.getCy(), this.getWidth(), this.getHeight(), this.getMaintainAspectRatio());
};

/**
 * @override
 */
DvtSimpleMarker.prototype.getDimensions = function(targetCoordinateSpace) {
  var x = this.getCx() - this.getWidth() / 2;
  var y = this.getCy() - this.getHeight() / 2;
  var bounds = new DvtRectangle(x, y, this.getWidth(), this.getHeight());
  // Calculate the bounds relative to the target space
  return this.ConvertCoordSpaceRect(bounds, targetCoordinateSpace);
};

/**
 * @param {boolean} bMaintainAspectRatio True if keeping aspect ratio
 */
DvtSimpleMarker.prototype.setMaintainAspectRatio = function(bMaintainAspectRatio) {
  this._bMaintainAspectRatio = bMaintainAspectRatio;
};

/**
 * @return {boolean} true if keeping aspect ratio
 */
DvtSimpleMarker.prototype.getMaintainAspectRatio = function() {
  return this._bMaintainAspectRatio;
};

// Copyright (c) 2014, 2015, Oracle and/or its affiliates. All rights reserved.

/**
 * @param {DvtContext} context
 * @param {number} cx  The x position of the center of the marker.
 * @param {number} cy  The y position of the center of the marker.
 * @param {number} width  The width of the marker.
 * @param {number} height  The height of the marker.
 * @param {String} source Image URI for the default state.
 * @param {String} sourceSelected Image URI for the selected state.
 * @param {String} sourceHover Image URI for the hover state.
 * @param {String} sourceHoverSelected Image URI for the hover selected state.
 * @param {String} id  Optional ID for the shape.
 *
 * @extends {DvtShape}
 * @constructor
 */
var DvtImageMarker = function(context, cx, cy, width, height, source, sourceSelected, sourceHover, sourceHoverSelected, id) {
  this.Init(context, cx, cy, width, height, source, sourceSelected, sourceHover, sourceHoverSelected, id);
};

DvtObj.createSubclass(DvtImageMarker, DvtShape, 'DvtImageMarker');
/**
 * Object initializer.
 * @param {DvtContext} context
 * @param {number} cx  The x position of the center of the marker.
 * @param {number} cy  The y position of the center of the marker.
 * @param {number} width  The width of the marker.
 * @param {number} height  The height of the marker.
 * @param {String} source Image URI for the default state.
 * @param {String} sourceSelected Image URI for the selected state.
 * @param {String} sourceHover Image URI for the hover state.
 * @param {String} sourceHoverSelected Image URI for the hover selected state.
 * @param {String} id  Optional ID for the shape.
 * @protected
 */
DvtImageMarker.prototype.Init = function(context, cx, cy, width, height, source, sourceSelected, sourceHover, sourceHoverSelected, id) {

  DvtImageMarker.superclass.Init.call(this, context, 'image', id);

  this._setMarkerImageStates(source, sourceSelected, sourceHover, sourceHoverSelected);
  var image = this._getImage();
  this._setSource(image);

  this._propertyChange = {};
  this.setCenter(cx, cy, true).setSize(width, height);

  DvtToolkitUtils.setAttrNullNS(this._elem, 'preserveAspectRatio', 'none');
  // IE doesn't allow interactivity unless there's a fill
  if (DvtAgent.isPlatformIE()) {
    DvtToolkitUtils.setAttrNullNS(this._elem, 'fill', '#FFFFFF');
    DvtToolkitUtils.setAttrNullNS(this._elem, 'fill-opacity', '0');
  }
};

/**
 * Sets the dimensions (cx, cy, width, height) of the marker with a DvtRectangle.
 * x, y values of DvtRectangle correspond to the marker's center.
 * @param {DvtRectangle} rect
 *
 * @return {DvtImageMarker}
 */
DvtImageMarker.prototype.setCenterDimensions = function(rect) {
  return this.setCenter(rect.x, rect.y, true).setSize(rect.w, rect.h);
};

/**
 * Gets the dimensions (cx, cy, width, height) of the marker as a DvtRectangle.
 * x, y values of DvtRectangle correspond to the marker's center.
 *
 * @return {DvtRectangle}
 */
DvtImageMarker.prototype.getCenterDimensions = function() {
  return new DvtRectangle(this._cx, this._cy, this._width, this._height);
};

/**
 * Sets the size of the marker.
 * @param {number} width The width of the marker.
 * @param {number} height The height of the marker.
 * @param {boolean} bDefer Defer SetSvgProperty
 *
 * @return {DvtImageMarker}
 */
DvtImageMarker.prototype.setSize = function(width, height, bDefer) {
  return this.setWidth(width, true).setHeight(height, bDefer);
};

/**
 * Sets the center coordinates of the marker.
 * @param {number} cx  The x position of the center of the marker.
 * @param {number} cy  The y position of the center of the marker.
 * @param {boolean} bDefer Defer SetSvgProperty
 *
 * @return {DvtImageMarker}
 */
DvtImageMarker.prototype.setCenter = function(cx, cy, bDefer) {
  return this.setCx(cx, true).setCy(cy, bDefer);
};

/**
 * Updates SVG properties of the marker
 * @return {DvtImageMarker}
 * @private
 */
DvtImageMarker.prototype._updateSvgProperties = function() {
  if (this._propertyChange.cx || this._propertyChange.width)
    DvtToolkitUtils.setAttrNullNS(this._elem, 'x', this._cx - this._width / 2, 0);

  if (this._propertyChange.cy || this._propertyChange.height)
    DvtToolkitUtils.setAttrNullNS(this._elem, 'y', this._cy - this._height / 2, 0);

  if (this._propertyChange.width)
    DvtToolkitUtils.setAttrNullNS(this._elem, 'width', this._width, 0);

  if (this._propertyChange.height)
    DvtToolkitUtils.setAttrNullNS(this._elem, 'height', this._height, 0);

  this.UpdateSelectionEffect();
  this._propertyChange = {};
  return this;
};

/**
 * Returns the x coordinate of the center of the marker.
 * @return {number}
 */
DvtImageMarker.prototype.getCx = function() {
  return this._cx;
};

/**
 * Specifies the x coordinate of the center of the marker.
 * @param {number} cx
 * @param {boolean} bDefer Defer SetSvgProperty
 * @return {DvtImageMarker}
 */
DvtImageMarker.prototype.setCx = function(cx, bDefer) {
  this._propertyChange.cx = (this._cx != cx);
  this._cx = cx;
  return (bDefer ? this : this._updateSvgProperties());
};

/**
 * Returns the y coordinate of the center of the marker.
 * @return {number}
 */
DvtImageMarker.prototype.getCy = function() {
  return this._cy;
};

/**
 * Specifies the y coordinate of the center of the marker.
 * @param {number} cy
 * @param {boolean} bDefer Defer SetSvgProperty
 * @return {DvtImageMarker}
 */
DvtImageMarker.prototype.setCy = function(cy, bDefer) {
  this._propertyChange.cy = (this._cy != cy);
  this._cy = cy;
  return (bDefer ? this : this._updateSvgProperties());

};

/**
 * Returns the width of the marker.
 * @return {number}
 */
DvtImageMarker.prototype.getWidth = function() {
  return this._width;
};

/**
 * Specifies the width of the marker.
 * @param {number} width
 * @param {boolean} bDefer Defer SetSvgProperty
 * @return {DvtImageMarker}
 */
DvtImageMarker.prototype.setWidth = function(width, bDefer) {
  this._propertyChange.width = (this._width != width);
  this._width = width;
  return (bDefer ? this : this._updateSvgProperties());

};

/**
 * Returns the height of the marker.
 * @return {number}
 */
DvtImageMarker.prototype.getHeight = function() {
  return this._height;
};

/**
 * Specifies the height of the marker.
 * @param {number} height
 * @param {boolean} bDefer Defer SetSvgProperty
 * @return {DvtImageMarker}
 */
DvtImageMarker.prototype.setHeight = function(height, bDefer) {
  this._propertyChange.height = (this._height != height);
  this._height = height;
  return (bDefer ? this : this._updateSvgProperties());

};

/**
 * Set the image source
 * @param {String} src Image URI to be set as the source.
 * @private
 */
DvtImageMarker.prototype._setSource = function(src) {
  if (DvtAgent.isEnvironmentBatik()) {
    var imageInfo = DvtJavaImageLoader.getImageInfo(src);
    if (imageInfo)
      src = imageInfo.uri;
  }
  DvtToolkitUtils.setAttrNS(this._elem, DvtImage.XLINK_NS, 'xlink:href', src);
};

/**
 * Set the image state array
 * @param {String} source Image URI for the default state.
 * @param {String} sourceSelected Image URI for the selected state.
 * @param {String} sourceHover Image URI for the hover state.
 * @param {String} sourceHoverSelected Image URI for the hover selected state.
 * @private
 */
DvtImageMarker.prototype._setMarkerImageStates = function(source, sourceSelected, sourceHover, sourceHoverSelected) {
  // at a minimum an image URI will be provided for the active marker state
  var sourceImage = source;
  this._imageStates = [sourceImage];
  this._imageStates.push(sourceSelected ? sourceSelected : sourceImage);
  this._imageStates.push(sourceHover ? sourceHover : sourceImage);
  this._imageStates.push(sourceHoverSelected ? sourceHoverSelected : this._imageStates[1]);
};

/**
 * Get default image state URI
 * @return {string}
 * @private
 */
DvtImageMarker.prototype._getImage = function() {
  return this._imageStates[0];
};

/**
 * Get selected image state URI
 * @return {string}
 * @private
 */
DvtImageMarker.prototype._getImageSelected = function() {
  return this._imageStates[1];
};

/**
 * Get hover image state URI
 * @return {string}
 * @private
 */
DvtImageMarker.prototype._getImageHover = function() {
  return this._imageStates[2];
};

/**
 * Get hover selected image state URI
 * @return {string}
 * @private
 */
DvtImageMarker.prototype._getImageHoverSelected = function() {
  return this._imageStates[3];
};

/**
 * @override
 */
DvtImageMarker.prototype.showHoverEffect = function() {
  this.IsShowingHoverEffect = true;
  if (this.isSelected())
    this._setSource(this._getImageHoverSelected());
  else
    this._setSource(this._getImageHover());
};

/**
 * @override
 */
DvtImageMarker.prototype.hideHoverEffect = function() {
  this.IsShowingHoverEffect = false;
  if (this.isSelected())
    this._setSource(this._getImageSelected());
  else
    this._setSource(this._getImage());
};

/**
 * @override
 */
DvtImageMarker.prototype.setSelected = function(selected) {
  if (this.IsSelected == selected)
    return;

  this.IsSelected = selected;
  if (selected) {
    if (this.isHoverEffectShown())
      this._setSource(this._getImageHoverSelected());
    else
      this._setSource(this._getImageSelected());
  }
  else {
    this._setSource(this._getImage());
  }
};

/**
 * @return {DvtImageMarker} copy of the marker
 * @override
 */
DvtImageMarker.prototype.copyShape = function() {
  return new DvtImageMarker(this.getCtx(), this.getCx(), this.getCy(), this.getWidth(), this.getHeight(), this._getImage(), this._getImageSelected(), this._getImageHover(), this._getImageHoverSelected, null);
};
// Copyright (c) 2008, 2015, Oracle and/or its affiliates. All rights reserved.
/**
 * Ellipse displayable.
 * @param {DvtContext} context
 * @param {number} cx The x coordinate of the center of the circle.
 * @param {number} cy The y coordinate of the center of the circle.
 * @param {number} rx The horizontal radius of the circle.
 * @param {number} ry The vertical radius of the circle.
 * @param {string=} id The optional id for the corresponding DOM element.
 * @extends {DvtCircularShape}
 * @class
 * @constructor
 */
var DvtOval = function(context, cx, cy, rx, ry, id) {
  this.Init(context, cx, cy, rx, ry, id);
};

DvtObj.createSubclass(DvtOval, DvtCircularShape, 'DvtOval');


/**
 * @param {DvtContext} context
 * @param {number} cx The x coordinate of the center of the circle.
 * @param {number} cy The y coordinate of the center of the circle.
 * @param {number} rx The horizontal radius of the circle.
 * @param {number} ry The vertical radius of the circle.
 * @param {string=} id The optional id for the corresponding DOM element.
 * @protected
 */
DvtOval.prototype.Init = function(context, cx, cy, rx, ry, id) {
  DvtOval.superclass.Init.call(this, context, 'ellipse', cx, cy, id);
  this.setRx(rx).setRy(ry);
};


/**
 * Returns the horizontal radius of the ellipse.
 * @return {number}
 */
DvtOval.prototype.getRx = function() {
  return this.GetProperty('rx');
};


/**
 * Specifies the horizontal radius of the ellipse.
 * @param {number} rx
 * @return {DvtOval}
 */
DvtOval.prototype.setRx = function(rx) {
  return this.SetSvgProperty('rx', rx);
};


/**
 * Returns the vertical radius of the ellipse.
 * @return {number}
 */
DvtOval.prototype.getRy = function() {
  return this.GetProperty('ry');
};


/**
 * Specifies the vertical radius of the ellipse.
 * @param {number} ry
 * @return {DvtOval}
 */
DvtOval.prototype.setRy = function(ry) {
  return this.SetSvgProperty('ry', ry);
};


/**
 * @override
 */
DvtOval.prototype.copyShape = function() {
  return new DvtOval(this.getCtx(), this.getCx(), this.getCy(), this.getRx(), this.getRy());
};


/**
 * Returns the bounds of the displayable relative to the target coordinate space.  If the target
 * coordinate space is not specified, returns the bounds relative to this displayable.  This function does not take
 * into account any child displayables.
 * @param {DvtDisplayable} targetCoordinateSpace The displayable defining the target coordinate space.
 * @return {DvtRectangle} The bounds of the displayable relative to the target coordinate space.
 */
DvtOval.prototype.getDimensionsSelf = function(targetCoordinateSpace) {
  // Note: In the near future, we will not support children for shapes, so this routine will be refactored into the
  //       existing getDimensions calls.  For now, components must be aware of the presence of children to use this.
  var bounds = new DvtRectangle(this.getCx() - this.getRx(), this.getCy() - this.getRy(), this.getRx() * 2, this.getRy() * 2);
  return this.ConvertCoordSpaceRect(bounds, targetCoordinateSpace);
};
// Copyright (c) 2008, 2015, Oracle and/or its affiliates. All rights reserved.
/**
 * Path displayable.
 * @param {DvtContext} context
 * @param {object} cmds The string of SVG path commands or an array of SVG path commands, whose entries contain the
 *                      commands followed by coordinates.
 * @param {string=} id The optional id for the corresponding DOM element.
 * @extends {DvtShape}
 * @class
 * @constructor
 */
var DvtPath = function(context, cmds, id) {
  this.Init(context, cmds, id);
};

DvtObj.createSubclass(DvtPath, DvtShape, 'DvtPath');


/**
 * @param {DvtContext} context
 * @param {object} cmds The string of SVG path commands or an array of SVG path commands, whose entries contain the
 *                      commands followed by coordinates.
 * @param {string=} id The optional id for the corresponding DOM element.
 */
DvtPath.prototype.Init = function(context, cmds, id) {
  DvtPath.superclass.Init.call(this, context, 'path', id);

  if (DvtArrayUtils.isArray(cmds))
    this.setCmds(DvtPathUtils.getPathString(cmds));
  else
    this.setCmds(cmds);
};


/**
 * Returns the string of SVG path commands.
 * @param {string} cmds
 */
DvtPath.prototype.getCmds = function() {
  return this.GetProperty('d');
};


/**
 * Specifies the string of SVG path commands.
 * @param {String} cmds
 * @return {DvtPath}
 */
DvtPath.prototype.setCmds = function(cmds) {
  if (cmds)
    this.SetSvgProperty('d', cmds);

  // Clear the cached array commands, which will be populated when needed.
  this.SetProperty('arCmds', null);

  // Return self for linking setters
  return this;
};


/**
 * Returns the array of SVG path commands, whose entries contain the commands followed by coordinates.
 * @return {array}
 */
DvtPath.prototype.getCommands = function() {
  // TODO  rename to get/setCommandsArray

  // If cached copy exists, use it.
  var arCmds = this.GetProperty('arCmds');
  if (!arCmds) {
    // Otherwise, convert, cache and return.
    arCmds = this.GetProperty('d') ? DvtPathUtils.createPathArray(this.GetProperty('d')) : null;
    this.SetProperty('arCmds', arCmds);
  }
  return arCmds;
};


/**
 * Specifies the array of SVG path commands, whose entries contain the commands followed by coordinates.
 * @param {array} arCmds
 * @return {DvtPath}
 */
DvtPath.prototype.setCommands = function(arCmds) {
  // Convert to string and set
  var cmds = arCmds ? DvtPathUtils.getPathString(arCmds) : null;
  this.setCmds(cmds);

  // Cache the array
  this.SetProperty('arCmds', arCmds);

  // Return self for linking setters
  return this;
};


/**
 * @override
 */
DvtPath.prototype.copyShape = function() {
  return new DvtPath(this.getCtx(), this.getCmds());
};

/**
 * @override
 */
DvtPath.prototype.GetAriaElem = function() {
  if (DvtAgent.isTouchDevice())
    this.CreateChildGroupElem(false, true);
  return DvtPath.superclass.GetAriaElem.call(this);
};

// Copyright (c) 2008, 2015, Oracle and/or its affiliates. All rights reserved.
/**
 * Polygon displayable.
 * @param {DvtContext} context
 * @param {array} arPoints The array of coordinates for this polygon, in the form [x1,y1,x2,y2...].
 * @param {string=} id The optional id for the corresponding DOM element.
 * @extends {DvtPolygonalShape}
 * @class
 * @constructor
 */
var DvtPolygon = function(context, arPoints, id) {
  this.Init(context, arPoints, id);
};

DvtObj.createSubclass(DvtPolygon, DvtPolygonalShape, 'DvtPolygon');


/**
 * @param {DvtContext} context
 * @param {array} arPoints The array of coordinates for this polygon, in the form [x1,y1,x2,y2...].
 * @param {string=} id The optional id for the corresponding DOM element.
 * @protected
 */
DvtPolygon.prototype.Init = function(context, arPoints, id) {
  DvtPolygon.superclass.Init.call(this, context, 'polygon', arPoints, id);
};


/**
 * @override
 */
DvtPolygon.prototype.copyShape = function()
{
  return new DvtPolygon(this.getCtx(), this.getPoints());
};

/**
 * @override
 */
DvtPolygon.prototype.GetAriaElem = function() {
  if (DvtAgent.isTouchDevice())
    this.CreateChildGroupElem(false, true);
  return DvtPolygon.superclass.GetAriaElem.call(this);
};
// Copyright (c) 2008, 2015, Oracle and/or its affiliates. All rights reserved.
/**
 * Polyline displayable.
 * @param {DvtContext} context
 * @param {array} arPoints The array of coordinates for this polyline, in the form [x1,y1,x2,y2...].
 * @param {string=} id The optional id for the corresponding DOM element.
 * @extends {DvtPolygonalShape}
 * @class
 * @constructor
 */
var DvtPolyline = function(context, arPoints, id) {
  this.Init(context, arPoints, id);
};

DvtObj.createSubclass(DvtPolyline, DvtPolygonalShape, 'DvtPolyline');


/**
 * @param {DvtContext} context
 * @param {array} arPoints The array of coordinates for this polyline, in the form [x1,y1,x2,y2...].
 * @param {string=} id The optional id for the corresponding DOM element.
 * @protected
 */
DvtPolyline.prototype.Init = function(context, arPoints, id) {
  DvtPolyline.superclass.Init.call(this, context, 'polyline', arPoints, id);
  DvtToolkitUtils.setAttrNullNS(this._elem, 'fill', 'none');
};


/**
 * @override
 */
DvtPolyline.prototype.copyShape = function()
{
  return new DvtPolyline(this.getCtx(), this.getPoints());
};
// Copyright (c) 2008, 2015, Oracle and/or its affiliates. All rights reserved.
/**
 * Rectangle displayable.
 * @param {DvtContext} context
 * @param {number} x
 * @param {number} y
 * @param {number} w
 * @param {number} h
 * @param {string=} id The optional id for the corresponding DOM element.
 * @extends {DvtShape}
 * @class
 * @constructor
 */
var DvtRect = function(context, x, y, w, h, id) {
  this.Init(context, x, y, w, h, id);
};

DvtObj.createSubclass(DvtRect, DvtShape, 'DvtRect');

DvtRect._cssAttrs = ['background-color', 'border-color', 'border-width'];


/**
 * @param {DvtContext} context
 * @param {number} x
 * @param {number} Y
 * @param {number} w
 * @param {number} h
 * @param {string=} id The optional id for the corresponding DOM element.
 * @protected
 */
DvtRect.prototype.Init = function(context, x, y, w, h, id) {
  DvtRect.superclass.Init.call(this, context, 'rect', id);
  this.setX(x).setY(y).setWidth(w).setHeight(h);
};


/**
 * Returns the x coordinate of the rectangle.
 * @return {number}
 */
DvtRect.prototype.getX = function() {
  return this.GetProperty('x');
};


/**
 * Specifies the x coordinate of the rectangle.
 * @param {number} x
 * @return {DvtRect}
 */
DvtRect.prototype.setX = function(x) {
  return this.SetSvgProperty('x', x, 0);
};


/**
 * Returns the y coordinate of the rectangle.
 * @return {number}
 */
DvtRect.prototype.getY = function() {
  return this.GetProperty('y');
};


/**
 * Specifies the y coordinate of the rectangle.
 * @param {number} y
 * @return {DvtRect}
 */
DvtRect.prototype.setY = function(y) {
  return this.SetSvgProperty('y', y, 0);
};


/**
 * Returns the width of the rectangle.
 * @return {number}
 */
DvtRect.prototype.getWidth = function() {
  return this.GetProperty('width');
};


/**
 * Specifies the width of the rectangle.
 * @param {number} w
 * @return {DvtRect}
 */
DvtRect.prototype.setWidth = function(w) {
  // : Ensure property is defined in the DOM so that Batik doesn't crash.
  return this.SetSvgProperty('width', w != null ? w : 0);
};


/**
 * Returns the height of the rectangle.
 * @return {number}
 */
DvtRect.prototype.getHeight = function() {
  return this.GetProperty('height');
};


/**
 * Specifies the height of the rectangle.
 * @param {number} h
 * @return {DvtRect}
 */
DvtRect.prototype.setHeight = function(h) {
  // : Ensure property is defined in the DOM so that Batik doesn't crash.
  return this.SetSvgProperty('height', h != null ? h : 0);
};


/**
 * Returns the horizontal radius of the rounded corners, if any.
 * @return {number}
 */
DvtRect.prototype.getRx = function() {
  return this.GetProperty('rx');
};


/**
 * Specifies the horizontal radius of the rounded corners, if any.
 * @param {number} rx
 * @return {DvtRect}
 */
DvtRect.prototype.setRx = function(rx) {
  return this.SetSvgProperty('rx', rx);
};


/**
 * Returns the vertical radius of the rounded corners, if any.
 * @return {number}
 */
DvtRect.prototype.getRy = function() {
  return this.GetProperty('ry');
};


/**
 * Specifies the vertical radius of the rounded corners, if any.
 * @param {number} ry
 * @return {DvtRect}
 */
DvtRect.prototype.setRy = function(ry) {
  return this.SetSvgProperty('ry', ry);
};


/**
 * Sets the DvtCSSStyle of this object.
 * @param {DvtCSSStyle} style The DvtCSSStyle of this object.
 */
DvtRect.prototype.setCSSStyle = function(style) {
  DvtRect.superclass.setCSSStyle.call(this, style);

  // TODO  CLEANUP: This code seems to apply to all shapes.  It's unclear why we only support it here.
  var elem = this._elem;
  if (style) {
    var val = style.getStyle('background-color');
    if (val) {
      DvtToolkitUtils.setAttrNullNS(elem, 'fill', val);
    }
    val = style.getStyle('border-color');
    if (val) {
      DvtToolkitUtils.setAttrNullNS(elem, 'stroke', val);
    }
    val = style.getStyle('border-width');
    if (val) {
      DvtToolkitUtils.setAttrNullNS(elem, 'stroke-width', val);
    }

    // - border-radius css property not supported when used inside <dvt:node>
    val = style.getStyle('border-radius');
    if (val) {
      var radArr = DvtStringUtils.trim(val).split(' ');
      if (radArr.length > 0 && radArr[0]) {
        this.setRx(radArr[0]);
      }
      if (radArr.length > 1 && radArr[1]) {
        this.setRy(radArr[1]);
      }
    }
  }
  else {
    DvtToolkitUtils.removeAttrNullNS(this._elem, 'style');
  }
};


/**
  *  Sets the top left position of the rectangle.
  *  @param {number} x  The <code>x</code> coordinate of the top left coordinate of the rectangle.
  *  @param {number} y  The <code>y</code> coordinate of the top left coordinate of the rectangle.
  */
DvtRect.prototype.setPos = function(x,y)
{
  this.setX(x).setY(y); // TODO  CLEANUP/NECESSARY?
};


/**
  *  Sets the corner radius value(s) to create rounded corners.
  *  @param {number} rx  The horizontal (x) radius.
  *  @param {number} ry  Optional: The vertical (y) radius. if omitted the rx
  *                      value is used.
  */
DvtRect.prototype.setCornerRadius = function(rx, ry)
{
  this.setRx(rx).setRy(ry); // TODO  CLEANUP/NECESSARY?
};


/**
  *  Sets the position and size of the rectangle.
  *  May be specified as individual values or using a DvtRectangle object.
  *  <p>
  *  Example<br><br><code>
  *  rect.setRect(10, 10, 50, 100) ; &nbsp;  or<br>
  *  <br>
  *  rect.setRect(myRect) ; &nbsp; &nbsp;  where myRect = new DvtRectangle(10, 10, 50, 100);<br>
  *
  *  @param {number} x  The x position of the top left corner of the rectangle.
  *  @param {number} y  The y position of the top left corner of the rectangle.
  *  @param {number} w  The width of the rectangle.
  *  @param {number} h  The height of the rectangle.
  */
DvtRect.prototype.setRect = function(x,y,w,h)
{
  // TODO  CLEANUP/NECESSARY?
  if (x instanceof DvtRectangle) {
    this.setX(x.x).setY(x.y).setWidth(x.w).setHeight(x.h);
  }
  else {
    this.setX(x).setY(y).setWidth(w).setHeight(h);
  }
};


/**
 * @override
 */
DvtRect.prototype.copyShape = function()
{
  var copy = new DvtRect(this.getCtx(), this.getX(), this.getY(), this.getWidth(), this.getHeight());
  copy.setRx(this.getRx()).setRy(this.getRy());
  return copy;
};


/**
 * Returns the bounds of the displayable relative to the target coordinate space.  If the target
 * coordinate space is not specified, returns the bounds relative to this displayable.  This function does not take
 * into account any child displayables.
 * @param {DvtDisplayable} targetCoordinateSpace The displayable defining the target coordinate space.
 * @return {DvtRectangle} The bounds of the displayable relative to the target coordinate space.
 */
DvtRect.prototype.getDimensionsSelf = function(targetCoordinateSpace) {
  // Note: In the near future, we will not support children for shapes, so this routine will be refactored into the
  //       existing getDimensions calls.  For now, components must be aware of the presence of children to use this.
  var bounds = new DvtRectangle(this.getX(), this.getY(), this.getWidth(), this.getHeight());
  return this.ConvertCoordSpaceRect(bounds, targetCoordinateSpace);
};
// Copyright (c) 2008, 2016, Oracle and/or its affiliates. All rights reserved.
/**
 * Creates an instance of DvtOutputText.
 * @extends {DvtShape}
 * @class DvtOutputText
 * @constructor
 * @param {DvtContext} context
 * @param {string} textStr
 * @param {number} x
 * @param {number} y
 * @param {string} id
 */
var DvtOutputText = function(context, textStr, x, y, id) {
  this.Init(context, textStr, x, y, id);
};

DvtObj.createSubclass(DvtOutputText, DvtShape, 'DvtOutputText');

/** @const */
DvtOutputText.ELLIPSIS = '\u2026';
/** @const */
DvtOutputText.REPRESENTATIVE_TEXT = 'MW';
/** @const */
DvtOutputText.BIDI_ZERO_WIDTH = '\u200B';

// Horizontal Alignments
/** @const */
DvtOutputText.H_ALIGN_LEFT = 'left';
/** @const */
DvtOutputText.H_ALIGN_CENTER = 'center';
/** @const */
DvtOutputText.H_ALIGN_RIGHT = 'right';

// Vertical Alignments
/** @const */
DvtOutputText.V_ALIGN_TOP = 'top';
/** @const */
DvtOutputText.V_ALIGN_MIDDLE = 'middle';
/** @const */
DvtOutputText.V_ALIGN_BOTTOM = 'bottom';
/** @const */
DvtOutputText.V_ALIGN_AUTO = 'auto';


/**
 * @param {DvtContext} context
 * @param {string} textStr the text string
 * @param {number} x
 * @param {number} y
 * @param {string=} id The optional id for the corresponding DOM element.
 * @protected
 */
DvtOutputText.prototype.Init = function(context, textStr, x, y, id) {
  DvtOutputText.superclass.Init.call(this, context, 'text', id);

  // Attribute for IE alignment. This stores the component x position of the text.
  // In IE, only align start works properly for mixed LTR and RTL text, so we have to use align start and adjust
  // the x position in the DOM according to the alignment.
  this._x = (x != null) ? x : 0;

  // - NODE RENDERED INCORRECTLY IN IE9+
  this._baseline = null;

  // Initialize the alignment attrs.  Our impl defaults to start and baseline, so set the alignment if the defaults
  // don't match the impl defaults.
  this.alignLeft();
  this.alignTop();

  this.setTextString(textStr);
  this.setX(x);
  this.setY(y);

  // TODO : Remove this workaround and the incorrect none default in DvtSvgShape.
  // Workaround to remove some strange defaulting for the fill, which is set to none in DvtSvgShape.Init.
  DvtToolkitUtils.removeAttrNullNS(this.getElem(), 'fill');

  // Fix for 14297988: BIDI and mixed text in IE
  if (DvtAgent.isRightToLeft(context) && DvtAgent.isPlatformIE()) {
    DvtToolkitUtils.setAttrNullNS(this.getElem(), 'unicode-bidi', 'embed');
  }

  // By default, hide text from VoiceOver
  this.setAriaProperty('hidden', 'true');
};


/**
 * Returns the text string for this text object.
 * @return {string} the text string
 */
DvtOutputText.prototype.getTextString = function() {
  return this._textString;
};


/**
 * Specifies the text string for this text object.
 * @param {string} textString the text string
 * @return {DvtOutputText}
 */
DvtOutputText.prototype.setTextString = function(textString) {
  // Trim because leading/trailing spaces are ignored by the browser, but they complicate text measurement.
  textString = (textString != null) ? DvtStringUtils.trim(String(textString)) : '';

  // Add zero-width char to force correct alignment in RTL for IE.
  if (DvtOutputText.needsTextAnchorAdjustment() && DvtAgent.isPlatformIE() && textString.charAt(0) != DvtOutputText.BIDI_ZERO_WIDTH)
    textString = DvtOutputText.BIDI_ZERO_WIDTH + textString;

  this._textString = textString;

  // Update the text node if it is already created
  var textNode = this.getElem().firstChild;
  if (textNode !== null) {
    textNode.nodeValue = textString;//@HtmlUpdateOK
  }
  else {
    // Otherwise create it
    textNode = document.createTextNode(textString);
    DvtToolkitUtils.appendChildElem(this.getElem(), textNode);
  }

  if (DvtAgent.isPlatformIE())
    this.setX(this._x); // readjust x position. IE text-anchor attribute is buggy.

  return this;
};


/**
 * Returns true if this text instance has been truncated.  When truncated, the getUntruncatedTextString function can be
 * used to find the full text String.
 * @return {boolean}
 */
DvtOutputText.prototype.isTruncated = function() {
  return this.getUntruncatedTextString() != null;
};


/**
 * Returns the untruncated text string for this text object.  Returns null if the text string has not been truncated.
 * @return {string} the untruncated text string
 */
DvtOutputText.prototype.getUntruncatedTextString = function() {
  return this._untruncatedTextString;
};


/**
 * Specifies the untruncated text string for this text object. This should only be set if the DvtOutputText was
 * truncated by DvtTextUtils.
 * @param {string} textString the untruncated text string
 */
DvtOutputText.prototype.setUntruncatedTextString = function(textString) {
  if (textString != this.getTextString())
    this._untruncatedTextString = textString;
};


/**
 * Returns the x position for this text object.
 * @return {number} The x position.
 */
DvtOutputText.prototype.getX = function() {
  var x;
  if (DvtAgent.isPlatformIE())
    x = this._x; // return the component x
  else
    x = this.GetProperty('x');
  return x ? x : 0;
};


/**
 * Specifies the x position for this text object.
 * @param {number} x The x position
 * @return {DvtOutputText}
 */
DvtOutputText.prototype.setX = function(x) {
  this._x = (x != null) ? x : 0;
  if (DvtAgent.isPlatformIE())
    return this.SetSvgProperty('x', this._x + this._getIEAlignmentOffset(), 0);
  else
    return this.SetSvgProperty('x', x, 0);
};


/**
 * Computes the x alignment offset for IE. The text-anchor attribute is buggy in IE, and only works correctly
 * if set to "start". Thus, for all other horizontal alignments, we use the "start" text-anchor and shift the
 * x position of the text in the DOM.
 * @return {number}
 * @private
 */
DvtOutputText.prototype._getIEAlignmentOffset = function() {
  var align = this.getHorizAlignment();
  var isRTL = DvtAgent.isRightToLeft();

  // Note that this.measureDimensions().w gets called at most once in the statement below.
  // Not assigning it to a var up front to avoid the perf hit in the two cases that just return zero.
  if (align == DvtOutputText.H_ALIGN_LEFT)
    return isRTL ? this.measureDimensions().w : 0;
  else if (align == DvtOutputText.H_ALIGN_CENTER)
    return isRTL ? this.measureDimensions().w / 2 : -this.measureDimensions().w / 2;
  else if (align == DvtOutputText.H_ALIGN_RIGHT)
    return isRTL ? 0 : -this.measureDimensions().w;
};


/**
 * Returns the y position for this text object.
 * @return {number} The y position.
 */
DvtOutputText.prototype.getY = function() {
  var y = this.GetProperty('y');
  return y ? y : 0;
};


/**
 * Specifies the y position for this text object.
 * @param {number} y The y position
 * @return {DvtOutputText}
 */
DvtOutputText.prototype.setY = function(y) {
  return this.SetSvgProperty('y', y, 0);
};


/**
 * Convenience function for specifying the font size. This function will clone the CSSStyle and apply it to the component.
 * @param {string} size The font-size which can be in the format '9', '9px', or 'xx-small'
 */
DvtOutputText.prototype.setFontSize = function(size) {
  var style = this.getCSSStyle();
  style = style ? style.clone() : new DvtCSSStyle();
  style.setFontSize(DvtCSSStyle.FONT_SIZE, String(size));
  this.setCSSStyle(style);
};


/**
 * Returns the horizontal alignment for this text object.  Valid constants begin with DvtOutputText.H_ALIGN_.
 * @return {string}
 */
DvtOutputText.prototype.getHorizAlignment = function() {
  return this._horizAlign;
};


/**
 * Specifies the horizontal alignment for this text object.  Valid constants begin with DvtOutputText.H_ALIGN_.
 * @param {string} align
 */
DvtOutputText.prototype.setHorizAlignment = function(align) {
  if (align == DvtOutputText.H_ALIGN_LEFT)
    this.alignLeft();
  else if (align == DvtOutputText.H_ALIGN_CENTER)
    this.alignCenter();
  else if (align == DvtOutputText.H_ALIGN_RIGHT)
    this.alignRight();
};


/**
 * Returns the vertical alignment for this text object.  Valid constants begin with DvtOutputText.V_ALIGN_.
 * @return {string} The horizontal alignment
 */
DvtOutputText.prototype.getVertAlignment = function() {
  return this._vertAlign;
};


/**
 * Specifies the vertical alignment for this text object.  Valid constants begin with DvtOutputText.V_ALIGN_.
 * @param {string} align
 */
DvtOutputText.prototype.setVertAlignment = function(align) {
  if (align == DvtOutputText.V_ALIGN_TOP)
    this.alignTop();
  else if (align == DvtOutputText.V_ALIGN_MIDDLE)
    this.alignMiddle();
  else if (align == DvtOutputText.V_ALIGN_BOTTOM)
    this.alignBottom();
  else if (align == DvtOutputText.V_ALIGN_AUTO)
    this.alignAuto();
};


/**
 * Aligns the left side of the text to the x coordinate. Note: This does not always correspond to what the browser
 * considers a "start" alignment, as we work around issues in rtl locales to provide a consistent API.
 */
DvtOutputText.prototype.alignLeft = function() {
  // No change in value, return
  if (this._horizAlign == DvtOutputText.H_ALIGN_LEFT)
    return;

  this._horizAlign = DvtOutputText.H_ALIGN_LEFT;

  if (DvtAgent.isPlatformIE()) {
    this.setX(this._x); // readjust x position. IE text-anchor attribute is buggy.
  }
  else {
    // : When html dir="rtl", Webkit and FF25+ treat the right side of the text as the start, and the left
    // side of the text as end.  Our API always treats the left side as start, so we need to adjust based on agent.
    var bAdjust = DvtOutputText.needsTextAnchorAdjustment();
    DvtToolkitUtils.setAttrNullNS(this.getElem(), 'text-anchor', bAdjust ? 'end' : 'start', 'start');
  }
};


/**
 * Aligns the center of the text to the x coordinate.
 */
DvtOutputText.prototype.alignCenter = function() {
  // No change in value, return
  if (this._horizAlign == DvtOutputText.H_ALIGN_CENTER)
    return;

  this._horizAlign = DvtOutputText.H_ALIGN_CENTER;

  if (DvtAgent.isPlatformIE())
    this.setX(this._x); // readjust x position. IE text-anchor attribute is buggy.
  else
    DvtToolkitUtils.setAttrNullNS(this.getElem(), 'text-anchor', 'middle', 'start');
};


/**
 * Aligns the right side of the text to the x coordinate. Note: This does not always correspond to what the browser
 * considers an "end" alignment, as we work around issues in rtl locales to provide a consistent API.
 */
DvtOutputText.prototype.alignRight = function() {
  // No change in value, return
  if (this._horizAlign == DvtOutputText.H_ALIGN_RIGHT)
    return;

  this._horizAlign = DvtOutputText.H_ALIGN_RIGHT;

  if (DvtAgent.isPlatformIE()) {
    this.setX(this._x); // readjust x position. IE text-anchor attribute is buggy.
  }
  else {
    // : When html dir="rtl", Webkit and FF25+ treat the right side of the text as the start, and the left
    // side of the text as end.  Our API always treats the left side as start, so we need to adjust based on agent.
    var bAdjust = DvtOutputText.needsTextAnchorAdjustment();
    DvtToolkitUtils.setAttrNullNS(this.getElem(), 'text-anchor', bAdjust ? 'start' : 'end', 'start');
  }
};


/**
 * Aligns the top of the text to the y coordinate.
 */
DvtOutputText.prototype.alignTop = function() {
  // No change in value, return
  if (this._vertAlign == DvtOutputText.V_ALIGN_TOP)
    return;
  else if (this._vertAlign == DvtOutputText.V_ALIGN_BOTTOM && DvtAgent.isBrowserSafari())
    this.SetBaseline(0);

  this._vertAlign = DvtOutputText.V_ALIGN_TOP;

  // - NODE RENDERED INCORRECTLY IN IE9+
  if (DvtAgent.isPlatformIE()) {
    //+ font-size
    this.SetBaseline(1);
  }
  else
    this.SetDominantBaselineAttr('text-before-edge');
};


/**
 * Aligns the middle of the text to the y coordinate.
 */
DvtOutputText.prototype.alignMiddle = function() {
  // No change in value, return
  if (this._vertAlign == DvtOutputText.V_ALIGN_MIDDLE)
    return;
  else if (this._vertAlign == DvtOutputText.V_ALIGN_BOTTOM && DvtAgent.isBrowserSafari())
    this.SetBaseline(0);

  this._vertAlign = DvtOutputText.V_ALIGN_MIDDLE;

  // - NODE RENDERED INCORRECTLY IN IE9+
  if (DvtAgent.isPlatformIE()) {
    //+ 2/5 font-size
    this.SetBaseline(.4);
  }
  else
    this.SetDominantBaselineAttr('middle');
};


/**
 * Aligns the bottom of the text to the y coordinate.
 */
DvtOutputText.prototype.alignBottom = function() {
  // No change in value, return
  if (this._vertAlign == DvtOutputText.V_ALIGN_BOTTOM)
    return;

  this._vertAlign = DvtOutputText.V_ALIGN_BOTTOM;

  // - NODE RENDERED INCORRECTLY IN IE9+
  if (DvtAgent.isPlatformIE()) {
    //- 1/5 font-size
    this.SetBaseline(-0.2);
  }
  else if (DvtAgent.isBrowserSafari()) {
    // : Safari bottom text alignment is broken and produces middle alignment instead.
    this.SetBaseline(-0.2);
    this.SetDominantBaselineAttr(null);
  }
  else
    this.SetDominantBaselineAttr('text-after-edge');
};

/**
 * Aligns the bottom of the text based on default browser settings
 */
DvtOutputText.prototype.alignAuto = function() {
  // No change in value, return
  if (this._vertAlign == DvtOutputText.V_ALIGN_AUTO)
    return;
  else if (this._vertAlign == DvtOutputText.V_ALIGN_BOTTOM && DvtAgent.isBrowserSafari())
    this.SetBaseline(0);

  this._vertAlign = DvtOutputText.V_ALIGN_AUTO;

  if (DvtAgent.isPlatformIE())
    this.SetBaseline(0);
  else
    this.SetDominantBaselineAttr(null);
};

/**
 * Save the baseline and adjust the matrix for vertical alignment in IE.
 * @param {string} baseline
 * @protected
 */
DvtOutputText.prototype.SetBaseline = function(baseline) {
  this._baseline = baseline;
  this.setMatrix(this.getMatrix());
};


/**
 * Set the dominant baseline for vertical alignment.
 * @param {string} baseline The value of the dominant-baseline attribute
 * @protected
 */
DvtOutputText.prototype.SetDominantBaselineAttr = function(baseline) {
  if (baseline)
    DvtToolkitUtils.setAttrNullNS(this.getElem(), 'dominant-baseline', baseline);
  else
    DvtToolkitUtils.removeAttrNullNS(this.getElem(), 'dominant-baseline');
};


/**
 * Sets the DvtCSSStyle of this object.
 * @param {DvtCSSStyle} style The DvtCSSStyle of this object.
 */
DvtOutputText.prototype.setCSSStyle = function(style) {
  DvtOutputText.superclass.setCSSStyle.call(this, style);
  var elem = this.getOuterElem();

  if (style) {
    //NOTE: svg does not recognize css "color" attribute, use "fill" instead
    var val = style.getStyle('color');
    var fillObj = DvtColorUtils.fixColorForPlatform(val);
    if (fillObj && fillObj['color']) {
      DvtToolkitUtils.setAttrNullNS(elem, 'fill', fillObj['color']);
      if (fillObj['alpha'] != null)
        DvtToolkitUtils.setAttrNullNS(elem, 'fill-opacity', fillObj['alpha'], 1);
    }

    val = style.getStyle('font-family');
    if (val && !this.getCtx().isDefaultFontFamily(val))
      DvtToolkitUtils.setAttrNullNS(elem, 'font-family', val);
    else
      DvtToolkitUtils.removeAttrNullNS(elem, 'font-family');

    val = style.getStyle('font-size');
    if (val && val != this.getCtx().getDefaultFontSize()) {
      DvtToolkitUtils.setAttrNullNS(elem, 'font-size', val);

      // - NODE RENDERED INCORRECTLY IN IE9+
      if (DvtAgent.isPlatformIE() || DvtAgent.isBrowserSafari()) {
        this.setMatrix(this.getMatrix());
      }
    }
    else
      DvtToolkitUtils.removeAttrNullNS(elem, 'font-size');

    val = style.getStyle('font-style');
    if (val) {
      DvtToolkitUtils.setAttrNullNS(elem, 'font-style', val);
    }

    val = style.getStyle('font-weight');
    if (val) {
      DvtToolkitUtils.setAttrNullNS(elem, 'font-weight', val);
    }

    //NOTE: svg does not recognize css "text-align" attribute,
    //call alignCenter, alignLeft, alignRight... if needed.
    //For multi line text, text-align is handled in DvtOutputTextArea
    val = style.getStyle('text-decoration');
    if (val) {
      DvtToolkitUtils.setAttrNullNS(elem, 'text-decoration', val);
    }

    val = style.getStyle('cursor');
    if (val) {
      DvtToolkitUtils.setAttrNullNS(elem, 'cursor', val);
    }

    if (DvtAgent.isPlatformIE())
      this.setX(this._x); // readjust x position. IE text-anchor attribute is buggy.
  }
};


// - NODE RENDERED INCORRECTLY IN IE9+
/**
 * Returns the y translation used to compensate for IE's lack of dominant-baseline support
 * @return {number} the y translation
 * @private
 */
DvtOutputText.prototype._getBaselineTranslation = function() {
  //if not in IE, no adjustment required
  var dy = 0;
  if (this._baseline != null) {
    var size;

    // Use text height for baseline translation if not representative text, else use font-size
    if (this._textString && !this._isRepresentativeText())
      size = DvtTextUtils.getTextStringHeight(this.getCtx(), this.getCSSStyle());
    else {
      size = DvtToolkitUtils.getAttrNullNS(this.getElem(), 'font-size');

      if (!size)
        size = DvtToolkitUtils.getAttrNullNS(this.getOuterElem(), 'font-size');

      if (!size || (isNaN(size) && size.indexOf('px') == -1))
        size = DvtStyleUtils.DEFAULT_FONT_SIZE;
    }

    dy = this._baseline * parseFloat(size);
  }
  return dy;
};


/**
 * Returns the specified matrix adjusted by the baseline (if any)
 * @param {DvtMatrix} mat the matrix to adjust
 * @return {DvtMatrix} the adjusted matrix
 * @private
 */
DvtOutputText.prototype._getBaselineAdjustedMatrix = function(mat) {
  if (this._baseline != null) {
    // this._baseline is only set for IE
    if (!mat) {
      mat = new DvtMatrix();
    }
    var nmat = new DvtMatrix(null, null, null, null, null, this._getBaselineTranslation());
    nmat.concat(mat);
    mat = nmat;
  }
  return mat;
};


/**
 *  @override
 */
DvtOutputText.prototype.setMatrix = function(mat) {
  if (DvtAgent.isPlatformIE() || DvtAgent.isBrowserSafari()) {
    this._matrixForIE = mat;
    mat = this._getBaselineAdjustedMatrix(mat);
  }
  DvtOutputText.superclass.setMatrix.call(this, mat);
};


/**
 *  @override
 */
DvtOutputText.prototype.getMatrix = function() {
  var matrix = null;
  if (DvtAgent.isPlatformIE() || DvtAgent.isBrowserSafari()) {
    matrix = this._matrixForIE;
  }
  if (!matrix) {
    matrix = DvtOutputText.superclass.getMatrix.call(this);
  }
  return matrix;
};

/**
 * Checks if this textString is the representative text or the BIDI zero width character so that we only cache the size the first time.
 * @private
 * @return {boolean} is this a representative text
 */
DvtOutputText.prototype._isRepresentativeText = function() {
  return (this._textString == DvtOutputText.REPRESENTATIVE_TEXT) || (this._textString == DvtOutputText.BIDI_ZERO_WIDTH) ||
         (this._textString == DvtOutputText.BIDI_ZERO_WIDTH + DvtOutputText.REPRESENTATIVE_TEXT);
};

/**
 * @override
 */
DvtOutputText.prototype.GetSvgDimensions = function() { // TODO  target coord space would be broken here
  var bbox = DvtOutputText.superclass.GetSvgDimensions.call(this);

  //  - NODE RENDERED INCORRECTLY IN IE9+
  if (bbox)
    bbox.y += this._getBaselineTranslation();

  //  - Japanese group label doesn't display in IE11
  if (!this._isRepresentativeText())
    bbox.h = DvtTextUtils.getTextStringHeight(this.getCtx(), this.getCSSStyle());

  return bbox;
};


/**
 * @override
 */
DvtOutputText.prototype.UpdateSelectionEffect = function() {
  // noop: Does not participate in selection effects
};


/**
 * Calculate the optimal text size based on the bounds provided.
 * @param {DvtRectangle} bounds The bounds to fit the label
 * @return {number}
 */
DvtOutputText.prototype.getOptimalFontSize = function(bounds) {
  for (var i = Math.max(Math.min(bounds.w / this.getTextString().length, bounds.h / 2), 9); i < 51; i += 1) {
    this.setFontSize(i);
    var textDim = this.measureDimensions();
    if (textDim.w > bounds.w || textDim.h > bounds.h)
      return Math.min(i - 1, 50);
  }
  return 50;
};


/**
 * Optimized version of getDimensions.  Unlike getDimensions, this function will always returns useful dimensions,
 * adding the object to the DOM as needed.  The current implementation achieves improvements in performance by
 * storing the text calculations in a LRU cache, taking advantage of the fact that dimensions calculations do
 * not depend on container information.
 * @param {DvtDisplayable=} targetCoordinateSpace The displayable defining the target coordinate space.
 * @return {DvtRectangle} The bounds of the text
 */
DvtOutputText.prototype.measureDimensions = function(targetCoordinateSpace) {
  // TODO : measureDimensions is now hooked into getDimensions, so it need not exist.  We can integrate into
  // getDimensions as soon as we have time to rename all usages.  The tricky part is just that DvtText also has a
  // measureDimensions call, so renames will need to be carefully done.
  var textString = this.getTextString() != null ? this.getTextString() : '';
  var hAlign = this.getHorizAlignment();
  var vAlign = this.getVertAlignment();

  // Initialize the cache if not done already.  The cache stores the stage relative dims of text at (0,0).
  if (!DvtOutputText._cache)
    DvtOutputText._cache = new DvtCache();

  // Create the key for cache, which is a combination of all attrs that affect dimensions calculations.
  var cssStyle = this.getCSSStyle();
  var cssStyleKey = (cssStyle != null) ? cssStyle.hashCodeForTextMeasurement() : '';
  var cacheKey = (textString.length > 0) ? textString + cssStyleKey : '';
  // cache dominant-baseline='auto' dimensions seperately
  if (vAlign === DvtOutputText.V_ALIGN_AUTO)
    cacheKey += DvtOutputText.V_ALIGN_AUTO;

  // Look for the value in the cache and add it if not found. Calculate the localDims.
  var localDims;
  var stageDims = DvtOutputText._cache.get(cacheKey);
  if (stageDims != null) // Cache hit found, convert from stage coords to local and return.
    localDims = new DvtRectangle(stageDims.x + this.getX(), stageDims.y + this.getY(), stageDims.w, stageDims.h);
  else {
    var bRTL = DvtAgent.isRightToLeft(this.getCtx());
    // No cache hit.  Find the stage coords and add to cache.
    // Adjust the alignment to top-left for text caching
    if (!DvtAgent.isPlatformIE()) { // avoid infinite recursion in IE
      this.alignLeft();
    }
    else {
      if (bRTL) {
        // Force true left alignment to avoid storing incorrect values in the cache
        DvtToolkitUtils.setAttrNullNS(this.getElem(), 'unicode-bidi', null);
      }
    }
    if (vAlign !== DvtOutputText.V_ALIGN_AUTO)
      this.alignTop();

    var attached = false;
    var stage = this.getCtx().getStage();
    var disp = this.getParent();
    while (disp) {
      if (disp == stage) {
        attached = true;
        break;
      }
      disp = disp.getParent();
    }

    if (attached) {
      // If we're already attached to the DOM, get the real local dimensions and cache the stage dimensions by removing
      // x and y offsets.
      localDims = this.GetSvgDimensions();
    }

    // For Firefox, localDims is null for disconnected elements
    if (!localDims)
      localDims = new DvtRectangle(0, 0, 0, 0);

    // If the object is not connected to the DOM, it will return incorrect size of 0.
    if (localDims.w <= 0 && localDims.h <= 0 && textString.length > 0) {
      // Saves the parent and the index
      var parent = this.getParent();
      var index;
      if (parent) {
        index = parent.getChildIndex(this);
      }
      // Add to the stage to obtain correct measurements
      stage.addChild(this);
      localDims = this.GetSvgDimensions();
      stage.removeChild(this);
      // Restore the parent
      if (parent) {
        parent.addChildAt(this, index);
      }
    }

    // Restore the alignment
    if (DvtAgent.isPlatformIE()) { // avoid infinite recursion in IE
      if (bRTL) {
        DvtToolkitUtils.setAttrNullNS(this.getElem(), 'unicode-bidi', 'embed');
      }

      // Adjust the dimensions that's stored in the cache so that it's the alignLeft value
      if (hAlign === DvtOutputText.H_ALIGN_RIGHT) {
        localDims.x += localDims.w;
      }
      else if (hAlign === DvtOutputText.H_ALIGN_CENTER) {
        localDims.x += localDims.w / 2;
      }
    }
    else {
      this.setHorizAlignment(hAlign);
    }
    this.setVertAlignment(vAlign);

    // Convert to stage dims by removing own x and y.
    stageDims = new DvtRectangle(localDims.x - this.getX(), localDims.y - this.getY(), localDims.w, localDims.h);
    DvtOutputText._cache.put(cacheKey, stageDims);
  }

  // Adjust dimensions for text alignment.  We do this because we don't take alignment into account in the cache, and
  // also because browsers return inconsistently calculated dimensions based on alignment.
  if (hAlign === DvtOutputText.H_ALIGN_RIGHT)
    localDims.x -= localDims.w;
  else if (hAlign === DvtOutputText.H_ALIGN_CENTER)
    localDims.x -= localDims.w / 2;

  if (vAlign === DvtOutputText.V_ALIGN_BOTTOM)
    localDims.y -= localDims.h;
  else if (vAlign === DvtOutputText.V_ALIGN_MIDDLE)
    localDims.y -= localDims.h / 2;

  // Transform to the target coord space and return
  return (!targetCoordinateSpace || targetCoordinateSpace === this) ? localDims : this.ConvertCoordSpaceRect(localDims, targetCoordinateSpace);
};


/**
 * @override
 */
DvtOutputText.prototype.copyShape = function() {
  var ret = new DvtOutputText(this.getCtx(), this.getTextString(), this.getX(), this.getY());
  ret.setCSSStyle(this.getCSSStyle());
  ret.setHorizAlignment(this.getHorizAlignment());
  ret.setVertAlignment(this.getVertAlignment());
  return ret;
};


/**
 * @override
 */
DvtOutputText.prototype.addChild = function(obj) {
  // Prevent this class from being used as a shape container.  It's bad practice and doesn't make sense.  Placeholder
  // until the shape container APIs are removed altogether.
  if (DvtAgent.isEnvironmentTest()) {
    print('DvtOutputText.prototype.addChild: Text should not be used as a shape container.');
    var nullObj = null;
    nullObj.errorShouldOccurDueToInvalidAddChild();
  }
};


/**
 * Returns true if the text anchor needs to be flipped from "start" to "end" and vice versa.
 * @return {boolean}
 */
DvtOutputText.needsTextAnchorAdjustment = function() {
  // : When html dir="rtl", theright side of the text is treated as the start, and the left as the end. Our
  // API always treats the left side as start, so we need to adjust based on agent.
  // Don't adjust anchor in Batik environment.
  return DvtAgent.isRightToLeft() && !DvtAgent.isEnvironmentBatik();
};


/**
 * Returns the bounds of the displayable relative to the target coordinate space.  If the target
 * coordinate space is not specified, returns the bounds relative to this displayable.  This function does not take
 * into account any child displayables.
 * @param {DvtDisplayable} targetCoordinateSpace The displayable defining the target coordinate space.
 * @return {DvtRectangle} The bounds of the displayable relative to the target coordinate space.
 */
DvtOutputText.prototype.getDimensionsSelf = function(targetCoordinateSpace) {
  // Note: In the near future, we will not support children for shapes, so this routine will be refactored into the
  //       existing getDimensions calls.  For now, components must be aware of the presence of children to use this.
  return this.measureDimensions(targetCoordinateSpace);
};

/**
 * Returns the cached text dimensions for a textString and cssStyle, or null if no cached size is available.
 * @param {string} textString
 * @param {DvtCSSStyle} cssStyle
 * @return {DvtRectangle} The text dimensions. Only the w and h should be used. The x and y are meaningless.
 */
DvtOutputText.getCachedDimensions = function(textString, cssStyle) {
  // Create the key for cache, which is a combination of all attrs that affect dimensions calculations.
  var cssStyleKey = (cssStyle != null) ? cssStyle.hashCodeForTextMeasurement() : '';
  var cacheKey = (textString.length > 0) ? textString + cssStyleKey : '';

  // Look for the value in the cache and return it if found or null otherwise.
  return DvtOutputText._cache ? DvtOutputText._cache.get(cacheKey) : null;
};
// Copyright (c) 2008, 2016, Oracle and/or its affiliates. All rights reserved.
/**
 * Creates an instance of DvtBackgroundOutputText.
 * @extends {DvtContainer}
 * @class DvtBackgroundOutputText
 * @constructor
 * @param {DvtContext} context
 * @param {string} textStr
 * @param {number} x
 * @param {number} y
 * @param {DvtCSSStyle} style The CSS style to be applied to the text and background
 * @param {string} id
 */
var DvtBackgroundOutputText = function(context, textStr, x, y, style, id) {
  this.Init(context, textStr, x, y, style, id);
};

DvtObj.createSubclass(DvtBackgroundOutputText, DvtContainer, 'DvtBackgroundOutputText');

/**
 * @const
 * @private
 */
DvtBackgroundOutputText._PADDING = 0.15;
/**
 * @param {DvtContext} context
 * @param {string} textStr the text string
 * @param {number} x
 * @param {number} y
 * @param {DvtCSSStyle} style The CSS style to be applied to the text and background
 * @param {string=} id The optional id for the corresponding DOM element.
 * @protected
 */
DvtBackgroundOutputText.prototype.Init = function(context, textStr, x, y, style, id) {
  DvtBackgroundOutputText.superclass.Init.call(this, context, 'g', id);

  this.TextInstance = this.CreateTextInstance(context, textStr, x, y, id);
  this._backgroundRect = null;
  if (style)
    this.setCSSStyle(style);
  this.addChild(this.TextInstance);
};

/**
 * Returns the text string for this text object.
 * @return {string} the text string
 */
DvtBackgroundOutputText.prototype.getTextString = function() {
  return this.TextInstance.getTextString();
};


/**
 * Specifies the text string for this text object.
 * @param {string} textString the text string
 * @return {DvtBackgroundOutputText}
 */
DvtBackgroundOutputText.prototype.setTextString = function(textString) {
  this.TextInstance.setTextString(textString);
  return this;
};


/**
 * Returns true if this text instance has been truncated.  When truncated, the getUntruncatedTextString function can be
 * used to find the full text String.
 * @return {boolean}
 */
DvtBackgroundOutputText.prototype.isTruncated = function() {
  return this.TextInstance.isTruncated();
};


/**
 * Returns the untruncated text string for this text object.  Returns null if the text string has not been truncated.
 * @return {string} the untruncated text string
 */
DvtBackgroundOutputText.prototype.getUntruncatedTextString = function() {
  return this.TextInstance.getUntruncatedTextString();
};


/**
 * Specifies the untruncated text string for this text object. This should only be set if the DvtOutputText was
 * truncated by DvtTextUtils.
 * @param {string} textString the untruncated text string
 */
DvtBackgroundOutputText.prototype.setUntruncatedTextString = function(textString) {
  this.TextInstance.setUntruncatedTextString(textString);
};


/**
 * Returns the x position for this text object.
 * @return {number} The x position.
 */
DvtBackgroundOutputText.prototype.getX = function() {
  return this.TextInstance.getX();
};


/**
 * Specifies the x position for this text object.
 * @param {number} x The x position
 * @return {DvtBackgroundOutputText}
 */
DvtBackgroundOutputText.prototype.setX = function(x) {
  this.TextInstance = this.TextInstance.setX(x);
  this._realignBackground();
  return this;
};

/**
 * Returns the y position for this text object.
 * @return {number} The y position.
 */
DvtBackgroundOutputText.prototype.getY = function() {
  return this.TextInstance.getY();
};


/**
 * Specifies the y position for this text object.
 * @param {number} y The y position
 * @return {DvtBackgroundOutputText}
 */
DvtBackgroundOutputText.prototype.setY = function(y) {
  this.TextInstance = this.TextInstance.setY(y);
  this._realignBackground();
  return this;
};


/**
 * Convenience function for specifying the font size. This function will clone the CSSStyle and apply it to the component.
 * @param {string} size The font-size which can be in the format '9', '9px', or 'xx-small'
 */
DvtBackgroundOutputText.prototype.setFontSize = function(size) {
  this.TextInstance.setFontSize(size);
  // Also update the local copy of DvtCssStyle
  this._style.setFontSize(DvtCSSStyle.FONT_SIZE, String(size));
  this._realignBackground();
};


/**
 * Returns the horizontal alignment for this text object.  Valid constants begin with DvtOutputText.H_ALIGN_.
 * @return {string}
 */
DvtBackgroundOutputText.prototype.getHorizAlignment = function() {
  return this.TextInstance.getHorizAlignment();
};


/**
 * Specifies the horizontal alignment for this text object.  Valid constants begin with DvtOutputText.H_ALIGN_.
 * @param {string} align
 */
DvtBackgroundOutputText.prototype.setHorizAlignment = function(align) {
  this.TextInstance.setHorizAlignment(align);
  this._realignBackground();
};


/**
 * Returns the vertical alignment for this text object.  Valid constants begin with DvtOutputText.V_ALIGN_.
 * @return {string} The horizontal alignment
 */
DvtBackgroundOutputText.prototype.getVertAlignment = function() {
  return this.TextInstance.getVertAlignment();
};


/**
 * Specifies the vertical alignment for this text object.  Valid constants begin with DvtOutputText.V_ALIGN_.
 * @param {string} align
 */
DvtBackgroundOutputText.prototype.setVertAlignment = function(align) {
  this.TextInstance.setVertAlignment(align);
  this._realignBackground();
};


/**
 * Aligns the left side of the text to the x coordinate. Note: This does not always correspond to what the browser
 * considers a "start" alignment, as we work around issues in rtl locales to provide a consistent API.
 */
DvtBackgroundOutputText.prototype.alignLeft = function() {
  this.TextInstance.alignLeft();
  this._realignBackground();
};


/**
 * Aligns the center of the text to the x coordinate.
 */
DvtBackgroundOutputText.prototype.alignCenter = function() {
  this.TextInstance.alignCenter();
  this._realignBackground();
};


/**
 * Aligns the right side of the text to the x coordinate. Note: This does not always correspond to what the browser
 * considers an "end" alignment, as we work around issues in rtl locales to provide a consistent API.
 */
DvtBackgroundOutputText.prototype.alignRight = function() {
  this.TextInstance.alignRight();
  this._realignBackground();
};


/**
 * Aligns the top of the text to the y coordinate.
 */
DvtBackgroundOutputText.prototype.alignTop = function() {
  this.TextInstance.alignTop();
  this._realignBackground();
};


/**
 * Aligns the middle of the text to the y coordinate.
 */
DvtBackgroundOutputText.prototype.alignMiddle = function() {
  this.TextInstance.alignMiddle();
  this._realignBackground();
};


/**
 * Aligns the bottom of the text to the y coordinate.
 */
DvtBackgroundOutputText.prototype.alignBottom = function() {
  this.TextInstance.alignBottom();
  this._realignBackground();
};

/**
 * Aligns the bottom of the text to the y coordinate.
 */
DvtBackgroundOutputText.prototype.alignAuto = function() {
  this.TextInstance.alignAuto();
  this._realignBackground();
};

/**
 * Sets the DvtCSSStyle of this object.
 * @param {DvtCSSStyle} style The DvtCSSStyle of this object.
 * @override
 */
DvtBackgroundOutputText.prototype.setCSSStyle = function(style) {
  // support automatic text color for text with backgrounds
  if (style.getStyle(DvtCSSStyle.BACKGROUND_COLOR) && !style.getStyle(DvtCSSStyle.COLOR))
    style.setStyle(DvtCSSStyle.COLOR, DvtColorUtils.getContrastingTextColor(style.getStyle(DvtCSSStyle.BACKGROUND_COLOR)));

  if (this.TextInstance)
    this.TextInstance.setCSSStyle(style);

  if (this._backgroundRect || DvtBackgroundOutputText._hasBackgroundStyles(style)) {
    if (!this._backgroundRect) {
      this._backgroundRect = this.CreateBackground(this.getCtx(), this.TextInstance);
      this.addChildAt(this._backgroundRect, 0);
    }
    this._setBackgroundCSSStyle(this._backgroundRect, style);
  }

  this._style = style;
};

/**
 * Returns the DvtCSSStyle of this object.
 * @return {DvtCSSStyle} the DvtCSSStyle of this object.
 * @override
 */
DvtBackgroundOutputText.prototype.getCSSStyle = function() {
  return this._style;
};

/**
 *  @override
 */
DvtBackgroundOutputText.prototype.setMatrix = function(mat) {
  this.TextInstance.setMatrix(mat);
  this._backgroundRect.setMatrix(mat);
};


/**
 *  @override
 */
DvtBackgroundOutputText.prototype.getMatrix = function() {
  return this.TextInstance.getMatrix();
};


/**
 * Calculate the optimal text size based on the bounds provided.
 * @param {DvtRectangle} bounds The bounds to fit the label
 * @return {number}
 */
DvtBackgroundOutputText.prototype.getOptimalFontSize = function(bounds) {
  return this.TextInstance.getOptimalFontSize(bounds);
};


/**
 * Optimized version of getDimensions.  Unlike getDimensions, this function will always returns useful dimensions,
 * adding the object to the DOM as needed.  The current implementation achieves improvements in performance by
 * storing the text calculations in a LRU cache, taking advantage of the fact that dimensions calculations do
 * not depend on container information.
 * @param {DvtDisplayable=} targetCoordinateSpace The displayable defining the target coordinate space.
 * @return {DvtRectangle} The bounds of the text
 */
DvtBackgroundOutputText.prototype.measureDimensions = function(targetCoordinateSpace) {
  return this.getDimensions(targetCoordinateSpace);
};

/**
 * Returns the bounds of the output text relative to the target coordinate space.  If the target
 * coordinate space is not specified, returns the bounds relative to this displayable.
 * @param {DvtDisplayable} targetCoordinateSpace The displayable defining the target coordinate space.
 * @return {DvtRectangle} The bounds of the output text relative to the target coordinate space.
 */
DvtBackgroundOutputText.prototype.getTextDimensions = function(targetCoordinateSpace) {
  return this.TextInstance.getDimensions(targetCoordinateSpace);
};

/**
 * @override
 */
DvtBackgroundOutputText.prototype.getDimensions = function(targetCoordinateSpace) {
  // include the bounds of the rectangle background for the dimensions
  var dims = this.TextInstance.getDimensions(targetCoordinateSpace);
  var padding = dims.h * DvtBackgroundOutputText._PADDING;
  dims.x -= padding;
  dims.w += (2 * padding);
  return dims;
};

/**
 * @override
 */
DvtBackgroundOutputText.prototype.copyShape = function() {
  return this.TextInstance.copyShape();
};


/**
 * @this {DvtBackgroundOutputText}
 * Returns true if the text anchor needs to be flipped from "start" to "end" and vice versa.
 * @param {DvtContext} context
 * @return {boolean}
 */
DvtBackgroundOutputText.needsTextAnchorAdjustment = function(context) {
  return this.TextInstance.needsTextAnchorAdjustment(context);
};

/**
 * @this {DvtBackgroundOutputText}
 * Returns the cached text dimensions for a textString and cssStyle, or null if no cached size is available.
 * @param {string} textString
 * @param {DvtCSSStyle} cssStyle
 * @return {DvtRectangle} The text dimensions. Only the w and h should be used. The x and y are meaningless.
 */
DvtBackgroundOutputText.getCachedDimensions = function(textString, cssStyle) {
  return this.TextInstance.getCachedDimensions(textString, cssStyle);
};

/**
 * Creates and returns the text object for the DvtBackgroundOutputText object
 * @param {DvtContext} context
 * @param {string} textStr the text string
 * @param {number} x
 * @param {number} y
 * @param {string=} id The optional id for the corresponding DOM element.
 * @return {DvtDisplayable}
 * @protected
 */
DvtBackgroundOutputText.prototype.CreateTextInstance = function(context, textStr, x, y, id) {
  return new DvtOutputText(context, textStr, x, y, id);
};


/**
 * Returns an object with the background styles of the output text applied
 * @param {DvtContext} context
 * @param {DvtOutputText} text The output text.
 * @return {DvtRect} The object to be rendered behind the text.
 * @protected
 */
DvtBackgroundOutputText.prototype.CreateBackground = function(context, text) {
  var bboxDims = text.getDimensions();
  var padding = bboxDims.h * DvtBackgroundOutputText._PADDING;
  return new DvtRect(context, bboxDims.x - padding, bboxDims.y, bboxDims.w + (2 * padding), bboxDims.h);
};

/**
 * Realigns the background rect with the text
 * @private
 */
DvtBackgroundOutputText.prototype._realignBackground = function() {
  if (!this._backgroundRect)
    return;

  var bboxDims = this.TextInstance.getDimensions();
  var padding = bboxDims.h * 0.15;

  var hAlign = this.getHorizAlignment();
  var vAlign = this.getVertAlignment();

  // Align x-Coordinate
  if (hAlign == DvtOutputText.H_ALIGN_LEFT)
    this._backgroundRect.setX(this.getX() - padding);
  else if (hAlign == DvtOutputText.H_ALIGN_CENTER)
    this._backgroundRect.setX(this.getX() - bboxDims.w * 0.5 - padding);
  else if (hAlign == DvtOutputText.H_ALIGN_RIGHT)
    this._backgroundRect.setX(this.getX() - bboxDims.w - padding);

  // Align y-Coordinate
  var fontSize = parseFloat(this._style.getFontSize());
  if (isNaN(fontSize))
    fontSize = 0;
  var yAdjustment = 0; // fudge factor for specific alignments in certain browsers

  if ((DvtAgent.isBrowserChrome() || DvtAgent.isEnvironmentTest()) && vAlign == DvtOutputText.V_ALIGN_MIDDLE)
    yAdjustment = fontSize * 0.12; // Chrome, vALign = middle, rect must be shifted up a bit
  else if (DvtAgent.isPlatformIE() && vAlign == DvtOutputText.V_ALIGN_BOTTOM)
    yAdjustment = -fontSize * 0.4; // IE, vAlign = bottom, rect must be shifted down a bit

  var deltaH = this.GetTextDimensionsForRealign(bboxDims);
  if (vAlign == DvtOutputText.V_ALIGN_TOP)
    this._backgroundRect.setY(this.getY());
  else if (vAlign == DvtOutputText.V_ALIGN_MIDDLE)
    this._backgroundRect.setY(this.getY() - deltaH * 0.5 - yAdjustment);
  else if (vAlign == DvtOutputText.V_ALIGN_BOTTOM)
    this._backgroundRect.setY(this.getY() - deltaH - yAdjustment);
  else if (vAlign == DvtOutputText.V_ALIGN_AUTO)
    this._backgroundRect.setY(bboxDims.y);

  // width may need to be reset (rotated labels ended up extra long)
  this._backgroundRect.setWidth(bboxDims.w + 2 * padding);
  this._backgroundRect.setHeight(bboxDims.h);

};

/**
 * Sets the DvtCSSStyle of the given background rect.
 * @param {DvtRect} rect The background DvtRect
 * @param {DvtCSSStyle} style The DvtCSSStyle of this object.
 * @private
 */
DvtBackgroundOutputText.prototype._setBackgroundCSSStyle = function(rect, style) {
  if (style) {
    var bgColor = style.getStyle(DvtCSSStyle.BACKGROUND_COLOR);
    if (bgColor != null)
      rect.setSolidFill(bgColor);
    else
      rect.setInvisibleFill();

    var borderColor = style.getStyle(DvtCSSStyle.BORDER_COLOR);
    var borderWidth = style.getStyle(DvtCSSStyle.BORDER_WIDTH);
    var borderRadius = style.getStyle(DvtCSSStyle.BORDER_RADIUS);
    if (borderColor || borderWidth || borderRadius) {
      var bgStyle = new DvtCSSStyle();
      bgStyle.setStyle(DvtCSSStyle.BORDER_COLOR, borderColor);
      bgStyle.setStyle(DvtCSSStyle.BORDER_WIDTH, borderWidth);
      bgStyle.setStyle(DvtCSSStyle.BORDER_RADIUS, borderRadius);
      rect.setCSSStyle(bgStyle);
    }

  }
  else {
    rect.setInvisibleFill();
  }

  rect.setMouseEnabled(false);
};

/**
 * Returns the change in height needed to realign the background rect after the text instance is realigned
 * @param {Object=} dims
 * @return {number}
 * @protected
 */
DvtBackgroundOutputText.prototype.GetTextDimensionsForRealign = function(dims) {
  return dims.h;
};

/**
 * returns true if style has any of the background styles
 * set by DvtBackgroundOutputText.prototype._setBackgroundCSSStyle
 * @private
 * @param {DvtCSSStyle} style the styles of the background text
 * @return {boolean} true if style has any of the background styles
 */
DvtBackgroundOutputText._hasBackgroundStyles = function(style) {
  if (!style) {
    return false;
  }
  if (style.getStyle(DvtCSSStyle.BORDER_COLOR) || style.getStyle(DvtCSSStyle.BORDER_WIDTH) ||
      style.getStyle(DvtCSSStyle.BORDER_RADIUS) || style.getStyle(DvtCSSStyle.BACKGROUND_COLOR))
    return true;
  return false;
};
// Copyright (c) 2008, 2016, Oracle and/or its affiliates. All rights reserved.
/**
 * Read-only text object that supports wrapping.
 * @extends {DvtContainer}
 * @class DvtMultilineText
 * @constructor
 * @param {DvtContext} context
 * @param {string} textStr
 * @param {number} x
 * @param {number} y
 * @param {string} id
 */
var DvtMultilineText = function(context, textStr, x, y, id) {
  this.Init(context, textStr, x, y, id);
};

DvtObj.createSubclass(DvtMultilineText, DvtContainer, 'DvtMultilineText');


/**
 * The space between lines expressed as a percentage of line height.
 * @private
 */
DvtMultilineText._LINE_SPACE = 0;

// Horizontal Alignments
/** @const */
DvtMultilineText.H_ALIGN_LEFT = 'left';
/** @const */
DvtMultilineText.H_ALIGN_CENTER = 'center';
/** @const */
DvtMultilineText.H_ALIGN_RIGHT = 'right';

// Vertical Alignments
/** @const */
DvtMultilineText.V_ALIGN_TOP = 'top';
/** @const */
DvtMultilineText.V_ALIGN_MIDDLE = 'middle';
/** @const */
DvtMultilineText.V_ALIGN_BOTTOM = 'bottom';


/**
 * @param {DvtContext} context
 * @param {string} textStr the text string
 * @param {number} x
 * @param {number} y
 * @param {string=} id The optional id for the corresponding DOM element.
 * @protected
 */
DvtMultilineText.prototype.Init = function(context, textStr, x, y, id) {
  DvtMultilineText.superclass.Init.call(this, context, null, id);

  /**
   * The primary text instance.  All properties are stored here.  If DvtTextUtils.fitText is not called, the text will
   * appear as a single line using this instance.
   * @private
   */
  this._textInstance = null;

  /**
   * Any additional lines of text resulting from text wrapping.
   * @private
   */
  this._additionalLines = [];

  /** The height of a line of text.
   *  Useful for estimating or reserving vertical space for wrapped text
   *  @private
   */
  this._lineHeight = null;

  /** Store the yCoordinate set on the text.
   * getY() returns ycoordinate of primary text instance.
   * getYAlignCoord() returns ycoordinate used for vertical alignment
   * @private
   */
  this._yCoord = null;

  /** Flag for optimizing attempts to fit a MultilineText object.
   *  A layout algorithm can set the value to true if it figures out
   *  that it will not be possible to fit more than one line of text
   *  in the space available for the text.
   *  @private
   */
  this._noWrap = false;

  // Apply properties
  this.setTextString(textStr);
  this.setX(x ? x : 0);
  this.setY(y ? y : 0);
  this.setMaxLines(Infinity);
};

/**
 * Returns the text string for this text object.  Unlike the implementation on DvtOutputText, this always returns the
 * full and untruncated text string.
 * @return {string} the text string
 */
DvtMultilineText.prototype.getTextString = function() {
  return this._textString;
};

/**
 * Specifies the text string for this text object.
 * @param {string} textString the text string
 */
DvtMultilineText.prototype.setTextString = function(textString) {
  // Store the full string
  this._textString = (textString != null) ? String(textString) : null;

  // Update the text instances
  if (!this._textInstance) {
    // Create the primary text instance.  This instance is used to store all properties.
    this._textInstance = new DvtOutputText(this.getCtx(), this._textString);
    this.addChild(this._textInstance);
  }
  else {
    this._textInstance.setTextString(textString);

    // Remove any additional text lines
    this._removeAdditionalLines();
  }

  // Since this is a new text string, truncation has not occurred
  this._bTruncated = false;
};

/**
 * Returns an array with pointers to all the lines in this DvtMultilineText object
 * @return {Array} the lines in this object.
 * @private
 */
DvtMultilineText.prototype._getTextLines = function() {
  var lines = this._additionalLines.slice();
  // Add this._textInstance unless it was removed by a fitText call
  if (this._textInstance.getParent() == this) {
    lines.unshift(this._textInstance);
  }
  return lines;
};

/**
 * Returns the x position for this text object.
 * @return {number} The x position.
 */
DvtMultilineText.prototype.getX = function() {
  return this._textInstance.getX();
};


/**
 * Specifies the x position for this text object.
 * @param {number} x The x position
 * @return {DvtMultilineText}
 */
DvtMultilineText.prototype.setX = function(x) {
  DvtArrayUtils.forEach(this._getTextLines(), function(entry) { entry.setX(x)});
  return this;
};


/**
 * Returns the y position for the primary instance of this text object.
 * @return {number} The y position.
 */
DvtMultilineText.prototype.getY = function() {
  return this._textInstance.getY();
};

/** Returns the y position used for vertical alignment
 *  @return {number} The y position.
 */
DvtMultilineText.prototype.getYAlignCoord = function() {
  return this._yCoord;
};

/**
 * Specifies the y position for this text object.
 * @param {number} y The y position
 * @return {DvtMultilineText}
 */
DvtMultilineText.prototype.setY = function(y) {
  this._yCoord = y;

  // If not using vertical align, use default alignment for the multiline text
  if (!this._vertAlign) {
    var yChange = y - this._textInstance.getY();
    if (!yChange)
      yChange = y;
    DvtArrayUtils.forEach(this._getTextLines(), function(entry) { var yLine = entry.getY(); entry.setY(yLine ? yLine + yChange : yChange)});
  }
  else // Align each entry in reference to the yCoord based on it's alignment
    this._alignVerticalText();

  return this;
};


/**
 * Returns the y position for this text object.
 * @return {number} The y position.
 */
DvtMultilineText.prototype.getMaxLines = function() {
  return this.GetProperty('maxLines');
};


/**
 * Specifies the maximum number of lines to display when wrapped. Defaults to Infinity.
 * @param {number} maxLines
 * @return {DvtMultilineText}
 */
DvtMultilineText.prototype.setMaxLines = function(maxLines) {
  // Ignore values of 0 or less
  if (maxLines > 0)
    return this.SetProperty('maxLines', maxLines);
};


/**
 * Returns true if this text instance has been truncated.
 * @return {boolean}
 */
DvtMultilineText.prototype.isTruncated = function() {
  return this._bTruncated;
};


/**
 * Returns the horizontal alignment for this text object.  Valid constants begin with DvtOutputText.H_ALIGN_.
 * @return {string}
 */
DvtMultilineText.prototype.getHorizAlignment = function() {
  return this._textInstance.getHorizAlignment();
};


/**
 * Specifies the horizontal alignment for this text object.  Valid constants begin with DvtOutputText.H_ALIGN_.
 * @param {string} align
 * @return {DvtMultilineText}
 */
DvtMultilineText.prototype.setHorizAlignment = function(align) {
  DvtArrayUtils.forEach(this._getTextLines(), function(entry) { entry.setHorizAlignment(align)});
  return this;
};


/**
 * Aligns the left side of the text to the x coordinate. Note: This does not always correspond to what the browser
 * considers a "start" alignment, as we work around issues in rtl locales to provide a consistent API.
 */
DvtMultilineText.prototype.alignLeft = function() {
  // No change in value, return
  if (this._horizAlign == DvtMultilineText.H_ALIGN_LEFT)
    return;

  this._horizAlign = DvtMultilineText.H_ALIGN_LEFT;

  DvtArrayUtils.forEach(this._getTextLines(), function(entry) { entry.alignLeft()});
};


/**
 * Aligns the center of the text to the x coordinate.
 */
DvtMultilineText.prototype.alignCenter = function() {
  // No change in value, return
  if (this._horizAlign == DvtMultilineText.H_ALIGN_CENTER)
    return;

  this._horizAlign = DvtMultilineText.H_ALIGN_CENTER;

  DvtArrayUtils.forEach(this._getTextLines(), function(entry) { entry.alignCenter()});
};


/**
 * Aligns the right side of the text to the x coordinate. Note: This does not always correspond to what the browser
 * considers an "end" alignment, as we work around issues in rtl locales to provide a consistent API.
 */
DvtMultilineText.prototype.alignRight = function() {
  // No change in value, return
  if (this._horizAlign == DvtMultilineText.H_ALIGN_RIGHT)
    return;

  this._horizAlign = DvtMultilineText.H_ALIGN_RIGHT;

  DvtArrayUtils.forEach(this._getTextLines(), function(entry) { entry.alignRight()});
};

/**
 * Aligns the top side of the full text object to the y coordinate.
 */
DvtMultilineText.prototype.alignTop = function() {
  // No change in value, return
  if (this._vertAlign == DvtMultilineText.V_ALIGN_TOP)
    return;

  this._vertAlign = DvtMultilineText.V_ALIGN_TOP;

  this._alignVerticalText();
  DvtArrayUtils.forEach(this._getTextLines(), function(entry) {
    entry.alignTop();
  });

  return;
};


/**
 * Aligns the middle of the full text object to the y coordinate.
 */
DvtMultilineText.prototype.alignMiddle = function() {
  // No change in value, return
  if (this._vertAlign == DvtMultilineText.V_ALIGN_MIDDLE)
    return;

  this._vertAlign = DvtMultilineText.V_ALIGN_MIDDLE;

  this._alignVerticalText();
  DvtArrayUtils.forEach(this._getTextLines(), function(entry) {
    entry.alignMiddle();
  });

  return;
};

/**
 *  Aligns the bottom side of the full text object to the y coordinate.
 */
DvtMultilineText.prototype.alignBottom = function() {
  // No change in value, return
  if (this._vertAlign == DvtMultilineText.V_ALIGN_BOTTOM)
    return;

  this._vertAlign = DvtMultilineText.V_ALIGN_BOTTOM;

  this._alignVerticalText();
  DvtArrayUtils.forEach(this._getTextLines(), function(entry) {
    entry.alignBottom();
  });

  return;
};

/**
 * Sets y coordinates for each text line such that the full text object is aligned in reference to the y coordinate
 * @private
 */
DvtMultilineText.prototype._alignVerticalText = function() {
  if (!this._vertAlign)
    return;

  var yCoord = this.getYAlignCoord();
  var lineCount = this.getLineCount();
  var lineHeight = this.getLineHeight();
  var textLines = this._getTextLines();
  var adjustment = 0;

  for (var i = 0; i < textLines.length; i++) {
    var entry = textLines[i];

    if (this._vertAlign == DvtMultilineText.V_ALIGN_TOP)
      adjustment = lineHeight * i;
    else if (this._vertAlign == DvtMultilineText.V_ALIGN_MIDDLE) {
      var range = lineHeight * (lineCount - 1);
      adjustment = (lineHeight * i) - (range / 2);
    }
    else if (this._vertAlign == DvtMultilineText.V_ALIGN_BOTTOM)
      adjustment = -lineHeight * (lineCount - i - 1);

    entry.setY(yCoord + adjustment);
  }
};

/**
 * Returns the DvtCSSStyle for this object.
 * @return {DvtCSSStyle} The DvtCSSStyle of this object.
 */
DvtMultilineText.prototype.getCSSStyle = function() {
  return this._textInstance.getCSSStyle();
};


/**
 * Sets the DvtCSSStyle of this object. If the DvtCSSStyle is changed, then DvtTextUtils.fitText must be called again, as the previous multi-line layouts will not be valid.
 * @param {DvtCSSStyle} style The DvtCSSStyle of this object.
 * @return {DvtMultilineText}
 */
DvtMultilineText.prototype.setCSSStyle = function(style) {
  DvtArrayUtils.forEach(this._getTextLines(), function(entry) { entry.setCSSStyle(style)});
  return this;
};


/**
 * @override
 */
DvtMultilineText.prototype.copyShape = function() {
  var ret = new DvtMultilineText(this.getCtx(), this.getTextString(), this.getX(), this.getY());
  ret.setCSSStyle(this.getCSSStyle()).setHorizAlignment(this.getHorizAlignment()).setMaxLines(this.getMaxLines());
  return ret;
};


/**
 * Helper function to remove additional text lines.
 * @private
 */
DvtMultilineText.prototype._removeAdditionalLines = function() {
  for (var i = 0; i < this._additionalLines.length; i++) {
    this.removeChild(this._additionalLines[i]);
  }

  this._additionalLines = [];
};


/**
 * Truncates the text instance to fit within the given width.  Sets the untruncated text string on itself if
 * truncated text does not fit.  Only for use by DvtTextUtils.
 * @param {number} maxWidth The maximum width of the text.
 * @param {number} maxHeight The maximum height of the text.
 * @param {number} minChars The minimum number of characters that should be displayed before ellipsis after truncation.
 * @return {boolean} false if the text cannot fit at all, true otherwise.
 */
DvtMultilineText.prototype.__fitText = function(maxWidth, maxHeight, minChars) {
  // Clear any previous layout results
  this._textInstance.setTextString(this.getTextString());
  this._removeAdditionalLines();

  // First try to fit the entire string in 1 line
  if (!DvtTextUtils.fitText(this._textInstance, maxWidth, maxHeight, this, minChars)) {
    // String doesn't fit at all, remove from parent and return
    this.getParent().removeChild(this);
    return false;
  }
  else if (!this._textInstance.isTruncated()) // No truncation needed, text fits in one line.
    return true;
  else if (!this.isWrapEnabled()) // Accept text that fits partially
    return true;

  // Then wrap and truncate text to fit within the given parameters
  return this.wrapText(maxWidth, maxHeight, minChars, false);
};

/**
 * Wrap and truncates text to fit within the given parameters
 * @param {number} maxWidth The maximum width of the text.
 * @param {number} maxHeight The maximum height of the text.
 * @param {number} minChars The minimum number of characters that should be displayed before ellipsis after truncation.
 * @param {boolean=} breakOnTruncation Optional boolean to return unwrapped text if text does not fully fit in given dimensions
 * @return {boolean} false if the text cannot fit in the parameters, true otherwise.
 */
DvtMultilineText.prototype.wrapText = function(maxWidth, maxHeight, minChars, breakOnTruncation) {
  // Truncation occurred.  Calculate line height so that we can add additional lines as space allows.
  var lineHeight = this.getLineHeight();
  var lineSpace = lineHeight * DvtMultilineText._LINE_SPACE;
  var maxLines = this.getMaxLines();
  var availHeight = Math.min(maxHeight, maxLines * (lineHeight + lineSpace) - lineSpace) - lineHeight - lineSpace;

  if (this.getLineCount() > 1) // Clear any previous wrapping results
    this._removeAdditionalLines();

  // Split the string into parts.  Reverse the array so that we can use like a queue.
  var splits = this.getTextString().split(' ');
  splits.reverse();

  // Loop and add each part into the current line.  Create a new line once the current is full.
  var currentLine = this._textInstance;
  var currentString = null;
  while (splits.length > 0) {
    // Try adding the next split into the current line.
    var split = splits.pop();
    var newString = currentString ? currentString + ' ' + split : split;
    currentLine.setTextString(newString);
    currentLine.setUntruncatedTextString(null);

    if (!DvtTextUtils.fitText(currentLine, maxWidth, Infinity, this, minChars)) {
      // Text doesn't fit at all, and there's no more space.  Returns true because previous lines had fit.
      return true;
    }
    else if (currentLine.isTruncated()) {
      // If there's no more space to add lines, we're done
      if (availHeight < lineSpace + lineHeight) {
        this._bTruncated = true;
        return true;
      }

      // Decide whether to keep this split in the current line or push to the next
      if (currentString) {
        // Always push the split to the next line if it didn't fit with the current one.
        currentLine.setTextString(currentString);
        splits.push(split);
      }
      else {
        // This means that we are keeping a truncated text line, because we're not pushing the split back onto the stack
        if (breakOnTruncation) {
          this._textInstance.setTextString(this.getTextString());
          this._removeAdditionalLines();
          return false;
        }
        else
          this._bTruncated = true;
      }

      // Text partially fit, create a new line for the next split
      if (splits.length > 0) {
        var newLine = currentLine.copyShape();
        newLine.setY(currentLine.getY() + lineSpace + lineHeight);
        this.addChild(newLine);
        this._additionalLines.push(newLine);

        // Update the pointers to the line and the availHeight
        currentLine = newLine;
        currentString = null;
        availHeight -= (lineSpace + lineHeight);
      }
    }
    else // Text completely fit, continue using this line
      currentString = newString;
  }

  return true;
};

/**
 * @override
 */
DvtMultilineText.prototype.GetSvgDimensions = function() {
  var dimensions;
  DvtArrayUtils.forEach(this._getTextLines(), function(entry) {
    dimensions = dimensions ? dimensions.getUnion(entry.measureDimensions()) : entry.measureDimensions();
  });
  return dimensions ? dimensions : new DvtRectangle(0, 0, 0, 0);
};

/**
 * Returns the number of lines for the text
 * @return {number}
 */
DvtMultilineText.prototype.getLineCount = function() {
  return this._additionalLines.length + 1;
};

/**
 * Returns the line height
 * @return {number}
 */
DvtMultilineText.prototype.getLineHeight = function() {
  if (!this._lineHeight)
    this._lineHeight = this._textInstance.measureDimensions().h;

  return this._lineHeight;
};

/**
 * Enables or disables attempting to wrap during text fitting
 * @param {boolean} wrapEnabled
 */
DvtMultilineText.prototype.setWrapEnabled = function(wrapEnabled) {
  if (wrapEnabled == false) {
    if (this._textInstance.getParent() != this)
      this.addChild(this._textInstance);

    if (!this._textInstance.getTextString())
      this._textInstance.setTextString(this.getTextString());

    this._removeAdditionalLines();
  }

  this._noWrap = !wrapEnabled;
};

/**
 * Returns whether or not text will attempt to wrap during fitting
 * @return {boolean}
 */
DvtMultilineText.prototype.isWrapEnabled = function() {
  return this._noWrap == false;
};

//// Functions added so that DvtMultilineText can be used in the same instances as DvtOutputText
/**
 * Returns the text string for this text object.  Returns null if the text string has not been truncated.
 * @return {string} the untruncated text string
 */
DvtMultilineText.prototype.getUntruncatedTextString = function() {
  return this.isTruncated() ? this.getTextString() : null;
};

/**
 * Added for compatibilty with DvtOutputText usages
 * @param {string} textString
 */
DvtMultilineText.prototype.setUntruncatedTextString = function(textString) {
  // noop
};

/**
 * @override
 */
DvtMultilineText.prototype.measureDimensions = function() {
  return this.GetSvgDimensions();
};

/**
 * @override
 */
DvtMultilineText.prototype.getDimensions = function() {
  return this.GetSvgDimensions();
};

/**
 * @override
 */
DvtMultilineText.prototype.UpdateSelectionEffect = function() {
  // noop: Does not participate in selection effects
};

/**
 * Returns the horizontal alignment for this text object.  Valid constants begin with DvtMultilineText.H_ALIGN_.
 * @return {string}
 */
DvtMultilineText.prototype.getHorizAlignment = function() {
  return this._horizAlign;
};

/**
 * Specifies the horizontal alignment for this text object.  Valid constants begin with DvtMultilineText.H_ALIGN_.
 * @param {string} align
 */
DvtMultilineText.prototype.setHorizAlignment = function(align) {
  if (align == DvtMultilineText.H_ALIGN_LEFT)
    this.alignLeft();
  else if (align == DvtMultilineText.H_ALIGN_CENTER)
    this.alignCenter();
  else if (align == DvtMultilineText.H_ALIGN_RIGHT)
    this.alignRight();
};

/**
 * Returns the vertical alignment for this text object.  Valid constants begin with DvtMultilineText.V_ALIGN_.
 * @return {string} The horizontal alignment
 */
DvtMultilineText.prototype.getVertAlignment = function() {
  return this._vertAlign;
};

/**
 * Specifies the vertical alignment for this text object.  Valid constants begin with DvtMultilineText.V_ALIGN_.
 * @param {string} align
 */
DvtMultilineText.prototype.setVertAlignment = function(align) {
  if (align == DvtMultilineText.V_ALIGN_TOP)
    this.alignTop();
  else if (align == DvtMultilineText.V_ALIGN_MIDDLE)
    this.alignMiddle();
  else if (align == DvtMultilineText.V_ALIGN_BOTTOM)
    this.alignBottom();
};

// Copyright (c) 2008, 2015, Oracle and/or its affiliates. All rights reserved.
/**
 * Read-only text object that supports wrapping.
 * @extends {DvtContainer}
 * @class DvtBackgroundMultilineText
 * @extends {DvtBackgroundOutputText}
 * @constructor
 * @param {DvtContext} context
 * @param {string} textStr
 * @param {number} x
 * @param {number} y
 * @param {DvtCSSStyle} style
 * @param {string=} id
 */
var DvtBackgroundMultilineText = function(context, textStr, x, y, style, id) {
  this.Init(context, textStr, x, y, style, id);
};

DvtObj.createSubclass(DvtBackgroundMultilineText, DvtBackgroundOutputText, 'DvtBackgroundMultilineText');

/**
 * @param {DvtContext} context
 * @param {string} textStr the text string
 * @param {number} x
 * @param {number} y
 * @param {DvtCSSStyle} style
 * @param {string=} id The optional id for the corresponding DOM element.
 * @protected
 */
DvtBackgroundMultilineText.prototype.Init = function(context, textStr, x, y, style, id) {
  DvtBackgroundMultilineText.superclass.Init.call(this, context, textStr, x, y, style, id);
};

/**
 * Wraps the text instance for this object.
 * @param {number} maxWidth The maximum width of the text.
 * @param {number} maxHeight The maximum height of the text.
 * @param {number} minChars The minimum number of characters that should be displayed before ellipsis after truncation.
 * @param {boolean=} breakOnTruncation Optional boolean to return unwrapped text if text does not fully fit in given dimensions
 * @return {boolean} false if the text cannot fit in the parameters, true otherwise.
 */
DvtBackgroundMultilineText.prototype.wrapText = function(maxWidth, maxHeight, minChars, breakOnTruncation) {
  return this.TextInstance.wrapText(maxWidth, maxHeight, minChars, breakOnTruncation);
};

/**
 * @override
 */
DvtBackgroundMultilineText.prototype.CreateTextInstance = function(context, textStr, x, y, id) {
  return new DvtMultilineText(context, textStr, x, y, id);
};

/**
 * @override
 */
DvtBackgroundMultilineText.prototype.GetTextDimensionsForRealign = function() {
  return this.getLineHeight();
};

/**
 * @override
 */
DvtBackgroundMultilineText.prototype.measureDimensions = function() {
  return this.TextInstance.measureDimensions();
};

//// Functions added so that DvtBackgroundMultilineText can be used in the same instances as DvtMultilineText
/**
 * Truncates the text instance to fit within the given width.  Sets the untruncated text string on itself if
 * truncated text does not fit.  Only for use by DvtTextUtils.
 * @param {number} maxWidth The maximum width of the text.
 * @param {number} maxHeight The maximum height of the text.
 * @param {number} minChars The minimum number of characters that should be displayed before ellipsis after truncation.
 * @return {boolean} false if the text cannot fit at all, true otherwise.
 */
DvtBackgroundMultilineText.prototype.__fitText = function(maxWidth, maxHeight, minChars) {
  return this.TextInstance.__fitText(maxWidth, maxHeight, minChars);
};

/**
 * Returns an array with pointers to all the lines in this DvtBackgroundMultilineText object
 * @return {Array} the lines in this object.
 * @private
 */
DvtBackgroundMultilineText.prototype._getTextLines = function() {
  return this.TextInstance._getTextLines();
};

/**
 * Returns the line height
 * @return {number}
 */
DvtBackgroundMultilineText.prototype.getLineHeight = function() {
  return this.TextInstance.getLineHeight();
};

/**
 * Returns the number of lines for the text
 * @return {number}
 */
DvtBackgroundMultilineText.prototype.getLineCount = function() {
  return this.TextInstance.getLineCount();

};

/** Returns the y position used for vertical alignment
 *  @return {number} The y position.
 */
DvtBackgroundMultilineText.prototype.getYAlignCoord = function() {
  return this.TextInstance.getYAlignCoord();
};

/**
 * Enables or disables attempting to wrap during text fitting
 * @param {boolean} wrapEnabled
 */
DvtBackgroundMultilineText.prototype.setWrapEnabled = function(wrapEnabled) {
  this.TextInstance.setWrapEnabled(wrapEnabled);
};

/**
 * Returns whether or not text will attempt to wrap during fitting
 * @return {boolean}
 */
DvtBackgroundMultilineText.prototype.isWrapEnabled = function() {
  return this.TextInstance.isWrapEnabled();
};

/**
 * @override
 */
DvtBackgroundMultilineText.prototype.UpdateSelectionEffect = function() {
  // noop: Does not participate in selection effects
};
/**
 * Style Utilities
 * @class DvtStyleUtils
 * @constructor
 */
var DvtStyleUtils = function() {
};

DvtObj.createSubclass(DvtStyleUtils, DvtObj, 'DvtStyleUtils');

DvtStyleUtils.DEFAULT_FONT_FAMILY = 'Tahoma,Verdana,Helvetica,sans-serif';
DvtStyleUtils.DEFAULT_FONT_SIZE = '11px';
DvtStyleUtils.DEFAULT_FONT_COLOR = 'black';

DvtStyleUtils.getStyle = function(styleMap, styleName, defaultStyle) {
  if (styleMap && styleMap[styleName] !== null && typeof styleMap[styleName] !== 'undefined')
    return styleMap[styleName];
  else
    return defaultStyle;
};

DvtStyleUtils.setStyle = function(styleMap, styleName, styleValue) {
  if (styleMap && styleValue !== null && typeof styleValue !== 'undefined')
    styleMap[styleName] = styleValue;
};


/**
 * Creates a DvtShadow object from a CSS box-shadow specification
 *
 * @param {string} shadowStyle the CSS box-shadow specification
 * @return {DvtShadow} the DvtShadow object
 */
DvtStyleUtils.getShadow = function(shadowStyle) {
  var shadow = null;
  if (shadowStyle != null && shadowStyle != 'none') {
    var shadowRGBA;
    var shadowH = 0;
    var shadowV = 0;
    var shadowBlur = 0;

    var arr = shadowStyle.replace(/, /g, ',').split(' ');

    if (shadowStyle.match(/rgb/i) == null)
      arr[arr.length] = 'rgba(0, 0, 0, 0.2)';

    if (arr.length < 3)
      return null;

    for (var i = 0; i < arr.length; i++) {
      if (i == 0)
        shadowH = parseInt(arr[0]);
      else if (i == 1)
        shadowV = parseInt(arr[1]);
      else if (i == 2 && arr[i].match(/rgb/i) == null)
        shadowBlur = parseInt(arr[i]);
      else if (arr[i].match(/rgb/i))
        shadowRGBA = arr[i];
    }

    var shadowDistance = Math.sqrt(shadowH * shadowH + shadowV * shadowV);
    var angle = Math.atan2(shadowV, shadowH) * 180 / Math.PI;

    shadow = new DvtShadow(shadowRGBA,
        shadowDistance, // distance
        shadowBlur, // blurX
        shadowBlur, // blurY
        angle, // angle of the shadow
        1, // strength or the imprint/spread
        3, // quality
        false, // inner shadow
        false, // knockout effect
        false // hide object
        );
  }

  return shadow;
};

/**
 * Parses the ms time value.
 *
 * @param {object} value The time as read from the json object. Could be in ms or s. If intger value then assume it's ms.
 * @return {number} the value in milliseconds
 */
DvtStyleUtils.getTimeMilliseconds = function(value) {
  if (typeof value == 'string') {
    if (value.slice(-2) == 'ms')
      value = parseInt((value.slice(0, -2)));
    else if (value.slice(-1) == 's')
      value = parseFloat(value.slice(0, -1)) * 1000;
    else
      value = parseInt(value);
  }
  return value;
};
/**
 * @constructor
 * DvtCSSGradient
 */
var DvtCSSGradient = function(type) {
  this.Init(type);
};

DvtObj.createSubclass(DvtCSSGradient, DvtObj, 'DvtCSSGradient');


DvtCSSGradient.LINEAR = 0;
DvtCSSGradient.RADIAL = 1;


DvtCSSGradient.prototype.Init = function(type) {
  this._type = type;
};


/**
  *   Returns DvtCSSGradient.LINEAR or DvtCSSGradient.RADIAL
  */
DvtCSSGradient.prototype.getGradientType = function()
{
  return this._type;
};


/**
  *   Returns an array of alpha's.
  *   @type {Array}
  */
DvtCSSGradient.prototype.getAlphas = function()
{
  return this._arAlphas;
};


/**
  *  Sets the alphas of the gradient.
  *  @param {Array} arAlphas  The array of alphas
  */
DvtCSSGradient.prototype.setAlphas = function(arAlphas)
{
  this._arAlphas = arAlphas;
};


/**
  *   Returns an array of colors.
  *   @type {Array}
  */
DvtCSSGradient.prototype.getColors = function()
{
  return this._arColors;
};


/**
  *  Sets the colors of the gradient.
  *  @param {Array} arColors  The array of colors
  */
DvtCSSGradient.prototype.setColors = function(arColors)
{
  this._arColors = arColors;
};


/**
  *   Returns an array of stop ratios.
  *   @type {Array}
  */
DvtCSSGradient.prototype.getRatios = function()
{
  return this._arRatios;
};


/**
  *  Sets the ratios of the gradient.
  *  @param {Array} arRatios  The array of ratios
  */
DvtCSSGradient.prototype.setRatios = function(arRatios)
{
  this._arRatios = arRatios;
};


/**
 * @constructor
 * DvtLinearGradient
 */
var DvtLinearGradient = function() {
  this.Init();
};

/*
 * make DvtCSSGradient a subclass of DvtLinearGradient
 */
DvtObj.createSubclass(DvtLinearGradient, DvtCSSGradient, 'DvtLinearGradient');

//convert sides into an angle (in radian)
//Note: in toolkit, angles are in degree (not radian)
DvtLinearGradient.LEFT = 0;   //0;
DvtLinearGradient.BOTTOM_LEFT = 45;
DvtLinearGradient.BOTTOM = 90; //Math.PI / 2;
DvtLinearGradient.BOTTOM_RIGHT = 135;
DvtLinearGradient.RIGHT = 180;    //Math.PI;
DvtLinearGradient.TOP_RIGHT = 225;
DvtLinearGradient.TOP = 270;     //3 * Math.PI / 2;
DvtLinearGradient.TOP_LEFT = 315;

DvtLinearGradient.prototype.Init = function() {
  DvtLinearGradient.superclass.Init.call(this, DvtCSSGradient.LINEAR);
};


/*---------------------------------------------------------------------*/
/*   get/setAngle()                                                    */
/*---------------------------------------------------------------------*/
/**
  *  Returns the angle of the gradient.
  *  @return {number} the angle of the gradient.
  */
DvtLinearGradient.prototype.getAngle = function()
{
  // return angle
  // usage:
  // angle = Math.atan2(hh, ww)
  // var fill_matrix:Matrix = new Matrix();
  // fill_matrix.createGradientBox(ww, hh, angle, xx, yy);

  return this._angle;
};


/**
  *  Sets the angle of the gradient.
  *  @param {number} angle  The angle of the gradient.
  */
DvtLinearGradient.prototype.setAngle = function(angle)
{
  this._angle = angle;
};

/**
 * parse gradient string into gradient object
 * @class DvtGradientParser
 * @constructor
 */
var DvtGradientParser = function() {
};

DvtObj.createSubclass(DvtGradientParser, DvtObj, 'DvtGradientParser');


/*ADF Faces FusionFx-v3-desktop linear gradient syntax */
/*using CSS3 gradients for button background-image */

/*********************************************************************
@agent webkit {
  .AFButtonBackground:alias {
    background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#FFFFFF), to(#CCD6E8));
  }
}

@agent webkit and (min-version: 534.16) {
  .AFButtonBackground:alias {
    background-image: -webkit-linear-gradient(top, #FFFFFF, #CCD6E8);
  }
}

@agent gecko {
  .AFButtonBackground:alias {
    background-image: -moz-linear-gradient(top, #FFFFFF, #CCD6E8);
  }
}

@agent ie and (max-version: 7.0) {
  .AFButtonBackground:alias {
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#FFFFFF', endColorstr='#CCD6E8');
  }
}

@agent ie and (min-version: 8.0) {
  .AFButtonBackground:alias {
    -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr='#FFFFFF', endColorstr='#CCD6E8')";
  }
}
*********************************************************************/

/* End of CSS3 gradients for buttom background-image*/


DvtGradientParser.WEBKIT_GD_LINEAR = '-webkit-linear-gradient';
DvtGradientParser.FIREFOX_GD_LINEAR = '-moz-linear-gradient';
DvtGradientParser.IE_GD_LINEAR = 'progid:DXImageTransform.Microsoft.gradient';
DvtGradientParser.IE_GD_LINEAR2 = 'progid:DXImageTransform.Microsoft.Gradient';
DvtGradientParser.IE7_GD_FILTER = 'filter';
DvtGradientParser.IE8_GD_FILTER = '-ms-filter';
DvtGradientParser.IE10_GD_LINEAR = '-ms-linear-gradient';

DvtGradientParser.IE_GD_START_COLOR_STR = 'startColorstr';
DvtGradientParser.IE_GD_END_COLOR_STR = 'endColorstr';
DvtGradientParser.IE_GD_GRADIENT_TYPE = 'GradientType';


//TODO: should we support old webkit gradient syntax???
DvtGradientParser.OLD_WEBKIT_GD_LINEAR = '-webkit-gradient';

//W3C CSS3 gradient
DvtGradientParser.GD_LINEAR = 'linear-gradient';
DvtGradientParser.GD_RADIAL = 'radial-gradient';


DvtGradientParser.GD_TOP = 'top';
DvtGradientParser.GD_BOTTOM = 'bottom';
DvtGradientParser.GD_LEFT = 'left';
DvtGradientParser.GD_RIGHT = 'right';
DvtGradientParser.GD_CENTER = 'center';
DvtGradientParser.GD_TO = 'to';


/**
 * Parse a gradient style String and turn it into a DvtCSSStyle.
 * @param {String} gradient string
 * @return a CSSGradient object if it is a gradient value,
 *         a null otherwise.
 */
DvtGradientParser.parseCSSGradient = function(gradient) {

  if (gradient != null) {
    gradient = DvtStringUtils.trim(gradient);

    if (DvtGradientParser._startsWith(gradient, DvtGradientParser.WEBKIT_GD_LINEAR)) {
      gradient = DvtGradientParser._removeParenthesis(gradient, DvtGradientParser.WEBKIT_GD_LINEAR);
      return DvtGradientParser._parseLinearGradient(gradient);
    }
    else if (DvtGradientParser._startsWith(gradient, DvtGradientParser.FIREFOX_GD_LINEAR)) {
      gradient = DvtGradientParser._removeParenthesis(gradient, DvtGradientParser.FIREFOX_GD_LINEAR);
      return DvtGradientParser._parseLinearGradient(gradient);
    }
    else if (DvtGradientParser._startsWith(gradient, DvtGradientParser.IE_GD_LINEAR)) {
      gradient = DvtGradientParser._removeParenthesis(gradient, DvtGradientParser.IE_GD_LINEAR);
      return DvtGradientParser._parseIELinearGradient(gradient);
    }
    else if (DvtGradientParser._startsWith(gradient, DvtGradientParser.IE_GD_LINEAR2)) {
      gradient = DvtGradientParser._removeParenthesis(gradient, DvtGradientParser.IE_GD_LINEAR2);
      return DvtGradientParser._parseIELinearGradient(gradient);
    }
    else if (DvtGradientParser._startsWith(gradient, DvtGradientParser.IE10_GD_LINEAR)) {
      gradient = DvtGradientParser._removeParenthesis(gradient, DvtGradientParser.IE10_GD_LINEAR);
      return DvtGradientParser._parseLinearGradient(gradient);
    }
    //W3C CSS3 gradient (Draft 13 Dec 2011)
    else if (DvtGradientParser._startsWith(gradient, DvtGradientParser.GD_LINEAR)) {
      gradient = DvtGradientParser._removeParenthesis(gradient, DvtGradientParser.GD_LINEAR);
      return DvtGradientParser._parseLinearGradient(gradient);
    }
  }
  return null;
};


/****************************************************************
   CSS3 - http://dev.w3.org/csswg/css3-images/#gradients

   <linear-gradient> = linear-gradient(
      [ [ <angle> | to <side-or-corner> ] ,]?
      <color-stop>[, <color-stop>]+
   )

   <side-or-corner> = [left | right] || [top | bottom]

/(([0-9]+)(deg|rad|grad)|\s*(to\s+)?((left|right)\s+)?(top|bottom)?\s*,\s*)?/i

/(#[0-9a-f]+|rgb\(\s*(\d+),\s*(\d+),\s*(\d+)\s*\)|rgba\(\s*(\d+),\s*(\d+),\s*(\d+),\s*(\d?)(\.\d+)?\s*\)|[a-z]+)(\s+\d+%)?/gi


  ******************************************************************/

DvtGradientParser._parseLinearGradient = function(gradient) {
  var number = new RegExp('(-?(?:\\d*\\.)?\\d+)');
  var angleUnit = new RegExp('(deg|rad|grad|turn)');
  var horiz = new RegExp('(left|right)');
  var vert = new RegExp('(top|bottom)');
  var to = new RegExp('(?:(to)\\s+)');
  var angle = new RegExp('(?:' + number.source + angleUnit.source + ')');
  var horizThenVert = new RegExp('(?:' + horiz.source + '(?:\\s+' + vert.source + ')?)');
  var vertThenHoriz = new RegExp('(?:' + vert.source + '(?:\\s+' + horiz.source + ')?)');
  var sideOrCorner = new RegExp('(?:' + horizThenVert.source + '|' + vertThenHoriz.source + ')');
  var direction = new RegExp('(?:' + angle.source + '|(?:' + to.source + '?' + sideOrCorner.source + '))');
  var everythingBeforeColorStops = new RegExp('(?:\\s*' + direction.source + '\\s*,\\s*)', 'i');
  var sides = gradient.match(everythingBeforeColorStops);

  if (sides == null || sides.length == 0)
    return null;

  // sides
  // 0: match string
  // 1: angle
  // 2: angle unit
  // 3: to (if present)
  // 4: horiz (if horizThenVert)
  // 5: vert (if horizThenVert)
  // 6: vert (if vertThenHoriz)
  // 7: horiz (if vertThenHoriz)

  var size = sides.length;
  var gradObj = new DvtLinearGradient();

  var bTop = sides[5] == DvtGradientParser.GD_TOP || sides[6] == DvtGradientParser.GD_TOP;
  var bBottom = sides[5] == DvtGradientParser.GD_BOTTOM || sides[6] == DvtGradientParser.GD_BOTTOM;
  var bLeft = sides[4] == DvtGradientParser.GD_LEFT || sides[7] == DvtGradientParser.GD_LEFT;
  var bRight = sides[4] == DvtGradientParser.GD_RIGHT || sides[7] == DvtGradientParser.GD_RIGHT;
  var bTo = sides[3] == DvtGradientParser.GD_TO;
  if (bTo) {
    // specifying end rather than start, swap top/bottom, left/right if specified
    if (bTop || bBottom) {
      bTop = !bTop;
      bBottom = !bBottom;
    }

    if (bLeft || bRight) {
      bLeft = !bLeft;
      bRight = !bRight;
    }
  }

  // top left | top right | top
  if (bTop) {
    if (bLeft) {
      gradObj.setAngle(DvtLinearGradient.TOP_LEFT);
    }
    else if (bRight) {
      gradObj.setAngle(DvtLinearGradient.TOP_RIGHT);
    }
    else {
      gradObj.setAngle(DvtLinearGradient.TOP);
    }
  }
  // bottom left | bottom right | bottom
  else if (bBottom) {
    if (bLeft) {
      gradObj.setAngle(DvtLinearGradient.BOTTOM_LEFT);
    }
    else if (bRight) {
      gradObj.setAngle(DvtLinearGradient.BOTTOM_RIGHT);
    }
    else {
      gradObj.setAngle(DvtLinearGradient.BOTTOM);
    }
  }
  else if (bLeft) {
    gradObj.setAngle(DvtLinearGradient.LEFT);
  }
  else if (bRight) {
    gradObj.setAngle(DvtLinearGradient.RIGHT);
  }
  // parse angle if specified
  else if (sides[2]) {
    var angle = parseFloat(sides[1]);

    if (! isNaN(angle)) {
      if (sides[2] == 'grad') {
        angle = (angle / 200) * 180;
      }
      else if (sides[2] == 'rad') {
        angle = (angle / Math.PI) * 180;
      }
      else if (sides[2] == 'turn') {
        angle = (angle / .5) * 180;
      }
      //TODO: dont need to convert negative angle to positive
      //because beginGradientFill take negative angle
      //      angle = angle % (2 * Math.PI);
      //      if (angle < 0) {
      //        angle += 2 * Math.PI;
      //      }

      gradObj.setAngle(angle);
    }
  }

  // parse colorStops
  gradient = gradient.substring(sides[0].length);
  DvtGradientParser._parseCSSColorStops(gradient, gradObj);

  return gradObj;
};


DvtGradientParser._parseIELinearGradient = function(gradient) {
  var props = gradient.split(',');
  var size = props.length;
  var prop;
  var colorStops = [];

  //In IE GradientType = 0 (default, vertical)
  //      GradientType = 1 (horizontal)
  var gradObj = new DvtLinearGradient();
  gradObj.setAngle(DvtLinearGradient.TOP);

  // parse gradient properties
  for (var i = 0; i < size; i++) {
    prop = (DvtStringUtils.trim(props[i])).split('=');
    if (prop.length == 2) {
      prop[0] = DvtStringUtils.trim(prop[0]);
      if (prop[0] == DvtGradientParser.IE_GD_START_COLOR_STR) {
        colorStops[0] = DvtGradientParser.removeQuotes(prop[1], DvtCSSStyle.SINGLE_QUOTE);
      }
      else if (prop[0] == DvtGradientParser.IE_GD_END_COLOR_STR) {
        colorStops[1] = DvtGradientParser.removeQuotes(prop[1], DvtCSSStyle.SINGLE_QUOTE);
      }
      else if (prop[0] == DvtGradientParser.IE_GD_GRADIENT_TYPE) {
        if (prop[1] == '1') {
          gradObj.setAngle(DvtLinearGradient.LEFT);
        }
      }
    }
  }

  // parse color stops
  DvtGradientParser._parseColorStops(colorStops, gradObj);

  return gradObj;
};


/**
 * Parse Gradient CSS Color Stops
 * @private
 * @param {string} s  style attribute
 * @param {DvtCSSGradient} gradObj  Gradient object
 */
DvtGradientParser._parseCSSColorStops = function(s, gradObj) {

  var colorStops = s.match(/(#[0-9a-f]+|rgb\(\s*(\d+),\s*(\d+),\s*(\d+)\s*\)|rgba\(\s*(\d+),\s*(\d+),\s*(\d+),\s*(\d?)(\.\d+)?\s*\)|[a-z]+)(\s+\d+\.?\d*%)?/gi);

  if (colorStops != null && colorStops.length > 0) {
    DvtGradientParser._parseColorStops(colorStops, gradObj);
  }
};


DvtGradientParser._parseColorStops = function(colorStops, gradObj) {

  var size = colorStops.length;
  var alphas = [];
  var colors = [];
  var ratios = [];
  var alphaColor;
  var position;
  var noRatio = true;
  var sPosition;
  var colorArray = [];

  for (var i = 0; i < colorStops.length; i++) {
    sPosition = DvtCSSStyle.parseBorderColor(colorStops[i], colorArray);
    alphaColor = colorArray.pop();

    colors[i] = alphaColor;
    alphas[i] = DvtColorUtils.getAlpha(alphaColor);

    sPosition = DvtStringUtils.trim(sPosition);
    if (sPosition.length > 0) {
      position = parseFloat(sPosition);
      if (! isNaN(position)) {
        //NOTE: support % but not length or ratio.
        if (DvtStringUtils.endsWith(sPosition, '%')) {
          ratios[i] = position / 100;
          noRatio = false;
        }
      }
    }
  }

  // no location is specified, even space is assumed
  if (size > 1 && noRatio) {
    for (var r = 0; r < size; r++) {
      ratios[r] = r / (size - 1);
    }
  }
  else if (noRatio) {
    ratios[0] = 0;
  }

  gradObj.setColors(colors);
  gradObj.setAlphas(alphas);
  gradObj.setRatios(ratios);
};

DvtGradientParser._removeParenthesis = function(gradient, keyWord) {
  if (gradient.charAt(gradient.length - 1) != ')')
    return null;

  // remove keyWord and parethesis around it
  gradient = gradient.substring(keyWord.length);

  return DvtGradientParser.removeQuotes(gradient, '(', ')');
};

DvtGradientParser.removeQuotes = function(colorStr, openQ, closeQ) {
  // remove quote around the color string
  colorStr = DvtStringUtils.trim(colorStr);
  if (colorStr.charAt(0) != openQ)
    return colorStr;

  if (closeQ == null)
    closeQ = openQ;

  var iStart = 1;
  var iEnd = colorStr.lastIndexOf(closeQ);
  if (iEnd < 0)
    return colorStr.substring(iStart);

  return colorStr.substring(iStart, iEnd);
};



DvtGradientParser._startsWith = function(str, value) {
  return str.indexOf(value) == 0;
};

/**
 * @constructor
 * Represents a set of CSS styles.
 * @param {String} style inlineStyle
 */
var DvtCSSStyle = function(style) {
  this.Init(style);
};

DvtObj.createSubclass(DvtCSSStyle, DvtObj, 'DvtCSSStyle');

/** @const **/
DvtCSSStyle.SKIN_FUSION = 'fusion';
/** @const **/
DvtCSSStyle.SKIN_SKYROS = 'skyros';
/** @const **/
DvtCSSStyle.SKIN_ALTA = 'alta';
/**
 * Placeholder for the post-Alta skin.
 * @const
 */
DvtCSSStyle.SKIN_NEXT = 'next';

// Background Properties
DvtCSSStyle.BACKGROUND = 'background';
DvtCSSStyle.BACKGROUND_COLOR = 'background-color';
DvtCSSStyle.BACKGROUND_IMAGE = 'background-image';
DvtCSSStyle.BACKGROUND_REPEAT = 'background-repeat';
DvtCSSStyle.BACKGROUND_POSITION = 'background-position';

// Border Properties
DvtCSSStyle.BORDER = 'border';
DvtCSSStyle.BORDER_TOP = 'border-top';
DvtCSSStyle.BORDER_BOTTOM = 'border-bottom';
DvtCSSStyle.BORDER_LEFT = 'border-left';
DvtCSSStyle.BORDER_RIGHT = 'border-right';

DvtCSSStyle.BORDER_WIDTH = 'border-width';
DvtCSSStyle.BORDER_TOP_WIDTH = 'border-top-width';
DvtCSSStyle.BORDER_BOTTOM_WIDTH = 'border-bottom-width';
DvtCSSStyle.BORDER_LEFT_WIDTH = 'border-left-width';
DvtCSSStyle.BORDER_RIGHT_WIDTH = 'border-right-width';

DvtCSSStyle.BORDER_COLOR = 'border-color';
DvtCSSStyle.BORDER_TOP_COLOR = 'border-top-color';
DvtCSSStyle.BORDER_BOTTOM_COLOR = 'border-bottom-color';
DvtCSSStyle.BORDER_LEFT_COLOR = 'border-left-color';
DvtCSSStyle.BORDER_RIGHT_COLOR = 'border-right-color';

DvtCSSStyle.BORDER_STYLE = 'border-style';

// - border-radius css property not supported when used inside <dvt:node>
DvtCSSStyle.BORDER_RADIUS = 'border-radius';
DvtCSSStyle.BORDER_TOP_LEFT_RADIUS = 'border-top-left-radius';
DvtCSSStyle.BORDER_TOP_RIGHT_RADIUS = 'border-top-right-radius';
DvtCSSStyle.BORDER_BOTTOM_RIGHT_RADIUS = 'border-bottom-right-radius';
DvtCSSStyle.BORDER_BOTTOM_LEFT_RADIUS = 'border-bottom-left-radius';

// Margin Properties
DvtCSSStyle.MARGIN = 'margin';
DvtCSSStyle.MARGIN_TOP = 'margin-top';
DvtCSSStyle.MARGIN_BOTTOM = 'margin-bottom';
DvtCSSStyle.MARGIN_LEFT = 'margin-left';
DvtCSSStyle.MARGIN_RIGHT = 'margin-right';

// Padding Properties
DvtCSSStyle.PADDING = 'padding';
DvtCSSStyle.PADDING_TOP = 'padding-top';
DvtCSSStyle.PADDING_BOTTOM = 'padding-bottom';
DvtCSSStyle.PADDING_LEFT = 'padding-left';
DvtCSSStyle.PADDING_RIGHT = 'padding-right';

// Font Properties
DvtCSSStyle.COLOR = 'color';
DvtCSSStyle.FONT_FAMILY = 'font-family';
DvtCSSStyle.FONT_SIZE = 'font-size';
DvtCSSStyle.FONT_STYLE = 'font-style';
DvtCSSStyle.FONT_WEIGHT = 'font-weight';
DvtCSSStyle.TEXT_DECORATION = 'text-decoration';
DvtCSSStyle.TEXT_ALIGN = 'text-align';

// - DIFFICULT TO SIZE PGLS WHEN USING PADDING AND BORDERS
//value for box-sizing
DvtCSSStyle.BORDER_BOX = 'border-box';
DvtCSSStyle.CONTENT_BOX = 'content-box';

// Size Properties
DvtCSSStyle.HEIGHT = 'height';
DvtCSSStyle.WIDTH = 'width';

//value for background-image
DvtCSSStyle.NONE = 'none';

//values for background-repeat
DvtCSSStyle.NO_REPEAT = 'no-repeat';
DvtCSSStyle.REPEAT = 'repeat';
DvtCSSStyle.REPEAT_X = 'repeat-x';
DvtCSSStyle.REPEAT_Y = 'repeat-y';

//value for margin
DvtCSSStyle.AUTO = 'auto';
DvtCSSStyle.AUTO_MARGIN = '8';

//HV recognizes these for "gradient" or "solid"
DvtCSSStyle.BORDER_TYPE = 'border-type';
DvtCSSStyle.FILL_TYPE = 'fill-type';

//used for icon url
DvtCSSStyle.CONTENT = 'content';

//For Alta selection effects. Not proper CSS and should move when possible
DvtCSSStyle.INNER_COLOR = '-tr-inner-color';
DvtCSSStyle.OUTER_COLOR = '-tr-outer-color';

/** @const */
DvtCSSStyle.WHITE_SPACE = 'white-space';

/** @private **/
DvtCSSStyle._NAMED_FONT_SIZE_MAP = {
  'xx-small' : '9', 'x-small' : '10', 'small' : '13', 'medium' : '16', 'large' : '18', 'x-large' : '24', 'xx-large' : '32'
};


/** @private **/
DvtCSSStyle._NAMED_WIDTH_MAP = {
  thin: '2', medium: '4', thick: '6'
};


/** @private **/
DvtCSSStyle._NAMED_COLOR_MAP = {
  'aqua': '#00FFFF', 'black': '#000000', 'blue': '#0000FF', 'white': '#FFFFFF', 'fuchsia': '#FF00FF', 'gray': '#848284',
  'lime': '#00FF00', 'maroon': '#840000', 'green': '#008200', 'navy': '#000084', 'olive': '#848200', 'red': '#FF0000',
  'silver': '#C6C3C6', 'teal': '#008284', 'yellow': '#FFFF00', 'purple': '#800080', 'cyan': '#D2B48C', 'goldenrod': '#DAA520',
  'lightblue': '#ADD8E6', 'lightyellow': '#FFFFE0', 'orange': '#FFA500', 'paleGoldenRod': '#EEE8AA', 'paleturquoise': '#AFEEEE',
  'peachpuff': '#FFDAB9', 'pink': '#FFC0CB', 'tan': '#D2B48C', 'thistle': '#D8BFD8', 'transparent': 'transparent'
};

// numeric attributes List
DvtCSSStyle._numericAttrsList = [DvtCSSStyle.WIDTH, DvtCSSStyle.HEIGHT, DvtCSSStyle.BORDER_WIDTH, DvtCSSStyle.BORDER_TOP_WIDTH, DvtCSSStyle.BORDER_BOTTOM_WIDTH, DvtCSSStyle.BORDER_LEFT_WIDTH, DvtCSSStyle.BORDER_RIGHT_WIDTH, DvtCSSStyle.MARGIN, DvtCSSStyle.MARGIN_TOP, DvtCSSStyle.MARGIN_BOTTOM, DvtCSSStyle.MARGIN_LEFT, DvtCSSStyle.MARGIN_RIGHT, DvtCSSStyle.PADDING, DvtCSSStyle.PADDING_TOP, DvtCSSStyle.PADDING_BOTTOM, DvtCSSStyle.PADDING_LEFT, DvtCSSStyle.PADDING_RIGHT];

DvtCSSStyle._DOUBLE_QUOTE = '\"';
DvtCSSStyle._SINGLE_QUOTE = "'";

// Default color ramps
DvtCSSStyle.COLORS_SKYROS = ['#003366', '#CC3300', '#666699', '#006666', '#FF9900', '#993366', '#99CC33', '#624390', '#669933', '#FFCC33', '#006699', '#EBEA79'];
DvtCSSStyle.COLORS_ALTA = ['#267db3', '#68c182', '#fad55c', '#ed6647', '#8561c8', '#6ddbdb', '#ffb54d', '#e371b2', '#47bdef', '#a2bf39', '#a75dba', '#f7f37b'];


/**
 * Initializes the DvtCSSStyle using the specified inline style string.
 * @param {String} style The inline style string containing the attributes for this DvtCSSStyle.
 * @protected
 */
DvtCSSStyle.prototype.Init = function(style) {
  // Initialize the object map containing all the style properties
  this._styleMap = {
  };

  this.parseInlineStyle(style);
};


/**
 * Parse an inlineStyle string into a set of CSS styles and merge the results to this style object.
 * @param {String} style inlineStyle
 */
DvtCSSStyle.prototype.parseInlineStyle = function(style) {
  if (style && style.length > 0) {
    var splits = style.split(';');
    for (var i = 0; i < splits.length; i++) {
      var s = splits[i];
      if (s && s.length > 0) {
        //find the first colon instead of using String.split because
        //there may be other colons in the string, for instance in
        //a fully qualified background-image url (http://some.server.com/...)
        var colonIndex = s.indexOf(':');
        if (colonIndex > - 1) {
          var attrName = DvtStringUtils.trim(s.substring(0, colonIndex));
          var attrVal = DvtStringUtils.trim(s.substring(colonIndex + 1));

          if (attrName && attrName.length > 0 && attrVal && attrVal.length > 0) {

            //inline images with data url
            if (attrName == DvtCSSStyle.BACKGROUND_IMAGE && attrVal.indexOf('data:image/') >= 0) {
              attrVal = attrVal + ';' + splits[i + 1];
              i++;
            }

            this.setStyle(attrName, attrVal);
          }
        }
      }
    }
  }
};


/**
 * Sets the value for a CSS attribute. This function will do all necessary conversion for the value.
 * @param {string} key The attribute name.
 * @param {string} val The attribute value.
 * @return {DvtCSSStyle} This DvtCSSStyle instance, useful for linking calls.
 */
DvtCSSStyle.prototype.setStyle = function(key, val) {
  // TODO: This function can be made faster by indexing the attributes to their conversion routines.
  // TODO: This function can be made faster by removing unnecessary conversion routines (color)
  if (val == null)
    this._setStyleAttr(key, val);
  else {
    // The specialized routines don't do a good job of null checking. TODO CLEANUP
    switch (key) {
      case 'background-repeat':
        this._setBackgroundRepeat(key, val);
        break;
      case 'color':
      case 'background-color':
      case 'border-top-color':
      case 'border-bottom-color':
      case 'border-left-color':
      case 'border-right-color':
        this._setColorAttr(key, val);
        break;

      case 'border-top':
      case 'border-bottom':
      case 'border-left':
      case 'border-right':
        this._setBorderSide(key, val);
        break;

      case 'border':
        this._setBorderShorthand(key, val);
        break;
      case 'border-color':
        this._setBorderColorShorthand(key, val);
        break;
      case 'border-width':
        this._setBorderWidthShorthand(key, val);
        break;

      // - border-radius css property not supported when used inside <dvt:node>
      case 'border-radius':
        this._setBorderRadius(key, val);
        break;

      case 'padding':
        this._setPaddingShorthand(key, val);
        break;
      case 'margin':
        this._setMarginShorthand(key, val);
        break;
      case 'font-size':
        this.setFontSize(key, val);
        break;

      // - hv command button loses gradient
      //TODO: allow gradient syntax on BACKGROUND_COLOR???
      case 'background-image':
        var gradObj = DvtGradientParser.parseCSSGradient(val);
        if (gradObj) {
          val = gradObj;
        }
        this._setStyleAttr(key, val);
        break;

      //IE gradient syntax
      case DvtGradientParser.IE7_GD_FILTER:
      case DvtGradientParser.IE8_GD_FILTER:
        //remove quotes around the value
        var val1 = DvtGradientParser.removeQuotes(val, DvtCSSStyle._DOUBLE_QUOTE);

        var gradObj = DvtGradientParser.parseCSSGradient(val1);
        if (gradObj) {
          key = DvtCSSStyle.BACKGROUND_IMAGE;
          val = gradObj;
        }

        this._setStyleAttr(key, val);
        break;

      default :
        this._setStyleAttr(key, val);
        break;
    }
  }

  // Return this instance to support linking of set calls.
  return this;
};


/**
 * Returns the value of the specified style property.
 * @param {string} key The style property whose value will be returned.
 * @return {string} The value of the specified style property.
 */
DvtCSSStyle.prototype.getStyle = function(key) {
  return this._styleMap[key];
};


/**
 * Specifies the value of the specified style property.  Does not perform any conversion.
 * @param {string} key The style property whose value will be returned.
 * @param {string} value The value of the specified style property.
 * @return {DvtCSSStyle} This DvtCSSStyle instance, useful for linking calls.
 * @private
 */
DvtCSSStyle.prototype._setStyleAttr = function(key, value) {
  if (value != null)
    this._styleMap[key] = value;
  else delete this._styleMap[key];

  return this;
};


/**
 * Sets the font-size on a DvtCSSStyle object
 * @param {string} key The css key to set the font-size under TODO , is this ever not font-size?
 * @param {string} val The font-size which can be in the format '9', '9px', or 'xx-small'
 */
DvtCSSStyle.prototype.setFontSize = function(key, val) {
  var fsize = DvtStringUtils.trim(val);
  var specSize = DvtCSSStyle._NAMED_FONT_SIZE_MAP[fsize];
  if (specSize)
    this._setStyleAttr(key, (String(specSize) + 'px'));
  else
    this._setStyleAttr(key, isNaN(parseFloat(fsize)) ? DvtStyleUtils.DEFAULT_FONT_SIZE : fsize);
};


/**
 * @param key is a shorthand for the four border properties: top, right, bottom and left border, respectively.
 * @param val may contain up to 4 border-width values.
 * @private
 */
DvtCSSStyle.prototype._setBorderWidthShorthand = function(key, val) {
  var bwArray = val.split(' ');
  var bWidth = null;

  switch (bwArray.length) {
    case 1:
      this._setStyleAttr(key, DvtCSSStyle._getBorderWidth(bwArray[0]));
      // remove other border widths
      this._setStyleAttr(DvtCSSStyle.BORDER_TOP_WIDTH, null);
      this._setStyleAttr(DvtCSSStyle.BORDER_BOTTOM_WIDTH, null);
      this._setStyleAttr(DvtCSSStyle.BORDER_RIGHT_WIDTH, null);
      this._setStyleAttr(DvtCSSStyle.BORDER_LEFT_WIDTH, null);
      break;

    case 2:
      bWidth = DvtCSSStyle._getBorderWidth(bwArray[0]);
      this._setStyleAttr(DvtCSSStyle.BORDER_TOP_WIDTH, bWidth);
      this._setStyleAttr(DvtCSSStyle.BORDER_BOTTOM_WIDTH, bWidth);

      bWidth = DvtCSSStyle._getBorderWidth(bwArray[1]);
      this._setStyleAttr(DvtCSSStyle.BORDER_LEFT_WIDTH, bWidth);
      this._setStyleAttr(DvtCSSStyle.BORDER_RIGHT_WIDTH, bWidth);
      break;

    case 3:
      this._setStyleAttr(DvtCSSStyle.BORDER_TOP_WIDTH, DvtCSSStyle._getBorderWidth(bwArray[0]));
      bWidth = DvtCSSStyle._getBorderWidth(bwArray[1]);
      this._setStyleAttr(DvtCSSStyle.BORDER_LEFT_WIDTH, bWidth);
      this._setStyleAttr(DvtCSSStyle.BORDER_RIGHT_WIDTH, bWidth);
      this._setStyleAttr(DvtCSSStyle.BORDER_BOTTOM_WIDTH, DvtCSSStyle._getBorderWidth(bwArray[2]));
      break;

    case 4:
      this._setStyleAttr(DvtCSSStyle.BORDER_TOP_WIDTH, DvtCSSStyle._getBorderWidth(bwArray[0]));
      this._setStyleAttr(DvtCSSStyle.BORDER_RIGHT_WIDTH, DvtCSSStyle._getBorderWidth(bwArray[1]));
      this._setStyleAttr(DvtCSSStyle.BORDER_BOTTOM_WIDTH, DvtCSSStyle._getBorderWidth(bwArray[2]));
      this._setStyleAttr(DvtCSSStyle.BORDER_LEFT_WIDTH, DvtCSSStyle._getBorderWidth(bwArray[3]));
      break;

    case 0:
    default :
      break;
  }
};


/**
 * @param val contain only one borderWidth value
 * @private
 */
DvtCSSStyle._getBorderWidth = function(val) {

  var bwidth = DvtStringUtils.trim(val);
  var specSize = DvtCSSStyle._NAMED_WIDTH_MAP[bwidth];
  if (!specSize) {
    specSize = isNaN(parseFloat(bwidth)) ? '0px' : bwidth;
  }

  return specSize;
};


/**
 * @param {string} key The border-*** attribute, such as border-top.
 * @param {string} val The value of the border property, such as "#797975 1px solid".  Accepts width, style, and color
 *                     in any order, separated by spaces.
 * @private
 */
DvtCSSStyle.prototype._setBorderSide = function(key, val) {
  var borderArray = val.split(' ');
  var borderVal = null;
  var noBorder = false;
  var key1;

  for (var i = 0; i < borderArray.length; i++) {
    borderVal = borderArray[i];
    key1 = key;

    //rgb border color
    if (borderVal.indexOf('rgb') == 0) {
      for (var k = i + 1; k < borderArray.length; k++) {
        borderVal += borderArray[k];
        i++;
        if (borderArray[k].indexOf(')') != - 1)
          break;
      }
      if (!DvtStringUtils.endsWith(key, '-' + DvtCSSStyle.COLOR))
        key1 = key + '-' + DvtCSSStyle.COLOR;
      this._setStyleAttr(key1, borderVal);
    }
    //border color
    else if (DvtCSSStyle._isColorValue(borderVal)) {
      if (!DvtStringUtils.endsWith(key, '-' + DvtCSSStyle.COLOR))
        key1 = key + '-' + DvtCSSStyle.COLOR;
      this._setStyleAttr(key1, DvtCSSStyle._parseHexColor(borderVal));
    }
    //border width
    else if (DvtCSSStyle._isBorderWidthValue(borderVal)) {
      if (!DvtStringUtils.endsWith(key, '-' + DvtCSSStyle.WIDTH))
        key1 = key + '-' + DvtCSSStyle.WIDTH;
      this._setStyleAttr(key1, borderVal);
    }
    //we don't currently handle border style, but if it's none, set width=0
    else if (val == 'none')
      noBorder = true;
  }

  if (noBorder) {
    this._setStyleAttr(key + '-' + DvtCSSStyle.WIDTH, '0');
  }
};


/**
 * Computes and returns the border width for the specified side.
 * @param {string} key The border-***-width attribute, such as border-top-width.
 * @param {number}
 */
DvtCSSStyle.prototype.getBorderSideWidth = function(key) {
  return this._getSideWidth(key, DvtCSSStyle.BORDER_WIDTH);
};


/**
 * Computes and returns the margin for the specified side.
 * @param {string} key The margin-*** attribute, such as margin-top.
 * @param {number}
 */
DvtCSSStyle.prototype.getMargin = function(key) {
  return this._getSideWidth(key, DvtCSSStyle.MARGIN);
};


/**
 * Computes and returns the padding for the specified side.
 * @param {string} key The padding-*** attribute, such as padding-top.
 * @param {number}
 */
DvtCSSStyle.prototype.getPadding = function(key) {
  return this._getSideWidth(key, DvtCSSStyle.PADDING);
};

DvtCSSStyle.prototype.getBorderWidth = function() {
  var bwidth = this.getStyle(DvtCSSStyle.BORDER_WIDTH);
  if (bwidth) {
    return DvtCSSStyle.toNumber(bwidth);
  }
  bwidth = this.getStyle(DvtCSSStyle.BORDER_TOP_WIDTH);
  if (bwidth) {
    return DvtCSSStyle.toNumber(bwidth);
  }
  bwidth = this.getStyle(DvtCSSStyle.BORDER_RIGHT_WIDTH);
  if (bwidth) {
    return DvtCSSStyle.toNumber(bwidth);
  }
  bwidth = this.getStyle(DvtCSSStyle.BORDER_BOTTOM_WIDTH);
  if (bwidth) {
    return DvtCSSStyle.toNumber(bwidth);
  }
  bwidth = this.getStyle(DvtCSSStyle.BORDER_LEFT_WIDTH);
  if (bwidth) {
    return DvtCSSStyle.toNumber(bwidth);
  }
  return 0;
};

// width and height
DvtCSSStyle.prototype.getWidth = function() {
  return this.getStyle(DvtCSSStyle.WIDTH);
};

DvtCSSStyle.prototype.getHeight = function() {
  return this.getStyle(DvtCSSStyle.HEIGHT);
};


/**
 * Convert a string to a number
 *
 * @return a number or zero if not a number or value is not specified
 */
DvtCSSStyle.toNumber = function(val) {
  if (val) {
    val = parseFloat(val);
    return isNaN(val) ? 0 : val;
  }
  return 0;
};


/**
 * Determine if the given style can be inherited.
 *
 * @return true if the style can be inherited from an ancestor,
 *         false if not
 */
DvtCSSStyle.isInheritable = function(key) {
  switch (key) {
    case DvtCSSStyle.COLOR:
    case DvtCSSStyle.FONT_FAMILY:
    case DvtCSSStyle.FONT_SIZE:
    case DvtCSSStyle.FONT_STYLE:
    case DvtCSSStyle.FONT_WEIGHT:
    case DvtCSSStyle.TEXT_ALIGN:
      return true;

    default :
      return false;
  }
};

// val is a string contains up to 4 rgb colors, ex:
// border-color: rgb(221, 221, 216) rgb(185, 185, 132) rgb(121, 121, 117)
DvtCSSStyle.prototype._setBorderColorShorthand = function(key, val) {
  var bcArray = DvtCSSStyle._parseBorderColorString(key, val);
  var bcolor;

  switch (bcArray.length) {
    case 1:
      this._setStyleAttr(key, bcArray[0]);
      this._setStyleAttr(DvtCSSStyle.BORDER_TOP_COLOR, null);
      this._setStyleAttr(DvtCSSStyle.BORDER_BOTTOM_COLOR, null);
      this._setStyleAttr(DvtCSSStyle.BORDER_RIGHT_COLOR, null);
      this._setStyleAttr(DvtCSSStyle.BORDER_LEFT_COLOR, null);
      break;

    case 2:
      bcolor = bcArray[0];
      this._setStyleAttr(DvtCSSStyle.BORDER_TOP_COLOR, bcolor);
      this._setStyleAttr(DvtCSSStyle.BORDER_BOTTOM_COLOR, bcolor);

      bcolor = bcArray[1];
      this._setStyleAttr(DvtCSSStyle.BORDER_LEFT_COLOR, bcolor);
      this._setStyleAttr(DvtCSSStyle.BORDER_RIGHT_COLOR, bcolor);
      break;

    case 3:
      this._setStyleAttr(DvtCSSStyle.BORDER_TOP_COLOR, bcArray[0]);
      bcolor = bcArray[1];
      this._setStyleAttr(DvtCSSStyle.BORDER_LEFT_COLOR, bcolor);
      this._setStyleAttr(DvtCSSStyle.BORDER_RIGHT_COLOR, bcolor);
      this._setStyleAttr(DvtCSSStyle.BORDER_BOTTOM_COLOR, bcArray[2]);
      break;

    case 4:
      this._setStyleAttr(DvtCSSStyle.BORDER_TOP_COLOR, bcArray[0]);
      this._setStyleAttr(DvtCSSStyle.BORDER_RIGHT_COLOR, bcArray[1]);
      this._setStyleAttr(DvtCSSStyle.BORDER_BOTTOM_COLOR, bcArray[2]);
      this._setStyleAttr(DvtCSSStyle.BORDER_LEFT_COLOR, bcArray[3]);
      break;

    case 0:
    default :
      break;
  }
};

// val is a string contains up to 4 padding sizes, ex:
// padding: 2px 9px 1px
DvtCSSStyle.prototype._setPaddingShorthand = function(key, val) {
  var padArray = val.split(' ');
  var padding = null;

  switch (padArray.length) {
    case 1:
      this._setStyleAttr(key, this._getPercent(padArray[0]));
      this._setStyleAttr(DvtCSSStyle.PADDING_TOP, null);
      this._setStyleAttr(DvtCSSStyle.PADDING_BOTTOM, null);
      this._setStyleAttr(DvtCSSStyle.PADDING_RIGHT, null);
      this._setStyleAttr(DvtCSSStyle.PADDING_LEFT, null);
      break;

    case 2:
      padding = this._getPercent(padArray[0]);
      this._setStyleAttr(DvtCSSStyle.PADDING_TOP, padding);
      this._setStyleAttr(DvtCSSStyle.PADDING_BOTTOM, padding);

      padding = this._getPercent(padArray[1]);
      this._setStyleAttr(DvtCSSStyle.PADDING_LEFT, padding);
      this._setStyleAttr(DvtCSSStyle.PADDING_RIGHT, padding);
      break;

    case 3:
      this._setStyleAttr(DvtCSSStyle.PADDING_TOP, this._getPercent(padArray[0]));
      padding = this._getPercent(padArray[1]);
      this._setStyleAttr(DvtCSSStyle.PADDING_LEFT, padding);
      this._setStyleAttr(DvtCSSStyle.PADDING_RIGHT, padding);
      this._setStyleAttr(DvtCSSStyle.PADDING_BOTTOM, this._getPercent(padArray[2]));
      break;

    case 4:
      this._setStyleAttr(DvtCSSStyle.PADDING_TOP, this._getPercent(padArray[0]));
      this._setStyleAttr(DvtCSSStyle.PADDING_RIGHT, this._getPercent(padArray[1]));
      this._setStyleAttr(DvtCSSStyle.PADDING_BOTTOM, this._getPercent(padArray[2]));
      this._setStyleAttr(DvtCSSStyle.PADDING_LEFT, this._getPercent(padArray[3]));
      break;

    case 0:
    default :
      break;
  }
};

// val is a string contains up to 4 margin sizes, ex:
// margin: 2px 9px 1px
//TODO: margin can be negative numbers and in CM
DvtCSSStyle.prototype._setMarginShorthand = function(key, val) {
  var padArray = val.split(' ');
  var margin = null;

  switch (padArray.length) {
    case 1:
      this._setStyleAttr(key, this._getMargin(padArray[0]));
      this._setStyleAttr(DvtCSSStyle.MARGIN_TOP, null);
      this._setStyleAttr(DvtCSSStyle.MARGIN_BOTTOM, null);
      this._setStyleAttr(DvtCSSStyle.MARGIN_RIGHT, null);
      this._setStyleAttr(DvtCSSStyle.MARGIN_LEFT, null);
      break;

    case 2:
      margin = this._getMargin(padArray[0]);
      this._setStyleAttr(DvtCSSStyle.MARGIN_TOP, margin);
      this._setStyleAttr(DvtCSSStyle.MARGIN_BOTTOM, margin);

      margin = this._getMargin(padArray[1]);
      this._setStyleAttr(DvtCSSStyle.MARGIN_LEFT, margin);
      this._setStyleAttr(DvtCSSStyle.MARGIN_RIGHT, margin);
      break;

    case 3:
      this._setStyleAttr(DvtCSSStyle.MARGIN_TOP, this._getMargin(padArray[0]));
      margin = this._getMargin(padArray[1]);
      this._setStyleAttr(DvtCSSStyle.MARGIN_LEFT, margin);
      this._setStyleAttr(DvtCSSStyle.MARGIN_RIGHT, margin);
      this._setStyleAttr(DvtCSSStyle.MARGIN_BOTTOM, this._getMargin(padArray[2]));
      break;

    case 4:
      this._setStyleAttr(DvtCSSStyle.MARGIN_TOP, this._getMargin(padArray[0]));
      this._setStyleAttr(DvtCSSStyle.MARGIN_RIGHT, this._getMargin(padArray[1]));
      this._setStyleAttr(DvtCSSStyle.MARGIN_BOTTOM, this._getMargin(padArray[2]));
      this._setStyleAttr(DvtCSSStyle.MARGIN_LEFT, this._getMargin(padArray[3]));
      break;

    case 0:
    default :
      break;
  }
};

//TODO: auto size defined by browsers
DvtCSSStyle.prototype._getMargin = function(val) {
  var margin = DvtStringUtils.trim(val);
  if (DvtCSSStyle.AUTO == margin)
    return DvtCSSStyle.AUTO_MARGIN;
  else
    return this._getPercent(margin);
};

// TODO: No idea how this has anything to do with percentages
DvtCSSStyle.prototype._getPercent = function(val) {
  return DvtStringUtils.trim(val);
};

DvtCSSStyle.prototype._setBorderShorthand = function(key, val) {
  /*
   * "border" Shorthand property can specify width, style, and color
   * separated by spaces, which are applied to all 4 border sides
   * ex: "1px solid rgb(185, 185, 180)"
   */
  var borderArray = val.split(' ');
  var borderVal = null;
  var noBorder = false;

  for (var i = 0; i < borderArray.length; i++) {
    borderVal = borderArray[i];

    //rgb border color
    if (borderVal.indexOf('rgb') == 0) {
      for (var k = i + 1; k < borderArray.length; k++) {
        borderVal += borderArray[k];
        i++;
        if (borderArray[k].indexOf(')') != - 1)
          break;
      }
      this._setBorderColorShorthand(DvtCSSStyle.BORDER_COLOR, borderVal);
    }

    //border color
    else if (DvtCSSStyle._isColorValue(borderVal))
      this._setBorderColorShorthand(DvtCSSStyle.BORDER_COLOR, borderVal);

    //border width
    else if (DvtCSSStyle._isBorderWidthValue(borderVal))
      this._setBorderWidthShorthand(DvtCSSStyle.BORDER_WIDTH, borderVal);

    //we don't currently handle border style, but if it's none, set width=0
    else if (val == 'none')
      noBorder = true;

  }

  if (noBorder) {
    this._setBorderWidthShorthand(DvtCSSStyle.BORDER_WIDTH, '0');
  }
};

DvtCSSStyle._getBorderRadius = function(val) {

  var radii = DvtStringUtils.trim(val);
  return isNaN(parseFloat(radii)) ? '0px' : radii;
};

// - border-radius css property not supported when used inside <dvt:node>
DvtCSSStyle.prototype._setBorderRadius = function(key, val) {
  /*
   * border-radius: 1-4 length|% / 1-4 length|%;
   *
   * Note: order of 4 values: top-left, top-right, bottom-right, bottom-left.
   * If bottom-left is omitted it is the same as top-right. If bottom-right is omitted
   * it is the same as top-left.
   */
  var brArray = val.split('/');
  if (brArray[0] == null) {
    this._setStyleAttr(key, '0px');
    return;
  }
  // horizontal radii
  var brHorzArr = DvtStringUtils.trim(brArray[0]).split(' ');
  var bRadius = null;

  switch (brHorzArr.length) {
    case 1:
    default :
      this._setStyleAttr(key, DvtCSSStyle._getBorderRadius(brHorzArr[0]));
      // remove other border radius
      this._setStyleAttr(DvtCSSStyle.BORDER_TOP_LEFT_RADIUS, null);
      this._setStyleAttr(DvtCSSStyle.BORDER_TOP_RIGHT_RADIUS, null);
      this._setStyleAttr(DvtCSSStyle.BORDER_BOTTOM_RIGHT_RADIUS, null);
      this._setStyleAttr(DvtCSSStyle.BORDER_BOTTOM_LEFT_RADIUS, null);
      break;

      /*
 * only support 4 corner with the same radius

  case 2:
    bRadius = DvtCSSStyle._getBorderRadius(brHorzArr[0]);
    this._setStyleAttr(DvtCSSStyle.BORDER_TOP_LEFT_RADIUS, bRadius);
    this._setStyleAttr(DvtCSSStyle.BORDER_BOTTOM_RIGHT_RADIUS, bRadius);

    bRadius = DvtCSSStyle._getBorderRadius(brHorzArr[1]);
    this._setStyleAttr(DvtCSSStyle.BORDER_TOP_RIGHT_RADIUS, bRadius);
    this._setStyleAttr(DvtCSSStyle.BORDER_BOTTOM_LEFT_RADIUS, bRadius);
    break;

  case 3:
    this._setStyleAttr(DvtCSSStyle.BORDER_TOP_LEFT_RADIUS, DvtCSSStyle._getBorderRadius(brHorzArr[0]));
    bRadius = DvtCSSStyle._getBorderRadius(brHorzArr[1]);
    this._setStyleAttr(DvtCSSStyle.BORDER_TOP_RIGHT_RADIUS, bRadius);
    this._setStyleAttr(DvtCSSStyle.BORDER_BOTTOM_RIGHT_RADIUS, DvtCSSStyle._getBorderRadius(brHorzArr[2]));
    this._setStyleAttr(DvtCSSStyle.BORDER_BOTTOM_LEFT_RADIUS, bRadius);
    break;

  case 4:
    this._setStyleAttr(DvtCSSStyle.BORDER_TOP_LEFT_RADIUS, DvtCSSStyle._getBorderRadius(brHorzArr[0]));
    this._setStyleAttr(DvtCSSStyle.BORDER_TOP_RIGHT_RADIUS, DvtCSSStyle._getBorderRadius(brHorzArr[1]));
    this._setStyleAttr(DvtCSSStyle.BORDER_BOTTOM_RIGHT_RADIUS, DvtCSSStyle._getBorderRadius(brHorzArr[2]));
    this._setStyleAttr(DvtCSSStyle.BORDER_BOTTOM_LEFT_RADIUS, DvtCSSStyle._getBorderRadius(brHorzArr[3]));
    break;

  case 0:
  default:
    break;

      */
  }

  // vertical radii
  if (brArray.length == 2 && brArray[1] != null) {
    var brVertArr = DvtStringUtils.trim(brArray[1]).split(' ');

    switch (brVertArr.length) {
      case 1:
        if (this.getStyle(key))
          this._setStyleAttr(key, this.getStyle(key) + ' ' + DvtCSSStyle._getBorderRadius(brVertArr[0]));
        else
          this._setStyleAttr(key, DvtCSSStyle._getBorderRadius(brVertArr[0]));
        break;

      case 0:
      default :
        break;
    }
  }

};


/**
 * Returns border radius as a number. If the radius were not set for this style, returns 0
 * @return {number} border radius
 */
DvtCSSStyle.prototype.getBorderRadius = function() {
  if (this.getStyle(DvtCSSStyle.BORDER_RADIUS) !== 'undefined' && this.getStyle(DvtCSSStyle.BORDER_RADIUS) !== null)
    return DvtCSSStyle.toNumber(this.getStyle(DvtCSSStyle.BORDER_RADIUS));
  else
    return 0;
};

DvtCSSStyle.prototype._setBackgroundRepeat = function(key, val) {
  var a = val.split(' ');

  //  - buttons look broken on safari
  // in Safari button -> background-repeat: repeat no-repeat
  if (a.length == 2) {
    // both repeat or no_repeat
    if (a[0] == a[1])
      val = a[0];
    else if (a[0] == DvtCSSStyle.REPEAT && a[1] == DvtCSSStyle.NO_REPEAT)
      val = DvtCSSStyle.REPEAT_X;
    if (a[0] == DvtCSSStyle.NO_REPEAT && a[1] == DvtCSSStyle.REPEAT)
      val = DvtCSSStyle.REPEAT_Y;
  }
  this._setStyleAttr(key, val);
};


/**
 * set a color attribute
 *
 * @param {string} key color attribute
 * @param {string} val is a string in color keyword or a numeric value in #AARRGGBB or #RRGGBB format
 */
DvtCSSStyle.prototype._setColorAttr = function(key, val) {
  // TODO : This entire function seems unnecessary
  var color = DvtCSSStyle._toColorVal(val);
  if (color) {
    this._setStyleAttr(key, color);
  }
  else if (DvtCSSStyle._isColorValue(val)) {
    this._setStyleAttr(key, val);
  }
};


/**
 * If the given string is a color keyword, return its color value
 *
 * @param s string that may specify a color keyword
 * @return color value if the string is a color keyword.
 */
DvtCSSStyle._toColorVal = function(val) {
  // TODO : This entire function seems unnecessary
  val = DvtStringUtils.trim(val);

  // color name?
  var color = DvtCSSStyle._NAMED_COLOR_MAP[val.toLowerCase()];
  if (color) {
    return color;
  }
  return null;
};

DvtCSSStyle.prototype.setColor = function(key, val) {
  this._setStyleAttr(key, val);
};


/**
 * @private
 * @param value a number with unit
 */
DvtCSSStyle._isValueInEM = function(value) {
  return value.toLowerCase().indexOf('em') >= 0;
};


/**
 * @private
 * @param key its value is a number with unit
 * @param fontSize (string) a number with unit
 *
 */
DvtCSSStyle.prototype._resolveEMx = function(key, fontSize) {
  var value = this.getStyle(key);

  if (value && DvtCSSStyle._isValueInEM(value)) {
    // if value is in EM unit, convert it to px so value no longer in EM
    if (fontSize) {
      this._setStyleAttr(key, String(Math.round(parseFloat(value) * parseFloat(fontSize))) + 'px');
      return true;
    }
    return false;
  }
  return true;
};


/**
 * @return font size if is a font size is specified and not in relative length unit(em)
 * otherwise return null
 */
DvtCSSStyle.prototype.getAbsoluteFontSize = function() {
  // get the current font size
  var fontSize = this.getFontSize();
  if (fontSize && !DvtCSSStyle._isValueInEM(fontSize)) {
    return fontSize;
  }
  return null;
};


/**
 * @param {string} fontSize to be used in resolving em if no fontSize specified in this css style
 */
DvtCSSStyle.prototype.resolveEM = function(fontSize) {

  // try to resolved em unit with the current font size
  var myFontSize = this.getFontSize();

  if (myFontSize) {
    // FONT_SIZE value is in "em"
    if (DvtCSSStyle._isValueInEM(myFontSize)) {
      // resolve fontSize and use this new fontSize value
      this._resolveEMx(DvtCSSStyle.FONT_SIZE, fontSize);
    }
    // FONT_SIZE value is NOT in "em", use new fontSize value
    else {
      fontSize = myFontSize;
    }
  }

  var numList = DvtCSSStyle._numericAttrsList;
  for (var i = 0; i < numList.length; i++) {
    if (!this._resolveEMx(numList[i], fontSize)) {
      return false;
    }
  }
  return true;
};


/**
 * return a copy of this object
 */
DvtCSSStyle.prototype.clone = function() {
  var ret = new DvtCSSStyle();
  for (var key in this._styleMap) {
    ret._setStyleAttr(key, this.getStyle(key));
  }
  return ret;
};


/**
 * Merge the properties of the given CSSStyle into this one.
 *
 * @param style properties to merge into this CSSStyle
 */
DvtCSSStyle.prototype.merge = function(style) {
  if (style) {
    for (var key in style._styleMap) {
      this._setStyleAttr(key, style.getStyle(key));
    }
  }
  return this;
};


/**
 * Merge the properties of the given CSSStyle under this one.
 *
 * @param style properties to merge under this CSSStyle
 */
DvtCSSStyle.prototype.mergeUnder = function(style) {
  if (style) {
    for (var key in style._styleMap) {
      if (!this.getStyle(key))
        this._setStyleAttr(key, style.getStyle(key));
    }
  }
  return this;
};


/**
 * Returns a inline style representation of the style attributes contained in this DvtCSSStyle.
 * @return {string}
 */
DvtCSSStyle.prototype.toString = function() {
  var strBuf = '';
  for (var key in this._styleMap) {
    strBuf += key + ':' + this.getStyle(key) + '; ';
  }
  return strBuf;
};

DvtCSSStyle.prototype.getBackgroundImage = function() {
  var ret = this.getStyle(DvtCSSStyle.BACKGROUND_IMAGE);

  var startx;
  var endx;

  if (ret && (ret instanceof DvtCSSGradient)) {
    return ret;
  }

  //strip off the 'url(' and ')'
  if (ret) {
    startx = ret.indexOf('url(');
    endx = ret.lastIndexOf(')');
    if ((startx == 0) && (endx == (ret.length - 1))) {
      ret = ret.substring(4, endx);
    }
  }

  //strip off single or double quotes
  if (ret) {
    startx = ret.indexOf(DvtCSSStyle._SINGLE_QUOTE);
    endx = ret.lastIndexOf(DvtCSSStyle._SINGLE_QUOTE);
    if ((startx == 0) && (endx == (ret.length - 1))) {
      ret = ret.substring(1, endx);
    }
    else {
      startx = ret.indexOf(DvtCSSStyle._DOUBLE_QUOTE);
      endx = ret.lastIndexOf(DvtCSSStyle._DOUBLE_QUOTE);
      if ((startx == 0) && (endx == (ret.length - 1))) {
        ret = ret.substring(1, endx);
      }
    }
  }

  return ret;
};


/**
 * Determine if the given string specifies a color value.
 *
 * @param s string that may specify a color value
 *
 * @return true if the string specifies a color value, false otherwise
 */
DvtCSSStyle._isColorValue = function(val) {
  val = DvtStringUtils.trim(val);

  if (val.indexOf('rgb') == 0 || val.indexOf('#') == 0)
    return true;

  // color name?
  var color = DvtCSSStyle._NAMED_COLOR_MAP[val.toLowerCase()];
  if (color) {
    return true;
  }
  return false;
};


/**
 * @private
 * #param val contain only one borderWidth value
 */
DvtCSSStyle._isBorderWidthValue = function(val) {

  var bwidth = DvtStringUtils.trim(val);
  if (DvtCSSStyle._NAMED_WIDTH_MAP[bwidth])
    return true;

  return !isNaN(parseFloat(bwidth));
};

// val is a string contains up to 4 rgb colors, ex:
// border-color: rgb(221, 221, 216) rgb(185, 185, 132) rgb(121, 121, 117)
DvtCSSStyle._parseBorderColorString = function(key, val) {

  var val = DvtStringUtils.trim(val);
  var cArray = [];
  while (val != null && val.length > 0) {
    val = DvtCSSStyle.parseBorderColor(val, cArray);
  }
  return cArray;
};

DvtCSSStyle.parseBorderColor = function(val, cArray) {
  val = DvtStringUtils.trim(val);
  var strLen = val.length;
  var endIndex = - 1;
  var colorObj;

  if (!val) {
    return val;
  }
  // rgb format?
  if (val.indexOf('rgb') == 0) {
    endIndex = val.indexOf(')') + 1;
    colorObj = val.slice(0, endIndex);
  }

  // color name?
  else {
    endIndex = val.indexOf(' ');
    if (endIndex == - 1)
      endIndex = strLen;
    var singleColor = val.slice(0, endIndex);

    colorObj = DvtCSSStyle._toColorVal(singleColor);

    // hex color
    if (!colorObj) {
      colorObj = DvtCSSStyle._parseHexColor(singleColor);
    }
  }

  if (colorObj) {
    cArray.push(colorObj);
    val = val.slice(endIndex);
  }
  return val;
};

// val is a string in #AARRGGBB or #RRGGBB format
DvtCSSStyle._parseHexColor = function(s) {
  var n;
  var colorObj;
  if (s && s.length > 0) {
    var bHasAlpha = (s.length > 7);
    n = Number('0x' + s.substring(1));
    if (isNaN(n)) {
      n = 0;// assume black if we didn't get a valid numeric string
    }
    if (bHasAlpha) {
      var x = '#' + s.substring(3);
      colorObj = x;
    }
    else {
      colorObj = s;
    }
  }
  return colorObj;
};

// get padding-top, padding-right, padding-bottom and padding-left
// get border-top-width, border-right-width, border-bottom-width and border-left=width
// get margin-top, margin-right, margin-bottom and margin-left
//TODO: percent
DvtCSSStyle.prototype._getSideWidth = function(key, shortKey) {
  var side = this.getStyle(key);
  if (!side) {
    side = this.getStyle(shortKey);
  }
  return DvtCSSStyle.toNumber(side);
};

DvtCSSStyle.prototype.getFontSize = function() {
  return this.getStyle(DvtCSSStyle.FONT_SIZE);
};

// Returns a CSSStyle object as a merge of the array
DvtCSSStyle.mergeStyles = function(styleArray) {
  var style = new DvtCSSStyle();
  if (styleArray) {
    for (var i = 0; i < styleArray.length; i++) {
      style.merge(styleArray[i]);
    }
  }
  return style;
};


/**
 * Returns true if this object does not contain any style properties.
 * @return {boolean}
 */
DvtCSSStyle.prototype.isEmpty = function() {
  for (var key in this._styleMap) {
    return false;
  }
  return true;
};


/**
 * Returns true if the text is set to align end.  Takes reading direction into account when dealing with values of
 * "left" and "right".
 * @param {DvtContext} context
 * @return {boolean}
 */
DvtCSSStyle.prototype.isTextAlignEnd = function(context) {
  var align = this.getStyle(DvtCSSStyle.TEXT_ALIGN);
  if (align == 'end')
    return true;

  if (DvtAgent.isRightToLeft(context)) {
    return (align == 'left');
  }
  else {
    return (align == 'right');
  }
};

DvtCSSStyle.prototype.parseBackgroundPosition = function() {
  var s = this.getStyle(DvtCSSStyle.BACKGROUND_POSITION);
  if (!s)
    return null;

  var sPosArray = s.split(' ');
  if (sPosArray.length == 0)
    return ['0%', '0%'];

  var posArray = ['50%', '50%'];
  var position;
  if (sPosArray.length > 0) {
    position = DvtStringUtils.trim(sPosArray[0]);
    if (position == 'left') {
      posArray[0] = '0%';
    }
    else if (position == 'right') {
      posArray[0] = '100%';
    }
    else if (position == 'top') {
      posArray[1] = '0%';
    }
    else if (position == 'bottom') {
      posArray[1] = '100%';
    }
    // percent
    else if (position != 'center') {
      posArray[0] = position;
    }
  }
  if (sPosArray.length > 1) {
    position = DvtStringUtils.trim(sPosArray[1]);
    if (position == 'left') {
      posArray[0] = '0%';
    }
    else if (position == 'right') {
      posArray[0] = '100%';
    }
    else if (position == 'top') {
      posArray[1] = '0%';
    }
    else if (position == 'bottom') {
      posArray[1] = '100%';
    }
    // percent
    else if (position != 'center') {
      posArray[1] = position;
    }

  }
  return posArray;
};

DvtCSSStyle.prototype.getIconUrl = function() {
  return this.getStyle(DvtCSSStyle.CONTENT);
};

DvtCSSStyle.prototype.setIconUrl = function(url) {
  this._setStyleAttr(DvtCSSStyle.CONTENT, url);
};


/**
 * Returns a string that can be used as a hash code for caching text measurements.  Includes all attributes which can
 * affect the size of text.
 * @return {string}
 */
DvtCSSStyle.prototype.hashCodeForTextMeasurement = function() {
  // Use a combination of all attrs that affect dimensions calculations.
  var ret = '';
  if (this.getStyle(DvtCSSStyle.FONT_FAMILY))
    ret += this.getStyle(DvtCSSStyle.FONT_FAMILY);
  if (this.getStyle(DvtCSSStyle.FONT_SIZE))
    ret += this.getStyle(DvtCSSStyle.FONT_SIZE);
  if (this.getStyle(DvtCSSStyle.FONT_STYLE))
    ret += this.getStyle(DvtCSSStyle.FONT_STYLE);
  if (this.getStyle(DvtCSSStyle.FONT_WEIGHT))
    ret += this.getStyle(DvtCSSStyle.FONT_WEIGHT);

  return ret;
};

/**
 * Returns true if the specified skin is Alta or was developed after the Alta skin.
 * @param {string} skin
 * @return {boolean}
 */
DvtCSSStyle.afterSkinAlta = function(skin) {
  return skin != null && skin != DvtCSSStyle.SKIN_FUSION && skin != DvtCSSStyle.SKIN_SKYROS;
};
/**
 * Base class for JSON components.
 * @class
 * @constructor
 * @extends {DvtContainer}
 * @export
 */
var DvtBaseComponent = function() {
  // Components should implement newInstance factory methods instead of exposing contructors.
};

DvtObj.createSubclass(DvtBaseComponent, DvtContainer, 'DvtBaseComponent');


/**
 * Initializes the component.
 * @param {DvtContext} context The rendering context.
 * @param {string} callback The function that should be called to dispatch component events.
 * @param {object} callbackObj The optional object instance on which the callback function is defined.
 * @protected
 */
DvtBaseComponent.prototype.Init = function(context, callback, callbackObj) {
  DvtBaseComponent.superclass.Init.call(this, context);
  this._callback = callback;
  this._callbackObj = callbackObj;

  /**
   * Reference to the DvtBaseComponentDefaults instance for this component.
   * @type {DvtBaseComponentDefaults}
   * @protected
   */
  this.Defaults = null;

  /**
   * Reference to the options specifications for the component.
   * @protected
   */
  this.Options = null;
  /**
   * Reference to the component width.
   * @protected
   */
  this.Width = 0;
  /**
   * Reference to the component height.
   * @protected
   */
  this.Height = 0;
};


/**
 * Returns a copy of the default options for the specified skin.
 * @param {string} skin The skin whose defaults are being returned.
 * @return {object} The object containing defaults for this component.
 * @protected
 */
DvtBaseComponent.prototype.GetDefaults = function(skin) 
{
  // This function will work as long as this.Defaults is properly initialized.
  return this.Defaults ? this.Defaults.getDefaults(skin) : {};
};

/**
 * Returns the component description to be appended to the component's aria-label.
 * @return {string}
 * @protected
 */
DvtBaseComponent.prototype.GetComponentDescription = function() 
{
  // TODO: Subclass overrides will be removed in 1.1.1 once DvtBundle.getTranslation is cleaned up.
  return DvtBundle.getTranslation(this.getOptions(), 'componentName');
};

/**
 * Returns true if this is the root component.
 * @protected
 * @return {boolean}
 */
DvtBaseComponent.prototype.IsParentRoot = function() {
  return (this.getParent() == this.getCtx().getStage());
};

/**
 * Applies the component WAI-ARIA accessibility information if root component.
 * @protected
 */
DvtBaseComponent.prototype.UpdateAriaAttributes = function() {
  if (this.IsParentRoot()) {
    // Set up the aria role and label for this component for accessibility without deferring
    this.getCtx().setAriaRole('application');
    this.getCtx().setAriaLabel(DvtBundle.getTranslatedString(DvtBundle.UTIL_PREFIX, 'COLON_SEP_LIST',
        [DvtBundle.getTranslatedString(DvtBundle.UTIL_PREFIX, 'DATA_VISUALIZATION'), DvtStringUtils.processAriaLabel(this.GetComponentDescription())]));
  }
};

/**
 * Specifies the options specifications for this component.
 * @param {object} options The object containing options specifications for this component.
 * @protected
 */
DvtBaseComponent.prototype.SetOptions = function(options) {
  // Subclasses should override
};

/**
 * Returns the options specifications for this component.
 * @return {object} options The object containing options specifications for this component.
 */
DvtBaseComponent.prototype.getOptions = function() {
  if (!this.Options)
    this.Options = this.GetDefaults();

  return this.Options;
};

/**
 * Applies the specified options on top of the existing properties.  This function is only supported after the
 * component is initially rendered.
 * @param {object} options The object containing data and specifications for this component.
 * @export
 */
DvtBaseComponent.prototype.applyOptions = function(options) 
{
  if (!this.Options || !options)
    return;

  // Merge the new properties with the existing ones and set
  this.SetOptions(DvtJSONUtils.merge(options, this.Options));
};

/**
 * Renders the component with the specified options object.  If no options are supplied to a component
 * that has already been rendered, the component will be rerendered to the specified size.
 * @param {object} options The object containing data and specifications for this component.
 * @param {number} width The width of the component.
 * @param {number} height The height of the component.
 * @export
 */
DvtBaseComponent.prototype.render = function(options, width, height) 
{
  // Subclasses should override
};

/**
 * Fires the ready event to notify the component owner that the render is complete. Should be called by component when it's ready.
 * @protected
 */
DvtBaseComponent.prototype.RenderComplete = function() 
{
  this.dispatchEvent(new DvtReadyEvent());
};

/**
 * Returns the width of this component
 * @return {number}
 */
DvtBaseComponent.prototype.getWidth = function() 
{
  return this.Width;
};

/**
 * Returns the height of this component
 * @return {number}
 */
DvtBaseComponent.prototype.getHeight = function() 
{
  return this.Height;
};

/**
 * Highlights the specified categories.
 * @param {array} categories The array of categories whose data items will be highlighted. If null or empty, all
 *                           highlighting will be removed.
 * @export
 */
DvtBaseComponent.prototype.highlight = function(categories) {
  // subclasses should override if highlightedCategories is supported. Called from JET to avoid re-render.
};

/**
 * Selects the specified items.
 * @param {array} selection The array of selected items.
 * @export
 */
DvtBaseComponent.prototype.select = function(selection) {
  // subclasses should override if selection is supported. Called from JET to avoid re-render.
};

/**
 * Dispatches the event to the callback function.
 * @param {object} event The event to be dispatched.
 */
DvtBaseComponent.prototype.dispatchEvent = function(event) {
  DvtEventDispatcher.dispatchEvent(this._callback, this._callbackObj, this, event);
};

/**
 * @override
 */
DvtBaseComponent.prototype.getDimensionsWithStroke = function(targetCoordinateSpace) {
  return this.getDimensions(targetCoordinateSpace);
};

/**
 * Returns this component's event manager
 * @return {DvtEventManager}
 */
DvtBaseComponent.prototype.getEventManager = function() {
  // subclasses should override
  return null;
};

/**
 * Returns the element that is the current keyboard focus
 * @return {DOMElement}
 * @export
 */
DvtBaseComponent.prototype.getKeyboardFocus = function() {
  var eventManager = this.getEventManager();
  if (eventManager)
    return eventManager.getFocus() ? eventManager.getFocus().getTargetElem() : null;
  return null;
};
/**
 * Base class for JSON component defaults.
 * @class
 * @constructor
 * @extends {DvtObj}
 */
var DvtBaseComponentDefaults = function() {
  this.Init();
};

DvtObj.createSubclass(DvtBaseComponentDefaults, DvtObj, 'DvtBaseComponentDefaults');

/**
 * Defines the progression of skin names.
 * @const
 * @private
 */
DvtBaseComponentDefaults._SKINS = [DvtCSSStyle.SKIN_FUSION, DvtCSSStyle.SKIN_SKYROS, DvtCSSStyle.SKIN_ALTA, DvtCSSStyle.SKIN_NEXT];

/**
 * @param {object} defaultsMap A map of the skin names to the JSON of defaults.
 */
DvtBaseComponentDefaults.prototype.Init = function(defaultsMap) {
  this._defaults = defaultsMap ? defaultsMap : {};

  // Initialize the defaults cache on the class if it doesn't already exist. This is used to prevent excess cloning and
  // merging of the defaults layers.
  if (!this.constructor.defaultsCache)
    this.constructor.defaultsCache = {};
};


/**
 * Returns the base skin name for this component
 * @return {String} The base skin name for this component
 */
DvtBaseComponentDefaults.prototype.getBaseSkinName = function() 
{
  return DvtCSSStyle.SKIN_NEXT;
};


/**
 * Combines the user options with the defaults for the specified version.  Returns the combined options object.  This
 * object will contain internal attribute values and should be accessed in internal code only.
 * @param {object} userOptions The object containing options specifications for this component.
 * @return {object} The combined options object.
 */
DvtBaseComponentDefaults.prototype.calcOptions = function(userOptions) {
  var skin = userOptions ? userOptions['skin'] : null;
  var defaults = this.getDefaults(skin);

  // Use defaults if no overrides specified
  if (!userOptions)
    return defaults;
  else // Merge the options object with the defaults
    return DvtJSONUtils.merge(userOptions, defaults);
};


/**
 * Returns a copy of the default options for the specified skin.
 * @param {string} skin The skin whose defaults are being returned.
 * @return {object} The object containing defaults for this component.
 */
DvtBaseComponentDefaults.prototype.getDefaults = function(skin) {
  if (!skin)
    skin = this.getBaseSkinName();

  // Return the cached defaults if available.
  if (this.constructor.defaultsCache[skin])
    return DvtJSONUtils.clone(this.constructor.defaultsCache[skin]);
  else {
    // Note: Subsequent default objects are deltas on top of previous objects
    var skinIndex = Math.max(DvtArrayUtils.getIndex(DvtBaseComponentDefaults._SKINS, skin), 0);
    var ret = DvtJSONUtils.clone(this._defaults[DvtBaseComponentDefaults._SKINS[0]]);
    for (var i = 1; i <= skinIndex; i++) {
      ret = DvtJSONUtils.merge(this._defaults[DvtBaseComponentDefaults._SKINS[i]], ret);
    }

    // Add to the cache and return. We need to clone to ensure the cached copy isn't changed.
    this.constructor.defaultsCache[skin] = DvtJSONUtils.clone(ret);
    return ret;
  }
};
/**
 * Context Menu Item property bag.
 * @param {DvtContextMenuSelectEvent} event  The event to fire in response to selection of this menu item.
 * @param {string} text The text of the context menu item.
 * @param {boolean} disabled True if this context menu item is disabled.
 * @param {boolean} sepBefore True if a separator should appear before this menu item.
 * @class
 * @constructor
 */
var DvtContextMenuItem = function(event, text, disabled, sepBefore) {
  this._event = event;
  this._text = text;
  this._disabled = disabled;
  this._sepBefore = sepBefore;
};

DvtObj.createSubclass(DvtContextMenuItem, DvtObj, 'DvtContextMenuItem');


/**
 * Returns the event to fire in response to selection of this menu item.
 * @return {DvtContextMenuSelectEvent} The event to fire in response to selection of this menu item.
 */
DvtContextMenuItem.prototype.getEvent = function() {
  return this._event;
};


/**
 * Returns the text of the context menu item.
 * @return {string} The text of the context menu item.
 */
DvtContextMenuItem.prototype.getText = function() {
  return this._text;
};


/**
 * Returns true if this context menu item is disabled.
 * @return {string} True if this context menu item is disabled.
 */
DvtContextMenuItem.prototype.isDisabled = function() {
  return this._disabled;
};


/**
 * Returns true if a separator should appear before this menu item.
 * @return {string} True if a separator should appear before this menu item.
 */
DvtContextMenuItem.prototype.hasSeparatorBefore = function() {
  return this._sepBefore;
};
/**
 * ShowPopupBehavior property bag.
 * @param {string} popupId The id of the popup that will be fired.
 * @param {string} triggerType The interaction type that triggers the popup.
 * @param {string} alignId The id of the object that the popup will be aligned to.
 * @param {string} align  The alignment position for the popup.
 * @class
 * @constructor
 */
var DvtShowPopupBehavior = function(popupId, triggerType, alignId, align) {
  this._popupId = popupId;
  this._triggerType = triggerType;
  this._alignId = alignId;
  this._align = align;
};

DvtObj.createSubclass(DvtShowPopupBehavior, DvtObj, 'DvtShowPopupBehavior');

/** @const **/
DvtShowPopupBehavior.TRIGGER_TYPE_ACTION = 'action';
/** @const **/
DvtShowPopupBehavior.TRIGGER_TYPE_CLICK = 'click';
/** @const **/
DvtShowPopupBehavior.TRIGGER_TYPE_CONTEXT_MENU = 'contextMenu';
/** @const **/
DvtShowPopupBehavior.TRIGGER_TYPE_DBL_CLICK = 'dblClick';
/** @const **/
DvtShowPopupBehavior.TRIGGER_TYPE_MOUSE_HOVER = 'mouseHover';
/** @const **/
DvtShowPopupBehavior.TRIGGER_TYPE_MOUSE_OVER = 'mouseOver';
/** @const **/
DvtShowPopupBehavior.TRIGGER_TYPE_MOUSE_DOWN = 'mouseDown';
/** @const **/
DvtShowPopupBehavior.TRIGGER_TYPE_MOUSE_MOVE = 'mouseMove';
/** @const **/
DvtShowPopupBehavior.TRIGGER_TYPE_MOUSE_UP = 'mouseUp';
/** @const **/
DvtShowPopupBehavior.TRIGGER_TYPE_MOUSE_OUT = 'mouseOut';
/** @const **/
DvtShowPopupBehavior.TRIGGER_TYPE_KEY_DOWN = 'keyDown';
/** @const **/
DvtShowPopupBehavior.TRIGGER_TYPE_KEY_UP = 'keyUp';
/** @const **/
DvtShowPopupBehavior.TRIGGER_TYPE_KEY_PRESS = 'keyPress';
/** @const **/
DvtShowPopupBehavior.TRIGGER_TYPE_FOCUS = 'focus';
/** @const **/
DvtShowPopupBehavior.TRIGGER_TYPE_BLUR = 'blur';
/** @const **/
DvtShowPopupBehavior.ALIGN_AFTER_START = 'afterStart';
/** @const **/
DvtShowPopupBehavior.ALIGN_AFTER_END = 'afterEnd';
/** @const **/
DvtShowPopupBehavior.ALIGN_BEFORE_START = 'beforeStart';
/** @const **/
DvtShowPopupBehavior.ALIGN_BEFORE_END = 'beforeEnd';
/** @const **/
DvtShowPopupBehavior.ALIGN_END_AFTER = 'endAfter';
/** @const **/
DvtShowPopupBehavior.ALIGN_END_BEFORE = 'endBefore';
/** @const **/
DvtShowPopupBehavior.ALIGN_START_AFTER = 'startAfter';
/** @const **/
DvtShowPopupBehavior.ALIGN_START_BEFORE = 'startBefore';
/** @const **/
DvtShowPopupBehavior.ALIGN_OVERLAP = 'overlap';

/**
 * Creates an returns an array of DvtShowPopupBehavior objects using the specified array of options objects.
 * @param {array} optionsArray
 * @return {array}
 */
DvtShowPopupBehavior.createBehaviors = function(optionsArray) {
  var ret = [];
  for (var i = 0; i < optionsArray.length; i++) {
    var options = optionsArray[i];
    ret.push(DvtShowPopupBehavior.newInstance(options));
  }
  return ret;
};

/**
 * Creates and returns a new instance of DvtShowPopupBehavior with properties parsed from the specified options object.
 * @param {object} options A object sent from the BaseJsonWriter describing the popup behavior configuration.
 * @return {DvtShowPopupBehavior}
 */
DvtShowPopupBehavior.newInstance = function(options) {
  return new DvtShowPopupBehavior(options['popupId'], options['triggerType'], options['alignId'], options['align']);
};

/**
 * Returns the id of the popup that will be fired by this instance.
 * @return {string} The id of the popup that will be fired.
 */
DvtShowPopupBehavior.prototype.getPopupId = function() {
  return this._popupId;
};

/**
 * Returns the interaction type that triggers the popup.
 * @return {string} The the interaction type that triggers the popup.
 */
DvtShowPopupBehavior.prototype.getTriggerType = function() {
  return this._triggerType;
};


/**
 * Returns the id of the object that the popup will be aligned to.
 * @return {string} The id of the object that the popup will be aligned to.
 */
DvtShowPopupBehavior.prototype.getAlignId = function() {
  return this._alignId;
};


/**
 * Returns the alignment position for the popup.
 * @return {string} The alignment position for the popup.
 */
DvtShowPopupBehavior.prototype.getAlign = function() {
  return this._align;
};
/**
 * DvtClientBehavior property bag.
 * @param {string} type The type of client behavior
 * @param {string} triggerType The interaction type that triggers the client behavior.
 * @class
 * @constructor
 */
var DvtClientBehavior = function(type, triggerType) {
  this._type = type;
  this._triggerType = triggerType;
  this._props = {};
};

DvtObj.createSubclass(DvtClientBehavior, DvtObj, 'DvtClientBehavior');

DvtClientBehavior.TRIGGER_TYPE_ACTION = 'action';
DvtClientBehavior.TRIGGER_TYPE_CLICK = 'click';

DvtClientBehavior.TYPE_ROW_DISCLOSURE = 'DvtRowDisclosureBehavior';
DvtClientBehavior.TYPE_DRILL = 'DvtDrillBehavior';
DvtClientBehavior.TYPE_ISOLATE_LEVELS = 'DvtIsolateLevelsBehavior';
DvtClientBehavior.TYPE_RESTORE = 'DvtRestoreBehavior';


/**
 * Returns the type of client behavior
 * @return {string} The type of client behavior
 */
DvtClientBehavior.prototype.getType = function() {
  return this._type;
};


/**
 * Returns the interaction type that triggers the client behavior.
 * @return {string} The interaction type that triggers the client behavior.
 */
DvtClientBehavior.prototype.getTriggerType = function() {
  return this._triggerType;
};

DvtClientBehavior.prototype.setProperty = function(propName, propValue) {
  this._props[propName] = propValue;
};

DvtClientBehavior.prototype.getProperty = function(propName) {
  return this._props[propName];
};

DvtClientBehavior.prototype.getProperties = function() {
  return this._props;
};
/**
 * A minimalist scrollbar.
 * @class
 * @constructor
 * @extends {DvtContainer}
 * @param {DvtContext} context
 * @param {function=} callback The callback function
 * @param {object=} callbackObj The object that the callback function belongs to
 * @param {DvtDisplayable=} dragTarget The displayable to use for listening to drag events
 */
var DvtSimpleScrollbar = function(context, callback, callbackObj, dragTarget) {
  DvtSimpleScrollbar.superclass.Init.call(this, context);
  this._callback = callback;
  this._callbackObj = callbackObj;
  this._dragTarget = dragTarget;
};

DvtObj.createSubclass(DvtSimpleScrollbar, DvtContainer, 'DvtSimpleScrollbar');


/**
 * Renders the simple scrollbar at the specified size.
 * @param {object} options The object containing specifications for the scrollbar.
 * @param {number} width The width of the scrollbar.
 * @param {number} height The height of the scrollbar.
 */
DvtSimpleScrollbar.prototype.render = function(options, width, height) {
  this._width = width;
  this._height = height;

  // Global min/max
  this._globalMin = options['min'];
  this._globalMax = options['max'];

  this._isHoriz = options['isHorizontal'];
  this._isReversed = options['isReversed'];

  // Create background
  var background = new DvtRect(this.getCtx(), 0, 0, width, height);
  background.setSolidFill(options['backgroundColor']);
  background.setPixelHinting(true);
  this.addChild(background);

  // Create thumb
  this._thumb = new DvtRect(this.getCtx(), 0, 0, width, height);
  this._thumb.setSolidFill(options['color']);
  this._thumb.setPixelHinting(true);
  this.addChild(this._thumb);

  this._thumbMin = this._globalMin;
  this._thumbMax = this._globalMax;

  // Add hit area to make interaction with scrollbar easier
  var hitAreaSize = DvtAgent.isTouchDevice() ? 8 : 4;
  var hitArea = new DvtRect(this.getCtx(), -hitAreaSize, -hitAreaSize, this._width + 2 * hitAreaSize, this._height + 2 * hitAreaSize);
  hitArea.setInvisibleFill();
  this.addChild(hitArea);

  // Add event listeners
  var hasDragTarget = this._dragTarget != null;
  DvtSvgDocumentUtils.addDragListeners(hasDragTarget ? this._dragTarget : this, this._onDragStart, this._onDragMove, this._onDragEnd, this, !hasDragTarget);
  if (!DvtAgent.isTouchDevice() && !hasDragTarget) {
    this.addEvtListener(DvtMouseEvent.CLICK, this._onClick, false, this);
  }

  this._dragged = false; // flag to indicate mouse/touch down
};


/**
 * Sets the range of the scrollbar thumb.
 * @param {number} min The min value of the range.
 * @param {number} max The max value of the range.
 */
DvtSimpleScrollbar.prototype.setViewportRange = function(min, max) {
  // Get the coords and modify the thumb
  var minCoord = this._getCoord(min);
  var maxCoord = this._getCoord(max);

  if (this._isHoriz) {
    this._thumb.setX(Math.min(minCoord, maxCoord));
    this._thumb.setWidth(Math.abs(maxCoord - minCoord));
  } else {
    this._thumb.setY(Math.min(minCoord, maxCoord));
    this._thumb.setHeight(Math.abs(maxCoord - minCoord));
  }

  this._thumbMin = min;
  this._thumbMax = max;
};


/**
 * Gets the coordinate of a value.
 * @param {number} value
 * @return {number} coord
 * @private
 */
DvtSimpleScrollbar.prototype._getCoord = function(value) {
  var ratio = (value - this._globalMin) / (this._globalMax - this._globalMin);
  if (this._isReversed)
    ratio = 1 - ratio;

  if (this._isHoriz)
    return ratio * this._width;
  else
    return ratio * this._height;
};


/**
 * Gets the value from a coord.
 * @param {number} pageX
 * @param {number} pageY
 * @return {number} value
 * @private
 */
DvtSimpleScrollbar.prototype._getValue = function(pageX, pageY) {
  var coord = this.stageToLocal(this.getCtx().pageToStageCoords(pageX, pageY));
  var ratio = this._isHoriz ? coord.x / this._width : coord.y / this._height;
  if (this._isReversed)
    ratio = 1 - ratio;
  ratio = Math.min(Math.max(ratio, 0), 1); // bound the value within min/max
  return this._globalMin + ratio * (this._globalMax - this._globalMin);
};


/**
 * Handles click event.
 * @param {object} event
 * @private
 */
DvtSimpleScrollbar.prototype._onClick = function(event) {
  var val = this._getValue(event.pageX, event.pageY);
  if (val >= this._thumbMin && val <= this._thumbMax)
    return;

  var range = this._thumbMax - this._thumbMin;
  this._setViewportRange(val - range / 2, val + range / 2, DvtSimpleScrollbarEvent.SUBTYPE_END);
};


/**
 * Handles drag start.
 * @param {object} event
 * @return {boolean} True if the drag is initiated.
 * @private
 */
DvtSimpleScrollbar.prototype._onDragStart = function(event) {
  var val;
  if (event.touches) {
    if (event.touches.length != 1)
      return false;
    val = this._getValue(event.touches[0].pageX, event.touches[0].pageY);
  }
  else
    val = this._getValue(event.pageX, event.pageY);

  // Bypass thumb checking logic if we're scrolling on an outer container
  if (this._dragTarget || (val >= this._thumbMin && val <= this._thumbMax)) {
    this._dragged = true;
    this._prevVal = val;
    return true;
  }
  return false;
};


/**
 * Handles drag move.
 * @param {object} event
 * @private
 */
DvtSimpleScrollbar.prototype._onDragMove = function(event) {
  if (!this._dragged)
    return;

  var val;
  if (event.touches) {
    if (event.touches.length != 1)
      return;
    val = this._getValue(event.touches[0].pageX, event.touches[0].pageY);
  }
  else
    val = this._getValue(event.pageX, event.pageY);

  var dragOffset = val - this._prevVal;
  // If the drag target is not the scrollbar, the thumb should move in the opposite direction as the drag target
  if (this._dragTarget)
    dragOffset *= -1;

  this._setViewportRange(this._thumbMin + dragOffset, this._thumbMax + dragOffset, DvtSimpleScrollbarEvent.SUBTYPE_MOVE);
  this._prevVal = val;

  event.preventDefault();  // prevent scrolling the page
};


/**
 * Handles drag end.
 * @param {object} event
 * @private
 */
DvtSimpleScrollbar.prototype._onDragEnd = function(event) {
  if (!this._dragged)
    return;

  if (event.touches)
    this._setViewportRange(this._thumbMin, this._thumbMax, DvtSimpleScrollbarEvent.SUBTYPE_END);
  else {
    var val = this._getValue(event.pageX, event.pageY);
    var dragOffset = val - this._prevVal;
    this._setViewportRange(this._thumbMin + dragOffset, this._thumbMax + dragOffset, DvtSimpleScrollbarEvent.SUBTYPE_END);
  }

  this._dragged = false;
};


/**
 * Sets the range of the scrollbar thumb and fires an overview event.
 * @param {number} min The min value of the range.
 * @param {number} max The max value of the range.
 * @param {string} eventSubtype The subtype of the simple scrollbar event.
 * @private
 */
DvtSimpleScrollbar.prototype._setViewportRange = function(min, max, eventSubtype) {
  // Adjust min/max so that they are within globalMin/Max
  var range = max - min;
  if (min < this._globalMin) {
    min = this._globalMin;
    max = this._globalMin + range;
  }
  if (max > this._globalMax) {
    max = this._globalMax;
    min = this._globalMax - range;
  }

  this.setViewportRange(min, max);

  // Fire event
  if (this._callback) {
    var evt = new DvtSimpleScrollbarEvent(eventSubtype, min, max);
    this._callback.call(this._callbackObj, evt, this);
  }
};
/**
 * A minimalist scrollable container that can scroll either vertically or horizontally, but not both.
 * Use DvtScrollableContainer if scrolling in both directions is required.
 * @class
 * @constructor
 * @extends {DvtContainer}
 * @param {DvtContext} context
 * @param {number} width The width of the scrollable container
 * @param {number} height The height of the scrollable container
 * @param {boolean} isHorizontalScrolling True if this container scrolls horizontally
 */
var DvtSimpleScrollableContainer = function(context, width, height, isHorizontalScrolling) {
  DvtSimpleScrollableContainer.superclass.Init.call(this, context);
  this._contentSize = isHorizontalScrolling ? width : height;
  this._width = width;
  this._height = height;

  this._background = new DvtRect(context, 0, 0, width, height);
  this._background.setInvisibleFill();
  this.addChild(this._background);

  this._container = new DvtContainer(context);
  this.addChild(this._container);

  this._isHorizontalScrolling = isHorizontalScrolling;
  this._isScrollbarVisible = false;

  if (!DvtAgent.isTouchDevice()) {
    this.addEvtListener(DvtMouseEvent.MOUSEWHEEL, this._onMouseWheel, false, this);
  }
};

DvtObj.createSubclass(DvtSimpleScrollableContainer, DvtContainer, 'DvtSimpleScrollableContainer');

/** @private */
DvtSimpleScrollableContainer._SCROLLBAR_WIDTH = 3;
/** @private */
DvtSimpleScrollableContainer._SCROLLBAR_GAP = 2;

/**
 * Returns the scrolling pane of this container
 * @return {DvtContainer}
 */
DvtSimpleScrollableContainer.prototype.getScrollingPane = function() {
  return this._container;
};

/**
 * Prepares the content pane for  For performance, this component defers scrollbar rendering until this value is set
 * by the owning component.
 */
DvtSimpleScrollableContainer.prototype.prepareContentPane = function() {
  var size = this._container.getDimensions();
  if (this._isHorizontalScrolling)
    this._contentSize = size.w + size.x;
  else
    this._contentSize = size.h + size.y;

  // TODO 
  // - Support customization of scrollbar color, width, etc.

  if (this.hasScrollingContent()) {
    // add padding to bottom to match top when scrolling
    if (this._isHorizontalScrolling)
      this._contentSize += size.x;
    else
      this._contentSize += size.y;

    // create masks and scrollbars
    if (!this._maskContainer) {
      var dims = new DvtRectangle(0, 0, this._width, this._height);
      this._fadeTop = new DvtMask(new DvtLinearGradientFill(this._isHorizontalScrolling ? 0 : 270, ['#FFFFFF', '#FFFFFF'], [0, 1], [0, 0.1]), dims);
      this._fadeBottom = new DvtMask(new DvtLinearGradientFill(this._isHorizontalScrolling ? 180 : 90, ['#FFFFFF', '#FFFFFF'], [0, 1], [0, 0.1]), dims);
      this._fadeTopBottom = new DvtMask(new DvtLinearGradientFill(this._isHorizontalScrolling ? 180 : 90, ['#FFFFFF', '#FFFFFF', '#FFFFFF', '#FFFFFF'], [0, 1, 1, 0], [0, 0.1, 0.9, 1]), dims);

      this._maskContainer = new DvtContainer(this.getCtx());
      this.addChild(this._maskContainer);
      var clipPath = new DvtClipPath();
      clipPath.addRect(0, 0, this._width, this._height);
      this._container.setClipPath(clipPath);
      this._maskContainer.addChild(this._container);

      this._scrollbar = new DvtSimpleScrollbar(this.getCtx(), this._handleScrollbar, this, this);
      this._scrollbarTimer = new DvtTimer(this.getCtx(), 100, this._hideScrollbar, this);
    }

    this._maskContainer.setMask(this._fadeBottom);
    // Creates the scrollbar
    var scrollbarOptions = {
      'color' : '#9E9E9E',
      'backgroundColor' : '#F0F0F0',
      'isHorizontal' : this._isHorizontalScrolling,
      'isReversed' : false,
      'min' : 0,
      'max' : this._contentSize
    };
    if (this._isHorizontalScrolling) {
      this._scrollbar.render(scrollbarOptions, this._getScrollbarWidth(), DvtSimpleScrollableContainer._SCROLLBAR_WIDTH);
      this._scrollbar.setTranslate(DvtSimpleScrollableContainer._SCROLLBAR_GAP, this._height - (DvtSimpleScrollableContainer._SCROLLBAR_WIDTH + DvtSimpleScrollableContainer._SCROLLBAR_GAP));
    } else {
      this._scrollbar.render(scrollbarOptions, DvtSimpleScrollableContainer._SCROLLBAR_WIDTH, this._getScrollbarWidth());
      this._scrollbar.setTranslate(DvtAgent.isRightToLeft(this.getCtx()) ? DvtSimpleScrollableContainer._SCROLLBAR_GAP :
          this._width - (DvtSimpleScrollableContainer._SCROLLBAR_WIDTH + DvtSimpleScrollableContainer._SCROLLBAR_GAP),
          DvtSimpleScrollableContainer._SCROLLBAR_GAP);
    }
    this._scrollbar.setViewportRange(0, this._getAvailSize());
    // make scrollbars visible for tests
    if (!DvtAgent.isEnvironmentTest())
      this._scrollbar.setAlpha(0);
    this.addChild(this._scrollbar);
  } else {
    this.addChild(this._container);
    this.removeChild(this._maskContainer);
    this.removeChild(this._scrollbar);
  }
};

/**
 * Returns the scrollbar width after adjusting for any styling gaps
 * @return {number}
 * @private
 */
DvtSimpleScrollableContainer.prototype._getScrollbarWidth = function() {
  return (this._isHorizontalScrolling ? this._width : this._height) - 2 * DvtSimpleScrollableContainer._SCROLLBAR_GAP;
};

/**
 * Returns the current available size of the scrollable dimension for this container. The available width is returned
 * if horizontal scrolling is enabled and the available height otherwise.
 * @return {number}
 * @private
 */
DvtSimpleScrollableContainer.prototype._getAvailSize = function() {
  return (this._isHorizontalScrolling ? this._width : this._height);
};

/**
 * Fades out the scrollbar
 * @param {DvtBaseEvent} event
 * @private
 */
DvtSimpleScrollableContainer.prototype._hideScrollbar = function(event) {
  if (this._isScrollbarVisible) {
    this._isScrollbarVisible = false;
    this._scrollbarTimer.reset();
    this._fadeOutAnim = new DvtAnimFadeOut(this.getCtx(), this._scrollbar, 0.2);
    this._fadeOutAnim.play();
  }
};

/**
 * Displays the scrollbar and sets/resets a scrollbar fade out timer
 * @param {DvtBaseEvent} event
 * @private
 */
DvtSimpleScrollableContainer.prototype._showScrollbar = function(event) {
  if (!this._isScrollbarVisible) {
    if (this._fadeOutAnim) {
      this._fadeOutAnim.stop(true);
      this._fadeOutAnim = null;
    }
    this._scrollbar.setAlpha(1);
    this._isScrollbarVisible = true;
    this._scrollbarTimer.start();
  } else {
    this._scrollbarTimer.reset();
    this._scrollbarTimer.start();
  }
};

/**
 * Updates the masking fade effects to indicate scrollable regions
 * @param {number} translate The scrollbar translation
 * @private
 */
DvtSimpleScrollableContainer.prototype._updateFade = function(translate) {
  if (translate == 0) // scrolled to the top, show bottom mask only
    this._maskContainer.setMask(this._fadeBottom);
  else if (translate + this._getAvailSize() >= this._contentSize) // scrolled to the bottom, show top mask only
    this._maskContainer.setMask(this._fadeTop);
  else // scrolled to the middle, show mask at top and bottom
    this._maskContainer.setMask(this._fadeTopBottom);
};

/**
 * Scrolls the container on mouse wheel.
 * @param {DvtBaseEvent} event
 * @private
 */
DvtSimpleScrollableContainer.prototype._onMouseWheel = function(event) {
  if (!this.hasScrollingContent())
    return;

  this._showScrollbar();

  var delta = event.wheelDelta != null ? event.wheelDelta : 0;
  // Firefox flips the mouse wheel delta
  if (DvtAgent.isPlatformGecko())
    delta *= -1;

  var newTranslate = -1 * (this._isHorizontalScrolling ? this._container.getTranslateX() : this._container.getTranslateY()) - 4 * delta;
  var minTranslate = 0;
  var maxTranslate = Math.max(this._contentSize - this._getAvailSize(), 0);
  var translate = Math.max(Math.min(newTranslate, maxTranslate), minTranslate);
  if (this._isHorizontalScrolling) {
    this._container.setTranslateX(translate * -1);
    this._scrollbar.setViewportRange(translate + this._width, translate);
  } else {
    this._container.setTranslateY(translate * -1);
    this._scrollbar.setViewportRange(translate, translate + this._height);
  }
  this._updateFade(translate);
  event.preventDefault();
};

/**
 * Handles the event fired by the scrollbar.
 * @param {DvtSimpleScrollbarEvent} event
 * @private
 */
DvtSimpleScrollableContainer.prototype._handleScrollbar = function(event) {
  this._showScrollbar();

  if (this._isHorizontalScrolling)
    this._container.setTranslateX(event.getNewMin() * -1);
  else
    this._container.setTranslateY(event.getNewMin() * -1);

  this._updateFade(event.getNewMin());
};

/**
 * Returns the width of this container
 * @return {number}
 */
DvtSimpleScrollableContainer.prototype.getWidth = function() {
  return this._width;
};

/**
 * Returns the height of this container
 * @return {number}
 */
DvtSimpleScrollableContainer.prototype.getHeight = function() {
  return this._height;
};

/**
 * Scrolls the container so that the displayable is visible.
 * @param {DvtDisplayable} displayable The displayable to view.
 */
DvtSimpleScrollableContainer.prototype.scrollIntoView = function(displayable) {
  if (!this.hasScrollingContent())
    return;

  var dim = displayable.getDimensions(displayable.getParent());
  var size = this._container.getDimensions();
  var translate;
  if (this._isHorizontalScrolling) {
    var currTranslateX = -1 * this._container.getTranslateX();
    var maxTranslateX = dim.x - size.x;
    var minTranslateX = (dim.x + dim.w) - (this._width) + size.x;

    if (currTranslateX < minTranslateX) {
      this._container.setTranslateX(-1 * minTranslateX);
      this._scrollbar.setViewportRange(minTranslateX + this._width, minTranslateX);
      translate = minTranslateX;
    }
    else if (currTranslateX > maxTranslateX) {
      this._container.setTranslateX(-1 * maxTranslateX);
      this._scrollbar.setViewportRange(maxTranslateX + this._width, maxTranslateX);
      translate = maxTranslateX;
    }
  } else {
    var currTranslateY = -1 * this._container.getTranslateY();
    var maxTranslateY = dim.y - size.y;
    var minTranslateY = (dim.y + dim.h) - (this._height) + size.y;

    if (currTranslateY < minTranslateY) {
      this._container.setTranslateY(-1 * minTranslateY);
      this._scrollbar.setViewportRange(minTranslateY, minTranslateY + this._height);
      translate = minTranslateY;
    }
    else if (currTranslateY > maxTranslateY) {
      this._container.setTranslateY(-1 * maxTranslateY);
      this._scrollbar.setViewportRange(maxTranslateY, maxTranslateY + this._height);
      translate = maxTranslateY;
    }
  }
  if (translate != undefined)
    this._updateFade(translate);
};

/**
 * Returns whether or not content will scroll based on available space.
 * @return {boolean} true if content will scroll
 */
DvtSimpleScrollableContainer.prototype.hasScrollingContent = function() {
  return this._contentSize > this._getAvailSize();
};
/**
 * Drag recognizer
 * @class DvtDragRecognizer
 * @constructor
 */
var DvtDragRecognizer = function() {};

DvtObj.createSubclass(DvtDragRecognizer, DvtObj, 'DvtDragRecognizer');


/**
 * Notifies the component that a drag may have started.
 */
DvtDragRecognizer.prototype.prepDrag = function() {
  // subclasses should override
};


/**
 * Notifies the component that a drag has been aborted.
 */
DvtDragRecognizer.prototype.abortPrep = function() {
  // subclasses should override
};


/**
 * Returns true if the component allows drag. This function gives the peer the
 * chance to prevent a drag.  All other conditions for a drag
 * must be satisfied even if the peer returns true.
 */
DvtDragRecognizer.prototype.recognizeDrag = function() {
  return true; // subclasses should override
};
/**
 * Drag source event handler.
 * @param {DvtContext} context
 * @class DvtDragSource
 * @constructor
 */
var DvtDragSource = function(context) {
  this.Init(context);
};

DvtObj.createSubclass(DvtDragSource, DvtObj, 'DvtDragSource');

// Margin to add to drag feedback bounds to minimize clipping
DvtDragSource.DRAG_FEEDBACK_MARGIN = 2;


/**
 * @param {DvtContainer} container
 * @param {DvtContext} context
 */
DvtDragSource.prototype.Init = function(context) {
  this._context = context;

  // current draggable object under the mouse pointer
  this._dragCandidate = null;

  // object being dragged
  this._dragObj = null;
  this._dragCoords = null;
};


/**
 * Returns the current drag candidate object.
 */
DvtDragSource.prototype.getDragCandidate = function() {
  return this._dragCandidate;
};


/**
 * Sets the specified object as the current drag candidate, if it supports the DvtDraggable interface.
 * @param {object} obj
 */
DvtDragSource.prototype.setDragCandidate = function(obj) {
  // a DnD candidate object must support all DvtDraggable methods
  if (obj && obj.isDragAvailable && obj.getDragTransferable)
    this._dragCandidate = obj;
  else
    this._dragCandidate = null;
};


/**
 * If there are any drag candidate, returns the client id of the drag component.
 * Otherwise returns null.
 */
DvtDragSource.prototype.isDragAvailable = function(clientIds) {
  if (this._dragCandidate != null) {
    return this._dragCandidate.isDragAvailable(clientIds);
  }
  return null;
};


/**
 * If there are a drag candidate, return the dragTransferable object.
 */
DvtDragSource.prototype.getDragTransferable = function(mouseX, mouseY) {
  // if there's anything to drag
  if (this._dragCandidate) {
    // store the dragObj and current mouse coords
    this._dragObj = this._dragCandidate;
    this._dragCoords = {
      x: mouseX, y: mouseY
    };

    return this._dragCandidate.getDragTransferable(mouseX, mouseY);
  }
  return null;
};


/**
 * Returns the feedback for the drag operation.
 */
DvtDragSource.prototype.getDragOverFeedback = function(mouseX, mouseY) {
  // Hide the tooltip, since this is the last hook before the drag feedback is created
  this._context.getTooltipManager().hideTooltip();

  // Return the drag feedback
  var dragObj = this.getDragObject();
  if (dragObj && dragObj.getDragFeedback)
    return dragObj.getDragFeedback(mouseX, mouseY);
  else
    return null;
};


/**
 * Returns component specific context for the drag.
 */
DvtDragSource.prototype.getDragContext = function(mouseX, mouseY) {
  if (this._dragObj && this._dragObj.getDragContext) {
    return this._dragObj.getDragContext(mouseX, mouseY);
  }
  return null;
};


/**
 * Returns the object currently being dragged.
 */
DvtDragSource.prototype.getDragObject = function() {
  return this._dragObj;
};


/**
 * Returns the coordinates where the current drag was initiated.
 */
DvtDragSource.prototype.getDragCoords = function() {
  return this._dragCoords;
};


/**
 * Return the offset to use for the drag feedback.
 */
DvtDragSource.prototype.getDragOffset = function(mouseX, mouseY) {
  var offset = null;
  var feedback = this.getDragOverFeedback(mouseX, mouseY);
  if (feedback) {
    var bounds = DvtDnDUtils.getDragFeedbackBounds(feedback, this._context.getStage());

    //return displayables to their original condition, if necessary,
    //after determining bounds
    var dragObj = this.getDragObject();
    if (dragObj && dragObj.afterDragOverFeedback) {
      dragObj.afterDragOverFeedback(feedback);
    }

    if (bounds) {
      offset = {};
      offset.x = mouseX - bounds.x;
      offset.y = mouseY - bounds.y;
      offset.x += DvtDragSource.DRAG_FEEDBACK_MARGIN;
      offset.y += DvtDragSource.DRAG_FEEDBACK_MARGIN;
    }
  }
  return offset;
};


/**
 * Returns the offset from the mouse pointer where the drag is considered to be located.
 * @param {number} xOffset A suggested offset, usually the center of the drag feedback.
 * @param {number} yOffset A suggested offset, usually the center of the drag feedback.
 * @return {object}
 */
DvtDragSource.prototype.getPointerOffset = function(xOffset, yOffset) {
  // Default implementation does not apply an offset, mouse position is used instead
  return {x: 0, y: 0};
};


/**
 * Called when a drag is started.
 */
DvtDragSource.prototype.initiateDrag = function() {
  // On touch devices, when a drag is initiated, immediately cancel any touch and hold
  var tm = this.getTouchManager();
  if (DvtAgent.isTouchDevice() && tm)
    tm.cancelTouchHold();
};


/**
 * Clean up after the drag is completed.
 */
DvtDragSource.prototype.dragDropEnd = function() {
  this._dragCandidate = null;
  this._dragObj = null;
  this._dragCoords = null;
};


/**
 * Sets a touch manager object
 * @param {DvtTouchManager} touch manager object
 */
DvtDragSource.prototype.setTouchManager = function(touchManager) {
  this._touchManager = touchManager;
};


/**
 * Gets a touch manager object
 * @return {DvtTouchManager} touch manager object
 */
DvtDragSource.prototype.getTouchManager = function() {
  return this._touchManager;
};
/**
 * Drop target event handler.
 * @class DvtDropTarget
 * @constructor
 */
var DvtDropTarget = function() {};

DvtObj.createSubclass(DvtDropTarget, DvtObj, 'DvtDropTarget');


/**
 * If a drop is possible at these mouse coordinates, returns the client id
 * of the drop component. Returns null if drop is not possible.
 * @param {number} mouseX x coordinate
 * @param {number} mouseY y coordinate
 * @param {object|array} clientIds object that contains client ids for potential drop targets
 * @param {function=} flavorAcceptanceFunc optional function for checking source and target data flavor compatibility
 * @return {string} client id of the drop component
 */
DvtDropTarget.prototype.acceptDrag = function(mouseX, mouseY, clientIds, flavorAcceptanceFunc) {
  return null; // subclasses should override
};


/**
 * Paints drop site feedback as a drag enters the drop site.
 */
DvtDropTarget.prototype.dragEnter = function() {
  // subclasses should override
};


/**
 * Cleans up drop site feedback as a drag exits the drop site.
 */
DvtDropTarget.prototype.dragExit = function() {
  // subclasses should override
};


/**
 * Returns the object representing the drop site. This method is called when a valid
 * drop is performed.
 * @param {number} mouseX x coordinate
 * @param {number} mouseY y coordinate
 * @return {object} the object representing the drop site
 */
DvtDropTarget.prototype.getDropSite = function(mouseX, mouseY) {
  return null; // subclasses should override
};
// Copyright (c) 2008, 2016, Oracle and/or its affiliates. All rights reserved.



/**
 * DvtButton
 * @param {DvtContext} context
 * @param {DvtDisplayable} upState
 * @param {DvtDisplayable} overState
 * @param {DvtDisplayable} downState
 * @param {DvtDisplayable} disabledState
 * @param {string} id
 * @param {object=} callback
 * @param {object=} callbackObj
 * @constructor
 */
var DvtButton = function(context, upState, overState, downState, disabledState, id, callback, callbackObj)
{
  this.Init(context, upState, overState, downState, disabledState, id, callback, callbackObj);
};

DvtObj.createSubclass(DvtButton, DvtContainer, 'DvtButton');

DvtButton.STATE_ENABLED = 0;
DvtButton.STATE_OVER = 1;
DvtButton.STATE_DOWN = 2;
DvtButton.STATE_DISABLED = 3;

DvtButton.NO_EVENT_LISTENERS = true;       //dont register any event listeners


/**
 * Initialization method called by the constructor
 *
 * @protected
 *
 * @param {DvtContext} context  Platform specific context object
 * @param {DvtDisplayable} upState      Button up state
 * @param {DvtDisplayable} overState    Button over state
 * @param {DvtDisplayable} downState    Button down state
 * @param {DvtDisplayable} disabledState    Button disabled state
 * @param {string} id   The id for this object
 * @param {function} callback   The optional function that should be called on click event
 * @param {object} callbackObj  The optional object instance on which the callback function is defined
 *
 */
DvtButton.prototype.Init = function(context, upState, overState, downState, disabledState, id, callback, callbackObj)
{
  DvtButton.superclass.Init.call(this, context, null, id);

  this.setCallback(callback, callbackObj);

  //: don't do anything special in setUpState() during construction
  this._bDuringInit = true;

  this.setUpState(upState);
  this.setOverState(overState);
  this.setDownState(downState);

  if (disabledState) {
    this.setDisabledState(disabledState);
  }

  this.setEnabled(true);                 // enable mouse events for upState
  this.drawUpState();

  this._tooltip = null;

  this._bToggleEnabled = false;
  this._bToggled = false;

  //: don't do anything special in setUpState() during construction
  this._bDuringInit = false;
};


/**
  *  Returns the enabled state of this button
  *  @return {boolean}  true if the button is enabled,, else false.
  */
DvtButton.prototype.isEnabled = function() {
  return this._enabled;
};


/**
  *   Enable/disable the button
  */
DvtButton.prototype.setEnabled = function(bEnabled)
{
  if (this._enabled != bEnabled)
  {
    this._enabled = bEnabled;
    var clickEvent = DvtAgent.isTouchDevice() ? DvtTouchEvent.TOUCHSTART : DvtMouseEvent.CLICK;

    if (bEnabled) {
      this.addEvtListener(DvtMouseEvent.MOUSEOVER, this._mouseOverHandler, false, this);
      this.addEvtListener(DvtMouseEvent.MOUSEOUT, this._mouseOutHandler, false, this);
      this.addEvtListener(DvtMouseEvent.MOUSEDOWN, this._mouseDownHandler, false, this);
      this.addEvtListener(DvtMouseEvent.MOUSEUP, this._mouseUpHandler, false, this);
      this.addEvtListener(clickEvent, this._clickHandler, false, this);
      this.setCursor(DvtSelectionEffectUtils.getSelectingCursor());
    }
    else {
      this.removeEvtListener(DvtMouseEvent.MOUSEOVER, this._mouseOverHandler, false, this);
      this.removeEvtListener(DvtMouseEvent.MOUSEOUT, this._mouseOutHandler, false, this);
      this.removeEvtListener(DvtMouseEvent.MOUSEDOWN, this._mouseDownHandler, false, this);
      this.removeEvtListener(DvtMouseEvent.MOUSEUP, this._mouseUpHandler, false, this);
      this.removeEvtListener(clickEvent, this._clickHandler, false, this);
      this.setCursor(null);
    }
    // render disabled state
    this.initState();
  }
};


/**
 * Mouse over handler
 * @private
 * @param {DvtMouseEvent} event The dispatched event to be processed by the object
 */
DvtButton.prototype._mouseOverHandler = function(event) {
  if (!this._bToggled) {
    this.drawOverState();
  }
  else {
    this.drawOverDownState();
  }
};


/**
 * Mouse out handler
 * @private
 * @param {DvtMouseEvent} event The dispatched event to be processed by the object
 */
DvtButton.prototype._mouseOutHandler = function(event) {
  if (!this._bToggled) {
    this.drawUpState();
  }
  else {
    this.drawDownState();
  }
};


/**
 * Mouse down handler
 * @private
 * @param {DvtMouseEvent} event The dispatched event to be processed by the object
 */
DvtButton.prototype._mouseDownHandler = function(event) {
  this.drawDownState();
  event.stopPropagation();
};


/**
 * Mouse up handler
 * @private
 * @param {DvtMouseEvent} event The dispatched event to be processed by the object
 */
DvtButton.prototype._mouseUpHandler = function(event) {
  if (!this._bToggled) {
    DvtAgent.isTouchDevice() ? this.drawUpState() : this.drawOverState();
  }
  else {
    DvtAgent.isTouchDevice() ? this.drawDownState() : this.drawOverDownState();
  }
  event.stopPropagation();
};

/**
 * @private
 * Click Handler
 * @param {DvtMouseEvent} event The dispatched event to be processed by the object
 */
DvtButton.prototype._clickHandler = function(event) {
  if (this._bToggleEnabled) {
    this._bToggled = !this._bToggled;
    if (!this._bToggled) {
      DvtAgent.isTouchDevice() ? this.drawUpState() : this.drawOverState();
    }
    else {
      DvtAgent.isTouchDevice() ? this.drawDownState() : this.drawOverDownState();
    }
  }

  // Call the callback
  if (this._callback) {
    this._callback.call(this._callbackObj, event, this);
    event.stopPropagation();
    event.preventDefault();
  }
};

DvtButton.prototype.drawUpState = function() {
  this._enableButton(this.upState, true);
  this._enableButton(this.downState, false);
  this._enableButton(this.overState, false);
  this._enableButton(this.disabledState, false);
  this._enableButton(this.overDownState, false);
};

DvtButton.prototype.drawOverState = function() {
  this._enableButton(this.upState, false);
  this._enableButton(this.downState, false);
  this._enableButton(this.overState, true);
  this._enableButton(this.disabledState, false);
  this._enableButton(this.overDownState, false);
};

DvtButton.prototype.drawDownState = function() {
  this._enableButton(this.upState, false);
  this._enableButton(this.downState, true);
  this._enableButton(this.overState, false);
  this._enableButton(this.disabledState, false);
  this._enableButton(this.overDownState, false);
};

DvtButton.prototype.drawDisabledState = function() {
  this._enableButton(this.upState, false);
  this._enableButton(this.overState, false);
  this._enableButton(this.downState, false);
  this._enableButton(this.disabledState, true);
  this._enableButton(this.overDownState, false);
};


/**
 * Draws the over + down (hover selected) state.
 * If the state doesn't exist, defaults to drawing down state.
 */
DvtButton.prototype.drawOverDownState = function() {
  if (this.overDownState) {
    this._enableButton(this.upState, false);
    this._enableButton(this.overState, false);
    this._enableButton(this.downState, false);
    this._enableButton(this.disabledState, false);
    this._enableButton(this.overDownState, true);
  }
  else
    this.drawDownState();
};


/**
  *   Show or hide the specified button face shape.
  */
DvtButton.prototype._enableButton = function(button, enabled) {
  //   this._enableMouseEvents(button, enabled);
  if (button) {
    button.setAlpha(enabled ? 1 : 0);
  }

  //image button does not work when swapping different image states
  //   button.setVisible(enabled);
};


DvtButton.prototype._enableMouseEvents = function(container, enabled) {
  if (container.setMouseEnabled) {
    container.setMouseEnabled(enabled);
  }
  var child = container.firstChild;

  //loop over all childs
  while (child != null) {
    this._enableMouseEvents(child, enabled);
    child = child.nextSibling;
  }
};

DvtButton.prototype.setUpState = function(upState) {

  if ((!this.upState) || (this.upState != upState))
  {
    var enabled = false;
    if (this.upState) {
      enabled = this._isButtonEnabled(this.upState);
      this.removeChild(this.upState);
    }
  //: if the button has no enabled states, enable the up state by default
    else if (!this._bDuringInit) {
      var bDownEnabled = false;
      var bOverEnabled = false;
      var bDisabledEnabled = false;
      if (this.downState) {
        bDownEnabled = this._isButtonEnabled(this.downState);
      }
      if (this.overState) {
        bOverEnabled = this._isButtonEnabled(this.overState);
      }
      if (this.disabledState) {
        bDisabledEnabled = this._isButtonEnabled(this.disabledState);
      }
      if (!(bDownEnabled || bOverEnabled || bDisabledEnabled)) {
        enabled = true;
      }
    }

    if (upState) {
      this.addChild(upState);
    }

    this.upState = upState;
    this._enableButton(this.upState, enabled);
  }
};

DvtButton.prototype.setDownState = function(downState) {

  if ((! this.downState) || (this.downState != downState))
  {
    var enabled = false;
    if (this.downState) {
      enabled = this._isButtonEnabled(this.downState);
      this.removeChild(this.downState);
    }

    if (downState) {
      this.addChild(downState);
    }

    this.downState = downState;
    this._enableButton(this.downState, enabled);
  }
};

DvtButton.prototype.setOverState = function(overState) {

  if ((! this.overState) || (this.overState != overState))
  {
    var enabled = false;
    if (this.overState) {
      enabled = this._isButtonEnabled(this.overState);
      this.removeChild(this.overState);
    }

    if (overState) {
      this.addChild(overState);
    }

    this.overState = overState;
    this._enableButton(this.overState, enabled);
  }
};

DvtButton.prototype.setDisabledState = function(disabledState) {

  if ((! this.disabledState) || (this.disabledState == disabledState))
  {
    var enabled = false;
    if (this.disabledState) {
      enabled = this._isButtonEnabled(this.disabledState);
      this.removeChild(this.disabledState);
    }

    if (disabledState) {
      this.addChild(disabledState);
    }

    this.disabledState = disabledState;
    this._enableButton(this.disabledState, enabled);
  }
};


/**
 * Sets the over + down (hover selected) state of a toggle button
 * @param {DvtShape} overDownState
 */
DvtButton.prototype.setOverDownState = function(overDownState) {

  if ((! this.overDownState) || (this.overDownState == overDownState))
  {
    var enabled = false;
    if (this.overDownState) {
      enabled = this._isButtonEnabled(this.overDownState);
      this.removeChild(this.overDownState);
    }

    if (overDownState) {
      this.addChild(overDownState);
    }

    this.overDownState = overDownState;
    this._enableButton(this.overDownState, enabled);
  }
};


/**
 * Set the callback function handler
 *
 * @public
 *
 * @param {function} callback    The function that should be called on click event
 * @param {object} callbackObj   The object instance on which the callback function is defined
 */
DvtButton.prototype.setCallback = function(callback, callbackObj) {
  this._callback = callback;
  this._callbackObj = callbackObj;
};

DvtButton.prototype.setTooltip = function(tooltip) {
  this._tooltip = tooltip;

  // Assume that if using DvtButton's tooltip getter/setter that we should set wai-aria properties
  // Otherwise, assume that button owner has separate logical object that will handle accessibility
  if (tooltip) {
    this.setAriaRole('button');
    this.setAriaProperty('label', tooltip);
  }
};

DvtButton.prototype.getTooltip = function() {
  return this._tooltip;
};

DvtButton.prototype.isClickEventPropagationStopped = function() {
  return true;
};


DvtButton.prototype.initState = function()
{
  this.isEnabled() ? this.drawUpState() : this.drawDisabledState();
};


DvtButton.prototype.setSize = function(width, height) {
  var up = this.upState;
  if (up) {
    if (up.setWidth && width) {
      up.setWidth(width);
    }
    if (up.setHeight && height) {
      up.setHeight(height);
    }
  }

  var down = this.downState;
  if (down) {
    if (down.setWidth && width) {
      down.setWidth(width);
    }
    if (down.setHeight && height) {
      down.setHeight(height);
    }
  }

  var over = this.overState;
  if (over) {
    if (over.setWidth && width) {
      over.setWidth(width);
    }
    if (over.setHeight && height) {
      over.setHeight(height);
    }
  }

  var disabled = this.disabledState;
  if (disabled) {
    if (disabled.setWidth && width) {
      disabled.setWidth(width);
    }
    if (disabled.setHeight && height) {
      disabled.setHeight(height);
    }
  }
};


/*
 * Called from DvtAfMenu and DvtAfGoButton to right align this component or its content.
 */
DvtButton.prototype.rightAlign = function(maxw, ww, self) {
  var delta = maxw - ww;

  var up = this.upState;
  if (up && maxw) {
    if (self)
      up.setTranslateX(delta);
    else
      this._setChildX(up, delta);
  }

  var down = this.downState;
  if (down && maxw) {
    if (self)
      down.setTranslateX(delta);
    else
      this._setChildX(down, delta);
  }

  var over = this.overState;
  if (over && maxw) {
    if (self)
      over.setTranslateX(delta);
    else
      this._setChildX(over, delta);
  }

  var disabled = this.disabledState;
  if (disabled) {
    if (self)
      disabled.setTranslateX(delta);
    else
      this._setChildX(disabled, delta);
  }
};

DvtButton.prototype._setChildX = function(state, delta) {
  for (var i = 0; i < state.getNumChildren(); i++) {
    var child = state.getChildAt(i);

    if (child instanceof DvtDisplayable) {
      child.setTranslateX(delta);
    }
  }
};

DvtButton.prototype.setToggleEnabled = function(bToggleEnabled) {
  this._bToggleEnabled = bToggleEnabled;
};

DvtButton.prototype.isToggleEnabled = function() {
  return this._bToggleEnabled;
};

DvtButton.prototype.setToggled = function(bToggled) {
  if (this._bToggleEnabled) {
    this._bToggled = bToggled;
    if (!this._bToggled) {
      this.drawUpState();
    }
    else {
      this.drawDownState();
    }
  }
};

DvtButton.prototype.isToggled = function() {
  return this._bToggled;
};

DvtButton.prototype._isButtonEnabled = function(button) {
  var enabled = false;
  if (button) {
    enabled = button.getAlpha() > 0 ? true : false;
  }
  return enabled;
};

DvtButton.prototype.getUpState = function() {
  return this.upState;
};

DvtButton.prototype.getDownState = function() {
  return this.downState;
};

DvtButton.prototype.getOverState = function() {
  return this.overState;
};


/**
 * Show keyboard focus
 */
DvtButton.prototype.showKeyboardFocusEffect = function() {
  if (!this._keyboardFocusEffect)
    this._keyboardFocusEffect = this.CreateKeyboardFocusEffect();
  this._keyboardFocusEffect.show();
  this._isShowingKeyboardFocusEffect = true;
  this.getCtx().setActiveElement(this);
};


/**
 * Hide keyboard focus
 */
DvtButton.prototype.hideKeyboardFocusEffect = function() {
  if (this._keyboardFocusEffect)
    this._keyboardFocusEffect.hide();
  this._isShowingKeyboardFocusEffect = false;
};


/**
 * Returns true if this navigable is showing its keyboard focus effect
 * @return {boolean} true if showing keyboard focus effect
 */
DvtButton.prototype.isShowingKeyboardFocusEffect = function() {
  return this._isShowingKeyboardFocusEffect;
};


/**
 * @protected
 * Creates keyboard focus effect for the component
 * @return {DvtKeyboardFocusEffect} keyboard focus effect
 */
DvtButton.prototype.CreateKeyboardFocusEffect = function() {
  return new DvtKeyboardFocusEffect(this.getCtx(), this, this.getDimensions(), null, null, true);
};

/**
 * Handle keyboard event
 * @param {DvtKeyboardEvent} event keyboard event
 */
DvtButton.prototype.handleKeyboardEvent = function(event) {
  var keyCode = event.keyCode;
  if (keyCode == DvtKeyboardEvent.ENTER || keyCode == DvtKeyboardEvent.SPACE) {
    // Call the callback
    if (this._callback) {
      this._callback.call(this._callbackObj, event, this);
      event.stopPropagation();
      event.preventDefault();
    }
  }
};

/**
 * DvtTransientButton. This adds listeners that hide and show this button based
 * on focus, blur, mouse over, and mouse out events on the current stage.
 * @param {DvtContext} context The rendering context.
 * @param {DvtDisplayable} upState The displayable representing this button's enabled state.
 * @param {DvtDisplayable} overState The displayable representing this button's hover state.
 * @param {DvtDisplayable} downState The displayable representing this button's active state.
 * @param {DvtDisplayable} disabledState The displayable representing this button's disabled state.
 * @param {string} callback The function that should be called to when this button is activated.
 * @param {object} callbackObj The object instance on which the callback function is defined.
 * @extends {DvtButton}
 * @constructor
 */
var DvtTransientButton = function(context, upState, overState, downState, disabledState, callback, callbackObj)
{
  this.Init(context, upState, overState, downState, disabledState, callback, callbackObj);
};

DvtObj.createSubclass(DvtTransientButton, DvtButton, 'DvtTransientButton');

/**
 * Attribute for button radius.
 * @const
 * @private
 */
DvtTransientButton._DEFAULT_RADIUS = 16;

/**
 * Attribute for button background color.
 * @const
 * @private
 */
DvtTransientButton._DEFAULT_FILL_COLOR = '#ffffff';

/**
 * Attribute for button border color.
 * @const
 * @private
 */
DvtTransientButton._DEFAULT_BORDER_COLOR = '#d6d7d8';

/**
 * Helper method called by the constructor to initialize this object.
 * @param {DvtContext} context The rendering context.
 * @param {DvtDisplayable} upState The displayable representing this button's enabled state.
 * @param {DvtDisplayable} overState The displayable representing this button's hover state.
 * @param {DvtDisplayable} downState The displayable representing this button's active state.
 * @param {DvtDisplayable} disabledState The displayable representing this button's disabled state.
 * @param {string} callback The function that should be called to when this button is activated.
 * @param {object} callbackObj The object instance on which the callback function is defined.
 * @protected
 */
DvtTransientButton.prototype.Init = function(context, upState, overState, downState, disabledState, callback, callbackObj)
{
  DvtTransientButton.superclass.Init.call(this, context, upState, overState, downState, disabledState, null, callbackObj, callback);
  var stage = context.getStage();
  // Need to set 'useCapture' to true for focus/blur event listeners since DvtEventManager calls 'stopPropagation'
  stage.addEvtListener(DvtFocusEvent.FOCUS, this._onFocus, true, this);
  stage.addEvtListener(DvtFocusEvent.BLUR, this._onBlur, true, this);
  if (!DvtAgent.isTouchDevice())
  {
    // IE does not always fire the appropriate mouseover and mouseout events, so use mouseenter and mouseleave instead
    if (DvtAgent.isPlatformIE())
    {
      stage.addEvtListener('mouseenter', this._onMouseOver, false, this);
      stage.addEvtListener('mouseleave', this._onMouseOut, false, this);
    }
    else
    {
      stage.addEvtListener(DvtMouseEvent.MOUSEOVER, this._onMouseOver, false, this);
      stage.addEvtListener(DvtMouseEvent.MOUSEOUT, this._onMouseOut, false, this);
    }
  }
};

/**
 * Creates and returns the DvtCircle representing the button's given state.
 * @param {DvtContext} context The rendering context.
 * @param {string} stateURL The string URL of the button's state.
 * @return {DvtCircle}
 */
DvtTransientButton.getStateFromURL = function(context, stateURL)
{
  var radius = DvtTransientButton._DEFAULT_RADIUS;
  var halfRadius = radius / 2;

  var background = new DvtCircle(context, radius, radius, radius);
  background.setSolidFill(DvtTransientButton._DEFAULT_FILL_COLOR);
  background.setSolidStroke(DvtTransientButton._DEFAULT_BORDER_COLOR);
  var image = new DvtImage(context, stateURL, halfRadius, halfRadius, radius, radius);

  background.addChild(image);
  return background;
};

/**
 * Sets this button as visible.
 */
DvtTransientButton.prototype.show = function()
{
  this.setAlpha(1);
};

/**
 * Sets this button as hidden.
 */
DvtTransientButton.prototype.hide = function()
{
  this.setAlpha(0);
};

/**
 * Focus handler.
 * @private
 * @param {DvtFocusEvent} event The dispatched event to be processed by the object.
 */
DvtTransientButton.prototype._onFocus = function(event)
{
  this._isFocused = true;
  this.show();
};

/**
 * Blur handler.
 * @private
 * @param {DvtFocusEvent} event The dispatched event to be processed by the object.
 */
DvtTransientButton.prototype._onBlur = function(event)
{
  this._isFocused = false;
  if (!this._isMouseOver)
    this.hide();
};

/**
 * Mouse over handler.
 * @private
 * @param {DvtMouseEvent} event The dispatched event to be processed by the object.
 */
DvtTransientButton.prototype._onMouseOver = function(event)
{
  if (this._mouseOutTimer && this._mouseOutTimer.isRunning())
    this._mouseOutTimer.stop();

  this._isMouseOver = true;
  this.show();
};

/**
 * Mouse out handler.
 * @private
 * @param {DvtMouseEvent} event The dispatched event to be processed by the object.
 */
DvtTransientButton.prototype._onMouseOut = function(event)
{
  if (!this._mouseOutTimer)
    this._mouseOutTimer = new DvtTimer(this.getCtx(), 10, this._onMouseOutTimerEnd, this, 1);

  this._mouseOutTimer.reset();
  this._mouseOutTimer.start();
};

/**
 * Mouse out timer handler.
 * @private
 */
DvtTransientButton.prototype._onMouseOutTimerEnd = function()
{
  this._isMouseOver = false;
  if (!this._isFocused)
    this.hide();
};
/**
 * A logical object for a set of displayables.
 * @interface
 */
var DvtLogicalObject = function() {};

DvtObj.createSubclass(DvtLogicalObject, DvtObj, 'DvtLogicalObject');


/**
 * Returns the array of DvtDisplayables corresponding to this object.
 * @return {array}
 */
DvtLogicalObject.prototype.getDisplayables = function() {};


/**
 * Optional function, used by DvtEventManager's WAI-ARIA support to provide an aria-label whose creation is deferred
 * until needed.
 * @return {string}
 */
DvtLogicalObject.prototype.getAriaLabel = function() {};
/**
 * An object that displays tooltips.
 * @interface
 */
var DvtTooltipSource = function() {};

DvtObj.createSubclass(DvtTooltipSource, DvtObj, 'DvtTooltipSource');


/**
 * Returns the tooltip text for this object.
 * @param {DvtDisplayable} target The displayable that was the target of the event.
 * @return {string} The tooltip text for this object.
 */
DvtTooltipSource.prototype.getTooltip = function(target, x, y) {};


/**
 * Returns the datatip text for this object.
 * @param {DvtDisplayable} target The displayable that was the target of the event.
 * @return {string} The datatip text for this object.
 */
DvtTooltipSource.prototype.getDatatip = function(target, x, y) {};


/**
 * Returns the border color of the datatip for this object.
 * @return {string} The datatip border color.
 */
DvtTooltipSource.prototype.getDatatipColor = function() {};
/**
 * An object that can be selected.
 * @interface
 */
var DvtSelectable = function() {};

DvtObj.createSubclass(DvtSelectable, DvtObj, 'DvtSelectable');


/**
 * Returns true if this object is selectable.
 * @return {boolean} true if this object is selectable.
 */
DvtSelectable.prototype.isSelectable = function() {};


/**
 * Returns true if this object is selected.
 * @return {boolean} true if this object is selected.
 */
DvtSelectable.prototype.isSelected = function() {};


/**
 * Specifies whether this object is selected.
 * @param {boolean} selected True if this object is selected.
 * @param {boolean} isInitial (optional) True if it is an initial selection.
 * @protected
 */
DvtSelectable.prototype.setSelected = function(selected, isInitial) {};


/**
 * Displays the hover effect.
 */
DvtSelectable.prototype.showHoverEffect = function() {};


/**
 * Hides the hover effect.
 */
DvtSelectable.prototype.hideHoverEffect = function() {};
/**
 * An object that can handle keyboard events delegated to it by a DvtEventManager
 * @interface
 */
var DvtComponentKeyboardHandler = function() {};


/**
 * Process a keyboard event
 * @param {DvtKeyboardEvent} event
 * @return {Boolean} True if this DvtComponentKeyboardHandler consumed the event
 */
DvtComponentKeyboardHandler.prototype.handleKeyboardEvent = function(event) {};


/**
 * Hide the component's keyboard focus effect.  Used by the DvtEventManager
 * to hide keyboard focus on one component when another component receives
 * focus via mouse (e.g., keyboard focus is on breadcrumbs but then you mouse
 * click on a treemap node).
 */
DvtComponentKeyboardHandler.prototype.hideKeyboardFocusEffect = function() {};
/**
 * An object that can receive keyboard focus, and thus can be navigated to via the keyboard
 * @interface
 */
var DvtKeyboardNavigable = function() {};

DvtObj.createSubclass(DvtKeyboardNavigable, DvtObj, 'DvtKeyboardNavigable');


/**
 * Returns the next item to receive keyboard focus
 * @param {DvtBaseEvent} event
 * @return {Object} The next item to get keyboard focus
 */
DvtKeyboardNavigable.prototype.getNextNavigable = function(event) {};

/**
 * Returns the DOM Element that respresents this keyboard navigable
 * @return {Object} This keyboard navigable's DOM Element
 */
DvtKeyboardNavigable.prototype.getTargetElem = function() {};


/**
 * Returns the bounding box for this navigable displayable relative to the target coordinate space.  If the target
 * coordinate space is not specified, returns the bounds relative to this displayable.
 * @param {DvtDisplayable=} targetCoordinateSpace The displayable defining the target coordinate space
 * @return {DvtRectangle}
 */
DvtKeyboardNavigable.prototype.getKeyboardBoundingBox = function(targetCoordinateSpace) {};


/**
 * Show a visual effect to indicate if this DvtKeyboardNavigable has keyboard focus
 */
DvtKeyboardNavigable.prototype.showKeyboardFocusEffect = function() {};


/**
 * Hide the visual effect to indicate if this DvtKeyboardNavigable has keyboard focus
 */
DvtKeyboardNavigable.prototype.hideKeyboardFocusEffect = function() {};


/**
 * Returns true if this navigable is showing its keyboard focus effect
 * @return {Boolean}
 */
DvtKeyboardNavigable.prototype.isShowingKeyboardFocusEffect = function() {};


/**
 * Optional method to implement. Returns the location for where a context menu should appear.
 * @return {DvtPoint}
 */
DvtKeyboardNavigable.prototype.getContextMenuLocation = function() {};

/**
 * Optional method to implement. Returns where the tooltip should appear on keyboard navigation.
 * @return {DvtPoint}
 */
DvtKeyboardNavigable.prototype.getKeyboardTooltipLocation = function() {};
/**
 * An object that can belongs to a category.
 * @interface
 */
var DvtCategoricalObject = function() {};

DvtObj.createSubclass(DvtCategoricalObject, DvtObj, 'DvtCategoricalObject');

/**
 * Returns an array containing all categories to which this object belongs.
 * @return {array} The array of categories.
 */
DvtCategoricalObject.prototype.getCategories = function() {};

/**
 * Optional API for the object to perform its own highlighting. Can be overridden if the highlight effect is not a
 * simple alpha adjustment of the displayables.
 * @param {boolean} bDimmed True if the object should be dimmed.
 * @param {number} alpha The alpha to use for the highlighting.
 */
DvtCategoricalObject.prototype.highlight = function(bDimmed, alpha) {};
/**
 * An object that displays context menus.
 * @interface
 */
var DvtContextMenuSource = function() {};

DvtObj.createSubclass(DvtContextMenuSource, DvtObj, 'DvtContextMenuSource');

/**
 * Returns the x,y coordinate of the upper left hand corner for the context menu, when the context menu
 * is triggered by a keyboard shortcut
 * Optional method to implement.
 * @return {DvtPoint}
 */
DvtContextMenuSource.prototype.getContextMenuLocation = function() {};
/**
 * An object that displays popups.
 * @interface
 */
var DvtPopupSource = function() {};

DvtObj.createSubclass(DvtPopupSource, DvtObj, 'DvtPopupSource');


/**
 * Returns the server side id for this object, which is used to set context on
 * the server.
 * @return {string} The server side id for this object.
 */
DvtPopupSource.prototype.getId = function() {};


/**
 * Returns the array of showPopupBehaviors for the object.
 * @return {array} The array of applicable DvtShowPopupBehaviors
 */
DvtPopupSource.prototype.getShowPopupBehaviors = function() {};
/**
 * For changing z-order of an object
 * @interface
 */
var DvtZOrderManager = function() {};

DvtObj.createSubclass(DvtZOrderManager, DvtObj, 'DvtZOrderManager');


/**
 * Bring the object to the front of the z-order.
 *
 * @param {DvtDisplayable}  displayable  object to push back in the z-order
 */
DvtZOrderManager.prototype.bringToFrontOfSelection = function(displayable) {};


/**
 * Push the object to the back of the selected objects in the z-order.
 *
 * @param {DvtDisplayable}  displayable  object to push back in the z-order
 */
DvtZOrderManager.prototype.pushToBackOfSelection = function(displayable) {};


/**
 * Set the number of objects that must be kept in front of any selected
 * objects in the z-order.
 *
 * @param {number} num  number of objects to keep in front of selected objects
 */
DvtZOrderManager.prototype.setNumFrontObjs = function(num) {};
/**
 *  Provides automation services for a DVT component.
 *  @param {Object} dvtComponent
 *  @constructor
 *  @export
 */
var DvtAutomation = function(dvtComponent) {};

DvtObj.createSubclass(DvtAutomation, DvtObj, 'DvtAutomation');

/**
 * @const
 */
DvtAutomation.TOOLTIP_SUBID = 'tooltip';

/**
 * Returns the subId corresponding to the SVG DOM Element.
 * @param {SVGElement} domElement The SVG DOM Element used in determining the subId
 * @return {String} The corresponding subId
 * @export
 */
DvtAutomation.prototype.getSubIdForDomElement = function(domElement) {
  var displayable = DvtAutomation._findDisplayable(domElement);
  if (displayable && !(displayable instanceof Array))
    return this.GetSubIdForDomElement(displayable);
  else if (domElement) { // tooltip automation
    if (this.IsTooltipElement(domElement))
      return DvtAutomation.TOOLTIP_SUBID;
  }
  return null;
};


/**
 * Returns the subId corresponding to the DvtDisplayable.
 * @param {DvtDisplayable} displayable The DvtDisplayable used in determining the subId
 * @return {String} The corresponding subId
 * @protected
 */
DvtAutomation.prototype.GetSubIdForDomElement = function(displayable) {
  //subclasses should override
  return null;
};


/**
 * Returns the SVG DOM Element corresponding to the given subId
 * @param {String} subId The subId used to locate a SVG DOM Element
 * @return {SVGElement} The SVG DOM Element
 * @export
 */
DvtAutomation.prototype.getDomElementForSubId = function(subId) {
  //subclasses should override
  return null;
};


/**
 * Finds the DvtDisplayable for a DOM Element
 * @param {SVGElement} domElement The SVG DOM Element to find a DvtDisplayable for
 * @return {DvtDisplayable} The displayable corresponding to the DOM Element or null
 * @private
 */
DvtAutomation._findDisplayable = function(domElement) {
  while (domElement) {
    // If this object has a displayable, return it
    if (domElement._obj)
      return domElement._obj;
    else // Otherwise look at the parent
      domElement = domElement.parentNode;
  }
  return null;
};


/**
 * Finds the tooltip DOM Element associated with the dvtComponent
 * @param {Object} dvtComponent
 * @param {String} tooltipId (optional) Used when dvtComponent is a DvtChart to get datatip or tooltip
 * @return {SVGElement} The DOM Element corresponding to the tooltip, if it is visible, or null
 * @protected
 */
DvtAutomation.prototype.GetTooltipElement = function(dvtComponent, tooltipId) {
  if (dvtComponent) {
    var tooltipElem = dvtComponent.getCtx().getTooltipManager(tooltipId).getTooltipElem();
    return tooltipElem.style.visibility == 'hidden' ? null : tooltipElem;
  }

  return null;
};

/**
 * Returns true if the given DOM element is used for tooltips
 * @param {SVGElement} domElement The SVG DOM Element to inspect
 * @return {boolean} True if the domElement is used for tooltips
 * @protected
 */
DvtAutomation.prototype.IsTooltipElement = function(domElement) {
  var id = domElement.getAttribute('id');
  if (id && id.indexOf(DvtHtmlTooltipManager._TOOLTIP_DIV_ID) == 0)
    return true;
  return false;
};
/**
 * Simple logical object for tooltip support.
 * @param {string} tooltip The tooltip to display.
 * @param {string} datatip The datatip to display.
 * @param {string} datatipColor The border color of the datatip.
 * @param {object=} params Optional object containing additional parameters for use by component.
 * @class
 * @constructor
 * @implements {DvtTooltipSource}
 */
var DvtSimpleObjPeer = function(tooltip, datatip, datatipColor, params) {
  this.Init(tooltip, datatip, datatipColor, params);
};

DvtObj.createSubclass(DvtSimpleObjPeer, DvtObj, 'DvtSimpleObjPeer');


/**
 * @param {string} tooltip The tooltip to display.
 * @param {string} datatip The datatip to display.
 * @param {string} datatipColor The border color of the datatip.
 * @param {object=} params Optional object containing additional parameters for use by component.
 */
DvtSimpleObjPeer.prototype.Init = function(tooltip, datatip, datatipColor, params) {
  this._tooltip = tooltip;
  this._datatip = datatip;
  this._datatipColor = datatipColor;
  this._params = params;
};


/**
 * Specifies the tooltip for this object.
 * @param {string} tooltip
 */
DvtSimpleObjPeer.prototype.setTooltip = function(tooltip) {
  this._tooltip = tooltip;
};


/**
 * Specifies the datatip for this object.
 * @param {string} datatip
 */
DvtSimpleObjPeer.prototype.setDatatip = function(datatip) {
  this._datatip = datatip;
};


/**
 * Specifies the datatip color for this object.
 * @param {string} datatipColor
 */
DvtSimpleObjPeer.prototype.setDatatipColor = function(datatipColor) {
  this._datatipColor = datatipColor;
};


/**
 * Returns additional parameters for this object, if available.
 * @return {object}
 */
DvtSimpleObjPeer.prototype.getParams = function() {
  return this._params;
};

//---------------------------------------------------------------------//
// Tooltip Support: DvtTooltipSource impl                              //
//---------------------------------------------------------------------//


/**
 * @override
 */
DvtSimpleObjPeer.prototype.getTooltip = function(target) {
  return this._tooltip;
};


/**
 * @override
 */
DvtSimpleObjPeer.prototype.getDatatip = function(target) {
  return this._datatip;
};


/**
 * @override
 */
DvtSimpleObjPeer.prototype.getDatatipColor = function(target) {
  return this._datatipColor;
};
/**
 * @constructor
 * @export
 */
var DvtAgent = function() {
};

DvtObj.createSubclass(DvtAgent, DvtObj, 'DvtAgent');

/**
 * @const
 */
DvtAgent.UNKNOWN_VERSION = -1;

/**
 * @const
 */
DvtAgent.IE_PLATFORM = 'ie';
/**
 * @const
 */
DvtAgent.GECKO_PLATFORM = 'gecko';
/**
 * @const
 */
DvtAgent.WEBKIT_PLATFORM = 'webkit';
/**
 * @const
 */
DvtAgent.UNKNOWN_PLATFORM = 'unknown';

/**
 * @const
 */
DvtAgent.WINDOWS_OS = 'Windows';
/**
 * @const
 */
DvtAgent.SOLARIS_OS = 'Solaris';
/**
 * @const
 */
DvtAgent.MAC_OS = 'Mac';
/**
 * @const
 */
DvtAgent.UNKNOWN_OS = 'Unknown';

/**
 * @const
 */
DvtAgent.FOCUS_COLOR_DEFAULT = '#0645AD';
/**
 * @const
 */
DvtAgent.FOCUS_COLOR_IE = '#090909';


/**
 * Returns true if creation of aria-label attributes can be deferred.  This prevents costly string generation from
 * becoming necessary across the entire data set.  When deferred, the getAriaLabel API should be implemented on
 * the DvtLogicalObject implementation.
 * @return {boolean}
 */
DvtAgent.deferAriaCreation = function() {
  return !DvtAgent.isTouchDevice() && !DvtAgent.isEnvironmentTest();
};


/**
 * Returns the ratio between physical pixels and device independent pixels for the current device.
 * @return {number} the device pixel ratio
 */
DvtAgent.getDevicePixelRatio = function() {
  DvtAgent._initialize();
  return DvtAgent._devicePixelRatio;
};


/**
 * Returns the position of the specified DOM element in page coordinates.
 * @param {object} element
 * @return {DvtPoint}
 */
DvtAgent.getElementPosition = function(element) {
  if (DvtAgent.isPlatformIE())
    return DvtAgent._getElementPositionIE(element);
  else
    return DvtAgent._getElementPositionDefault(element);
};


/**
 * Returns the platform string.  Valid values are DvtAgent.***_PLATFORM.
 * @return {string}
 */
DvtAgent.getPlatform = function() {
  DvtAgent._initialize();
  return DvtAgent._platform;
};


/**
 * Returns a guess of the operating system based on the user agent.
 * @return {string}
 */
DvtAgent.getOS = function() {
  DvtAgent._initialize();
  return DvtAgent._os;
};


/**
 * Returns the version of the browser reported by the user agent.
 * @return {number}
 */
DvtAgent.getVersion = function() {
  DvtAgent._initialize();
  return DvtAgent._version;
};


/**
 * Returns true if rendering in Chrome.
 * @return {boolean}
 */
DvtAgent.isBrowserChrome = function() {
  DvtAgent._initialize();
  return DvtAgent._bChrome;
};


/**
 * Returns true if rendering in Safari.
 * @return {boolean}
 */
DvtAgent.isBrowserSafari = function() {
  return DvtAgent.isPlatformWebkit() && !DvtAgent.isBrowserChrome();
};


/**
 * Returns true if rendering in Gecko.
 * @return {boolean}
 */
DvtAgent.isPlatformGecko = function() {
  return DvtAgent.getPlatform() == DvtAgent.GECKO_PLATFORM;
};


/**
 * Returns true if rendering in IE.
 * @return {boolean}
 */
DvtAgent.isPlatformIE = function() {
  return DvtAgent.getPlatform() == DvtAgent.IE_PLATFORM;
};


/**
 * Returns true if rendering in Webkit.
 * @return {boolean}
 */
DvtAgent.isPlatformWebkit = function() {
  return DvtAgent.getPlatform() == DvtAgent.WEBKIT_PLATFORM;
};


/**
 * Returns true if rendering in a right to left locale.
 * @param {DvtContext=} context If specified, first tries to determine the reading direction from the context.
 * @return {boolean}
 */
DvtAgent.isRightToLeft = function(context) {
  DvtAgent._initialize();
  if (context && context.getReadingDirection() != null)
    return context.getReadingDirection() == 'rtl';
  else
    return DvtAgent._bRtl;
};


/**
 * Returns true if rendering on a touch device.
 * @return {boolean}
 */
DvtAgent.isTouchDevice = function() {
  DvtAgent._initialize();
  return DvtAgent._bTouchDevice;
};


/**
 * Sets the current environment type
 * @param {String} type The environment type.  Currently supports 'batik' and 'test'
 * @export
 */
DvtAgent.setEnvironment = function(type) {
  DvtAgent._environment = type;
};


/**
 * Returns whether the current environment is test
 * @return {boolean}
 */
DvtAgent.isEnvironmentTest = function() {
  return DvtAgent._environment == 'test';
};


/**
 * Returns whether the current environment is batik
 * @return {boolean}
 */
DvtAgent.isEnvironmentBatik = function() {
  return DvtAgent._environment == 'batik';
};


/**
 * Returns whether the current environment is browser
 * @return {boolean}
 */
DvtAgent.isEnvironmentBrowser = function() {
  return !DvtAgent.isEnvironmentTest() && !DvtAgent.isEnvironmentBatik();
};


/**
 * Sets the whether the current environment is rendering in high contrast mode
 * @param {boolean} bHighContrast Whether to render in high contrast mode
 * @export
 */
DvtAgent.setHighContrast = function(bHighContrast) {
  DvtAgent._highContrast = bHighContrast;
};


/**
 * Returns whether the whether the current environment is rendering in high contrast mode
 * @return {boolean}
 */
DvtAgent.isHighContrast = function() {
  return DvtAgent._highContrast === true;
};

/**
 * Works around Firefox bug where displayable isn't rendered correctly for matrix update
 * @param {DvtDisplayable} displayable The displayable to check
 */
DvtAgent.workaroundFirefoxRepaint = function(displayable) {
  //Fix for 
  if (DvtAgent.isPlatformGecko()) {
    var parent = displayable.getParent();
    if (parent) {
      var idx = parent.getChildIndex(displayable);
      parent.removeChildAt(idx);
      parent.addChildAt(displayable, idx);
    }
  }
};


/**
 * Initializes the agent.  This caches all the relevant agent parameters and must be called before accessing any of
 * the variables on DvtAgent.
 * @private
 */
DvtAgent._initialize = function() {
  // Initialize DvtAgent if it hasn't been already.
  if (!DvtAgent._bInitialized) {
    var userAgent = (navigator && navigator.userAgent) ? navigator.userAgent.toLowerCase() : null;

    DvtAgent._os = DvtAgent._determineOS(userAgent);
    DvtAgent._platform = DvtAgent._determinePlatform(userAgent);
    // Chrome must be initialized before _determineVersion()
    DvtAgent._bChrome = userAgent && (userAgent.indexOf('chrome/') != -1) && userAgent.indexOf('edge') === -1;
    DvtAgent._version = DvtAgent._determineVersion(userAgent, DvtAgent._platform);

    DvtAgent._bRtl = (document && document.documentElement) ? document.documentElement.dir == 'rtl' : false;
    DvtAgent._bTouchDevice = (DvtAgent._platform == DvtAgent.WEBKIT_PLATFORM) && userAgent &&
                             (userAgent.indexOf('mobile') != -1 || userAgent.indexOf('android') != -1);
    DvtAgent._devicePixelRatio = (window && window.devicePixelRatio != null) ? window.devicePixelRatio : 1;

    // Don't initialize again
    DvtAgent._bInitialized = true;
  }
};


/**
 * Determines the operating system. This value should be cached to prevent costly calculations. This value should be
 * treated as a guess, as this code is copied from AdfAgent.guessOS().
 * @param {string} userAgent The lowercase user agent string, if available.
 * @return {string} The DvtAgent.***_OS constant describing the platform.
 * @private
 */
DvtAgent._determineOS = function(userAgent)
{
  if (userAgent) {
    if (userAgent.indexOf('win') != -1)
      return DvtAgent.WINDOWS_OS;
    else if (userAgent.indexOf('mac') != -1)
      return DvtAgent.MAC_OS;
    else if (userAgent.indexOf('sunos') != -1)
      return DvtAgent.SOLARIS_OS;
  }

  return DvtAgent.UNKNOWN_OS;
};


/**
 * Determines the name of the platform. This value should be cached to prevent costly calculations.
 * @param {string} userAgent The lowercase user agent string, if available.
 * @return {string} The DvtAgent.***_PLATFORM constant describing the platform.
 * @private
 */
DvtAgent._determinePlatform = function(userAgent)
{
  if (userAgent) {
    if (userAgent.indexOf('opera') != -1) // check opera first, since it mimics other browsers
      return DvtAgent.UNKNOWN_PLATFORM;
    else if (userAgent.indexOf('trident') != -1 || userAgent.indexOf('msie') != -1 || userAgent.indexOf('edge') != -1)
      return DvtAgent.IE_PLATFORM;
    else if ((userAgent.indexOf('applewebkit') != -1) || (userAgent.indexOf('safari') != -1))
      return DvtAgent.WEBKIT_PLATFORM;
    else if (userAgent.indexOf('gecko/') != -1)
      return DvtAgent.GECKO_PLATFORM;
  }
  return DvtAgent.UNKNOWN_PLATFORM;
};


/**
 * Determines the version of the platform. This value should be cached to prevent costly calculations.
 * @param {string} userAgent The lowercase user agent string, if available.
 * @param {string} platform The DvtAgent.***_PLATFORM constant describing the platform.
 * @return {number} The version number.
 * @private
 */
DvtAgent._determineVersion = function(userAgent, platform)
{
  if (userAgent) {
    if (platform == DvtAgent.GECKO_PLATFORM)
      return DvtAgent._parseFloatVersion(userAgent, /rv:(\d+[.]\d+)/);
    else if (platform == DvtAgent.IE_PLATFORM) {
      var tridentVersion = DvtAgent._parseFloatVersion(userAgent, /trident\/(\d+[.]\d+)/);
      // Match found, resolve to IE version number, which is trident version + 4
      if (tridentVersion != DvtAgent.UNKNOWN_VERSION)
        return tridentVersion + 4;
      // Edge
      var edgeVersion = DvtAgent._parseFloatVersion(userAgent, /edge\/(\d+[.]\d+)/);
      if (edgeVersion != DvtAgent.UNKNOWN_VERSION)
        return edgeVersion;

      var msieVersion = DvtAgent._parseFloatVersion(userAgent, /msie (\d+\.\d+);/);
      if (msieVersion != DvtAgent.UNKNOWN_VERSION)
        return msieVersion;

      return DvtAgent._parseFloatVersion(userAgent, /msie (\d+\.\d+)b;/);
    }
    else if (platform == DvtAgent.WEBKIT_PLATFORM) {
      if (DvtAgent._bChrome) //userAgent has value for webkit version and chrome version, we want the chrome version
        return DvtAgent._parseFloatVersion(userAgent, /chrome\/(\d+([.]\d+)*)/);
      return DvtAgent._parseFloatVersion(userAgent, /applewebkit\/(\d+([.]\d+)*)/);
    }
  }

  return DvtAgent.UNKNOWN_VERSION;
};


/**
 * Parses the version from the specified agent string using the regular expression.
 * @param {string} userAgent The lowercase user agent string.
 * @param {regexp} versionNumberPattern The regular expression used to parse the version number.
 * @return {number}
 * @private
 */
DvtAgent._parseFloatVersion = function(userAgent, versionNumberPattern)
{
  try {
    var matches = userAgent.match(versionNumberPattern);
    return (matches && matches[1]) ? parseFloat(matches[1]) : DvtAgent.UNKNOWN_VERSION;
  }
  catch (e) {
    // Technically we should not assume console exists, but it will in all cases where we call this function.
    console.error('DvtAgent._parseFloatVersion error: ');
    console.error(e);
    return DvtAgent.UNKNOWN_VERSION;
  }
};


/**
 * Returns the position of an HTML element relative to the document body.
 * @param {object} element The HTML element.
 * @return {DvtPoint}
 * @private
 */
DvtAgent._getElementPositionDefault = function(element)
{
  // Note: This code was copied from AdfAgent and is not cleaned up for purposes of maintainability and comparison.
  //AdfAssert.assertDomElement(element);
  var boundingRect = element.getBoundingClientRect();
  // top and bottom are not rounded off in Gecko1.9
  // http://www.quirksmode.org/dom/w3c_cssom.html#elementviewm
  var elemTop = Math.round(boundingRect.top);
  var elemLeft = boundingRect.left;
  var docElement = element.ownerDocument.documentElement;
  var body = element.ownerDocument.body;
  // clientLeft and clientTop would be 0 for Gecko1.9
  // https://bugzilla.mozilla.org/show_bug.cgi?id=174397#c34
  // : scrollTop/Left could be defined in either the docElem or the body, so we need to check both
  elemLeft += docElement.scrollLeft || body.scrollLeft;
  elemTop += docElement.scrollTop || body.scrollTop;
  return new DvtPoint(elemLeft, elemTop);
};


/**
 * Returns the position of an HTML element relative to the document body.
 * @param {object} element The HTML element.
 * @return {DvtPoint}
 * @private
 */
DvtAgent._getElementPositionIE = function(element)
{
  // Note: This code was copied from AdfAgent and is not cleaned up for purposes of maintainability and comparison.
  //AdfAssert.assertDomElement(element);
  var boundingRect = element.getBoundingClientRect();
  var elemTop = boundingRect.top;
  var elemLeft = boundingRect.left;
  var docElement = element.ownerDocument.documentElement;
  var scrollLeft = docElement.scrollLeft;

  // RTL adjustment for IE scrolled view
  //if(AdfPage.PAGE.getLocaleContext().isRightToLeft())
  //  scrollLeft += docElement.clientWidth - docElement.scrollWidth;

  // adjust for the document scroll positions and window borders
  elemLeft -= (docElement.clientLeft - scrollLeft);
  elemTop -= (docElement.clientTop - docElement.scrollTop);
  return new DvtPoint(elemLeft, elemTop);
};

/**
 * Get browser specific focus color.
 * @return {string} A color specification for the focus color
 */
DvtAgent.getFocusColor = function() {
  DvtAgent._initialize();
  if (!DvtAgent._focusColor) {
    var focusColor;
    if (DvtAgent.isPlatformWebkit() && !DvtAgent.isEnvironmentTest()) {
      var body = document.getElementsByTagName('body')[0];
      var tempDiv = document.createElement('div');
      body.appendChild(tempDiv);//@HTMLUpdateOK
      tempDiv.style.outline = '-webkit-focus-ring-color';
      focusColor = window.getComputedStyle(tempDiv).getPropertyValue('outline-color');
      body.removeChild(tempDiv);
    }
    else if (DvtAgent.isPlatformIE())
      focusColor = DvtAgent.FOCUS_COLOR_IE;
    DvtAgent._focusColor = focusColor ? focusColor : DvtAgent.FOCUS_COLOR_DEFAULT;
  }
  return DvtAgent._focusColor;
};
/**
 * Resource bundle base class.
 * @class
 * @constructor
 * @extends {DvtObj}
 * @export
 */
var DvtBundle = function() {};
DvtBundle['_localizedStrings'] = {};
DvtBundle['_defaultStrings'] = {};

DvtObj.createSubclass(DvtBundle, DvtObj, 'DvtBundle');

/**
 * Prefix
 * @type {string}
*/
DvtBundle.SUBCOMPONENT_PREFIX = 'DvtSubcomponentBundle';
/**
 * Prefix
 * @type {string}
*/
DvtBundle.AFCOMPONENT_PREFIX = 'DvtAfComponentBundle';
/**
 * Prefix
 * @type {string}
*/
DvtBundle.UTIL_PREFIX = 'DvtUtilBundle';
/**
 * Prefix
 * @type {string}
*/
DvtBundle.CHART_PREFIX = 'DvtChartBundle';
/**
 * Prefix
 * @type {string}
*/
DvtBundle.GAUGE_PREFIX = 'DvtGaugeBundle';

/**
 * Prefix
 * @type {string}
*/
DvtBundle.TREEMAP_PREFIX = 'DvtTreemapBundle';
/**
 * Prefix
 * @type {string}
*/
DvtBundle.SUNBURST_PREFIX = 'DvtSunburstBundle';
/**
 * Prefix
 * @type {string}
*/
DvtBundle.NBOX_PREFIX = 'DvtNBoxBundle';
/**
 * Prefix
 * @type {string}
*/
DvtBundle.HIERARCHYVIEWER_PREFIX = 'DvtHierarchyViewerBundle';
/**
 * Prefix
 * @type {string}
*/
DvtBundle.DIAGRAM_PREFIX = 'DvtDiagramBundle';
/**
 * Prefix
 * @type {string}
*/
DvtBundle.TAGCLOUD_PREFIX = 'DvtTagCloudBundle';
/**
 * Prefix
 * @type {string}
*/
DvtBundle.TIMELINE_PREFIX = 'DvtTimelineBundle';
/**
 * Adds localized resources into DvtBundle. Called by the resource bundle implementations to register localized strings.
 * Example:
 * var DvtChartBundle_CS = {
 *   "DvtChartBundle.LABEL_LEGEND" : "Legend"
 * }
 * DvtBundle.addLocalizedStrings(DvtChartBundle_CS);
 * @param {object} jsonObj containing key - value pairs to be added
 * @export
 */
DvtBundle.addLocalizedStrings = function(jsonObj) {
  for (var key in jsonObj) {
    DvtBundle['_localizedStrings'][key] = jsonObj[key];
  }
};

/**
 * Adds default resources into DvtBundle. Called by the resource bundle implementations to register default strings.
 * @param {string} bundlePrefix The bundle containing the given key
 * @param {object} jsonObj containing key - value pairs to be added
 * @export
 */
DvtBundle.addDefaultStrings = function(bundlePrefix, jsonObj) {
  for (var key in jsonObj) {
    DvtBundle['_defaultStrings'][bundlePrefix + '.' + key] = jsonObj[key];
  }
};

/**
 * Substitutes the replacement objects into the specified pattern.
 * @param {string} pattern The pattern string with placeholders.
 * @param {array} replacements The array of replacement strings.
 * @return {string} The resulting string.
 */
DvtBundle.format = function(pattern, replacements) {
  return pattern.replace(/\{(\d+)\}/g, function() {return replacements[arguments[1]];});
};

/**
 * Returns a translated string with replacements. If an array of replacement
 * strings is provided, these strings will be substituted into the translated string.
 * @param {string} bundlePrefix The bundle containing the given key
 * @param {string} key The key in the message bundle.
 * @param {array} replacements The array of replacement strings.
 * @return {string} The translated string.
 * @deprecated Use DvtBundle.getTranslation instead.
 */
DvtBundle.getTranslatedString = function(bundlePrefix, key, replacements) {
  var fullKey = bundlePrefix + '.' + key;
  var ret = DvtBundle['_localizedStrings'][fullKey];
  if (!ret)
    ret = DvtBundle['_defaultStrings'][fullKey];

  // Substitute the replacements if provided
  if (ret && replacements !== null && replacements !== undefined) {
    if (replacements instanceof Array)
      ret = DvtBundle.format(ret, replacements);
    else // Wrap a single object for convenience
      ret = DvtBundle.format(ret, [replacements]);
  }

  return ret;
};

/**
 * Returns a translated string with replacements. First searches for the resource in the options object, if one is
 * specified.
 * TODO: The bundlePrefix and key arguments will be removed in 1.1.1 as soon as all components switch over.
 * @param {object} options The options object containing translations.
 * @param {string} optionsKey The key in the options object.
 * @param {string} bundlePrefix The bundle containing the given key
 * @param {string} key The key in the message bundle.
 * @param {array} replacements The array of replacement strings.
 * @return {string} The translated string.
 */
DvtBundle.getTranslation = function(options, optionsKey, bundlePrefix, key, replacements) {
  var ret = (options && options['translations']) ? options['translations'][optionsKey] : null;
  if (!ret) {
    var fullKey = bundlePrefix + '.' + key;
    ret = DvtBundle['_localizedStrings'][fullKey];
    if (!ret)
      ret = DvtBundle['_defaultStrings'][fullKey];
  }

  // Substitute the replacements if provided
  if (ret && replacements !== null && replacements !== undefined) {
    if (replacements instanceof Array)
      ret = DvtBundle.format(ret, replacements);
    else // Wrap a single object for convenience
      ret = DvtBundle.format(ret, [replacements]);
  }

  return ret;
};
/**
 * LRU cache implementation for use in improving performance.  Alternate cache implementation options may be added in
 * the future as needed.
 * @param {number} targetSize The target size of the cache. Once populated, this is the minimum size of the cache.
 * @class DvtCache
 * @extends {DvtObj}
 * @constructor
 */
var DvtCache = function(targetSize) {
  this.Init(targetSize);
};

DvtObj.createSubclass(DvtCache, DvtObj, 'DvtCache');


/**
 * The default target size of the cache.
 * @private
 */
DvtCache._TARGET_SIZE = 1000;


/**
 * The overflow allowed in cache size before a removal of old keys is performed.
 * @private
 */
DvtCache._BUFFER_SIZE = 0.50;


/**
 * Initializes the cache and its underlying data structures.
 * @param {number} targetSize The target size of the cache. Once populated, this is the minimum size of the cache.
 */
DvtCache.prototype.Init = function(targetSize) {
  this._targetSize = targetSize != null ? targetSize : DvtCache._TARGET_SIZE;
  this._maxSize = Math.ceil(this._targetSize * (1 + DvtCache._BUFFER_SIZE));

  // Initialize the cache and array of keys, where the first key is the least recently used.
  this._cache = {};
  this._lruArray = [];

  // Initialize debug params for cache tuning
  this._hits = 0;
  this._misses = 0;
};


/**
 * Retrieves the value corresponding to the key from the cache.  If the key cannot be found in the cache, returns null.
 * @param {object} key
 * @return {object}
 */
DvtCache.prototype.get = function(key) {
  var ret = this._cache[key];
  if (ret != null) {
    this._hits++;
    return ret;
  }
  else {
    this._misses++;
    return null;
  }
};


/**
 * Stores the value corresponding to the key in the cache.  If the cache has reached the maximum size, then the least
 * recently used key will be removed from the cache.
 * @param {object} key
 * @param {object} value
 */
DvtCache.prototype.put = function(key, value) {
  // Optimize the cache update based on whether the key already existed in the cache
  var bKeyExists = (this._cache[key] != null);

  // Update the cache first
  this._cache[key] = value;

  // Update the array tracking recently used items
  if (bKeyExists) {
    // Already exists, remove before we add to the end of the list
    var keyIndex = DvtArrayUtils.getIndex(this._lruArray, key);
    this._lruArray.splice(keyIndex, 1);
    this._lruArray.push(key);
  }
  else {
    // Doesn't exist already, add to the array.  This indicates the cache size has increased.
    this._lruArray.push(key);

    // If the cache size exceeds the max length, then remove the least recently used items.
    if (this._lruArray.length > this._maxSize) {
      var removedKeys = this._lruArray.splice(0, this._maxSize - this._targetSize);
      for (var i = 0; i < removedKeys.length; i++) {
        delete this._cache[removedKeys[i]];
      }
    }
  }
};


/**
 * @override
 */
DvtCache.prototype.toString = function() {
  // Returns a variety of tuning information
  var ret = 'Cache Size: ' + this._lruArray.length;
  ret += '\nHits: ' + this._hits;
  ret += '\nMisses: ' + this._misses;
  ret += '\nHit %: ' + Math.round(10000 * this._hits / (this._hits + this._misses)) / 100;
  return ret;
};
/**
 * Interactivity manager for context menu support.
 * @param {DvtContext} context The platform specific context object.
 * @param {array} menus The array of menu definitions.
 * @class DvtContextMenuHandler
 * @constructor
 */
var DvtContextMenuHandler = function(context, menus) {
  this._context = context;
  this._menus = menus;
};

DvtObj.createSubclass(DvtContextMenuHandler, DvtObj, 'DvtContextMenuHandler');

/** @const **/
DvtContextMenuHandler.TYPE_BODY_CONTEXT_MENU = 'bodyContextMenu';
/** @const **/
DvtContextMenuHandler.TYPE_CONTEXT_MENU = 'contextMenu';
/** @const **/
DvtContextMenuHandler.TYPE_MULTI_SELECT_CONTEXT_MENU = 'multiSelectContextMenu';

/** @private @const **/
DvtContextMenuHandler._ATTR_MENU_CONTAINER_TYPE = 't';
/** @private @const **/
DvtContextMenuHandler._ATTR_MENU_CONTAINER_POPUP_ID = 'id';

/**
 * Displays the context menu with the specified type and id.  Depending on the rendering context,
 * a context menu will either be shown immediately, or a contextMenuEvent will be returned.  If
 * a contextMenuEvent is returned, it should be dispatched through the event callback mechanism.
 * @param {object} event The event that is triggering the context menu.
 * @param {string} menuType The type of context menu being requested, such as bodyContextMenu.
 * @return {DvtContextMenuEvent} A context menu event to dispatch or null, depending on the rendering context.
 */
DvtContextMenuHandler.prototype.show = function(event, menuType) {
  // Look through all context menu definitions for the right context menu to show
  for (var i = 0; i < this._menus.length; i++) {
    var menu = this._menus[i];
    if (menuType == menu[DvtContextMenuHandler._ATTR_MENU_CONTAINER_TYPE]) {
      // Match found.  This implementation will fire a showPopupEvent.
      var popupId = menu[DvtContextMenuHandler._ATTR_MENU_CONTAINER_POPUP_ID];
      return new DvtContextMenuEvent(event.getNativeEvent(), popupId);
    }
  }
  return null;
};
/**
 * Interactivity manager for popup support.
 * @param {DvtContext} context The platform specific context object.
 * @param {function} callback A function that responds to delayed popup events
 * @param {object} callbackObj The optional object instance that the callback function is defined on.
 * @class DvtPopupBehaviorHandler
 * @constructor
 */
var DvtPopupBehaviorHandler = function(context, callback, callbackObj) {
  this._context = context;
  this._callback = callback;
  this._callbackObj = callbackObj;

  // Initialize the hover params
  this._popupPosition = null;   // The most recent position, useful for placing the popup
  this._mouseTarget = null;      // The current hover target
  this._behavior = null;    // The current showPopupBehavior for the hover
  this._hoverPopupShown = false; // true if a hover popup is being shown
  this._hoverTimer = new DvtTimer(context, 500, this._onHoverDelay, this, 1);
  this._overTimer = new DvtTimer(context, 500, this._onOverDelay, this, 1);
};

DvtObj.createSubclass(DvtPopupBehaviorHandler, DvtObj, 'DvtPopupBehaviorHandler');

// TODO define an interface for the targets of the popup handler functions
// 1. getPopupBounds()
// 2. getId()

/**
 * Processes click and context menu events and fires a DvtShowPopupEvent if a popup should be shown.
 * @param {object} target The target of the mouse event.
 * @param {array} behaviors The array of applicable show popup behaviors.
 * @param {array} triggers The array of trigger types to process
 * @param {DvtPoint} position The position for placing the popup.
 * @param {object} event The mouse event
 * @return {boolean} true if click event processed
 */
DvtPopupBehaviorHandler.prototype.processPopupHelper = function(target, behaviors, triggers, position, event) {
  var consumed = false;
  if (target && behaviors && behaviors.length > 0) {
    for (var i = 0; i < behaviors.length; i++) {
      var behavior = behaviors[i];
      if (behavior && DvtArrayUtils.getIndex(triggers, behavior.getTriggerType()) != -1) {
        //: hide an existing popup before showing a new one
        this.HidePopup(event);
        this._behavior = behavior;
        // Create and fire the popup event
        var popupEvent = this._createShowPopupEvent(target, behavior, position);
        DvtEventDispatcher.dispatchEvent(this._callback, this._callbackObj, this, popupEvent);
        consumed = true;
      }
    }
  }
  return consumed;
};


/**
 * Processes a mouseOver event.
 * @param {object} target The target of the mouse event.
 * @param {array} behaviors The array of applicable show popup behaviors.
 * @param {DvtPoint} position The position for the popup.
 * @param {DvtDisplayable} displayable The DvtDisplayable associated with the logical target of the event.
 * @param {object} event The mouse event
 * @param {string} mouseTriggerType the trigger of the mouse event
 * @return {boolean} true if mouse event processed
 */
DvtPopupBehaviorHandler.prototype.processMousePopup = function(target, behaviors, position, displayable, event, mouseTriggerType) {
  // Same target, no action needed
  if (target === this._mouseTarget)
    return true;

  // Different target, look for applicable showPopupBehavior
  if (target && behaviors && behaviors.length > 0)
  {
    for (var i = 0; i < behaviors.length; i++) {
      var behavior = behaviors[i];
      var behaviorTriggerType = behavior ? behavior.getTriggerType() : null;
      //Mouse over is the mouseTriggerType that activates mouse hover so need to overwrite to
      //over when making the comparison
      if (behaviorTriggerType == DvtShowPopupBehavior.TRIGGER_TYPE_MOUSE_HOVER) {
        behaviorTriggerType = DvtShowPopupBehavior.TRIGGER_TYPE_MOUSE_OVER;
      }
      if (mouseTriggerType == behaviorTriggerType) {

        //: hide an existing popup before showing a new one
        this.HidePopup(event);

        // Found hover behavior, store the info for use in callback and rollout
        this._mouseTarget = target;
        this._behavior = behavior;
        //: save the displayable so we know when to hide a mousehover popup
        this._hoverDisplayable = displayable;

        this._popupPosition = position;
        // Start the hover timer
        if (mouseTriggerType == DvtShowPopupBehavior.TRIGGER_TYPE_MOUSE_HOVER
        || mouseTriggerType == DvtShowPopupBehavior.TRIGGER_TYPE_MOUSE_OVER) {
          if (behavior.getTriggerType() == DvtShowPopupBehavior.TRIGGER_TYPE_MOUSE_HOVER) {
            this._hoverTimer.start();
          }
          else {
            this._overTimer.start();
          }
        }
        else {
          this._onOverDelay();
        }

        return true;
      }
    }
  }
  return false;
};


/**
 * Processes a mouseOver event and fires a DvtHidePopupEvent if a popup is to be hidden.
 * @param {object} target The target of the mouse event.
 * @param {array} displayableHierarchy The hierarchy of DvtDisplayables associated with the relatedTarget of the
 * @param {object} event The mouse event
 * mouseout event
 */
DvtPopupBehaviorHandler.prototype.processMouseOut = function(target, displayableHierarchy, event) {
  //: if we're mousing out of the whole component, hide the popup
  var bLeavingComponent = false;
  if (displayableHierarchy) {
    bLeavingComponent = (displayableHierarchy.length < 1);
  }
  // Continue only if a hover popup was processed for this target
  if (!this._mouseTarget || !this._behavior || (target !== this._mouseTarget && !bLeavingComponent))
    return;

  //: don't hide the popup if the DvtDisplayable that launched it is still in the
  //hierarchy of DvtDisplayables for the event's relatedTarget, in other words, if we haven't moused out
  //of the launching displayable entirely (for example, when mousing between children of the
  //launching displayable)
  if (displayableHierarchy && this._hoverDisplayable) {
    if (DvtArrayUtils.getIndex(displayableHierarchy, this._hoverDisplayable) > -1) {
      return;
    }
  }

  this.HidePopup(event);
};


/**
 * Hides a popup
 * @param {object} event The mouse event
 * @protected
 */
DvtPopupBehaviorHandler.prototype.HidePopup = function(event) {
  if (this._hoverPopupShown) {
    // Popup already shown, hide it
    var popupEvent = new DvtHidePopupEvent(this._behavior.getPopupId(), event.getNativeEvent().relatedTarget);
    DvtEventDispatcher.dispatchEvent(this._callback, this._callbackObj, this, popupEvent);
  }
  else {
    // Popup not shown yet, just stop the timer
    this._hoverTimer.stop();
  }

  // Clear out the fields
  this._mouseTarget = null;
  this._behavior = null;
  this._hoverPopupShown = false;
  this._hoverDisplayable = null;
};

/**
 * Processes a mouseMove event.  The most recent position is stored to help position
 * hover popups relative to the mouse.
 * @param {DvtPoint} position The position for the popup.
 */
DvtPopupBehaviorHandler.prototype.processMouseMove = function(position) {
  this._popupPosition = position;
};


/**
 * Helper function used to create the DvtShowPopupEvent.
 * @param {object} target The target of the mouse event.
 * @param {DvtShowPopupBehavior} behavior The show popup behavior that is being fired.
 * @param {DvtPoint} position The position for placing the popup.
 * @return {DvtShowPopupEvent} The showPopupEvent, if a popup should be shown.
 * @private
 */
DvtPopupBehaviorHandler.prototype._createShowPopupEvent = function(target, behavior, position) {
  //: only align to the moue when align information is not specified if this._bForceAlignToMouse is true

  // If align and alignId are not defined, position the popup with alignId="endAfter".  The original
  // showPopupBehavior is not modified.
  var spb = behavior;
  var behaviorForBounds = behavior;
  var canAlignToMouse = spb.getAlign() && !spb.getAlignId();
  if (canAlignToMouse) {
    behaviorForBounds = new DvtShowPopupBehavior(spb.getPopupId(), spb.getTriggerType(), null, null);
  }

  // Find the bounds that the popup should align to
  var launcherBounds = target.getPopupBounds ? target.getPopupBounds(behaviorForBounds) : null;
  if (canAlignToMouse && !launcherBounds) {
    // If the object doesn't specify a bounds, then align to the mouse
    var pos = this._context.pageToStageCoords(position.x, position.y);
    launcherBounds = new DvtRectangle(pos.x, pos.y - 5, 1, 5);
  }
  else if (launcherBounds) {
    //: if we have launcher bounds, then create a new behavior object and set the alignId
    //to null so that the JS peer will recognize that the popup should be aligned to a component
    //rendered by the toolkit and position the helper div accordingly
    spb = new DvtShowPopupBehavior(spb.getPopupId(), spb.getTriggerType(), null, spb.getAlign());
  }

  var event = new DvtShowPopupEvent(spb, launcherBounds, null, spb.getTriggerType());
  // add the component specific context
  DvtEventManager._addContextInfo(target, event);

  return event;
};


/**
 * Callback function that is called by the timer when a hover popup should be shown.
 * @private
 */
DvtPopupBehaviorHandler.prototype._onHoverDelay = function() {
  if (!this._mouseTarget || !this._behavior)
    return;
  // Show the popup: Create the event and pass to the hover callback
  this._hoverPopupShown = true;
  var event = this._createShowPopupEvent(this._mouseTarget, this._behavior, this._popupPosition);
  DvtEventDispatcher.dispatchEvent(this._callback, this._callbackObj, this, event);
};

/**
 * Callback function that is called by the timer when a mouse over popup should be shown.
 * @private
 */
DvtPopupBehaviorHandler.prototype._onOverDelay = function() {
  if (!this._mouseTarget || !this._behavior)
    return;
  // Show the popup: Create the event and pass to the hover callback
  var event = this._createShowPopupEvent(this._mouseTarget, this._behavior, this._popupPosition);
  DvtEventDispatcher.dispatchEvent(this._callback, this._callbackObj, this, event);
};

/**
 * Helper function used to tell if obj has certain popup trigger
 * @param {object} obj The object being checked of triggers
 * @param {array} triggers The array of trigger types being checked
 * @return {boolean} true if obj has trigger popuptype
 */
DvtPopupBehaviorHandler.prototype.hasPopup = function(obj, triggers) {
  if (!obj || !obj.getShowPopupBehaviors) {
    return false;
  }
  var behaviors = obj.getShowPopupBehaviors();
  if (behaviors) {
    for (var i = 0; i < behaviors.length; i++) {
      var behavior = behaviors[i];
      if (behavior && DvtArrayUtils.getIndex(triggers, behavior.getTriggerType()) != -1) {
        return true;
      }
    }
  }
  return false;
};
/**
 * Interactivity manager for dvt component client behaviors
 * @param {DvtContext} context The platform specific context object.
 * @param {function} callback A function that responds to client behavior events
 * @param {object} callbackObj The optional object instance that the callback function is defined on.
 * @class DvtClientBehaviorHandler
 * @constructor
 */
var DvtClientBehaviorHandler = function(context, callback, callbackObj) {
  this.Init(context, callback, callbackObj);
};

DvtObj.createSubclass(DvtClientBehaviorHandler, DvtObj, 'DvtClientBehaviorHandler');

DvtClientBehaviorHandler.prototype.Init = function(context, callback, callbackObj) {
  this._context = context;
  this._callback = callback;
  this._callbackObj = callbackObj;
};


/**
 * Processes a click event and fires a DvtClientBehaviorEvent if a client behavior was triggered.
 * @param {object} target The target of the mouse event.
 * @param {array} behaviors The array of applicable client behaviors.
 * @return {boolean} true if a client behavior was triggered, false otherwise
 */
DvtClientBehaviorHandler.prototype.processClick = function(target, behaviors) {
  var consumed = false;
  if (target && behaviors && behaviors.length > 0)
  {
    for (var i = 0; i < behaviors.length; i++) {
      var behavior = behaviors[i];
      if (behavior && (behavior.getTriggerType() == DvtClientBehavior.TRIGGER_TYPE_ACTION ||
          behavior.getTriggerType() == DvtClientBehavior.TRIGGER_TYPE_CLICK)) {
        // Create and fire the popup event
        var behaviorEvent = this.CreateClientBehaviorEvent(target, behavior);
        DvtEventDispatcher.dispatchEvent(this._callback, this._callbackObj, null, behaviorEvent);
        consumed = true;
      }
    }
  }

  return consumed;
};

DvtClientBehaviorHandler.prototype.CreateClientBehaviorEvent = function(target, behavior) {
  var behaviorEvent = new DvtClientBehaviorEvent(behavior);
  DvtEventManager._addContextInfo(target, behaviorEvent);
  return behaviorEvent;
};
/**
  * Interactivity manager for selection.
  * @class DvtSelectionHandler
  * @constructor
  */
var DvtSelectionHandler = function(type) {
  this.Init(type);
};

DvtObj.createSubclass(DvtSelectionHandler, DvtObj, 'DvtSelectionHandler');

DvtSelectionHandler.TYPE_SINGLE = 's';
DvtSelectionHandler.TYPE_MULTIPLE = 'm';

DvtSelectionHandler.prototype.Init = function(type) {
  this._selection = [];
  this._type = type ? type : DvtSelectionHandler.TYPE_SINGLE;

  // Some selected id may not correspond to a drawn target because it's outside the viewport.
  this._hiddenSelectedIds = [];
};

DvtSelectionHandler.prototype.getType = function() {
  return this._type;
};


/**
 * Returns the number of currently selected objects.
 * @return {number}
 */
DvtSelectionHandler.prototype.getSelectedCount = function() {
  return this._selection.length;
};


/**
 * Returns the current selection.
 * @return {array} The current selection.
 */
DvtSelectionHandler.prototype.getSelection = function() {
  return this._selection.slice(0);
};


/**
 * Returns the ids for the currently selected objects. Includes the ids of the hidden selected objects.
 * @return {array} The ids for the currently selected objects.
 */
DvtSelectionHandler.prototype.getSelectedIds = function() {
  var selectedIds = [];
  for (var i = 0; i < this._selection.length; i++) {
    selectedIds.push(this._selection[i].getId());
  }
  return selectedIds.concat(this._hiddenSelectedIds);
};


/**
 * Processes the initially selected objects, updating the state of this handler.
 * @param {array} selectedIds The array of ids for the selected objects.
 * @param {array} targets The array of selectable objects.
 */
DvtSelectionHandler.prototype.processInitialSelections = function(selectedIds, targets) {
  // Clear current selection state
  this.clearSelection(true);

  // If nothing selected, we are done
  if (!selectedIds || !targets)
    return;

  // Loop through all the selected ids, matching them to the targets
  for (var i = 0; i < selectedIds.length; i++) {
    var hidden = true;
    for (var j = 0; j < targets.length; j++) {
      var targetId = targets[j].getId();
      if (targetId != null && DvtSelectionHandler._isEquals(selectedIds[i], targetId) && targets[j].isSelectable && targets[j].isSelectable()) {
        // Found a match, continue to next selected id
        this._addToSelection(targets[j], true, true);
        hidden = false;
        break;
      }
    }
    if (hidden)
      this._hiddenSelectedIds.push(selectedIds[i]);
  }
};


/**
 * Processes a click event.
 * @param {DvtSelectable} target
 * @param {boolean} addToExisting true if a key indicating multi-select should be performed was pressed during the click.
 * @return {boolean} true if the selection has changed.
 */
DvtSelectionHandler.prototype.processClick = function(target, addToExisting) {
  //: if this click is unrelated to selection, then
  //don't change selection at all
  if (target && target.isUnrelatedToSelection && target.isUnrelatedToSelection()) {
    return false;
  }

  // Check whether we are in multi-select mode
  var bMulti = (addToExisting && this._type == DvtSelectionHandler.TYPE_MULTIPLE);

  //*************************************************
  // Possible cases:
  // 1. Multi-select of selectable target
  // 2. Multi-select of non-selectable target (noop)
  // 3. Single select of selectable target
  // 4. Single select of non-selectable target
  //*************************************************

  var bChanged = false; // Keep track of whether the selection is changed
  if (bMulti)
  {
    if (target && target.isSelectable && target.isSelectable()) {
      // 1. Multi-select of selectable target
      if (target.isSelected()) {
        bChanged = this.removeFromSelection(target);
      }
      else {
        bChanged = this._addToSelection(target, true);
      }
    }
    // Otherwise 2. Multi-select of non-selectable target (noop)
  }
  else // Single Select
  {
    if (target && target.isSelectable && target.isSelectable()) {
      // 3. Single select of selectable target
      bChanged = this._addToSelection(target, false);
    }
    else {
      // 4. Single select of non-selectable target
      bChanged = this.clearSelection();
    }
  }

  // Return whether the selection has changed.
  return bChanged;
};


/**
 * Processes selection event involving a group of target items.
 * @param {array} targets Array of DvtSelectable objects
 * @param {boolean} addToExisting true if a key indicating multi-select should be performed was pressed during the click.
 */
DvtSelectionHandler.prototype.processGroupSelection = function(targets, addToExisting) {
  if (!addToExisting)
    this.clearSelection();

  var target;
  for (var i = 0; i < targets.length; i++) {
    target = targets[i];

    //: if this click is unrelated to selection, then
    //don't change selection at all
    if (target && target.isUnrelatedToSelection && target.isUnrelatedToSelection()) {
      continue;
    }

    this._addToSelection(target, true);
  }
};


/**
 * Processes a mouseOver event.
 * @param {DvtSelectable} target
 */
DvtSelectionHandler.prototype.processMouseOver = function(target) {
  if (target && target.isSelectable && target.isSelectable() && target.showHoverEffect) {
    target.showHoverEffect();
  }
};


/**
 * Processes a mouseOut event.
 * @param {DvtSelectable} target
 */
DvtSelectionHandler.prototype.processMouseOut = function(target) {
  if (target && target.isSelectable && target.isSelectable() && target.hideHoverEffect) {
    target.hideHoverEffect();
  }
};


/**
 * Selects a single object.
 * @param {DvtSelectable} target the object to select
 * @param {boolean} bAddToExisting true if the object should be added to the current selection.
 * @param {boolean} isInitial (optional) True if it is an initial selection.
 * @return {boolean} true if the selection has changed.
 */
DvtSelectionHandler.prototype._addToSelection = function(target, bAddToExisting, isInitial) {
  // If already selected, return.  This intentionally ignores bAddToExisting.
  if (target.isSelected() || (target.isSelectable && !target.isSelectable())) {
    return false;
  }

  // If not adding to the current selection, deselect all
  if (!bAddToExisting) {
    this.clearSelection(isInitial);
  }

  // Finally, select the object
  target.setSelected(true, isInitial);
  this._selection.push(target);
  return true;
};


/**
 * Deselects a single object in the selection.
 * @param {DvtSelectable} target the object to deselect
 * @return {boolean} true if the selection has changed.
 */
DvtSelectionHandler.prototype.removeFromSelection = function(target) {
  if (!target.isSelected())
    return false;

  // First deselect the object, then remove it from the selected array
  target.setSelected(false);
  for (var i = 0; i < this._selection.length; i++) {
    if (this._selection[i] == target) {
      this._selection.splice(i, 1);
      break;
    }
  }
  return true;
};


/**
 * Clears the current selection.
 * @param {boolean} isInitial (optional) True if it is an initial selection.
 * @return {boolean} true if the selection has changed.
 */
DvtSelectionHandler.prototype.clearSelection = function(isInitial) {
  if (this._selection.length <= 0 && this._hiddenSelectedIds.length <= 0)
    return false;

  while (this._selection.length > 0) {
    var obj = this._selection.pop();
    obj.setSelected(false, isInitial);
  }
  this._hiddenSelectedIds.length = 0;
  return true;
};


/**
 * Utility function used to determine if two id objects are equal.
 * @param {object} a
 * @param {object} b
 * @private
 * @return {boolean}
 */
DvtSelectionHandler._isEquals = function(a, b) {
  if (a == b)
    return true;
  else if (a instanceof String)       // Flash doesn't have a String.equals()
    return false;
  else if (a && a.equals)
    return a.equals(b);
  else
    return false;
};
/**
  * Interactivity manager for keyboard events.
  * @param {DvtEventManager} manager The owning DvtEventManager
  * @class DvtKeyboardHandler
  * @constructor
  */
var DvtKeyboardHandler = function(manager) 
{
  this.Init(manager);
};

DvtObj.createSubclass(DvtKeyboardHandler, DvtObj, 'DvtKeyboardHandler');

// Constants used for calculating penalties when calculating distances between two DvtKeyboardNavigables
// in DvtKeyboardHandler._calcDistanceAngleWeighted
/** @private */
DvtKeyboardHandler._OPTIMAL_ANGLE1 = 15 / 180 * Math.PI;
/** @private */
DvtKeyboardHandler._OPTIMAL_ANGLE2 = 40 / 180 * Math.PI;
/** @private */
DvtKeyboardHandler._SUBOPTIMAL_ANGLE_PENALTY1 = 2; // multiplier to the distance
/** @private */
DvtKeyboardHandler._SUBOPTIMAL_ANGLE_PENALTY2 = 6; // multiplier to the distance

/**
 * @param {DvtEventManager} manager The owning DvtEventManager
 */
DvtKeyboardHandler.prototype.Init = function(manager)
{
  this._eventManager = manager;
};

/**
 * Processes key down events.
 * @param {DvtKeyboardEvent} event
 * @return {DvtKeyboardNavigable} The object that has keyboard focus as a result of the keyboard event. Null if the event
 *                                does not affect which DvtKeyboardNavigable has focus.
 */
DvtKeyboardHandler.prototype.processKeyDown = function(event) 
{
  var currentNavigable = this._eventManager.getFocus();
  if (currentNavigable && (this.isNavigationEvent(event) || this.isMultiSelectEvent(event)))
  {
    DvtEventManager.consumeEvent(event);
    var nextNavigable = currentNavigable.getNextNavigable(event);
    if (nextNavigable != currentNavigable) {
      if (nextNavigable)
        this._showPopupHelper(nextNavigable, [DvtShowPopupBehavior.TRIGGER_TYPE_FOCUS], event);
      this._showPopupHelper(currentNavigable, [DvtShowPopupBehavior.TRIGGER_TYPE_BLUR], event);
    }
    return nextNavigable;
  }
  else if (event.keyCode != DvtKeyboardEvent.TAB && currentNavigable) {
    this._showPopupHelper(currentNavigable, [DvtShowPopupBehavior.TRIGGER_TYPE_KEY_DOWN], event);
  }

  return null;
};

/**
 * Processes key Up and key press events.
 * @param {DvtKeyboardEvent} event
 * @param {String} triggerType
 */
DvtKeyboardHandler.prototype.processKeyUp = function(event, triggerType) 
{
  var currentNavigable = this._eventManager.getFocus();

  if (currentNavigable && event.keyCode == DvtKeyboardEvent.TAB) {//it was a tab
    this._showPopupHelper(currentNavigable, [DvtShowPopupBehavior.TRIGGER_TYPE_FOCUS], event);
  }
  else if (currentNavigable && !(this.isNavigationEvent(event) || this.isMultiSelectEvent(event)))
  {
    this._showPopupHelper(currentNavigable, triggerType, event);
  }

};


/**
 * Simple implementation to return a navigable item based on direction and bounding box of current focused item
 * @param {DvtKeyboardNavigable} currentNavigable The DvtKeyboardNavigable item with current focus
 * @param {DvtKeyboardEvent} event
 * @param {Array} navigableItems An array of items that could receive focus next
 * @param {Boolean} ignoreBounds (optional) Ignore the _isInBounds check when finding the next navigable
 * @return {DvtKeyboardNavigable} The next navigable
 */
DvtKeyboardHandler.getNextNavigable = function(currentNavigable, event, navigableItems, ignoreBounds) 
{
  var nextNavigable = null;
  var nextNavigableDelta = 0;
  var delta = 0;

  var direction = event.keyCode;

  if (!currentNavigable)
  {
    if (!navigableItems || navigableItems.length < 1)
      return null;
    else
      return navigableItems[0];
  }

  // get the bounds of the current navigable
  var currentBounds = currentNavigable.getKeyboardBoundingBox();
  var candidateBounds;

  for (var i = 0; i < navigableItems.length; i++)
  {
    var navigable = navigableItems[i];

    if (currentNavigable === navigable)
      continue;

    candidateBounds = navigable.getKeyboardBoundingBox();

    if (ignoreBounds || DvtKeyboardHandler._isInBounds(currentBounds, candidateBounds, direction))
    {
      delta = DvtKeyboardHandler._computeDelta(currentBounds, candidateBounds, direction);

      if ((((direction == DvtKeyboardEvent.UP_ARROW) || (direction == DvtKeyboardEvent.LEFT_ARROW)) && (delta < 0) && (!nextNavigable || (delta > nextNavigableDelta))) ||
          (((direction == DvtKeyboardEvent.DOWN_ARROW) || (direction == DvtKeyboardEvent.RIGHT_ARROW)) && (delta > 0) && (!nextNavigable || (delta < nextNavigableDelta)))
      )
      {
        nextNavigable = navigable;
        nextNavigableDelta = delta;
      }
    }
  }
  return nextNavigable ? nextNavigable : currentNavigable;
};

/**
 * Helper function for showing popups
 * @param {DvtKeyboardNavigable} navigable The DvtKeyboardNavigable item to show the popup
 * @param {Array} triggerType An array containing the trigger type
 * @param {object} event The svg event
 * @return {boolean} true if popup is showing
 * @private
 */
DvtKeyboardHandler.prototype._showPopupHelper = function(navigable, triggerType, event) {
  var context = this._eventManager.getCtx();
  var coords = navigable.getKeyboardBoundingBox(context.getStage()).getCenter();
  var pageCoords = context.stageToPageCoords(coords.x, coords.y);
  var behaviors = navigable.getShowPopupBehaviors ? navigable.getShowPopupBehaviors() : null;
  return this._eventManager.getPopupHandler().processPopupHelper(navigable, behaviors, triggerType, pageCoords, event);
};
/**
 * Returns a default keyboard navigable by selecting the upper left or lower right-most item in the navigableItems
 * array.  Utility method that can be called by classes that implement DvtKeyboardNavigable
 * @param {Array} navigableItems An array of DvtKeyboardNavigables from which to choose the default one to receive focus
 * @return {DvtKeyboardNavigable}
 */
DvtKeyboardHandler.prototype.getDefaultNavigable = function(navigableItems)
{
  if (!navigableItems || navigableItems.length <= 0)
    return null;

  var defaultNavigable = navigableItems[0];
  var defaultLocation = defaultNavigable.getKeyboardBoundingBox();
  var navigable;
  var navigableLocation;

  for (var i = 1; i < navigableItems.length; i++)
  {
    navigable = navigableItems[i];
    navigableLocation = navigable.getKeyboardBoundingBox();
    // return the top left-most item in non-bidi and top right-most item in bidi
    if ((((navigableLocation.x == defaultLocation.x && navigableLocation.y < defaultLocation.y) ||
        navigableLocation.x < defaultLocation.x) && !DvtAgent.isRightToLeft(this._eventManager.getCtx())) ||
        (((navigableLocation.x + navigableLocation.w == defaultLocation.x + defaultLocation.w && navigableLocation.y < defaultLocation.y) ||
        navigableLocation.x + navigableLocation.w > defaultLocation.x + defaultLocation.w) && DvtAgent.isRightToLeft(this._eventManager.getCtx())))
    {
      defaultNavigable = navigable;
      defaultLocation = defaultNavigable.getKeyboardBoundingBox();
    }
  }

  return defaultNavigable;
};


/**
 * Returns true if the event requires us to update the DvtKeyboardNavigable with keyboard focus.  In the base
 * implementation, we return true if the given event is an arrow keystroke.
 * @param {DvtKeybaordEvent} event
 * @return {Boolean}
 */
DvtKeyboardHandler.prototype.isNavigationEvent = function(event)
{
  var keyCode = event.keyCode;

  switch (keyCode)
  {
    case DvtKeyboardEvent.UP_ARROW:
    case DvtKeyboardEvent.DOWN_ARROW:
    case DvtKeyboardEvent.LEFT_ARROW:
    case DvtKeyboardEvent.RIGHT_ARROW:
      return true;
    default:
      break;
  }
  return false;
};


/**
 * Returns true if the event requires us to perform a single select
 * @param {DvtKeyboardEvent} event
 * @return {Boolean}
 */
DvtKeyboardHandler.prototype.isSelectionEvent = function(event)
{
  return false; // subclasses should override
};


/**
 * Returns true if the event requires us to perform a multi select
 * @param {DvtKeybaordEvent} event
 * @return {Boolean}
 */
DvtKeyboardHandler.prototype.isMultiSelectEvent = function(event)
{
  return false; // subclasses should override
};


/**
 * Returns true if the keyboard event is the standard keystroke for opening context menus
 * (Ctrl + Alt + M)
 * @param {DvtKeyboardEvent} event
 * @return {Boolean} true if the event is Ctrl+Alt+M, false otherwise
 */
DvtKeyboardHandler.prototype.isContextMenuEvent = function(event)
{
  return event.keyCode == DvtKeyboardEvent.M &&
      event.altKey && event.ctrlKey;
};


/**
 * Determines if the candidate bounds line up with the current bounds in the given direction
 * For example, if the direction is up, then the candidate's x-bounds should overlap with the
 * current's x-bounds
 *
 * @param {DvtRectangle} currentBounds
 * @param {DvtRectangle} candidateBounds
 * @param {Number} direction  One of DvtKeyboardEvent.UP_ARROW, DvtKeyboardEvent.DOWN_ARROW,
 *                            DvtKeyboardEvent.LEFT_ARROW, or DvtKeyboardEvent.RIGHT_ARROW
 * @return {Boolean} True if the candidate bounds line up with the current bounds, in the given direction
 * @private
 */
DvtKeyboardHandler._isInBounds = function(currentBounds, candidateBounds, direction) 
{
  if (direction == DvtKeyboardEvent.UP_ARROW || direction == DvtKeyboardEvent.DOWN_ARROW)
  {
    // if up/down, check that the current x-bounds overlap with the candidate's x-bounds.
    // by making sure that the left edge of the current is not to the right of the candidate
    // and that the right edge of the current is not to the left of the candidate

    var currentX1 = currentBounds.x;
    var currentX2 = currentX1 + currentBounds.w;
    var candidateX1 = candidateBounds.x;
    var candidateX2 = candidateX1 + candidateBounds.w;

    return !((currentX1 >= candidateX2) || (currentX2 <= candidateX1));
  }
  else if (direction == DvtKeyboardEvent.LEFT_ARROW || direction == DvtKeyboardEvent.RIGHT_ARROW)
  {
    // if left/right, check that the current y-bounds overlap with the candidate's y-bounds.
    // by making sure that the top edge of the current is not below the candidate
    // and that the bottom edge of the current is not above the candidate

    var currentY1 = currentBounds.y;
    var currentY2 = currentY1 + currentBounds.h;
    var candidateY1 = candidateBounds.y;
    var candidateY2 = candidateY1 + candidateBounds.h;

    return !((currentY1 >= candidateY2) || (currentY2 <= candidateY1));
  }
};


/**
 * Determines the diffeerence between the centers of the currentBounds and the candidatBounds,
 * in the given direction.  The difference is negative if the candidate is above or to the left
 * of the current, positive if the candidate is below or to the right
 *
 * @param {DvtRectangle} currentBounds
 * @param {DvtRectangle} candidateBounds
 * @param {Number} direction  One of DvtKeyboardEvent.UP_ARROW, DvtKeyboardEvent.DOWN_ARROW,
 *                            DvtKeyboardEvent.LEFT_ARROW, or DvtKeyboardEvent.RIGHT_ARROW
 * @return {Number} The difference between the centers of the currentBounds and candidateBounds, in
 *                  the given direction
 * @private
 */

DvtKeyboardHandler._computeDelta = function(currentBounds, candidateBounds, direction)
{
  var delta = 0;
  var currentX = currentBounds.getCenter().x;
  var currentY = currentBounds.getCenter().y;
  var candidateX = candidateBounds.getCenter().x;
  var candidateY = candidateBounds.getCenter().y;

  if ((direction == DvtKeyboardEvent.UP_ARROW) || (direction == DvtKeyboardEvent.DOWN_ARROW))
    delta = candidateY - currentY;
  else if ((direction == DvtKeyboardEvent.LEFT_ARROW) || (direction == DvtKeyboardEvent.RIGHT_ARROW))
    delta = candidateX - currentX;

  return delta;
};


/**
 * Returns the next navigable based on the arrow key that was pressed. This method will return the next navigable that
 * is adjacent to the current navigable, in the direction of the arrow key. If there are no adjacent navigables, the
 * closest navigable in the direction of the arrow key is returned.  Distance to the nearest navigable is based on
 * straight line distance between the midpoints of the navigables' keyboard bounding box, multiplied by a penalty
 * factor if the midpoints are too far off the vertical (in the case of up and down) or horizontal (for left and right)
 *
 * @param {DvtKeyboardNavigable} current
 * @param {DvtKeyboardEvent} event
 * @param {Array} listOfObjects Array of DvtKeyboardNavigable objects
 * @return {DvtKeyboardNavigable}
 */
DvtKeyboardHandler.getNextAdjacentNavigable = function(current, event, listOfObjects)
{
  var keycode = event.keyCode;

  if (!listOfObjects)
    return null;

  if (!current)
    return listOfObjects[0];

  var nextObject = current; //init to current object
  var nextDistance = Number.MAX_VALUE;

  // If an object is in contact it overrules all other attributes
  // Only another in contact object with better attributes will have higher precedence
  var nextInContact = false;

  for (var i = 0; i < listOfObjects.length; i++)
  {
    var object = listOfObjects[i];

    if (object === current)
      continue;

    if (!DvtKeyboardHandler._isValidDestination(object, current, keycode))
      continue;

    var inContact = DvtKeyboardHandler._calcInContact(object, current, keycode);

    if (nextInContact && !inContact)
      continue;

    var distance = DvtKeyboardHandler._calcDistanceAngleWeighted(object, current, keycode);
    // Make sure incontact flag have highest precedence
    if ((!nextInContact && inContact) ||
        (distance < nextDistance && ((nextInContact && inContact) || !nextInContact)))
    {
      nextDistance = distance;
      nextObject = object;
      nextInContact = inContact;
    }
  }
  return nextObject;
};


/**
 * Determine if two objects are in contact in the specified direction
 *
 * @param {DvtKeyboardNavigable} object
 * @param {DvtKeyboardNavigable} current
 * @param {Number} keycode
 * @return {Boolean}
 * @private
 */
DvtKeyboardHandler._calcInContact = function(object, current, keycode)
{
  var objRect = object.getKeyboardBoundingBox();
  var curRect = current.getKeyboardBoundingBox();

  switch (keycode)
  {
    case DvtKeyboardEvent.UP_ARROW:
      return DvtKeyboardHandler._isVerticallyAligned(objRect, curRect) &&
          (curRect.y <= (objRect.y + objRect.h) || DvtKeyboardHandler._areEqualWithinTolerance(curRect.y, objRect.y + objRect.h));
    case DvtKeyboardEvent.DOWN_ARROW:
      return DvtKeyboardHandler._isVerticallyAligned(objRect, curRect) &&
          (objRect.y <= (curRect.y + curRect.h) || DvtKeyboardHandler._areEqualWithinTolerance(objRect.y, curRect.y + curRect.h));
    case DvtKeyboardEvent.RIGHT_ARROW:
      return DvtKeyboardHandler._isHorizontallyAligned(objRect, curRect) &&
          (objRect.x <= (curRect.x + curRect.w) || DvtKeyboardHandler._areEqualWithinTolerance(objRect.x, curRect.x + curRect.w));
    case DvtKeyboardEvent.LEFT_ARROW:
      return DvtKeyboardHandler._isHorizontallyAligned(objRect, curRect) &&
          (curRect.x <= (objRect.x + objRect.w) || DvtKeyboardHandler._areEqualWithinTolerance(curRect.x, objRect.x + objRect.w));
    default:
      break;
  }

  return false;
};


/**
 * Returns true if the two input rectangles are lined up vertically
 *
 * @param {DvtRectangle} rect1
 * @param {DvtRectangle} rect2
 * @return {Boolean}
 * @private
 */
DvtKeyboardHandler._isVerticallyAligned = function(rect1, rect2)
{
  return ((rect1.x >= rect2.x && rect1.x <= (rect2.x + rect2.w)) ||
          (rect2.x >= rect1.x && rect2.x <= (rect1.x + rect1.w)));
};


/**
 * Returns true if the two input rectangles are lined up horizontally
 *
 * @param {DvtRectangle} rect1
 * @param {DvtRectangle} rect2
 * @return {Boolean}
 * @private
 */
DvtKeyboardHandler._isHorizontallyAligned = function(rect1, rect2)
{
  return ((rect1.y >= rect2.y && rect1.y <= (rect2.y + rect2.h)) ||
          (rect2.y >= rect1.y && rect2.y <= (rect1.y + rect1.h)));
};


/**
 * Returns the distance between the centers of the keyboard bounding boxes of the input DvtKeyboardNavigables.
 * Distance is multiplied by a penalty factor if the centers are too far off the vertical (in the case of up and down)
 * or horizontal (for left and right)
 *
 * @param {DvtKeyboardNavigable} object
 * @param {DvtKeyboardNavigable} current
 * @param {Number} keycode
 * @return {Number}
 * @private
 */
DvtKeyboardHandler._calcDistanceAngleWeighted = function(object, current, keycode)
{
  var objectBB = object.getKeyboardBoundingBox();
  var objCenterX = objectBB.x + objectBB.w / 2;
  var objCenterY = objectBB.y + objectBB.h / 2;

  var currentBB = current.getKeyboardBoundingBox();
  var curCenterX = currentBB.x + currentBB.w / 2;
  var curCenterY = currentBB.y + currentBB.h / 2;

  var x_dist = Math.abs(objCenterX - curCenterX);
  var y_dist = Math.abs(objCenterY - curCenterY);

  var angle = Math.atan2(y_dist, x_dist);

  var distance = Math.sqrt(x_dist * x_dist + y_dist * y_dist);

  // Angle penalty based on direction
  if ((angle > DvtKeyboardHandler._OPTIMAL_ANGLE1 && (keycode == DvtKeyboardEvent.RIGHT_ARROW || keycode == DvtKeyboardEvent.LEFT_ARROW)) ||
      (angle < DvtMath.HALF_PI - DvtKeyboardHandler._OPTIMAL_ANGLE1 && (keycode == DvtKeyboardEvent.UP_ARROW || keycode == DvtKeyboardEvent.DOWN_ARROW)))
  {
    if ((angle > DvtKeyboardHandler._OPTIMAL_ANGLE2 && (keycode == DvtKeyboardEvent.RIGHT_ARROW || keycode == DvtKeyboardEvent.LEFT_ARROW)) ||
        (angle < DvtMath.HALF_PI - DvtKeyboardHandler._OPTIMAL_ANGLE2 && (keycode == DvtKeyboardEvent.UP_ARROW || keycode == DvtKeyboardEvent.DOWN_ARROW)))
    {
      distance *= DvtKeyboardHandler._SUBOPTIMAL_ANGLE_PENALTY2;
    }
    else
    {
      distance *= DvtKeyboardHandler._SUBOPTIMAL_ANGLE_PENALTY1;
    }
  }

  return distance;
};


/**
  * Determine if a point is valid based on the direction
  * @param {DvtKeyboardNavigable} object
  * @param {DvtKeyboardNavigable} current
  * @param {Number} keycode
  * @return {Boolean}
  * @private
  */
DvtKeyboardHandler._isValidDestination = function(object, current, keycode)
{
  var objBB = object.getKeyboardBoundingBox();
  var curBB = current.getKeyboardBoundingBox();

  switch (keycode)
  {
    case DvtKeyboardEvent.UP_ARROW:
      return (objBB.y < curBB.y) || DvtKeyboardHandler._areEqualWithinTolerance(objBB.y, curBB.y);
    case DvtKeyboardEvent.DOWN_ARROW:
      return objBB.y > curBB.y || DvtKeyboardHandler._areEqualWithinTolerance(objBB.y, curBB.y);
    case DvtKeyboardEvent.RIGHT_ARROW:
      return objBB.x > curBB.x || DvtKeyboardHandler._areEqualWithinTolerance(objBB.x, curBB.x);
    case DvtKeyboardEvent.LEFT_ARROW:
      return objBB.x < curBB.x || DvtKeyboardHandler._areEqualWithinTolerance(objBB.x, curBB.x);
    default:
      break;
  }
  return true;
};


/**
 * Utility method to check if two numbers are equal, within a small tolerance. Used to account for small rounding
 * errors
 *
 * @param {Number} a
 * @param {Number} b
 * @return {Boolean} true if the numbers are within 0.0000001 of each other
 * @private
 */
DvtKeyboardHandler._areEqualWithinTolerance = function(a, b)
{
  return Math.abs(a - b) <= 0.0000001;
};

/**
 * Handler used for marquee operations.
 * @constructor
 * @param {DvtContainer} container Marquee container.
 * @param {DvtRectangle} marqueeBounds The area in which the marquee can be initiated and drawn.
 * @param {DvtRectangle} glassPaneBounds The area that will be covered by the glass pane when the marquee is active.
 * @param {DvtFill} fill The marquee rect fill
 * @param {DvtStroke} stroke The marquee rect stroke
 * @param {boolean=} allowHorizResize Whether horizontal resize is allowed. Defaults to true.
 * @param {boolean=} allowVertResize Whether vertical resize is allowed. Defaults to true.
 * @param {DvtRectangle=} horizResizeBounds The bounds for initiating a marquee that only resizes horizontally.
 * @param {DvtRectangle=} vertResizeBounds The bounds for initiating a marquee that only resizes vertically.
 */
var DvtMarqueeHandler = function(container, marqueeBounds, glassPaneBounds, fill, stroke, 
    allowHorizResize, allowVertResize, horizResizeBounds, vertResizeBounds) {
  this.Init(container, marqueeBounds, glassPaneBounds, fill, stroke, allowHorizResize, allowVertResize,
      horizResizeBounds, vertResizeBounds);
};


DvtObj.createSubclass(DvtMarqueeHandler, DvtObj, 'DvtMarqueeHandler');


/**
 * @param {DvtContainer} container Marquee container.
 * @param {DvtRectangle} marqueeBounds The area in which the marquee can be initiated and drawn.
 * @param {DvtRectangle} glassPaneBounds The area that will be covered by the glass pane when the marquee is active.
 * @param {DvtFill} fill The marquee rect fill
 * @param {DvtStroke} stroke The marquee rect stroke
 * @param {boolean=} allowHorizResize Whether horizontal resize is allowed. Defaults to true.
 * @param {boolean=} allowVertResize Whether vertical resize is allowed. Defaults to true.
 * @param {DvtRectangle=} horizResizeBounds The bounds for initiating a marquee that only resizes horizontally.
 * @param {DvtRectangle=} vertResizeBounds The bounds for initiating a marquee that only resizes vertically.
 */
DvtMarqueeHandler.prototype.Init = function(container, marqueeBounds, glassPaneBounds, fill, stroke, 
    allowHorizResize, allowVertResize, horizResizeBounds, vertResizeBounds) {
  this._context = container.getCtx();
  this._container = container;
  this._bounds = marqueeBounds;
  this._fill = fill;
  this._stroke = stroke;
  this._allowHoriz = allowHorizResize == null ? true : allowHorizResize;
  this._allowVert = allowVertResize == null ? true : allowVertResize;
  this._horizBounds = horizResizeBounds;
  this._vertBounds = vertResizeBounds;

  // Set up the glass pane
  this._glassPane = new DvtRect(this._context, glassPaneBounds.x, glassPaneBounds.y, glassPaneBounds.w, glassPaneBounds.h);
  this._glassPane.setInvisibleFill();

  // Flags
  this._marqueeOn = false;     // whether the marquee has been activated
  this._marqueeDrawn = false;  // whether the marquee has been drawn
  this._resizeHoriz = false;   // whether the marquee is resizeable horizontally
  this._resizeVert = false;    // whether the marquee is resizeable vertically
};


/**
 * Processes drag start.
 * @param {DvtPoint} relPos The event position relative to the stage.
 * @param {boolean} ctrlKey Whether the ctrl key is pressed during the event.
 * @return {DvtMarqueeEvent}
 */
DvtMarqueeHandler.prototype.processDragStart = function(relPos, ctrlKey) {
  if (!this._marqueeOn) {
    this._origPt = this._container.stageToLocal(relPos); // marquee origin

    // Determine if the marquee is resizeable horizontally and/or vertically:
    // - if origin is inside marqueeBounds, then allow resize in both directions if possible;
    // - if origin is inside vertResizeBounds, then only vert resize is possible;
    // - if origin is inside horizResizeBounds, then only horiz resize is possible;
    // - otherwise, marquee shouldn't be initiated.
    this._resizeHoriz = this._allowHoriz;
    this._resizeVert = this._allowVert;
    if (!this._bounds.containsPoint(this._origPt.x, this._origPt.y)) {
      if (this._vertBounds && this._vertBounds.containsPoint(this._origPt.x, this._origPt.y))
        this._resizeHoriz = false;
      else if (this._horizBounds && this._horizBounds.containsPoint(this._origPt.x, this._origPt.y))
        this._resizeVert = false;
      else
        return null;
    }

    this._marqueeOn = true;
    this._marquee = null;
    return this._createMarqueeEvent(DvtMarqueeEvent.SUBTYPE_START, ctrlKey);
  }

  return null;
};


/**
 * Processes drag move.
 * @param {DvtPoint} relPos The event position relative to the stage.
 * @param {boolean} ctrlKey Whether the ctrl key is pressed during the event.
 * @return {DvtMarqueeEvent}
 */
DvtMarqueeHandler.prototype.processDragMove = function(relPos, ctrlKey) {
  if (!this._marqueeOn)
    return null;

  if (!this._marqueeDrawn) {
    this._container.addChild(this._glassPane);

    // Initiate the marquee
    this._marquee = new DvtRect(this._context, this._bounds.x, this._bounds.y, this._bounds.w, this._bounds.h);
    if (this._resizeHoriz) {
      this._marquee.setX(this._origPt.x);
      this._marquee.setWidth(0);
    }
    if (this._resizeVert) {
      this._marquee.setY(this._origPt.y);
      this._marquee.setHeight(0);
    }

    this._marquee.setStroke(this._stroke);
    this._marquee.setFill(this._fill);
    this._marquee.setPixelHinting(true);
    this._glassPane.addChild(this._marquee);

    this._marqueeDrawn = true;
  }

  var newPt = this._container.stageToLocal(relPos);

  // Bound the newPt within the marquee bounds
  newPt.x = Math.max(newPt.x, this._bounds.x);
  newPt.x = Math.min(newPt.x, this._bounds.x + this._bounds.w);
  newPt.y = Math.max(newPt.y, this._bounds.y);
  newPt.y = Math.min(newPt.y, this._bounds.y + this._bounds.h);

  // Update marquee x and w
  if (this._resizeHoriz) {
    this._marquee.setWidth(Math.abs(newPt.x - this._origPt.x));
    if (newPt.x < this._origPt.x)
      this._marquee.setX(newPt.x);
    else
      this._marquee.setX(this._origPt.x);
  }

  // Update marquee y and h
  if (this._resizeVert) {
    this._marquee.setHeight(Math.abs(newPt.y - this._origPt.y));
    if (newPt.y < this._origPt.y)
      this._marquee.setY(newPt.y);
    else
      this._marquee.setY(this._origPt.y);
  }

  return this._createMarqueeEvent(DvtMarqueeEvent.SUBTYPE_MOVE, ctrlKey);
};


/**
 * Processes drag end.
 * @param {DvtPoint} relPos The event position relative to the stage.
 * @param {boolean} ctrlKey Whether the ctrl key is pressed during the event.
 * @return {DvtMarqueeEvent}
 */
DvtMarqueeHandler.prototype.processDragEnd = function(relPos, ctrlKey) {
  if (this._marqueeOn) {
    this._marqueeOn = false;

    if (this._marqueeDrawn) {
      // Remove the marquee and glass pane
      this._glassPane.removeChild(this._marquee);
      this._container.removeChild(this._glassPane);
      this._marqueeDrawn = false;

      return this._createMarqueeEvent(DvtMarqueeEvent.SUBTYPE_END, ctrlKey);
    }
  }

  return null;
};


/**
 * Processes drag end.
 * @param {DvtPoint} relPos The event position relative to the stage.
 * @param {boolean} ctrlKey Whether the ctrl key is pressed during the event.
 * @return {DvtMarqueeEvent}
 */
DvtMarqueeHandler.prototype.cancelMarquee = function() {
  if (this._marqueeOn) {
    this._marqueeOn = false;

    if (this._marqueeDrawn) {
      // Remove the marquee and glass pane
      this._glassPane.removeChild(this._marquee);
      this._container.removeChild(this._glassPane);
      this._marqueeDrawn = false;

      return true;
    }
  }

  return false;
};


/**
 * Creates a marquee event.
 * @param {string} type Event type.
 * @param {boolean} ctrlKey Whether the ctrl key is pressed during the event.
 * @return {DvtMarqueeEvent} The event.
 */
DvtMarqueeHandler.prototype._createMarqueeEvent = function(type, ctrlKey) {
  var x = null;
  var y = null;
  var w = null;
  var h = null;

  if (this._resizeHoriz) {
    x = this._marquee ? this._marquee.getX() : this._origPt.x;
    w = this._marquee ? this._marquee.getWidth() : 0;
  }
  if (this._resizeVert) {
    y = this._marquee ? this._marquee.getY() : this._origPt.y;
    h = this._marquee ? this._marquee.getHeight() : 0;
  }

  return new DvtMarqueeEvent(type, x, y, w, h, ctrlKey);
};


/**
 * Returns the appropriate cursor type.
 * @param {DvtPoint} relPos The current cursor position relative to the stage.
 * @return {string} The cursor type.
 */
DvtMarqueeHandler.prototype.getCursor = function(relPos) {
  var pos = this._container.stageToLocal(relPos);
  var withinBounds = this._bounds.containsPoint(pos.x, pos.y);
  var withinVertBounds = this._vertBounds && this._vertBounds.containsPoint(pos.x, pos.y);
  var withinHorizBounds = this._horizBounds && this._horizBounds.containsPoint(pos.x, pos.y);

  if (withinBounds || withinVertBounds || withinHorizBounds)
    return 'crosshair';
  else
    return 'inherit';
};
/**
 * Handler used for pan and zoom operations.
 * @constructor
 * @param {DvtContainer} container Glass pane container.
 * @param {DvtRectangle} panZoomBounds The area in which pan/zoom can be initiated.
 * @param {DvtRectangle} glassPaneBounds The area that will be covered by the glass pane during pan.
 * @param {number} zoomRate The rate of mouse wheel zoom.
 */
var DvtPanZoomHandler = function(container, panZoomBounds, glassPaneBounds, zoomRate) {
  this.Init(container, panZoomBounds, glassPaneBounds, zoomRate);
};

DvtObj.createSubclass(DvtPanZoomHandler, DvtObj, 'DvtPanZoomHandler');


/**
 * @param {DvtContainer} container Glass pane container.
 * @param {DvtRectangle} panZoomBounds The area in which the pan/zoom can be initiated.
 * @param {DvtRectangle} glassPaneBounds The area that will be covered by the glass pane when the marquee is active.
 * @param {number} zoomRate The rate of mouse wheel zoom.
 */
DvtPanZoomHandler.prototype.Init = function(container, panZoomBounds, glassPaneBounds, zoomRate) {
  this._context = container.getCtx();
  this._container = container;
  this._bounds = panZoomBounds;
  this._zoomRate = zoomRate;

  // Set up the glass pane
  this._glassPane = new DvtRect(this._context, glassPaneBounds.x, glassPaneBounds.y, glassPaneBounds.w, glassPaneBounds.h);
  this._glassPane.setInvisibleFill();

  // Flags
  this._panOn = false;           // whether the pan has been initiated
  this._glassPaneDrawn = false;  // whether the glass pane has been drawn
  this._pinchOn = false;         // whether the pinch has been initiated
};


/**
 * Processes drag start.
 * @param {DvtPoint} relPos The event position relative to the stage.
 * @return {DvtPanZoomEvent}
 */
DvtPanZoomHandler.prototype.processDragStart = function(relPos) {
  if (!this._panOn) {
    this._origPt = this._container.stageToLocal(relPos); // drag origin
    this._lastPt = this._origPt;

    // Ignore if the start point is outside the pan/zoom bounds
    if (!this._bounds.containsPoint(this._origPt.x, this._origPt.y))
      return null;

    this._panOn = true;

    return new DvtPanZoomEvent(DvtPanZoomEvent.SUBTYPE_PAN_START, 0, 0, 0, 0, 0, 0, 0, 0);
  }

  return null;
};


/**
 * Processes drag move.
 * @param {DvtPoint} relPos The event position relative to the stage.
 * @return {DvtPanZoomEvent}
 */
DvtPanZoomHandler.prototype.processDragMove = function(relPos) {
  if (!this._panOn)
    return null;

  if (!this._glassPaneDrawn) {
    this._container.addChild(this._glassPane);
    this._glassPaneDrawn = true;
  }

  var newPt = this._container.stageToLocal(relPos);
  var deltaX = newPt.x - this._lastPt.x;
  var deltaY = newPt.y - this._lastPt.y;
  var totalDeltaX = newPt.x - this._origPt.x;
  var totalDeltaY = newPt.y - this._origPt.y;
  this._lastPt = newPt;

  return new DvtPanZoomEvent(DvtPanZoomEvent.SUBTYPE_PAN_MOVE, -deltaX, -deltaX, -deltaY, -deltaY,
      -totalDeltaX, -totalDeltaX, -totalDeltaY, -totalDeltaY);
};


/**
 * Processes drag end.
 * @param {DvtPoint} relPos The event position relative to the stage.
 * @return {DvtPanZoomEvent}
 */
DvtPanZoomHandler.prototype.processDragEnd = function(relPos) {
  if (this._panOn) {
    this._panOn = false;

    if (this._glassPaneDrawn) {
      // Remove the glass pane
      this._container.removeChild(this._glassPane);
      this._glassPaneDrawn = false;

      var newPt = relPos ? this._container.stageToLocal(relPos) : this._lastPt;
      var deltaX = newPt.x - this._lastPt.x;
      var deltaY = newPt.y - this._lastPt.y;
      var totalDeltaX = newPt.x - this._origPt.x;
      var totalDeltaY = newPt.y - this._origPt.y;
      this._lastPt = null;

      return new DvtPanZoomEvent(DvtPanZoomEvent.SUBTYPE_PAN_END, -deltaX, -deltaX, -deltaY, -deltaY,
          -totalDeltaX, -totalDeltaX, -totalDeltaY, -totalDeltaY);
    }
  }

  return null;
};


/**
 * Processes mouse wheel.
 * @param {DvtPoint} relPos The event position relative to the stage.
 * @param {number} delta The mouse wheel delta.
 * @return {DvtPanZoomEvent}
 */
DvtPanZoomHandler.prototype.processMouseWheel = function(relPos, delta) {
  // Ignore if the cursor is outside the pan/zoom bounds
  var startPt = this._container.stageToLocal(relPos);
  if (!this._bounds.containsPoint(startPt.x, startPt.y))
    return null;

  delta *= this._zoomRate;

  // Compute the deltas. It should maintain the cursor pointing at the same item.
  var deltaXMin = delta * (startPt.x - this._bounds.x);
  var deltaXMax = -delta * (this._bounds.x + this._bounds.w - startPt.x);
  var deltaYMin = delta * (startPt.y - this._bounds.y);
  var deltaYMax = -delta * (this._bounds.y + this._bounds.h - startPt.y);

  return new DvtPanZoomEvent(DvtPanZoomEvent.SUBTYPE_ZOOM, deltaXMin, deltaXMax, deltaYMin, deltaYMax,
      deltaXMin, deltaXMax, deltaYMin, deltaYMax);
};


/**
 * Processes pinch start.
 * @param {DvtPoint} relPos1 The position of the first finger relative to the stage.
 * @param {DvtPoint} relPos2 The position of the second finger relative to the stage.
 * @return {DvtPanZoomEvent}
 */
DvtPanZoomHandler.prototype.processPinchStart = function(relPos1, relPos2) {
  if (!this._pinchOn) {
    // Save pinch origin
    this._origPt1 = this._container.stageToLocal(relPos1);
    this._origPt2 = this._container.stageToLocal(relPos2);
    this._lastPt1 = this._origPt1;
    this._lastPt2 = this._origPt2;

    // Ignore if the start points are outside the pan/zoom bounds
    if (!this._bounds.containsPoint(this._origPt1.x, this._origPt1.y) || !this._bounds.containsPoint(this._origPt2.x, this._origPt2.y))
      return null;

    this._pinchOn = true;

    return new DvtPanZoomEvent(DvtPanZoomEvent.SUBTYPE_PINCH_START, 0, 0, 0, 0, 0, 0, 0, 0);
  }

  return null;
};


/**
 * Processes pinch move.
 * @param {DvtPoint} relPos1 The position of the first finger relative to the stage.
 * @param {DvtPoint} relPos2 The position of the second finger relative to the stage.
 * @return {DvtPanZoomEvent}
 */
DvtPanZoomHandler.prototype.processPinchMove = function(relPos1, relPos2) {
  if (!this._pinchOn)
    return null;

  var newPt1 = this._container.stageToLocal(relPos1);
  var newPt2 = this._container.stageToLocal(relPos2);

  var deltas = this._computePinchDeltas(newPt1, newPt2, this._lastPt1, this._lastPt2);
  var totalDeltas = this._computePinchDeltas(newPt1, newPt2, this._origPt1, this._origPt2);

  this._lastPt1 = newPt1;
  this._lastPt2 = newPt2;

  return new DvtPanZoomEvent(DvtPanZoomEvent.SUBTYPE_PINCH_MOVE, deltas.dxMin, deltas.dxMax, deltas.dyMin, deltas.dyMax,
      totalDeltas.dxMin, totalDeltas.dxMax, totalDeltas.dyMin, totalDeltas.dyMax);
};


/**
 * Processes pinch end.
 * @return {DvtPanZoomEvent}
 */
DvtPanZoomHandler.prototype.processPinchEnd = function() {
  if (this._pinchOn) {
    this._pinchOn = false;
    var totalDeltas = this._computePinchDeltas(this._lastPt1, this._lastPt2, this._origPt1, this._origPt2);

    this._lastPt1 = null;
    this._lastPt2 = null;

    return new DvtPanZoomEvent(DvtPanZoomEvent.SUBTYPE_PINCH_END, 0, 0, 0, 0,
        totalDeltas.dxMin, totalDeltas.dxMax, totalDeltas.dyMin, totalDeltas.dyMax);
  }

  return null;
};


/**
 * Computes how much the bounds should change based on the two finger movements.
 * @param {DvtPoint} pos1 Current position of the first finger.
 * @param {DvtPoint} pos2 Current position of the second finger.
 * @param {DvtPoint} prevPos1 Previous position of the first finger.
 * @param {DvtPoint} prevPos2 Previous position of the second finger.
 * @return {object} An object containing deltas for the bounds: dxMin, dxMax, dyMin, and dyMax.
 * @private
 */
DvtPanZoomHandler.prototype._computePinchDeltas = function(pos1, pos2, prevPos1, prevPos2) {
  // Calculate the ratio of the current inter-finger distance to the previous
  var dx = Math.abs(pos1.x - pos2.x);
  var dy = Math.abs(pos1.y - pos2.y);
  var prevDx = Math.abs(prevPos1.x - prevPos2.x);
  var prevDy = Math.abs(prevPos1.y - prevPos2.y);
  // The check dx > dy/2 is to make it easier to zoom in y-direction alone. Otherwise, one might pinch in y-direction,
  // but the slight finger movement in the x-direction will cause the x-axis to zoom as well.
  var zoomX = dx > dy / 2 ? prevDx / dx : 1;
  var zoomY = dy > dx / 2 ? prevDy / dy : 1;

  // Calculate the distance the center of the two fingers has moved
  var cx = (pos1.x + pos2.x) / 2;
  var cy = (pos1.y + pos2.y) / 2;
  var prevCx = (prevPos1.x + prevPos2.x) / 2;
  var prevCy = (prevPos1.y + prevPos2.y) / 2;
  var dcx = cx - prevCx;
  var dcy = cy - prevCy;

  // Perform a zoom
  var dxMin = (1 - zoomX) * (cx - this._bounds.x);
  var dxMax = (zoomX - 1) * (this._bounds.x + this._bounds.w - cx);
  var dyMin = (1 - zoomY) * (cy - this._bounds.y);
  var dyMax = (zoomY - 1) * (this._bounds.y + this._bounds.h - cy);

  // Perform a scroll
  dxMin -= dcx;
  dxMax -= dcx;
  dyMin -= dcy;
  dyMax -= dcy;

  return {dxMin: dxMin, dxMax: dxMax, dyMin: dyMin, dyMax: dyMax};
};

/**
 * Zooms by the specified amount.
 * @param {number} dz A number specifying the zoom ratio, e.g. dz = 2 means zoom in by 200%.
 * @return {DvtPanZoomEvent}
 */
DvtPanZoomHandler.prototype.zoomBy = function(dz) {
  var shiftRatio = (1 / dz - 1) / 2;
  var deltaXMin = -shiftRatio * (this._bounds.w);
  var deltaXMax = shiftRatio * (this._bounds.w);
  var deltaYMin = -shiftRatio * (this._bounds.h);
  var deltaYMax = shiftRatio * (this._bounds.h);

  return new DvtPanZoomEvent(DvtPanZoomEvent.SUBTYPE_ZOOM, deltaXMin, deltaXMax, deltaYMin, deltaYMax,
      deltaXMin, deltaXMax, deltaYMin, deltaYMax);
};

/**
 * Pans by the specified amount.
 * @param {number} dx A number from specifying the pan ratio in the x direction, e.g. dx = 0.5 means pan end by 50%.
 * @param {number} dy A number from specifying the pan ratio in the y direction, e.g. dy = 0.5 means pan down by 50%.
 * @return {DvtPanZoomEvent}
 */
DvtPanZoomHandler.prototype.panBy = function(dx, dy) {
  var deltaX = dx * this._bounds.w * (DvtAgent.isRightToLeft(this._context) ? -1 : 1);
  var deltaY = dy * this._bounds.h;

  return new DvtPanZoomEvent(DvtPanZoomEvent.SUBTYPE_PAN_END, deltaX, deltaX, deltaY, deltaY,
      deltaX, deltaX, deltaY, deltaY);
};


/**
 * Sets the pan cursor.
 * @param {string} panUpCursor The URI of the cursor image for the non-dragged state.
 * @param {string} panDownCursor The URI of the cursor image for the dragged state.
 */
DvtPanZoomHandler.prototype.setPanCursor = function(panUpCursor, panDownCursor) {
  // IE doesn't support cursor image with custom positioning
  if (DvtAgent.isPlatformIE())
    return;

  if (panUpCursor)
    this._panUpCursor = 'url(' + panUpCursor + ') 8 8, auto';
  if (panDownCursor)
    this._panDownCursor = 'url(' + panDownCursor + ') 8 8, auto';
};


/**
 * Returns the appropriate cursor type.
 * @param {DvtPoint=} relPos The current cursor position relative to the stage.
 * @return {string} The cursor type.
 */
DvtPanZoomHandler.prototype.getCursor = function(relPos) {
  if (relPos == null || this.isWithinBounds(relPos)) {
    if (this._panOn)
      return this._panDownCursor ? this._panDownCursor : 'move';
    else
      return this._panUpCursor ? this._panUpCursor : 'move';
  }
  else
    return 'inherit';
};

/**
 * Returns whether the point is within the bounds of the pan-zoom handler.
 * @param {DvtPoint} relPos The current cursor position relative to the stage.
 * @return {boolean}
 */
DvtPanZoomHandler.prototype.isWithinBounds = function(relPos) {
  var pos = this._container.stageToLocal(relPos);
  return this._bounds.containsPoint(pos.x, pos.y);
};
/**
 * Base class object for tooltip services.
 * @class DvtTooltipManager
 * @extends {DvtObj}
 * @constructor
 */
var DvtTooltipManager = function() {};

DvtObj.createSubclass(DvtTooltipManager, DvtObj, 'DvtTooltipManager');


/**
 * Displays a tooltip with the given parameters.
 * @param {int} x the x position as relative to coordinate space of implementation
 * @param {int} y the y position as relative to coordinate space of implementation
 * @param {string} text the text to show within the tooltip
 * @param {string} borderColor the border color of the tooltip
 */
DvtTooltipManager.prototype.showDatatip = function(x, y, text, borderColor)
{
  // TODO subclasses should override
};


/**
 * Displays a tooltip.
 * @param {int} x the x position as relative to coordinate space of implementation
 * @param {int} y the y position as relative to coordinate space of implementation
 * @param (string) text The text to display in the tooltip.
 * @param (DvtDisplayable) component The display object to use for tracking mouse movements.
 * @param (boolean) bTrackMouse Optional boolean to specify whether mouse movement should
 *                  also reposition the tooltip.  Default is true.
 * @param {string} borderColor Optional the border color of the tooltip
 *
 * @see hideTooltip()
 * @see showDatatip()
 */
DvtTooltipManager.prototype.showTooltip = function(x, y, text, component, bTrackMouse, borderColor)
{
  // TODO subclasses should override
};


/**
 * Hides the tooltip
 */
DvtTooltipManager.prototype.hideTooltip = function()
{
  // TODO subclasses should override
};


/**
 * Interactivity handle for category rollover effects support.
 * Objects must implement DvtLogicalObject and DvtCategoricalObject to be supported by this handler.
 * @param {function} callback A function that responds to component events.
 * @param {object} callbackObj The optional object instance that the callback function is defined on.
 * @class DvtCategoryRolloverHandler
 * @extends {DvtObj}
 * @constructor
 */
var DvtCategoryRolloverHandler = function(callback, callbackObj) {
  this._callback = callback;
  this._callbackObj = callbackObj;

  // Assume the source of the event is also the callbackObj. We can add a param if needed.
  this._source = callbackObj;

  /**
   * True if highlight mode is on. This is true anytime after the initial hover delay has passed and the hover timeout
   * has not.
   * @private
   */
  this._bHighlightMode = false;

  /**
   * Callback used to apply highlighting. The delay will vary based on whether this is an initial rollover, subsequent
   * rollover, or rollout.
   * @private
   */
  this._hoverDelayCallback = null;

  /**
   * Callback used to disabled highlight mode. It will be called after a sufficient interval of no highlighting.
   * @see DvtCategoryRolloverHandler._HOVER_TIMEOUT
   * @private
   */
  this._highlightModeTimeout = null;

  /**
   * Used to override default hover delay value. The delay is used in applying highlighting for subsequent highlights.
   * It's primary function is to reduce jitter when moving across small gaps between data items.
   * @see DvtCategoryRolloverHandler._HOVER_DELAY
   * @private
   */
  this._hoverDelay = DvtCategoryRolloverHandler._HOVER_DELAY;
};

DvtObj.createSubclass(DvtCategoryRolloverHandler, DvtObj, 'DvtCategoryRolloverHandler');

/**
 * Default hover delay value
 * @see this._hoverDelayCallback
 * @const
 * @private
 */
DvtCategoryRolloverHandler._HOVER_DELAY = 50;
/**
 * The delay in disabling highlight mode. This is satisfied when no object is highlighted for this duration.
 * @see this._highlightModeTimeout
 * @const
 * @private
 */
DvtCategoryRolloverHandler._HOVER_TIMEOUT = 1000;

/**
 * The default fade out opacity.
 * @const
 * @private
 */
DvtCategoryRolloverHandler._FADE_OUT_OPACITY = 0.35;

/**
 * Processes the specified DvtCategoryRolloverEvent for the array of objects.
 * @param {DvtCategoryRolloverEvent} event The event that was triggered.
 * @param {array} objs The array of objects containing hide and show targets.
 * @param {number} initialHoverDelay The delay before the initial highlight action.
 * @param {boolean=} bAnyMatched True if an object need only contain any of the categories to be highlighted.
 * @param {number=} customAlpha A custom alpha for the dimmed objects.
 * @deprecated We should update all components to use the highlight API instead.
 */
DvtCategoryRolloverHandler.prototype.processEvent = function(event, objs, initialHoverDelay, bAnyMatched, customAlpha)
{
  if (!event || !objs || (objs.length == 0))
    return;

  // Cancel any pending highlight operations. We've either moved to a new object or left the current one.
  if (this._hoverDelayCallback) {
    clearTimeout(this._hoverDelayCallback);
    this._hoverDelayCallback = null;
  }

  // Create the callback to perform the appropriate highlighting.
  var type = event.getType();
  if (type == DvtCategoryRolloverEvent.TYPE_OVER) {
    // Highlight after the appropriate delay, based on whether we're already in highlight mode.
    var hoverDelay = this._bHighlightMode ? this._hoverDelay : initialHoverDelay;
    this._hoverDelayCallback = setTimeout(this.GetRolloverCallback(event, objs, bAnyMatched, customAlpha), hoverDelay);//@HTMLUpdateOK

    // If the highlight mode timeout has been started, cancel it.
    if (this._highlightModeTimeout) {
      clearInterval(this._highlightModeTimeout);
      this._highlightModeTimeout = null;
    }
  }
  else if (type == DvtCategoryRolloverEvent.TYPE_OUT && this._bHighlightMode) {
    // Process rollout if a highlight has occurred.
    this._hoverDelayCallback = setTimeout(this.GetRolloutCallback(event, objs, bAnyMatched, customAlpha), this._hoverDelay);
  }
};

/**
 * Returns the callback to be applied after a rollover.
 * @param {DvtCategoryRolloverEvent} event The event that was triggered.
 * @param {array} objs The array of objects containing hide and show targets.
 * @param {boolean=} bAnyMatched True if an object need only contain any of the categories to be highlighted.
 * @param {number=} customAlpha A custom alpha for the dimmed objects.
 * @return {function}
 * @protected
 */
DvtCategoryRolloverHandler.prototype.GetRolloverCallback = function(event, objs, bAnyMatched, customAlpha) {
  var callback = function() {
    this._bHighlightMode = true;
    DvtCategoryRolloverHandler.highlight(event['categories'], objs, bAnyMatched, customAlpha);

    // Fire the event to the component's callback if specified.
    if (this._callback)
      this._callback.call(this._callbackObj, event, this._source);
  };
  return DvtObj.createCallback(this, callback);
};

/**
 * Returns the callback to be applied after a rollout.
 * @param {DvtCategoryRolloverEvent} event The event that was triggered.
 * @param {array} objs The array of objects containing hide and show targets.
 * @param {boolean=} bAnyMatched True if an object need only contain any of the categories to be highlighted.
 * @param {number=} customAlpha A custom alpha for the dimmed objects.
 * @return {function}
 * @protected
 */
DvtCategoryRolloverHandler.prototype.GetRolloutCallback = function(event, objs, bAnyMatched, customAlpha) {
  var callback = function() {
    DvtCategoryRolloverHandler.highlight(event['categories'], objs, bAnyMatched, customAlpha);
    this.SetHighlightModeTimeout();

    // Fire the event to the component's callback if specified.
    if (this._callback)
      this._callback.call(this._callbackObj, event, this._source);
  };
  return DvtObj.createCallback(this, callback);
};

/**
 * Highlights the objects corresponding to the specified objects.  If no categories are specified, all highlight will
 * be removed.
 * @param {array} categories The array of categories whose data items will be highlighted.
 * @param {array} objs The array of objects containing hide and show targets.
 * @param {boolean=} bAnyMatched True if an object need only contain any of the categories to be highlighted.
 * @param {number=} customAlpha A custom alpha for the dimmed objects.
 */
DvtCategoryRolloverHandler.highlight = function(categories, objs, bAnyMatched, customAlpha) {
  if (!objs)
    return;

  var dimmedAlpha = !customAlpha ? DvtCategoryRolloverHandler._FADE_OUT_OPACITY : customAlpha;

  // Loop through the objects and update objects not belonging to the specified category.
  for (var i = 0; i < objs.length; i++) {
    var obj = objs[i];
    if (obj && obj.getCategories) {
      var match = bAnyMatched ? DvtCategoryRolloverHandler._hasAnyCategory(obj, categories) : DvtCategoryRolloverHandler._hasAllCategories(obj, categories);
      var bDimmed = categories && categories.length > 0 && !match;
      DvtCategoryRolloverHandler._highlightObj(obj, bDimmed, dimmedAlpha);
    }
  }
};

/**
 * Helper function to highlight the specified object. Assumes that obj is not null.
 * @param {object} obj The logical object to be highlighted.
 * @param {boolean} bDimmed True if the object should be dimmed.
 * @param {number} dimmedAlpha The alpha for dimmed objects
 * @private
 */
DvtCategoryRolloverHandler._highlightObj = function(obj, bDimmed, dimmedAlpha) {
  var alpha = bDimmed ? dimmedAlpha : 1;

  // Delegate to the object to perform highlighting if supported. Otherwise adjust the alpha of all displayables.
  if (obj.highlight)
    obj.highlight(bDimmed, alpha);
  else {
    var displayables = obj.getDisplayables();
    DvtCategoryRolloverHandler._updateAlpha(displayables, alpha);
  }
};

/**
 * Updates the alpha of the displayables to the specified value.
 * @param {array} displayables The array of displayables.
 * @param {number} alpha The new alpha value.
 * @private
 */
DvtCategoryRolloverHandler._updateAlpha = function(displayables, alpha) {
  if (!displayables)
    return;

  for (var i = 0; i < displayables.length; i++) {
    displayables[i].setAlpha(alpha);
  }
};

/**
 * Returns true if the specified object belongs to one of the specified categories.
 * @param {DvtCategoricalObject} obj
 * @param {array} categories
 * @return {boolean}
 * @private
 */
DvtCategoryRolloverHandler._hasAnyCategory = function(obj, categories) {
  if (!obj || !obj.getCategories)
    return false;

  return DvtArrayUtils.hasAnyItem(obj.getCategories(), categories);
};

/**
 * Returns true if the specified object belongs to all of the specified categories.
 * @param {DvtCategoricalObject} obj
 * @param {array} categories
 * @return {boolean}
 * @private
 */
DvtCategoryRolloverHandler._hasAllCategories = function(obj, categories) {
  if (!obj || !obj.getCategories)
    return false;

  return DvtArrayUtils.hasAllItems(obj.getCategories(), categories);
};

/**
 * Sets highlight mode
 * @param {boolean} bMode True if highlight mode is on
 * @protected
 */
DvtCategoryRolloverHandler.prototype.SetHighlightMode = function(bMode) {
  this._bHighlightMode = bMode;
};

/**
 * Sets highlight mode timeout
 * @protected
 */
DvtCategoryRolloverHandler.prototype.SetHighlightModeTimeout = function() {
  // First create the callback to cancel highlight mode after the given timeout.
  var highlightTimeout = DvtObj.createCallback(this, function() {this.SetHighlightMode(false);});
  this._highlightModeTimeout = setTimeout(highlightTimeout, DvtCategoryRolloverHandler._HOVER_TIMEOUT);//@HTMLUpdateOK
};

/**
 * Sets the hover delay value
 * @param {number} hoverDelay The delay in applying highlighting for subsequent highlights. The delay value is in milliseconds.
 */
DvtCategoryRolloverHandler.prototype.setHoverDelay = function(hoverDelay) {
  this._hoverDelay = hoverDelay;
};
/**
 * Interactivity handle for category hide and show support.
 * Objects must implement DvtLogicalObject and DvtCategoricalObject to be supported by this handler.
 * @class DvtHideShowCategoryHandler
 * @extends {DvtObj}
 * @constructor
 */
var DvtHideShowCategoryHandler = function() {};

DvtObj.createSubclass(DvtHideShowCategoryHandler, DvtObj, 'DvtHideShowCategoryHandler');


/**
 * Processes the specified DvtCategoryHideShowEvent for the array of objects.
 * @param {DvtCategoryHideShowEvent} event The event that was triggered.
 * @param {array} objs The array of objects containing hide and show targets.
 */
DvtHideShowCategoryHandler.processEvent = function(event, objs)
{
  if (!event || !objs)
    return;

  var category = event.getCategory();
  var bHide = (event.getType() === DvtCategoryHideShowEvent.TYPE_HIDE);

  // Loop through the objects and find the categorical matches
  for (var i = 0; i < objs.length; i++) {
    var obj = objs[i];
    if (obj && obj.getCategories && DvtArrayUtils.getIndex(obj.getCategories(), category) >= 0) {
      // Found a match, update the displayables
      var displayables = obj.getDisplayables(displayables);
      DvtHideShowCategoryHandler._updateVisible(displayables, !bHide);
    }
  }
};


/**
 * Updates the visibility of the displayables to the specified value.
 * @param {array} displayables The array of displayables.
 * @param {boolean} bVisible
 */
DvtHideShowCategoryHandler._updateVisible = function(displayables, bVisible) {
  if (!displayables)
    return;

  for (var i = 0; i < displayables.length; i++) {
    displayables[i].setVisible(bVisible);
  }
};
/**
 * Event manager that processes low level events and sends them to the appropriate handlers.
 * @param {DvtContext} context The platform specific context object.
 * @param {function} callback A function that responds to component events.
 * @param {object} callbackObj The optional object instance that the callback function is defined on.
 * @class
 * @implements {DvtComponentKeyboardHandler}
 * @constructor
 */
var DvtEventManager = function(context, callback, callbackObj) {
  this.Init(context, callback, callbackObj);
};

DvtObj.createSubclass(DvtEventManager, DvtObj, 'DvtEventManager');

DvtEventManager.CLEAR_SELECTION_ACTION_TYPE = 'clearSelectionActionType';

/**
 * Used for touch response touchStart
 * @const
 */
DvtEventManager.TOUCH_RESPONSE_TOUCH_START = 'touchStart';
/**
 * Used for touch response touchHold
 * @const
 */
DvtEventManager.TOUCH_RESPONSE_TOUCH_HOLD = 'touchHold';
/**
 * Used for touch response auto
 * @const
 */
DvtEventManager.TOUCH_RESPONSE_AUTO = 'auto';
/**
 * Used for chrome scrollHeight/Width checking which returns a slightly higher value than actual DOM scrolHeight
 * @const
 * @private
 */
DvtEventManager._TOUCH_RESPONSE_PADDING_CHECK = 10;
/**
 * @const
 * @private
 */
DvtEventManager._EVENT_INFO_TOOLTIP_DISPLAYED_KEY = 'tooltipDisplayed';
/**
 * @const
 * @private
 */
DvtEventManager._EVENT_INFO_CURRENT_TARGET_KEY = 'currentTarget';
/**
 * @const
 * @private
 */
DvtEventManager._EVENT_INFO_POPUP_DISPLAYED_KEY = 'popupDisplayed';



/**
 * Method called by the constructor to initialize this object
 * @param {DvtContext} context The platform specific context object.
 * @param {function} callback A function that responds to component events.
 * @param {object} callbackObj The optional object instance that the callback function is defined on.
 * @protected
 */
DvtEventManager.prototype.Init = function(context, callback, callbackObj) {
  this._context = context;
  this._callback = callback;
  this._callbackObj = callbackObj;
  // Used to keep track of the previous and current touch targets
  this._touchMap = {};

  // Initialize the higher level event handlers.  These handlers are exposed as protected fields
  // so that subclasses can fully customize the behavior of this event manager.
  this._selectionHandler = null;
  this._marqueeHandler = null;
  this.PopupHandler = new DvtPopupBehaviorHandler(context, callback, callbackObj);
  this.ClientBehaviorHandler = this.CreateClientBehaviorHandler(context, callback, callbackObj);
  this.KeyboardHandler = null;

  // Rollover Handler: Used to support the hover delays.
  this.RolloverHandler = this.CreateCategoryRolloverHandler(callback, callbackObj);

  // Tooltips enabled by default
  this.setTooltipsEnabled(true);

  var id = context.getStage().getId();
  if (!id)
    id = 'undefinedId';
  this.CustomTooltipManager = this._context.getCustomTooltipManager();
  this.CustomTooltipManager.addTooltipEventListener(DvtActionTooltipEvent.TOOLTIP_CLOSED_TYPE, this.OnActionTooltipClosed, this);
  this.CustomTooltipManager.addTooltipEventListener(DvtActionTooltipEvent.TOOLTIP_STARTED_TYPE, this.OnActionTooltipStarted, this);

  this.TouchManager = null;
  if (DvtAgent.isTouchDevice())
    this.TouchManager = new DvtTouchManager('touchmanager', this._context);

  // The DvtKeyboardNavigable item that currently has keyboard focus
  this._focusedObj = null;

  // flag to indicate if the component should display keyboard focus
  this._shouldDisplayKeyboardFocus = false;

  // List of object types that should receive rollover/rollout events
  this._rolloverTypes = [];

  // An array of event managers that can process keyboard events sent to this
  // event manager, arranged in tab order. This event manager should be in this
  // array, but there may be other event managers as well, such as an event
  // manager for breadcrumbs
  this._keyboardHandlers = [this];

  // index to the _keyboardHandlers array indicating the current handler
  // that receives keyboard events
  this._currentKeyboardHandlerIdx = -1;
};


/**
 * Returns the DvtContext associated with this event manager.
 * @return {DvtContext}
 */
DvtEventManager.prototype.getCtx = function() {
  return this._context;
};


/**
 * Associates the specified displayable with the specified object for this event manager.  This is used by the default
 * implementation of GetLogicalObject.
 * @param {DvtDisplayable} displayable The displayable to associate.
 * @param {object} obj The object to associate with.
 * @param {boolean} bReplace True if the existing logical objects should be replaced.
 */
DvtEventManager.prototype.associate = function(displayable, obj, bReplace) {
  if (displayable) {
    // Create the logical objects array if not already present
    if (!displayable._logicalObjects || bReplace)
      displayable._logicalObjects = [];

    // Add this logical object and event manager mapping
    displayable._logicalObjects.push({logicalObject: obj, eventManager: this});

    // Tooltip support for XML renderer
    if (!DvtAgent.isEnvironmentBrowser() && displayable.getImpl().setLogicalObj)
      displayable.getImpl().setLogicalObj(obj);
  }
};


/**
 * Adds event listeners to the specified displayable.
 * @param {DvtDisplayable} displayable The object on which to add the listeners.
 */
DvtEventManager.prototype.addListeners = function(displayable) {
  if (!displayable)
    return;

  if (DvtAgent.isTouchDevice()) {
    // Hide any tooltips previously shown
    this.hideTooltip();

    displayable.addEvtListener(DvtTouchEvent.TOUCHSTART, this.OnTouchStartBubble, false, this);
    displayable.addEvtListener(DvtTouchEvent.TOUCHMOVE, this.OnTouchMoveBubble, false, this);
    displayable.addEvtListener(DvtTouchEvent.TOUCHEND, this.OnTouchEndBubble, false, this);

    this.TouchManager.addTouchEventListener(DvtComponentTouchEvent.TOUCH_HOVER_START_TYPE, this._preOnComponentTouchHoverStart, this);
    this.TouchManager.addTouchEventListener(DvtComponentTouchEvent.TOUCH_HOVER_MOVE_TYPE, this._preOnComponentTouchHoverMove, this);
    this.TouchManager.addTouchEventListener(DvtComponentTouchEvent.TOUCH_HOVER_END_TYPE, this._preOnComponentTouchHoverEnd, this);
    this.TouchManager.addTouchEventListener(DvtComponentTouchEvent.TOUCH_HOVER_OUT_TYPE, this._preOnComponentTouchHoverOut, this);
    this.TouchManager.addTouchEventListener(DvtComponentTouchEvent.TOUCH_HOVER_OVER_TYPE, this._preOnComponentTouchHoverOver, this);

    this.TouchManager.addTouchEventListener(DvtComponentTouchEvent.TOUCH_CLICK_TYPE, this._preOnComponentTouchClick, this);
    this.TouchManager.addTouchEventListener(DvtComponentTouchEvent.TOUCH_DOUBLE_CLICK_TYPE, this._preOnComponentTouchDblClick, this);

  } else {
    displayable.addEvtListener(DvtMouseEvent.CLICK, this.PreOnClick, false, this);
    displayable.addEvtListener(DvtMouseEvent.DBLCLICK, this.PreOnDblClick, false, this);
    displayable.addEvtListener('contextmenu', this.PreOnContextMenu, false, this);
    displayable.addEvtListener(DvtMouseEvent.MOUSEMOVE, this.PreOnMouseMove, false, this);
    displayable.addEvtListener(DvtMouseEvent.MOUSEOVER, this.PreOnMouseOver, false, this);
    displayable.addEvtListener(DvtMouseEvent.MOUSEOUT, this.PreOnMouseOut, false, this);
    displayable.addEvtListener(DvtMouseEvent.MOUSEDOWN, this.PreOnMouseDown, false, this);
    displayable.addEvtListener(DvtMouseEvent.MOUSEUP, this.PreOnMouseUp, false, this);
    displayable.addEvtListener(DvtKeyboardEvent.KEYDOWN, this.OnKeyDown, false, this);
    displayable.addEvtListener(DvtKeyboardEvent.KEYPRESS, this.OnKeyPress, false, this);
    displayable.addEvtListener(DvtKeyboardEvent.KEYUP, this.OnKeyUp, false, this);
    displayable.addEvtListener(DvtFocusEvent.FOCUS, this.OnFocus, false, this);
    displayable.addEvtListener(DvtFocusEvent.BLUR, this.OnBlur, false, this);
  }
};


/**
 * Removes event listeners from the specified displayable.
 * @param {DvtDisplayable} displayable The object on which to remove the listeners.
 */
DvtEventManager.prototype.removeListeners = function(displayable)
{
  if (!displayable)
    return;

  // Hide any tooltips previously shown
  this.hideTooltip();

  if (DvtAgent.isTouchDevice()) {
    displayable.removeEvtListener(DvtTouchEvent.TOUCHSTART, this.OnTouchStartBubble, false, this);
    displayable.removeEvtListener(DvtTouchEvent.TOUCHMOVE, this.OnTouchMoveBubble, false, this);
    displayable.removeEvtListener(DvtTouchEvent.TOUCHEND, this.OnTouchEndBubble, false, this);

    this.TouchManager.removeTouchEventListener(DvtComponentTouchEvent.TOUCH_HOVER_START_TYPE, this._preOnComponentTouchHoverStart, this);
    this.TouchManager.removeTouchEventListener(DvtComponentTouchEvent.TOUCH_HOVER_MOVE_TYPE, this._preOnComponentTouchHoverMove, this);
    this.TouchManager.removeTouchEventListener(DvtComponentTouchEvent.TOUCH_HOVER_END_TYPE, this._preOnComponentTouchHoverEnd, this);
    this.TouchManager.removeTouchEventListener(DvtComponentTouchEvent.TOUCH_HOVER_OUT_TYPE, this._preOnComponentTouchHoverOut, this);
    this.TouchManager.removeTouchEventListener(DvtComponentTouchEvent.TOUCH_HOVER_OVER_TYPE, this._preOnComponentTouchHoverOver, this);

    this.TouchManager.removeTouchEventListener(DvtComponentTouchEvent.TOUCH_CLICK_TYPE, this._preOnComponentTouchClick, this);
    this.TouchManager.removeTouchEventListener(DvtComponentTouchEvent.TOUCH_DOUBLE_CLICK_TYPE, this._preOnComponentTouchDblClick, this);

  } else {
    displayable.removeEvtListener(DvtMouseEvent.CLICK, this.PreOnClick, false, this);
    displayable.removeEvtListener(DvtMouseEvent.DBLCLICK, this.PreOnDblClick, false, this);
    displayable.removeEvtListener('contextmenu', this.PreOnContextMenu, false, this);
    displayable.removeEvtListener(DvtMouseEvent.MOUSEMOVE, this.PreOnMouseMove, false, this);
    displayable.removeEvtListener(DvtMouseEvent.MOUSEOVER, this.PreOnMouseOver, false, this);
    displayable.removeEvtListener(DvtMouseEvent.MOUSEOUT, this.PreOnMouseOut, false, this);
    displayable.removeEvtListener(DvtMouseEvent.MOUSEDOWN, this.PreOnMouseDown, false, this);
    displayable.removeEvtListener(DvtMouseEvent.MOUSEUP, this.PreOnMouseUp, false, this);
    displayable.removeEvtListener(DvtKeyboardEvent.KEYDOWN, this.OnKeyDown, false, this);
    displayable.removeEvtListener(DvtKeyboardEvent.KEYUP, this.OnKeyUp, false, this);
    displayable.removeEvtListener(DvtKeyboardEvent.KEYPRESS, this.OnKeyPress, false, this);
    displayable.removeEvtListener(DvtFocusEvent.FOCUS, this.OnFocus, false, this);
    displayable.removeEvtListener(DvtFocusEvent.BLUR, this.OnBlur, false, this);
  }

};


/**
 * Releases all resources owned to prevent memory leaks.
 */
DvtEventManager.prototype.destroy = function()
{
  if (this.CustomTooltipManager)
  {
    this.CustomTooltipManager.removeTooltipEventListener(DvtActionTooltipEvent.TOOLTIP_CLOSED_TYPE, this.OnActionTooltipClosed, this);
    this.CustomTooltipManager.removeTooltipEventListener(DvtActionTooltipEvent.TOOLTIP_STARTED_TYPE, this.OnActionTooltipStarted, this);
  }
};


/**
 * A method called before an event is processed. Sets a touch manager for the event and calls preEventBuble on touch manager object.
 * @param {DvtTouchEvent} event
 * @protected
 */
DvtEventManager.prototype.PreEventBubble = function(event) {
  this.TouchManager.preEventBubble(event);
};


/**
 * Sets the selection handler to use with this event manager.
 * @param {DvtSelectionHandler} handler The selection handler to use.
 */
DvtEventManager.prototype.setSelectionHandler = function(handler) {
  this._selectionHandler = handler;
};


/**
 * Gets the selection handler to use with this event manager.
 * @param {object} logicalObj Logical object used to retrieve the correct selection handler. Optional parameter used for
 * override subclasses like DvtThematicMapEventManager.
 */
DvtEventManager.prototype.getSelectionHandler = function(logicalObj) {
  return this._selectionHandler;
};

/**
 * Gets the popup handler to use with this event manager.
 * @return {DvtPopupBehaviorHandler} PopupBehaviorHandler
 */
DvtEventManager.prototype.getPopupHandler = function() {
  return this.PopupHandler;
};

/**
 * Sets the marquee handler to use with this event manager.
 * @param {DvtMarqueeHandler} handler The marquee handler to use.
 */
DvtEventManager.prototype.setMarqueeHandler = function(handler) {
  this._marqueeHandler = handler;
};


/**
 * Sets the drag source to use with this event manager.
 * @param {DvtDragSource} dragSource The drag source to use
 */
DvtEventManager.prototype.setDragSource = function(dragSource) {
  this.DragSource = dragSource;
  if (DvtAgent.isTouchDevice())
    this.DragSource.setTouchManager(this.TouchManager);
};


/**
 * Sets the context menu handler to use with this event manager.
 * @param {DvtContextMenuHandler} handler The context menu handler to use.
 */
DvtEventManager.prototype.setContextMenuHandler = function(handler) {
  this.ContextMenuHandler = handler;
};

/**
 * Sets the keyboard handler to use with this event manager. This method is
 * a no-op if we are rendering the component on a touch device.
 * @param {DvtKeyboardHandler} handler The keyboard handler to use.
 */
DvtEventManager.prototype.setKeyboardHandler = function(handler) 
{
  if (!DvtAgent.isTouchDevice())
    this.KeyboardHandler = handler;
};


/**
 * Returns the keyboard handler used by this event manager
 * @return {DvtKeyboardHandler}
 */
DvtEventManager.prototype.getKeyboardHandler = function()
{
  return this.KeyboardHandler;
};


/**
 * Sets the event manager's keyboard focus on the given DvtKeyboardNavigable,
 * and update the keyboard focus visual feedback.
 * @param {DvtKeyboardNavigable} navigable The DvtKeyboardNavigable to receive keyboard focus
 */
DvtEventManager.prototype.setFocusObj = function(navigable) {
  var curFocus = this.getFocus();
  if (navigable != curFocus) {
    this.setFocus(navigable);
    if (curFocus) {
      curFocus.hideKeyboardFocusEffect();
    }
    if (this.ShowKeyboardFocusByDefault()) {
      navigable.showKeyboardFocusEffect();
    }

    // set this event manager as the one to receive keyboard events
    if (this._currentKeyboardHandlerIdx > -1 &&
        this._currentKeyboardHandlerIdx < this._keyboardHandlers.length) {
      var handler = this._keyboardHandlers[this._currentKeyboardHandlerIdx];
      if (handler != this) { // Only hide focus effect if the keyboard handler has changed
        handler.hideKeyboardFocusEffect();
      }
    }
  }
  //update current keyboard handler when a navigable is in focus
  this.setCurrentKeyboardHandler(this);
};


/**
 * Sets the event manager's keyboard focus on the given DvtKeyboardNavigable
 * @param {DvtKeyboardNavigable} navigable The DvtKeyboardNavigable to receive keyboard focus
 */
DvtEventManager.prototype.setFocus = function(navigable)
{
  if (this.KeyboardHandler)
    this._focusedObj = navigable;
};


/**
 * Returns the DvtKeyboardNavigable item with the current keyboard focus
 * @return {DvtKeyboardNavigable} The DvtKeyboardNavigable with the current keyboard focus
 */
DvtEventManager.prototype.getFocus = function()
{
  return this.KeyboardHandler ? this._focusedObj : null;
};


/**
 * Updates the view when the owning component receives focus
 */
DvtEventManager.prototype.setFocused = function(isFocused)
{
  var navigable = this.getFocus();
  // don't show keyboard focus effect on touch devices
  if (navigable && this.KeyboardHandler)
  {
    if (!isFocused)
    {
      navigable.hideKeyboardFocusEffect();
    }
    else if (this._shouldDisplayKeyboardFocus &&
             this._currentKeyboardHandlerIdx >= 0 &&
             this._currentKeyboardHandlerIdx < this._keyboardHandlers.length &&
             ((this._keyboardHandlers[this._currentKeyboardHandlerIdx] === this))
    )
    {
      // show keyboard focus effect if we receive focus after completing an animation
      // and we had keyboard focus before the animation began
      navigable.showKeyboardFocusEffect();
    }
  }

  if (!isFocused)
    this._shouldDisplayKeyboardFocus = false;
};


/**
 * Returns true if the keyboard focus should be shown by default (when the component has focus), even if the user
 * has not used the keyboard to intearact with the component
 *
 * @return {Boolean}
 */
DvtEventManager.prototype.ShowKeyboardFocusByDefault = function() 
{
  return false;
};


/**
 * Specifies whether tooltips are enabled.
 * @param {boolean} tooltipsEnabled
 */
DvtEventManager.prototype.setTooltipsEnabled = function(tooltipsEnabled) {
  this._tooltipsEnabled = tooltipsEnabled;
};


/**
 * Returns true if tooltips are enabled.
 * @param {DvtObj=} logicalObj The logical object that is currently being targeted, if one is available.
 * @return {boolean}
 */
DvtEventManager.prototype.getTooltipsEnabled = function(logicalObj) {
  return this._tooltipsEnabled;
};


/**
 * Returns the logical object corresponding to the specified DvtDisplayable.  All high level event handlers,
 * such as the selection and popup handlers, are designed to react to the logical objects.
 * @param {DvtDisplayable} target The displayable.
 * @param {boolean} ignoreParents (optional) true indicates that parent displayables should not be searched if the
 *                  target doesn't have its own logical object
 * @return {object} The logical object corresponding to the target.
 * @protected
 */
DvtEventManager.prototype.GetLogicalObject = function(target, ignoreParents) {
  var retObj = this.GetLogicalObjectAndDisplayable(target, ignoreParents);
  if (retObj) {
    return retObj.logicalObject;
  }
  return null;
};


/**
 * Returns the logical object and associated DvtDisplayable corresponding to the specified DvtDisplayable.
 * All high level event handlers, such as the selection and popup handlers, are designed to react to the
 * logical objects.
 * @param {DvtDisplayable} target The displayable.
 * @param {boolean} ignoreParents (optional) true indicates that parent displayables should not be searched if the
 *                  target doesn't have its own logical object
 * @return {object} The logical object and associated DvtDisplayable corresponding to the target.
 * @protected
 */
DvtEventManager.prototype.GetLogicalObjectAndDisplayable = function(target, ignoreParents) {
  //: the popup handler needs to keep track of the displayable associated with the logical
  //object that launched a mousehover popup in order to dismiss the popup at the right time
  var displayable = target;
  while (displayable) {
    if (displayable._logicalObjects) {
      for (var i = 0; i < displayable._logicalObjects.length; i++) {
        var mapping = displayable._logicalObjects[i];
        if (mapping.eventManager == this) {
          var retObj = {};
          retObj.logicalObject = mapping.logicalObject;
          retObj.displayable = displayable;
          return retObj;
        }
      }
    }
    displayable = ignoreParents ? null : displayable.getParent();
  }
  return null;
};


/**
 * Returns the array of showPopupBehaviors for a specified logical object.
 * @param {object} obj The logical target object.
 * @return {array} The array of applicable DvtShowPopupBehaviors
 * @private
 */
DvtEventManager.prototype._getShowPopupBehaviors = function(obj) {
  if (obj && obj.getShowPopupBehaviors)
    return obj.getShowPopupBehaviors();
};


/**
 * Returns the array of clientBehaviors for a specified logical object.
 * @param {object} obj The logical target object.
 * @return {array} The array of applicable DvtClientBehaviors
 * @private
 */
DvtEventManager.prototype._getClientBehaviors = function(obj) {
  if (obj && obj.getClientBehaviors)
    return obj.getClientBehaviors();
};


/**
 * Returns the menu type to display.
 * @param {object} logicalObj Logical object used to retrieve the correct selection handler.
 * @return {object} The menu type to pass into the context menu handler.
 * @protected
 */
DvtEventManager.prototype.GetContextMenuType = function(logicalObj) {
  // Figure out the selection size, which determines which menu to display
  var selectionHandler = this.getSelectionHandler(logicalObj);
  var selectionSize = selectionHandler ? selectionHandler.getSelection().length : 0;
  if (selectionSize <= 0)
    return DvtContextMenuHandler.TYPE_BODY_CONTEXT_MENU;
  else if (selectionSize == 1)
    return DvtContextMenuHandler.TYPE_CONTEXT_MENU;
  else
    return DvtContextMenuHandler.TYPE_MULTI_SELECT_CONTEXT_MENU;
};

/**
 * Returns the tooltip color for the specified object.
 * @param {object} obj The logical object.
 * @param {number} x The relative x coordinate of the event
 * @param {number} y The relative y coordinate of the event
 */
DvtEventManager.prototype.GetTooltipColor = function(obj, x, y) {
  if (obj && obj.getDatatipColor)
    return obj.getDatatipColor();
};


/**
 * Fires the specified event through the callback.
 * @param {object} event
 * @param {object} source The component that is the source of the event, if available.
 */
DvtEventManager.prototype.FireEvent = function(event, source) {
  if (this._callback)
    this._callback.call(this._callbackObj, event, source);
};


/**
 * Fires a selection event with the current selection state.
 * @param {object} logicalObj Logical object used to retrieve the correct selection handler.
 * @private
 */
DvtEventManager.prototype.fireSelectionEvent = function(logicalObj) {
  var selectionHandler = this.getSelectionHandler(logicalObj);
  if (!selectionHandler)
    return;

  // Get the array of selected ids
  var selectedIds = selectionHandler.getSelectedIds();

  // Create and fire the event
  var selectionEvent = new DvtSelectionEvent(selectedIds);
  this._callback.call(this._callbackObj, selectionEvent);
};

//*******************************************************************************//
//*********************** Begin Event Listeners *********************************//
//*******************************************************************************//


/**
 * Click event handler that accounts for double clicks
 * @protected
 */
DvtEventManager.prototype.PreOnClick = function(event) {
  if (this.IsDoubleClickable(event)) {
    if (this._clickTimer && this._clickTimer.isRunning()) {
      var clickEvent = this._savedClickEvent;
      if (event.pageX == clickEvent.pageX && event.pageY == clickEvent.pageY) {
        this._savedClickCount++;
        // Same coords, this is a double click, so ignore second click event
        return;
      }
      else {
        // Different coords, so need to process first event
        this._clickTimer.stop();
        this._onClickTimerEnd();
      }
    }
    this._savedClickEvent = event;
    this._savedClickCount = 1;
    if (!this._clickTimer) {
      this._clickTimer = new DvtTimer(this._context, 250, this._onClickTimerEnd, this, 1);
    }
    this._clickTimer.reset();
    this._clickTimer.start();
  }
  else {
    this._propagateEvent(DvtMouseEvent.CLICK, event, this.OnClick);
  }
};

DvtEventManager.prototype._onClickTimerEnd = function() {
  var clickEvent = this._savedClickEvent;
  this._savedClickEvent = null;
  this._savedClickCount = 0;
  if (clickEvent) {
    this._propagateEvent(DvtMouseEvent.CLICK, clickEvent, this.OnClick);
  }
};


/**
 * Click event handler.
 * @param {DvtMouseEvent} event The platform specific mouse event
 * @protected
 */
DvtEventManager.prototype.OnClick = function(event) {
  var obj = this.GetLogicalObject(this.GetCurrentTargetForEvent(event));
  this.OnClickInternal(event);

  this.ProcessSelectionEventHelper(obj, event.ctrlKey);

  // Stop displaying keyboard focus after the user has clicked
  this._shouldDisplayKeyboardFocus = false;

  // Done if there is no object
  if (! obj)
  {
    return;
  }

  //  and  - update the keyboard focus on mouse click
  if (this.KeyboardHandler && obj.getNextNavigable)
  {
    var nextFocus = obj.getNextNavigable(event);
    this.setFocusObj(nextFocus);
  }

  // Popup Support for triggerType="click"
  var consumed = false;
  if (this._hasEventInfo(event)) {
    consumed = this.GetEventInfo(event, DvtEventManager._EVENT_INFO_POPUP_DISPLAYED_KEY);
  }

  if (!consumed) {
    var position = new DvtPoint(event.pageX, event.pageY);
    consumed = this.PopupHandler.processPopupHelper(obj, this._getShowPopupBehaviors(obj), [DvtShowPopupBehavior.TRIGGER_TYPE_ACTION, DvtShowPopupBehavior.TRIGGER_TYPE_CLICK], position, event);
    if (consumed) {
      this.SetEventInfo(event, DvtEventManager._EVENT_INFO_POPUP_DISPLAYED_KEY, true);
    }
  }

  // Client Behavior Support for triggerType="click"
  if (!consumed) {
    var clientBehaviors = this._getClientBehaviors(obj);
    if (clientBehaviors) {
      consumed = this.ClientBehaviorHandler.processClick(obj, clientBehaviors);
    }
  }

  // fire an Action event if logical obj is a command component
  if (! consumed && obj.isCommandComponent && obj.isCommandComponent()) {
    // Create the action event
    var event = new DvtActionEvent(DvtActionEvent.SUBTYPE_ACTION, obj.getId());

    // add the component specific context
    DvtEventManager._addContextInfo(obj, event);

    // fire the action event
    this._callback.call(this._callbackObj, event);
  }
};

DvtEventManager.prototype.IsDoubleClickable = function(event) {
  var displayable = event.target;
  var obj = this.GetLogicalObject(this.GetCurrentTargetForEvent(event));
  while (displayable) {
    var logicalObject = this.GetLogicalObject(displayable, true);
    if (logicalObject) {
      if ((logicalObject.isDoubleClickable && logicalObject.isDoubleClickable()) || this.PopupHandler.hasPopup(obj, [DvtShowPopupBehavior.TRIGGER_TYPE_DBL_CLICK])) {
        return true;
      }
      if (!this.IsPropagationEnabled(DvtMouseEvent.DBLCLICK, null, displayable)) {
        return false;
      }
    }
    displayable = displayable.getParent();
  }
  return false;
};


/**
 * Helper function to process selection events
 * @param {DvtLogicalObject} logicalObj The logical object to process selection on
 * @param {Boolean} isMultiSelect True if we are performing multi-select
 * @private
 */
DvtEventManager.prototype.ProcessSelectionEventHelper = function(logicalObj, isMultiSelect)
{
  // Selection Support
  var selectionHandler = this.getSelectionHandler(logicalObj);
  if (selectionHandler) {
    var bSelectionChanged = selectionHandler.processClick(logicalObj, isMultiSelect);
    // If the selection has changed, fire an event
    if (bSelectionChanged)
      this.fireSelectionEvent(logicalObj);
  }
};

DvtEventManager.prototype.PreOnDblClick = function(event) {
  // Check whether we've received 2 clicks before the double click event to prevent falsely triggering a double click
  // on a DvtDisplayable when the target of the first click was different.
  var isDblClickable = this.IsDoubleClickable(event);
  if (isDblClickable && this._savedClickCount === 2 || !isDblClickable)
    this._propagateEvent(DvtMouseEvent.DBLCLICK, event, this.OnDblClick);
  this._savedClickCount = 0;
};


/**
 * Double click event handler.
 * @protected
 */
DvtEventManager.prototype.OnDblClick = function(event) {
  var obj = this.GetLogicalObject(this.GetCurrentTargetForEvent(event));
  if (this._clickTimer && this._clickTimer.isRunning()) {
    this._clickTimer.stop();
    this._savedClickEvent = null;
  }
  else {
    if (DvtAgent.isPlatformIE() && DvtAgent.getVersion() < 11) {
      if (!obj) {
        return;
      }

      if ((!obj.isDoubleClickable || !obj.isDoubleClickable()) && !this.PopupHandler.hasPopup(obj, [DvtShowPopupBehavior.TRIGGER_TYPE_DBL_CLICK])) {
        // Need to turn this into a single click for IE which only sends out click,dblclick upon a double-click rather
        // than the click,click,dblclick sent out by other browsers
        this.OnClick(event);
        return;
      }
    }
  }
  this.OnDblClickInternal(event);
  // Done if there is no object
  if (!obj) {
    return;
  }
  // Popup Support for triggerType="dblclick"
  var consumed = false;
  if (this._hasEventInfo(event)) {
    consumed = this.GetEventInfo(event, DvtEventManager._EVENT_INFO_POPUP_DISPLAYED_KEY);
  }
  if (!consumed) {
    var position = new DvtPoint(event.pageX, event.pageY);
    consumed = this.PopupHandler.processPopupHelper(obj, this._getShowPopupBehaviors(obj), [DvtShowPopupBehavior.TRIGGER_TYPE_DBL_CLICK], position, event);
    if (consumed) {
      this.SetEventInfo(event, DvtEventManager._EVENT_INFO_POPUP_DISPLAYED_KEY, true);
    }
  }
};

DvtEventManager.prototype.PreOnContextMenu = function(event) {
  this._propagateEvent('contextmenu', event, this.OnContextMenu);
};


/**
 * Context Menu event handler.
 * @protected
 */
DvtEventManager.prototype.OnContextMenu = function(event) {
  var obj = this.GetLogicalObject(this.GetCurrentTargetForEvent(event));

  // set keyboard focus on the object we are firing the context menu on
  if (obj && obj.getNextNavigable)
    this.setFocus(obj);

  this._onContextMenuHelper(event, obj);
};


/**
 * Helper method that does the bulk of the context menu handling
 *
 * @param {DvtMouseEvent} event
 * @param {Object} obj  The logical object on which the mouse event was fired
 */
DvtEventManager.prototype._onContextMenuHelper = function(event, obj)
{
  this.OnContextMenuInternal(event);
  var popupLaunched = this._processActionPopup(this.GetCurrentTargetForEvent(event), new DvtPoint(event.pageX, event.pageY));
  if (popupLaunched)
    event.preventDefault();

  // Process selection only for selectable objects so that generating context menu on empty area doesn't deselect ()
  if (obj && obj.isSelectable && obj.isSelectable())
    this.ProcessSelectionEventHelper(obj, event.ctrlKey);

  // Context Menu Support
  if (this.ContextMenuHandler) {
    var menuType = this.GetContextMenuType(obj);
    this.ProcessContextMenuHandler(event, menuType);
  }
  else {
    // Popup Support for triggerType="contextMenu"
    this.ProcessContextMenuPopup(event, obj);
  }
};


/**
 * @protected
 * Process the Facet Context Menu Handler
 * @param {DvtEvent} event  Event that invokes context menu
 * @param {String} menuType  Menu type
 * @return {boolean} true if menu items are processed by the handler
 */
DvtEventManager.prototype.ProcessContextMenuHandler = function(event, menuType) {
  var contextMenuEvent = this.ContextMenuHandler.show(event, menuType);
  if (contextMenuEvent) {
    // Hide the tooltip before displaying the menu
    this._context.getTooltipManager().hideTooltip();

    //: stop a mouseHover popup when a context menu is displayed
    this.PopupHandler.HidePopup(event);

    // Request the context menu be displayed
    this._callback.call(this._callbackObj, contextMenuEvent);
    return true;
  }
  return false;
};


/**
 * Process Popup of trigger type 'contextMenu'
 *
 * @param {DvtMouseEvent} event  Mouse event
 * @param {Object} obj  The logical object on which the event was fired
 */
DvtEventManager.prototype.ProcessContextMenuPopup = function(event, obj) {
  var consumed = false;
  if (this._hasEventInfo(event)) {
    consumed = this.GetEventInfo(event, DvtEventManager._EVENT_INFO_POPUP_DISPLAYED_KEY);
  }

  if (!consumed) {
    var behaviors = this._getShowPopupBehaviors(obj);
    if (behaviors) {
      var x, y;
      if (DvtAgent.isTouchDevice()) {
        var touch = event.touch;
        x = touch.pageX;
        y = touch.pageY;
      } else {
        x = event.pageX;
        y = event.pageY;
      }
      var position = new DvtPoint(x, y);
      consumed = this.PopupHandler.processPopupHelper(obj, behaviors, [DvtShowPopupBehavior.TRIGGER_TYPE_CONTEXT_MENU], position, event);
    }

    if (consumed) {
      this.SetEventInfo(event, DvtEventManager._EVENT_INFO_POPUP_DISPLAYED_KEY, true);
      event.preventDefault();
    }
  }
};


/**
 * Keypress down event handler.  Delegates to DvtComponentKeyboardHandlers
 * until event is consumed.
 * @param {DvtKeyboardEvent} event
 * @return {Boolean} true if this event manager has consumed the event
 * @protected
 */
DvtEventManager.prototype.OnKeyDown = function(event) 
{
  this._bKeyDown = true;
  var keyCode = event.keyCode;
  var eventConsumed = false;

  var i;
  var increment;

  // if no current event manager is set to receive keyboard focus,
  // start at one end of the array and pass event to each event manager until
  // one event manager consumes the event.  that will be the current event manager
  if (this._currentKeyboardHandlerIdx < 0 ||
      this._currentKeyboardHandlerIdx > this._keyboardHandlers.length)
  {
    // if we get a shift+tab, start from the back of the array
    if (keyCode == DvtKeyboardEvent.TAB && event.shiftKey)
      i = this._keyboardHandlers.length - 1;
    else
      i = 0;
  }
  else
  {
    i = this._currentKeyboardHandlerIdx;
  }

  // if we get a shift+tab, start from the back of the array and move backward
  if (keyCode == DvtKeyboardEvent.TAB && event.shiftKey)
    increment = -1;
  else
    increment = 1;

  for (i; (i >= 0 && i < this._keyboardHandlers.length && !eventConsumed); i = i + increment)
  {
    var handler = this._keyboardHandlers[i];
    if (handler === this)
      eventConsumed = this.ProcessKeyboardEvent(event);
    else
      eventConsumed = handler.handleKeyboardEvent(event);

    if (eventConsumed)
      this._currentKeyboardHandlerIdx = i;
  }

  // consume all arrow key events to prevent event being consumed by another component and losing focus
  if (!eventConsumed && (event.keyCode == DvtKeyboardEvent.UP_ARROW ||
                         event.keyCode == DvtKeyboardEvent.DOWN_ARROW ||
                         event.keyCode == DvtKeyboardEvent.LEFT_ARROW ||
                         event.keyCode == DvtKeyboardEvent.RIGHT_ARROW)) {
    DvtEventManager.consumeEvent(event);
  }

  //reset current keyboard handler index as focus goes out of component
  if (!eventConsumed && keyCode == DvtKeyboardEvent.TAB) {
    this._currentKeyboardHandlerIdx = -1;
  }
  return eventConsumed;
};


/**
 * @override
 */
DvtEventManager.prototype.handleKeyboardEvent = function(event)
{
  return this.OnKeyDown(event);
};


/**
 * @override
 */
DvtEventManager.prototype.hideKeyboardFocusEffect = function()
{
  var currentNavigable = this.getFocus();

  if (currentNavigable && currentNavigable.isShowingKeyboardFocusEffect())
  {
    currentNavigable.hideKeyboardFocusEffect();
  }
};


/**
 * Keypress down event handler.  Provides basic keyboard navigation and
 * triggering of context menus.
 * @param {DvtKeyboardEvent} event
 * @return {Boolean} true if this event manager has consumed the event
 * @protected
 */
DvtEventManager.prototype.ProcessKeyboardEvent = function(event) 
{
  if (!this.KeyboardHandler)
    return false;

  // clear tooltip if one is shown; tooltip can be shown if mouse is used to make a selection
  // and then we use the keyboard to navigate from the mouse-selected item
  this.hideTooltip();

  var currentNavigable = this.getFocus();
  var nextNavigable = null;

  // When tabbing into/out of a DVT component or subcomponent, we need to ensure focus effect is consistently shown/hidden
  if (event.keyCode == DvtKeyboardEvent.TAB && currentNavigable) {
    if (currentNavigable.isShowingKeyboardFocusEffect()) {
      // Tabbing out of a component
      currentNavigable.hideKeyboardFocusEffect();
      this.ProcessRolloverEvent(event, currentNavigable, false);

      // try to navigate to the next/previous subcomponent
      var nextComponent;
      if (event.shiftKey)
        nextComponent = this._context.previousKeyboardFocus();
      else
        nextComponent = this._context.nextKeyboardFocus();

      if (nextComponent) {
        nextComponent.FireListener(event, false);
        DvtEventManager.consumeEvent(event);
        return true;
      } else {
        return false; // handle the case where we tab out of a component. don't cancel the event and propagate it onwards
      }
    } else {
      // Tabbing into a component
      this.ShowFocusEffect(event, currentNavigable);
      this.ProcessRolloverEvent(event, currentNavigable, true);
      DvtEventManager.consumeEvent(event);
      return true;
    }
  }

  if (currentNavigable && this.KeyboardHandler.isContextMenuEvent(event))
  {
    var contextMenuLocation;

    if (currentNavigable.getContextMenuLocation)
    {
      contextMenuLocation = currentNavigable.getContextMenuLocation();
    }
    else
    {
      var bounds = currentNavigable.getKeyboardBoundingBox();
      // adjust location for bidi; use top left corner for bidi, top right corner for non-bidi,
      if (DvtAgent.isRightToLeft(this._context))
        contextMenuLocation = new DvtPoint(bounds.x, bounds.y);
      else
        contextMenuLocation = new DvtPoint(bounds.x + bounds.w, bounds.y);
    }

    var mouseEvent = DvtEventFactory.generateMouseEventFromKeyboardEvent(event, this._context, DvtMouseEvent.CLICK,
        this._context.getStage(),
        contextMenuLocation.x, contextMenuLocation.y);

    // OnContextMenu checks for ctrlKey to perform multi-select before showing context menu
    // However, the keystroke combination for showing the context menu is Ctrl+Alt+M
    // CLEAR the ctrlKey field so that multi-select isn't performed, and send OnContextMenu
    // a mouse event that is equivalent to right-clicking on the navigable with keyboard focus
    // With the mouse, a user could Ctrl+right click a navigbale to multi-select it and then bring up the
    // context menu.  In the keyboard case, the user would first have to multi-select and then bring up the
    // context menu, in two separate keystrokes
    mouseEvent.ctrlKey = false;
    this._onContextMenuHelper(mouseEvent, currentNavigable);
    return true;
  }

  nextNavigable = this.KeyboardHandler.processKeyDown(event);

  if (nextNavigable)
  {
    this.setFocus(nextNavigable);

    // the user has transferred focus via the keyboard, start showing keyboard focus effect
    this._shouldDisplayKeyboardFocus = true;
    if (currentNavigable) {
      currentNavigable.hideKeyboardFocusEffect();
      this.ProcessRolloverEvent(event, currentNavigable, false);
    }
    if (this.KeyboardHandler.isSelectionEvent(event))
      this.ProcessSelectionEventHelper(nextNavigable, event.shiftKey);
    else if (this.KeyboardHandler.isMultiSelectEvent(event))
      this.ProcessSelectionEventHelper(nextNavigable, event.ctrlKey);

    this.ShowFocusEffect(event, nextNavigable);
    this.ProcessRolloverEvent(event, nextNavigable, true);

    return true;
  }

  return false;
};

/**
 * Shows the keyboard focus effects wich includes tooltip, for a keyboard navigable object.
 * @param {DvtKeyboardEvent} event The keyboard event
 * @param {DvtKeyboardNavigable} navigable The keyboard navigable to show focus effect for
 * @protected
 */
DvtEventManager.prototype.ShowFocusEffect = function(event, navigable) {
  navigable.showKeyboardFocusEffect();
  var coords = navigable.getKeyboardTooltipLocation ? navigable.getKeyboardTooltipLocation() : navigable.getKeyboardBoundingBox(this.getCtx().getStage()).getCenter();
  var pageCoords = this.getCtx().stageToPageCoords(coords.x, coords.y);
  this.ProcessObjectTooltip(event, pageCoords.x, pageCoords.y, navigable, navigable.getTargetElem());
  this.UpdateActiveElement(navigable);
};

/**
 * Keypress up event handler.
 * @param {DvtKeyboardEvent} event
 * @protected
 */
DvtEventManager.prototype.OnKeyUp = function(event) {
  this._bKeyDown = false;
  if (this._handleExternalKeyboardFocus === true && event.keyCode == DvtKeyboardEvent.TAB) {
    this._handleExternalKeyboardFocus = false;
    //  - firing a fake keydown event on keyup to communicate the tab to the newly focused element
    this._callbackObj.dispatchDisplayableEvent(DvtKeyboardEvent.KEYDOWN, event);
  }
  this.KeyboardHandler.processKeyUp(event, [DvtShowPopupBehavior.TRIGGER_TYPE_KEY_UP]);
};

/**
 * Keypress up event handler.
 * @param {DvtKeyboardEvent} event
 * @protected
 */
DvtEventManager.prototype.OnKeyPress = function(event) {
  this.KeyboardHandler.processKeyUp(event, [DvtShowPopupBehavior.TRIGGER_TYPE_KEY_PRESS]);
};

DvtEventManager.prototype.PreOnMouseMove = function(event) {
  this._propagateEvent(DvtMouseEvent.MOUSEMOVE, event, this.OnMouseMove);
};


/**
 * Mouse Move event handler
 * @protected
 *
 * @param {DvtMouseEvent} event  Mouse move event
 */
DvtEventManager.prototype.OnMouseMove = function(event) {
  var pageX = event.pageX;
  var pageY = event.pageY;
  var relPos = this._context.pageToStageCoords(pageX, pageY);

  if (this._marqueeHandler) {
    var marqueeEvent = this._marqueeHandler.processDragMove(relPos, event.ctrlKey);
    if (marqueeEvent)
      this._callback.call(this._callbackObj, marqueeEvent);
  }

  var target = this.GetCurrentTargetForEvent(event);
  var obj = this.GetLogicalObject(target);

  // Return if no object is found
  if (!obj)
    return;

  this.ProcessObjectTooltip(event, pageX, pageY, obj, target);
  var position = new DvtPoint(pageX, pageY);
  // Notify the popup handler of the mouse move
  this.PopupHandler.processMouseMove(position);
  if (!this.GetEventInfo(event, DvtEventManager._EVENT_INFO_POPUP_DISPLAYED_KEY)) {
    // Popup Support for triggerType="mouseMove"
    var logObjAndDisp = this.GetLogicalObjectAndDisplayable(target);
    if (logObjAndDisp) {
      if (this.PopupHandler.processMousePopup(obj, this._getShowPopupBehaviors(obj), position, logObjAndDisp.displayable, event, DvtShowPopupBehavior.TRIGGER_TYPE_MOUSE_MOVE)) {
        this.SetEventInfo(event, DvtEventManager._EVENT_INFO_POPUP_DISPLAYED_KEY, true);
      }
    }
  }

  // Drag and Drop Support
  if (this.DragSource && !event.dragSourceSet && this.IsDragCandidate(obj)) {
    this.DragSource.setDragCandidate(obj);
    event.dragSourceSet = true;
  }

};

DvtEventManager.prototype.PreOnMouseOver = function(event) {
  this._propagateEvent(DvtMouseEvent.MOUSEOVER, event, this.OnMouseOver);
  this._handlePreOverEvent(event);
};

DvtEventManager.prototype._getDisplayableHierarchy = function(target, filterFunc, filterFuncObj) {
  var hierarchy = [];
  var currentTarget = target;
  while (currentTarget) {
    var bInclude = true;
    if (filterFunc) {
      bInclude = filterFunc.call(filterFuncObj, currentTarget);
    }
    if (bInclude) {
      hierarchy.unshift(currentTarget);
    }
    currentTarget = currentTarget.getParent();
  }
  return hierarchy;
};

DvtEventManager.prototype._getRolloverHierarchy = function(target) {
  return this._getDisplayableHierarchy(target, this._isRolloverType, this);
};


DvtEventManager.prototype._isRolloverType = function(target) {
  var logicalObject = this.GetLogicalObject(target, true);
  if (logicalObject) {
    for (var i = 0; i < this._rolloverTypes.length; i++) {
      if (logicalObject instanceof this._rolloverTypes[i]) {
        return true;
      }
    }
  }
  return false;
};

DvtEventManager.prototype.addRolloverType = function(type) {
  this._rolloverTypes.push(type);
};

DvtEventManager.prototype.removeRolloverType = function(type) {
  var index = DvtArrayUtils.getIndex(this._rolloverTypes, type);
  if (index != -1) {
    this._rolloverTypes.splice(index, 1);
  }
};

DvtEventManager.prototype.OnRollOver = function(event) {

};


/**
 * Mouse Over event handler
 * @param {DvtMouseEvent} event Mouse Over event
 * @protected
 */
DvtEventManager.prototype.OnMouseOver = function(event) {
  var currTargetForEvent = this.GetCurrentTargetForEvent(event);
  var logObjAndDisp = this.GetLogicalObjectAndDisplayable(currTargetForEvent);
  var obj = null;
  if (logObjAndDisp) {
    obj = logObjAndDisp.logicalObject;
  }
  var position = new DvtPoint(event.pageX, event.pageY);

  // Return if no object is found
  if (!obj)
    return;

  // Selection Support
  var selectionHandler = this.getSelectionHandler(obj);
  if (selectionHandler)
    selectionHandler.processMouseOver(obj);

  // Category Rollover Support
  this.ProcessRolloverEvent(event, obj, true);

  if (!this.GetEventInfo(event, DvtEventManager._EVENT_INFO_POPUP_DISPLAYED_KEY)) {
    // Popup Support for triggerType="over" or "hover"
    if (logObjAndDisp) {
      if (this.PopupHandler.processMousePopup(obj, this._getShowPopupBehaviors(obj), position, logObjAndDisp.displayable, event, DvtShowPopupBehavior.TRIGGER_TYPE_MOUSE_OVER)) {
        this.SetEventInfo(event, DvtEventManager._EVENT_INFO_POPUP_DISPLAYED_KEY, true);
      }
    }
  }

  // Accessibility Support
  this.UpdateActiveElement(obj, currTargetForEvent);
};

DvtEventManager.prototype.PreOnMouseOut = function(event) {
  this._handlePreOutEvent(DvtMouseEvent.MOUSEOUT, event, this.OnMouseOut);
};

DvtEventManager.prototype.OnRollOut = function(event) {

};


/**
 * Mouse Out event handler
 * @param {DvtMouseEvent} event Mouse Out event
 * @protected
 */
DvtEventManager.prototype.OnMouseOut = function(event) {
  var target = this.GetCurrentTargetForEvent(event);
  var obj = this.GetLogicalObject(target);

  // Return if no object is found
  if (!obj)
    return;

  var relatedObj = this.GetLogicalObject(event.relatedTarget);
  if (obj == relatedObj)
    return; // not a mouse out if they correspond to the same object

  // Selection Support
  var selectionHandler = this.getSelectionHandler(obj);
  if (selectionHandler)
    selectionHandler.processMouseOut(obj);

  // Category Rollover Support
  this.ProcessRolloverEvent(event, obj, false);

  // : If the mouse has moved off the component, hide the tooltip
  this.hideTooltip();

  // Clear drag source when moving out of component
  if (this.DragSource && !event.dragSourceSet) {
    this.DragSource.setDragCandidate(null);
    event.dragSourceSet = true;
  }
  if (!this.GetEventInfo(event, DvtEventManager._EVENT_INFO_POPUP_DISPLAYED_KEY)) {
    var position = new DvtPoint(event.pageX, event.pageY);
    var logObjAndDisp = this.GetLogicalObjectAndDisplayable(target);
    if (logObjAndDisp) {
      if (this.PopupHandler.processMousePopup(obj, this._getShowPopupBehaviors(obj), position, logObjAndDisp.displayable, event, DvtShowPopupBehavior.TRIGGER_TYPE_MOUSE_OUT)) {
        this.SetEventInfo(event, DvtEventManager._EVENT_INFO_POPUP_DISPLAYED_KEY, true);
      }
    }
  }
};

DvtEventManager.prototype.PreOnMouseDown = function(event) {
  this._propagateEvent(DvtMouseEvent.MOUSEDOWN, event, this.OnMouseDown);
};


/**
 * Mouse Down event handler
 * @protected
 *
 * @param {DvtMouseEvent} event  Mouse down event
 */
DvtEventManager.prototype.OnMouseDown = function(event) {
  var isPopup = this.isInActionPopup();
  if (isPopup) {
    this.CustomTooltipManager.closeActionTooltip();
  }

  if (this._marqueeHandler) {
    var relPos = this._context.pageToStageCoords(event.pageX, event.pageY);
    var marqueeEvent = this._marqueeHandler.processDragStart(relPos, event.ctrlKey);
    if (marqueeEvent)
      this._callback.call(this._callbackObj, marqueeEvent);
  }

  // Drag and Drop Support
  var target = this.GetCurrentTargetForEvent(event);
  var obj = this.GetLogicalObject(target);
  if (this.DragSource && !event.dragSourceSet && this.IsDragCandidate(obj)) {
    this.DragSource.setDragCandidate(obj);
    event.dragSourceSet = true;
  }
  if (!this.GetEventInfo(event, DvtEventManager._EVENT_INFO_POPUP_DISPLAYED_KEY)) {
    var position = new DvtPoint(event.pageX, event.pageY);
    var logObjAndDisp = this.GetLogicalObjectAndDisplayable(target);
    if (logObjAndDisp) {
      if (this.PopupHandler.processMousePopup(obj, this._getShowPopupBehaviors(obj), position, logObjAndDisp.displayable, event, DvtShowPopupBehavior.TRIGGER_TYPE_MOUSE_DOWN)) {
        this.SetEventInfo(event, DvtEventManager._EVENT_INFO_POPUP_DISPLAYED_KEY, true);
      }
    }
  }
};

DvtEventManager.prototype.PreOnMouseUp = function(event) {
  this._propagateEvent(DvtMouseEvent.MOUSEUP, event, this.OnMouseUp);
};


/**
 * Mouse Up event handler
 * @protected
 *
 * @param {DvtMouseEvent} event  Mouse Up event
 */
DvtEventManager.prototype.OnMouseUp = function(event) {
  if (this._marqueeHandler) {
    var relPos = this._context.pageToStageCoords(event.pageX, event.pageY);
    var marqueeEvent = this._marqueeHandler.processDragEnd(relPos, event.ctrlKey);
    if (marqueeEvent)
      this._callback.call(this._callbackObj, marqueeEvent);
  }
  var target = this.GetCurrentTargetForEvent(event);
  var obj = this.GetLogicalObject(target);
  if (!this.GetEventInfo(event, DvtEventManager._EVENT_INFO_POPUP_DISPLAYED_KEY)) {
    var position = new DvtPoint(event.pageX, event.pageY);
    var logObjAndDisp = this.GetLogicalObjectAndDisplayable(target);
    if (logObjAndDisp) {
      if (this.PopupHandler.processMousePopup(obj, this._getShowPopupBehaviors(obj), position, logObjAndDisp.displayable, event, DvtShowPopupBehavior.TRIGGER_TYPE_MOUSE_UP)) {
        this.SetEventInfo(event, DvtEventManager._EVENT_INFO_POPUP_DISPLAYED_KEY, true);
      }
    }
  }
  // no default behavior, subclasses can override
};

/**
 * @private
 * Shows tooltips on touch
 * @param {DvtComponentTouchEvent} event  Component touch event
 */
DvtEventManager.prototype._processTouchTooltip = function(event) {
  var tooltipInfoObj = this.TouchManager.getTooltipInfo();
  var touchIds = tooltipInfoObj['touchIds'];
  var tooltipTarget = tooltipInfoObj['tooltipTarget'];

  // If no hints and another event manager didn't already process the event for a tooltip, hide current tooltip
  if (!this.GetEventInfo(event, DvtEventManager._EVENT_INFO_TOOLTIP_DISPLAYED_KEY) && (touchIds.length == 0 || !tooltipTarget)) {
    this.hideTooltip();
    return;
  }

  var avgPos = this.TouchManager.calcAveragePosition(touchIds);
  var obj = this.GetLogicalObject(tooltipTarget);
  this.ProcessObjectTooltip(event, avgPos.x, avgPos.y, obj, null);
};

/**
 * Touch Start event handler
 * @param {DvtTouchEvent} event
 * @protected
 */
DvtEventManager.prototype.OnTouchStartBubble = function(event) {
  this.PreEventBubble(event);

  if (event.isInitialTouch()) {
    this._popupJustClosed = false;
  }

  // Drag and Drop Support
  if (this.DragSource) {
    var obj = this.GetLogicalObject(event.target);
    if (!event.dragSourceSet && this.IsDragCandidate(obj)) {
      this.DragSource.setDragCandidate(obj);
      event.dragSourceSet = true;
    }
  }

  var isPopup = this.isInActionPopup();
  // Action popups block other types of interactions
  if (isPopup) {
    this.CustomTooltipManager.closeActionTooltip();
    this.TouchManager.resetTouchHold();
  }
  this.HandleImmediateTouchStartInternal(event);
  this.TouchManager.fireLogicalEvents(event);
  this.TouchManager.postEventBubble(event);

  // Handle touch actions
  if (this._isTouchResponseTouchStart()) {
    this._touchResponseHandled = true;
    this.TouchManager.processAssociatedTouchAttempt(event, DvtEventManager.TOUCH_RESPONSE_TOUCH_START, this._saveTouchStart, this);
  } else {
    this._touchResponseHandled = false;
    this._processTouchTooltip(event);
  }
};


/**
 * Touch Move event handler
 * @param {DvtTouchEvent} event
 * @protected
 */
DvtEventManager.prototype.OnTouchMoveBubble = function(event) {
  this.PreEventBubble(event);

  if (this.TouchManager) {
    this._prevActionClear = false;

    this.HandleImmediateTouchMoveInternal(event);
    this.TouchManager.fireLogicalEvents(event);
    this.TouchManager.postEventBubble(event);

    this._processTouchTooltip(event);
  }
};

/*
 * Timeout needed to put touch end after an attempt to touch & hold
 */
DvtEventManager.prototype._handleTouchEndTimer = function() {
  for (var i = 0; i < this._touchEndTimer.length; i++) {
    var timerObj = this._touchEndTimer[i];
    timerObj['timer'].stop();
    var event = timerObj['event'];
    if (this.TouchManager) {
      this.HandleImmediateTouchEndInternal(event);
      this.TouchManager.fireLogicalEvents(event);
      this.TouchManager.postEventBubble(event);
    }
  }
  // Clear drag source on touch end timer
  if (this.DragSource && !event.dragSourceSet) {
    this.DragSource.setDragCandidate(null);
    event.dragSourceSet = true;
  }
  this._touchEndTimer = new Array();
};


/**
 * Touch End event handler
 * @param {DvtTouchEvent} event
 * @protected
 */
DvtEventManager.prototype.OnTouchEndBubble = function(event) {
  this.PreEventBubble(event);
  var timer = new DvtTimer(this._context, 0, this._handleTouchEndTimer, this, 1);
  if (!this._touchEndTimer)
    this._touchEndTimer = new Array();
  this._touchEndTimer.push({'event': event, 'timer': timer});
  timer.start();
};

DvtEventManager.prototype.HandleImmediateTouchStartInternal = function(event) {
};

DvtEventManager.prototype.HandleImmediateTouchMoveInternal = function(event) {
};

DvtEventManager.prototype.HandleImmediateTouchEndInternal = function(event) {
};


/**
 * Touch hover start event handler
 * @private
 * @param {DvtComponentTouchEvent} event
 */
DvtEventManager.prototype._preOnComponentTouchHoverStart = function(event) {
  this._propagateEvent(DvtComponentTouchEvent.TOUCH_HOVER_START_TYPE, event, this.OnComponentTouchHoverStart);
};


/**
 * Touch hover start event handler. Subclasses can override.
 * @param {DvtComponentTouchEvent} event  Component touch event
 * @protected
 */
DvtEventManager.prototype.OnComponentTouchHoverStart = function(event) {
  this.HandleTouchHoverStartInternal(event);

  // Handle touch actions if not already handled on touch start
  if (!this._touchResponseHandled) {
    this.HandleTouchActionsStart(event);
  }
};


/**
 * Touch hover move event handler
 * @private
 * @param {DvtComponentTouchEvent} event
 */
DvtEventManager.prototype._preOnComponentTouchHoverMove = function(event) {
  this._propagateEvent(DvtComponentTouchEvent.TOUCH_HOVER_MOVE_TYPE, event, this.OnComponentTouchHoverMove);
};


/**
 * Touch hover move event handler. Subclasses can override.
 * @param {DvtComponentTouchEvent} event
 * @protected
 */
DvtEventManager.prototype.OnComponentTouchHoverMove = function(event) {
  this.HandleTouchHoverMoveInternal(event);

  if (!this._touchResponseHandled) {
    this.HandleTouchActionsMove(event);
  }
};


/**
 * Touch hover end event handler
 * @private
 * @param {DvtComponentTouchEvent} event
 */
DvtEventManager.prototype._preOnComponentTouchHoverEnd = function(event) {
  this._propagateEvent(DvtComponentTouchEvent.TOUCH_HOVER_END_TYPE, event, this.OnComponentTouchHoverEnd);
};


/**
 * Touch hover end event handler. Subclasses can override.
 * @param {DvtComponentTouchEvent} event
 * @protected
 */
DvtEventManager.prototype.OnComponentTouchHoverEnd = function(event) {
  var targetObj = this.GetCurrentTargetForEvent(event);
  var obj = this.GetLogicalObject(targetObj);

  this.HandleTouchHoverEndInternal(event);

  this.ProcessTouchContextMenu(event, obj);

  // Fire an event notifying callback object that touch hold release happened. Used by JET for context menus.
  if (this._callbackObj instanceof DvtBaseComponent) {
    var stageCoord = this.getCtx().getStageAbsolutePosition();
    var x = event.touch.pageX;
    var y = event.touch.pageY;
    if (x <= stageCoord.x + this._callbackObj.getWidth() && x >= stageCoord.x && y <= stageCoord.y + this._callbackObj.getHeight() && y >= stageCoord.y)
      this._callback.call(this._callbackObj, event);
  }

  if (!this._touchResponseHandled) {
    this.HandleTouchActionsEnd(event);
  }
};


/**
 * Touch hover out event handler
 * @private
 * @param {DvtComponentTouchEvent} event
 */
DvtEventManager.prototype._preOnComponentTouchHoverOut = function(event) {
  this._handlePreOutEvent(DvtComponentTouchEvent.TOUCH_HOVER_OUT_TYPE, event, this.OnComponentTouchHoverOut);
};


/**
 * Touch hover out event handler. Subclasses can override.
 * @param {DvtComponentTouchEvent} event
 * @protected
 */
DvtEventManager.prototype.OnComponentTouchHoverOut = function(event) {
  this.HandleTouchHoverOutInternal(event);

  if (!this._touchResponseHandled) {
    this.HandleTouchActionsOut(event);
  }
};


/**
 * Touch hover over event handler
 * @private
 * @param {DvtComponentTouchEvent} event
 */
DvtEventManager.prototype._preOnComponentTouchHoverOver = function(event) {
  this._propagateEvent(DvtComponentTouchEvent.TOUCH_HOVER_OVER_TYPE, event, this.OnComponentTouchHoverOver);
  this._handlePreOverEvent(event);
};


/**
 * Touch hover over event handler. Subclasses can override.
 * @param {DvtComponentTouchEvent} event
 * @protected
 */
DvtEventManager.prototype.OnComponentTouchHoverOver = function(event) {
  this.HandleTouchHoverOverInternal(event);

  if (!this._touchResponseHandled) {
    this.HandleTouchActionsOver(event);
  }
};


/**
 * Touch double click event handler.
 * @private
 * @param {DvtComponentTouchEvent} event
 */
DvtEventManager.prototype._preOnComponentTouchDblClick = function(event) {
  this._propagateEvent(DvtComponentTouchEvent.TOUCH_DOUBLE_CLICK_TYPE, event, this.OnComponentTouchDblClick);
};


/**
 * Touch double click event handler. Subclasses must override.
 * @param {DvtComponentTouchEvent} event
 * @protected
 */
DvtEventManager.prototype.OnComponentTouchDblClick = function(event) {
  var targetObj = this.GetCurrentTargetForEvent(event);
  var touch = event.touch;
  var dlo = this.GetLogicalObject(targetObj);
  var position = new DvtPoint(touch.pageX, touch.pageY);
  // Popup Support for triggerType="dblclick"
  var consumed = false;
  if (this._hasEventInfo(event)) {
    consumed = this.GetEventInfo(event, DvtEventManager._EVENT_INFO_POPUP_DISPLAYED_KEY);
  }
  if (!consumed) {
    if (this.PopupHandler.processPopupHelper(dlo, this._getShowPopupBehaviors(dlo), [DvtShowPopupBehavior.TRIGGER_TYPE_DBL_CLICK], position, event)) {
      this.SetEventInfo(event, DvtEventManager._EVENT_INFO_POPUP_DISPLAYED_KEY, true);
    }
  }
  this.HandleTouchDblClickInternal(event);
};


/**
 * Touch click event handler
 * @private
 * @param {DvtComponentTouchEvent} event
 */
DvtEventManager.prototype._preOnComponentTouchClick = function(event) {
  this._propagateEvent(DvtComponentTouchEvent.TOUCH_CLICK_TYPE, event, this.OnComponentTouchClick);
};


/**
 * Touch click event handler. Subclasses can override.
 * @param {DvtComponentTouchEvent} event Component Touch event
 * @protected
 */
DvtEventManager.prototype.OnComponentTouchClick = function(event) {
  var targetObj = this.GetCurrentTargetForEvent(event);
  var touch = event.touch;
  var dlo = this.GetLogicalObject(targetObj);
  var position = new DvtPoint(touch.pageX, touch.pageY);
  // Popup Support for triggerType="click"
  var consumed = false;
  if (this._hasEventInfo(event)) {
    consumed = this.GetEventInfo(event, DvtEventManager._EVENT_INFO_POPUP_DISPLAYED_KEY);
  }

  if (!consumed) {
    if (this.PopupHandler.processPopupHelper(dlo, this._getShowPopupBehaviors(dlo), [DvtShowPopupBehavior.TRIGGER_TYPE_ACTION, DvtShowPopupBehavior.TRIGGER_TYPE_CLICK]
        , position, event)) {
      this.SetEventInfo(event, DvtEventManager._EVENT_INFO_POPUP_DISPLAYED_KEY, true);
      consumed = true;
    }
  }

  if (!consumed) {
    var clientBehaviors = this._getClientBehaviors(dlo);
    if (clientBehaviors) {
      this.ProcessClientBehaviorForTouch(dlo, clientBehaviors);
    }
  }

  var done = this.HandleTouchClickInternal(event);
  if (done)
    return;


  // When touchResponse is touchStart, selection is handled on touchend listener.
  if (!this._isTouchResponseTouchStart())
    this._processTouchSelection(dlo);
  // Prevent selection clearing if popup has just closed
  if (!this._popupJustClosed)
    this._processTouchSelectionClear(dlo);

  if (this.CustomTooltipManager.displayActionPopup()) {
    this.UpdateActionTooltipLaunchedFeedback(targetObj, new DvtPoint(touch.pageX, touch.pageY));
    this.CustomTooltipManager.startActionPopupAtPosition(touch.pageX, touch.pageY, targetObj);
  }

  // fire an Action event if logical obj is a command component
  if (dlo && !consumed && dlo.isCommandComponent && dlo.isCommandComponent()) {
    // Create the action event
    var event = new DvtActionEvent(DvtActionEvent.SUBTYPE_ACTION, dlo.getId());

    // add the component specific context
    DvtEventManager._addContextInfo(dlo, event);

    // fire the action event
    this._callback.call(this._callbackObj, event);
  }

};

/**
 * @param {DvtObj} dlo The logical object to process selection on
 * @private
 */
DvtEventManager.prototype._processTouchSelection = function(dlo) {
  var bSelectionChanged = false;
  var selectionHandler = this.getSelectionHandler(dlo);
  if (selectionHandler && dlo && dlo.isSelectable && dlo.isSelectable()) {
    // Process click immediately
    bSelectionChanged = selectionHandler.processClick(dlo, true);
    // If the selection has changed, fire an event
    if (bSelectionChanged)
      this.fireSelectionEvent(dlo);
  }
  this._prevActionClear = false;
};


/**
 * @param {DvtObj} dlo The logical object to process selection clear on
 * @private
 */
DvtEventManager.prototype._processTouchSelectionClear = function(dlo) {
  var bSelectionChanged = false;
  var selectionHandler = this.getSelectionHandler(dlo);
  if (selectionHandler && (!dlo || !dlo.isSelectable || !dlo.isSelectable())) {
    if (!this._prevActionClear) {
      // Don't ask for clear selection if popup just closed
      var showClearDialog = false;
      // There are two different policies for the clear selection dialog
      // 1) If a tap, show clear selection only for multiple selection when more than 1 is selected
      // 2) If a touch and hold + release, don't attempt a clear or perform a  clear
      if (this.isClearMenuAllowed()) {
        var selType = selectionHandler.getType();
        if (selType == DvtSelectionHandler.TYPE_MULTIPLE) {
          if (selectionHandler.getSelectedCount() > 1) {
            showClearDialog = true;
          }
        }
      }
      if (showClearDialog) {
        this.addClearAllActionItem();
      } else {
        bSelectionChanged = selectionHandler.processClick(null, false);
        // If the selection has changed, fire an event
        if (bSelectionChanged)
          this.fireSelectionEvent(dlo);
      }
    }
  }
};

DvtEventManager.prototype.OnActionTooltipClosed = function(event) {
  var targetObj = event.target;

  this._popupJustClosed = true;
  this._isInActionPopup = false;
  var actionPopup = this.CustomTooltipManager.getActionTooltip();

  if (actionPopup.containsMenuId(DvtEventManager.CLEAR_SELECTION_ACTION_TYPE)) {
    this._prevActionClear = true;
  }
  this.CustomTooltipManager.clearActionTooltip();

  // end start
  this.UpdateActionTooltipClosedFeedback(targetObj);
};

DvtEventManager.prototype.OnActionTooltipStarted = function(event) {
  this._isInActionPopup = true;
};

//*******************************************************************************//
//************************* End Event Listeners *********************************//
//*******************************************************************************//


DvtEventManager.prototype._getTooltipInfo = function(target, obj, x, y) {
  var text = null;
  var isDatatip = false;
  if (obj && obj.getDatatip) {
    text = obj.getDatatip(target, x, y);
    if (text)
      isDatatip = true;
  }

  if (!text && obj && obj.getTooltip) {
    text = obj.getTooltip(target, x, y);

  }
  return {'text' : text, 'isDatatip': isDatatip};
};

/**
 * @private
 * Process show tooltip for the mousemove or touch event
 * @param {object} target target object
 * @param {object} obj  logical object
 * @param {number} pageX  event x-coordinate
 * @param {number} pageY  event y-coordinate
 * @return {boolean}  true if tooltip is shown
 */
DvtEventManager.prototype._processShowTooltip = function(target, obj, pageX, pageY) {
  if (this.getTooltipsEnabled(obj)) {
    var relPos = this._context.pageToStageCoords(pageX, pageY);
    var x = relPos.x;
    var y = relPos.y;

    var tooltipInfo = this._getTooltipInfo(target, obj, x, y);
    var isDatatip = tooltipInfo['isDatatip'];
    var text = tooltipInfo['text'];
    if (text) {
      this.CustomTooltipManager.clearActionTooltip();
      var borderColor = this.GetTooltipColor(obj, x, y);

      var ttm = this._context.getTooltipManager();
      if (isDatatip) {
        ttm.showDatatip(pageX, pageY, text, borderColor);
      } else {
        ttm.showTooltip(pageX, pageY, text, null, true, borderColor);
      }

      this.TooltipLaunched(text, borderColor);
      return true;
    } else {
      this.hideTooltip();
    }
  } else {
    this.hideTooltip();
  }
  return false;
};

DvtEventManager.prototype.hideTooltip = function() {
  var tooltipManager = this._context.getTooltipManager();
  if (tooltipManager)
    tooltipManager.hideTooltip();

  this.TooltipHidden();
};


/**
 * Process Context Menu for touch devices
 *
 * @param {DvtMouseEvent} event  Touch event
 * @param {Object} dlo  The logical object on which the touch event was fired
 * @return {boolean} true if menu is displayed on touch
 */
DvtEventManager.prototype.ProcessTouchContextMenu = function(event, dlo) {

  if (!this.ContextMenuHandler) {
    //If Context Menu Handler is not defined, look for Context Menu popup
    this.ProcessContextMenuPopup(event, dlo);
    return;
  }
  var menuType = this.GetContextMenuType(dlo);

  var allowContextMenu = false;
  if (dlo && dlo.isSelected && dlo.isSelected()) {
    allowContextMenu = true;
  } else {
    if (!dlo || !dlo.isSelectable || !dlo.isSelectable()) {
      menuType = DvtContextMenuHandler.TYPE_BODY_CONTEXT_MENU;
    }
    if (menuType == DvtContextMenuHandler.TYPE_BODY_CONTEXT_MENU) {
      allowContextMenu = true;
    }
  }
  if (allowContextMenu) {
    // On touch device, server context menu renders the desktop context menu
    return this.ProcessContextMenuHandler(event, menuType);
  }
  return false;
};

DvtEventManager.prototype._processActionPopup = function(targetObj, position) {
  // Only if action tooltip shown
  if (this.CustomTooltipManager.displayActionPopup()) {
    this.SetupTouchTooltip(targetObj);
    this.UpdateActionPopupShownFeedback(targetObj);
    this.CustomTooltipManager.startActionPopupAtPosition(position.x, position.y, targetObj);
    return true;
  } else {
    this.UpdateActionPopupHiddenFeedback(targetObj);
    return false;
  }
};
/*
 * General  hooks
 */

DvtEventManager.prototype.TooltipLaunched = function(tooltip, borderColor) {
};

DvtEventManager.prototype.TooltipHidden = function() {
};

DvtEventManager.prototype.SetupTouchTooltip = function(targetObj)
{
  var obj = this.GetLogicalObject(targetObj);
  var actionTooltip = this.CustomTooltipManager.getActionTooltip();
  var tooltipBorderColor = actionTooltip.getTooltipBorderColor();
  // If border color wasn't overridden, get it here
  if (tooltipBorderColor == null) {
    var borderColor = this.GetTooltipColor(obj);
    actionTooltip.setTooltipBorderColor(borderColor);
  }
};

/*
 * Mouse-related hooks
 */
DvtEventManager.prototype.OnContextMenuInternal = function(event) {
};

/**
 * Click function for subclasses to overwrite
 * @param {DvtMouseEvent} event The platform specific mouse event
 * @protected
 */
DvtEventManager.prototype.OnClickInternal = function(event) {
};
/**
 *  Double Click function for subclasses to overwrite
 * @param {DvtMouseEvent} event The platform specific mouse event
 * @protected
 */
DvtEventManager.prototype.OnDblClickInternal = function(event) {
};

/*
 * Touch-related hooks
 */
DvtEventManager.prototype.HandleTouchHoverStartInternal = function(event) {
};

DvtEventManager.prototype.HandleTouchHoverMoveInternal = function(event) {
};

DvtEventManager.prototype.HandleTouchHoverEndInternal = function(event) {
};

DvtEventManager.prototype.HandleTouchHoverOverInternal = function(event) {
};

DvtEventManager.prototype.HandleTouchHoverOutInternal = function(event) {
};

/**
 * Internal Touch click event handler. Subclasses can override.
 * @param {DvtComponentTouchEvent} event Component Touch event
 * @return {boolean} true if done handling touch click
 * @protected
 */
DvtEventManager.prototype.HandleTouchClickInternal = function(event) {
  return false;
};
/**
 * Internal Double Touch click event handler. Subclasses can override.
 * @param {DvtComponentTouchEvent} event Component Touch event
 * @protected
 */
DvtEventManager.prototype.HandleTouchDblClickInternal = function(event) {
};

// Action popup shown for the given target object
DvtEventManager.prototype.UpdateActionPopupShownFeedback = function(targetObj) {
};

// Action popup hidden for the given target object
DvtEventManager.prototype.UpdateActionPopupHiddenFeedback = function(targetObj) {
};

DvtEventManager.prototype.UpdateActionTooltipClosedFeedback = function(targetObj) {
};

DvtEventManager.prototype.UpdateActionTooltipLaunchedFeedback = function(targetObj, position) {
};

DvtEventManager.prototype.isInActionPopup = function()
{
  return this._isInActionPopup;
};

/**
 * Returns a localized "Clear Selection" text.
 * @return {string}
 */
DvtEventManager.prototype.GetClearSelectionText = function() {
  return DvtBundle.getTranslatedString(DvtBundle.UTIL_PREFIX, 'CLEAR_SELECTION');
};

// Add a clear selection popup menu item
DvtEventManager.prototype.addClearAllActionItem = function() {
  this.addActionTooltipMenuItem(DvtEventManager.CLEAR_SELECTION_ACTION_TYPE, this.GetClearSelectionText(), this._actionTooltipClearListener, this);
  var actionTooltip = this.CustomTooltipManager.getActionTooltip();
  // Override color to always be gray
  if (actionTooltip)
    actionTooltip.setTooltipBorderColor(DvtCustomTooltip.DEFAULT_BORDER_COLOR);
};

DvtEventManager.prototype.isClearMenuAllowed = function()
{
  return true;
};

// Add a menu item to the action tooltip
DvtEventManager.prototype.addActionTooltipMenuItem = function(id, text, listener, obj)
{
  var actionTooltip = this.CustomTooltipManager.getActionTooltip();
  actionTooltip.addMenuItem(new DvtCustomTooltipItem(this._context, id, text, listener, obj));
};

/*
 * Touch-related listeners
 */
// Performed after tapping a context menu item
DvtEventManager.prototype.ContextMenuItemListener = function(evt) {
  var menuItem = evt.menuItem;
  var contextMenuEvent = menuItem.getEvent();
  this._callback.call(this._callbackObj, contextMenuEvent);
};

// Performed after tapping the clear selection option in an action popup
DvtEventManager.prototype._actionTooltipClearListener = function(evt) {
  var targetObj = evt.target;
  var dlo = this.GetLogicalObject(targetObj);
  var bSelectionChanged = this.getSelectionHandler(dlo).processClick(null, false);
  // If the selection has changed, fire an event
  if (bSelectionChanged)
    this.fireSelectionEvent(dlo);
};

// Performed after tapping the select option in an action popup
DvtEventManager.prototype._actionTooltipSelectListener = function(evt) {
  var targetObj = evt.target;
  var dlo = this.GetLogicalObject(targetObj);
  // Always control click for touch
  var bSelectionChanged = this.getSelectionHandler(dlo).processClick(dlo, true);

  // If the selection has changed, fire an event
  if (bSelectionChanged)
    this.fireSelectionEvent(dlo);
};

/**
 * Consumes an event by calling preventDefault() and stopPropagation() on the event to prevent default browser
 * behavior and prevent other listeners from receiving this event which we always want to do for keyboard events.
 * @param {DvtBaseEvent} event The event to consume
 */
DvtEventManager.consumeEvent = function(event) {
  if (event) {
    event.preventDefault();
    //: stop event propagation when the event is consumed
    event.stopPropagation();
  }
};


// add the component specific context to this event, such as the clientRowKey.
DvtEventManager._addContextInfo = function(target, event) {
  // diagram
  if (target.getContextCallback && target.getContextCallbackObj) {
    var ccb = target.getContextCallback();
    var ccbo = target.getContextCallbackObj();
    if (ccb && ccbo) {
      ccb.call(ccbo, event);
    }
  }
  // graph
  else {
    // store clientRowKey
    event.addParam(DvtBaseComponentEvent.CLIENT_ROW_KEY, target.getId());
  }
};

DvtEventManager.prototype.IsPropagationEnabled = function(eventType, event, displayable) {
  return false;
};

/**
 * Get current target of the event
 * @param {DvtMouseEvent} event  Mouse Event
 * @return {object} event target
 */
DvtEventManager.prototype.GetCurrentTargetForEvent = function(event) {
  var currentTarget = this.GetEventInfo(event, DvtEventManager._EVENT_INFO_CURRENT_TARGET_KEY);
  return currentTarget ? currentTarget : event.target;
};

/**
 * @private
 * Propagate event
 * @param {String} eventType  event type
 * @param {DvtMouseEvent} event  Mouse Event
 * @param {function} handler  function handler of the event
 */
DvtEventManager.prototype._propagateEvent = function(eventType, event, handler) {
  var obj = this.GetLogicalObject(event.target);
  if (!obj) {
    // No logical objects anywhere in the hierarchy, call handler directly
    handler.call(this, event);
  }
  else {
    var displayable = event.target;
    try {
      while (displayable) {
        var logicalObject = this.GetLogicalObject(displayable, true);
        if (logicalObject) {
          this.SetEventInfo(event, DvtEventManager._EVENT_INFO_CURRENT_TARGET_KEY, displayable);
          handler.call(this, event);
          if (!this.IsPropagationEnabled(eventType, event, displayable)) {
            return;
          }
        }
        displayable = displayable.getParent();
      }
    }
    finally {
      this.SetEventInfo(event, DvtEventManager._EVENT_INFO_CURRENT_TARGET_KEY, null);
    }
  }
};

DvtEventManager.prototype.ConsumesClick = function(logicalObject) {
  return (logicalObject.isSelectable && logicalObject.isSelectable()) ||
         (logicalObject.isClickEventPropagationStopped && logicalObject.isClickEventPropagationStopped()) ||
         this._hasClickPopup(logicalObject) || this._hasClickClientBehavior(logicalObject);
};
/**
 * @private
 * Returns whether an object has a click popup
 * @param {object} logicalObject The logical target object looked at
 * @return {booelan} true of logicalObject has click popup
 */
DvtEventManager.prototype._hasClickPopup = function(logicalObject) {
  return this.PopupHandler.hasPopup(logicalObject, [DvtShowPopupBehavior.TRIGGER_TYPE_ACTION, DvtShowPopupBehavior.TRIGGER_TYPE_CLICK]);
};


/**
 * Adds a DvtComponentKeyboardHandler to process keyboard events initially
 * received by this event manager.  Handlers are stored in tab index order and
 * a keyboard event will be passed from one handler to the next until some
 * handler (which might be this event manager itself) consumes the event or
 * all handlers after or before the current handler in the list have
 * had a chance to process the keyboard event.
 *
 * @param {DvtComponentKeyboardHandler} handler
 */
DvtEventManager.prototype.addComponentKeyboardHandler = function(handler)
{
  if (handler) {
    this._keyboardHandlers.push(handler);
  }
};


/**
 * Adds a DvtComponentKeyboardHandler to process keyboard events initially
 * received by this event manager.  Handlers are stored in tab index order and
 * a keyboard event will be passed from one handler to the next until some
 * handler (which might be this event manager itself) consumes the event or
 * all handlers after or before the current handler in the list have
 * had a chance to process the keyboard event.
 *
 * @param {DvtComponentKeyboardHandler} handler
 * @param {Number} index The tab index at which to add this handler
 *
 */
DvtEventManager.prototype.addComponentKeyboardHandlerAt = function(handler, index)
{
  // Return immediately if the current index doesn't exist
  if (index > this._keyboardHandlers.length)
    return;
  if (handler) {
    this._keyboardHandlers.splice(index, 0, handler);
    // maintain the pointer to the current keyboard handler
    if (index <= this._currentKeyboardHandlerIdx)
      this._currentKeyboardHandlerIdx++;
  }
};


/**
 * Removes the given DvtComponentKeyboardHandler
 *
 * @param {DvtComponentKeyboardHandler} handler
 *
 */
DvtEventManager.prototype.removeComponentKeyboardHandler = function(handler)
{
  if (handler) {
    var i = this._findHandler(handler);
    if (i > -1)
    {
      // if the handler to be removed is the current one and it's the
      // first handler on the list, then let the reference to the current handler point
      // to the first element in the handler list after the current handler is removed
      if (this._currentKeyboardHandlerIdx == i && i == 0)
        this._currentKeyboardHandlerIdx = 0;

      // maintain the pointer to the current keyboard handler
      else if (i <= this._currentKeyboardHandlerIdx)
        this._currentKeyboardHandlerIdx--;

      this._keyboardHandlers.splice(i, 1);
    }
  }
};


/**
  * Returns index of specified DvtComponentKeyboardHandler in the internal list,
  * or -1 if not found.
  * @param {DvtComponentKeyboardHandler} handler
  * @return {Number}
  * @private
  */
DvtEventManager.prototype._findHandler = function(handler)
{
  var idx = -1;
  var length = this._keyboardHandlers.length;

  for (var i = 0; i < length; i++)
  {
    if (this._keyboardHandlers[i] === handler)
      idx = i;
  }

  return idx;
};


/**
 * Updates the pointer to the current keyboard handler
 * @param {DvtComponentKeyboardHandler} handler
 */
DvtEventManager.prototype.setCurrentKeyboardHandler = function(handler)
{
  var idx = this._findHandler(handler);

  if (idx >= 0)
    this._currentKeyboardHandlerIdx = idx;
};

DvtEventManager.prototype._hasClickClientBehavior = function(logicalObject) {
  var behaviors = this._getClientBehaviors(logicalObject);
  if (behaviors) {
    for (var i = 0; i < behaviors.length; i++) {
      var behavior = behaviors[i];
      if (behavior && (behavior.getTriggerType() == DvtClientBehavior.TRIGGER_TYPE_ACTION ||
                       behavior.getTriggerType() == DvtClientBehavior.TRIGGER_TYPE_CLICK)) {
        return true;
      }
    }
  }
  return false;
};

DvtEventManager.prototype.CreateClientBehaviorHandler = function(context, callback, callbackObj) {
  return new DvtClientBehaviorHandler(context, callback, callbackObj);
};


/**
 * Processes the client behavior event for touch device
 *
 * @protected
 * @param {object} obj The target of event.
 * @param {array} clientBehaviors The array of applicable client behaviors.
 * @return {boolean} true if a client behavior was triggered, false otherwise
 */
DvtEventManager.prototype.ProcessClientBehaviorForTouch = function(obj, clientBehaviors) {
  return this.ClientBehaviorHandler.processClick(obj, clientBehaviors);
};

DvtEventManager.prototype.IsDragCandidate = function(obj) {
  // subclasses should override
  return true;
};


/**
 * Generates a random ARIA active element ID
 * @return {String}
 * @private
 */
DvtEventManager._getActiveElementId = function() {
  var ariaIdPrefix = '_dvtActiveElement';
  return ariaIdPrefix + Math.floor(Math.random() * 1000000000);//@RandomNumberOk
};


/**
 * Fires an active element change event in order to add aria-activedescendant attribute to the outer div.
 * This is needed by accessibility client in order to determine active SVG element
 * @param {object} obj The logical object corresponding to the targeted displayable.
 * @param {DvtDisplayable} displayable The displayable being targeted.
 * @protected
 */
DvtEventManager.prototype.UpdateActiveElement = function(obj, displayable) {
  // Find the displayable if needed
  if (!displayable) {
    if (obj.getDisplayable)
      displayable = obj.getDisplayable();
    else if (obj.getDisplayables)
      displayable = obj.getDisplayables()[0];
    else
      displayable = obj;
  }

  // Don't continue if the displayable is not a valid displayable
  if (!(displayable instanceof DvtDisplayable))
    return;

  // Find the displayable with the ARIA tags, by traversing ancestors if needed.  If the logical object has a deferred
  // aria-label, then it doesn't matter which displayable is used.
  if (obj.getAriaLabel) {
    var ariaLabel = obj.getAriaLabel();
    if (ariaLabel) {
      displayable.setAriaProperty('label', ariaLabel);
    }
  }
  else {
    while (!displayable.getAriaRole() && displayable.getParent()) {
      displayable = displayable.getParent();
    }
  }

  // Return if this displayable is the stage, since it should never be the active element
  if (displayable == this.getCtx().getStage())
    return;

  // Set the new active element
  this.getCtx().setActiveElement(displayable);
};

/**
 * @private
 * Handle pre-mouseover event
 * @param {DvtMouseEvent} event  Mouse Event
 */
DvtEventManager.prototype._handlePreOverEvent = function(event) {
  var enteredHierarchy = this._getRolloverHierarchy(event.target);
  var exitedHierarchy = this._getRolloverHierarchy(event.relatedTarget);
  if (enteredHierarchy.length > 0) {
    var enteredObject = enteredHierarchy[enteredHierarchy.length - 1];
    var exitedObject = exitedHierarchy.length == 0 ? null : exitedHierarchy[exitedHierarchy.length - 1];
    if (enteredObject != exitedObject) {
      try {
        this.SetEventInfo(event, DvtEventManager._EVENT_INFO_CURRENT_TARGET_KEY, enteredObject);
        this.OnRollOver(event);
      }
      finally {
        this.SetEventInfo(event, DvtEventManager._EVENT_INFO_CURRENT_TARGET_KEY, null);
      }
    }
  }
};

/**
 * @private
 * Handle pre-mouseout event
 * @param {String} eventType  Event type
 * @param {DvtMouseEvent} event  Mouse Event
 * @param {function} handler  Function handler for the event
 */
DvtEventManager.prototype._handlePreOutEvent = function(eventType, event, handler) {
  var enteredLogicalObject = this.GetLogicalObject(event.relatedTarget);
  var displayable = event.target;
  try {
    // rollout
    var exitedHierarchy = this._getRolloverHierarchy(event.target);
    var enteredHierarchy = this._getRolloverHierarchy(event.relatedTarget);
    if (exitedHierarchy.length > 0) {
      var exitedObject = exitedHierarchy[exitedHierarchy.length - 1];
      var enteredObject = enteredHierarchy.length == 0 ? null : enteredHierarchy[enteredHierarchy.length - 1];
      if (exitedObject != enteredObject) {
        this.SetEventInfo(event, DvtEventManager._EVENT_INFO_CURRENT_TARGET_KEY, exitedObject);
        this.OnRollOut(event);
      }
    }

    var obj = this.GetLogicalObject(displayable);
    if (!obj) {
      // No logical objects anywhere in the hierarchy, call handler directly
      handler.call(this, event);
    }
    else {
      // mouseout

      //: pass the hierarchy of DvtDisplayables for the relatedTarget to the popup
      //handler so that it can determine whether it needs to dismiss a mousehover popup
      //(NOTE: do this in PreOnMouseOut so that it only happens once, instead of in OnMouseOut,
      //which gets called multiple times in the loop below)

      // Popup Support for triggerType="hover"
      this.PopupHandler.processMouseOut(obj, this._getDisplayableHierarchy(event.relatedTarget), event);

      while (displayable) {
        var logicalObject = this.GetLogicalObject(displayable, true);
        if (logicalObject) {
          if (enteredLogicalObject === logicalObject) {
            // Do not mouse out of the new displayable (or its parents)
            break;
          }
          this.SetEventInfo(event, DvtEventManager._EVENT_INFO_CURRENT_TARGET_KEY, displayable);
          handler.call(this, event);
          if (!this.IsPropagationEnabled(eventType, event, displayable)) {
            break;
          }
        }
        displayable = displayable.getParent();
      }
    }
  }
  finally {
    this.SetEventInfo(event, DvtEventManager._EVENT_INFO_CURRENT_TARGET_KEY, null);

    // Clear the cached stage position on mouse out.  The cache makes it significantly cheaper to access the stage
    // position, but it must only be used when the DOM position of the component is not changing.  We make this
    // assumption whenever the user is directly interacting with the component (via mouse or touch).
    if (!(event.relatedTarget instanceof DvtDisplayable))
      this._context.clearStageAbsolutePosition();
  }
};


/**
 * Gets a touch manager object
 * @return {DvtTouchManager} touch manager object
 */
DvtEventManager.prototype.getTouchManager = function() {
  return this.TouchManager;
};


/**
 * Ends a drag without specifying the final mouse/touch coordinate.
 * Used to end touch drag and to end a drag that happens outside the component area (called by AdfDhtmlDvtToolkitPeer).
 * @return {DvtBaseComponentEvent} An event, if fired.
 */
DvtEventManager.prototype.endDrag = function() {
  return null; // subclasses should override
};

/**
 * @private
 * Check if the event has information
 * @param {DvtEvent} event  Dvt Event object
 * @return {boolean}  true if the event has information
 */
DvtEventManager.prototype._hasEventInfo = function(event) {
  if (event == null)
    return false;

  var nativeEvt = event.getNativeEvent();
  if (nativeEvt._eventInfo)
    return true;

  return false;
};

/**
 * @protected
 * Get event information for the passed key
 * @param {DvtEvent} event  Dvt Event object
 * @param {string} key  event info key
 * @return {object}  event info value
 */
DvtEventManager.prototype.GetEventInfo = function(event, key) {
  if (!this._hasEventInfo(event) || key == null)
    return null;

  //get the value from event info
  var eventInfo;
  if (!this.StoreInfoByEventType(key)) {
    eventInfo = event.getNativeEvent()._eventInfo;
  } else {
    var type = event.type ? event.type : event.getType();
    eventInfo = event.getNativeEvent()._eventInfo[type];
  }
  return eventInfo ? eventInfo[key] : null;
};

/**
 * @protected
 * Set event information
 * @param {DvtEvent} event  Dvt Event object
 * @param {string} key  event info key
 * @param {object} value  event info value
 */
DvtEventManager.prototype.SetEventInfo = function(event, key, value) {
  if (event == null || key == null)
    return;

  var nativeEvt = event.getNativeEvent();
  if (!nativeEvt._eventInfo)
    nativeEvt._eventInfo = {};

  if (!this.StoreInfoByEventType(key)) {
    nativeEvt._eventInfo[key] = value;
  } else {
    var typeName = event.type ? event.type : event.getType();
    if (!nativeEvt._eventInfo[typeName])
      nativeEvt._eventInfo[typeName] = {};
    //set the value in event info
    nativeEvt._eventInfo[typeName][key] = value;
  }
};

/**
 * @protected
 * Checks if the event info should be stored on native event using event type
 * @param {string} key  event info key
 * @return {boolean} true to use event type in addition to the key to store event info
 */
DvtEventManager.prototype.StoreInfoByEventType = function(key) {
  if (key == DvtEventManager._EVENT_INFO_TOOLTIP_DISPLAYED_KEY) {
    return false;
  }
  return true;
};


/**
 * Process object tooltip
 * @param {DvtMouseEvent|DvtKeyboardEvent|DvtComponentTouchEvent} event  Mouse, keyboard or touch event
 * @param {number} relPosX  x position relative to the page
 * @param {number} relPosY  y position relative to the page
 * @param {object} obj  logical object
 * @param {object} targetObj  Target object
 * @protected
 */
DvtEventManager.prototype.ProcessObjectTooltip = function(event, relPosX, relPosY, obj, targetObj) {
  if (!this.GetEventInfo(event, DvtEventManager._EVENT_INFO_TOOLTIP_DISPLAYED_KEY)) {
    if (this._processShowTooltip(targetObj, obj, relPosX, relPosY))
      this.SetEventInfo(event, DvtEventManager._EVENT_INFO_TOOLTIP_DISPLAYED_KEY, true);
  }
};


/**
 * Resets the flag for external focus event. The flag is could be set when component gain the focus by mouse click or keyboard tabbing.
 * The flag is used by key up event and it is reset on timer to ensure that Eevnt manager does not keep stale flag.
 * @private
 */
DvtEventManager.prototype._resetExternalKeyboardFocus = function() {
  this._handleExternalKeyboardFocus = false;
};

/**
 * Focus event handler.
 * @param {DvtFocusEvent} event focus event
 * @protected
 */
DvtEventManager.prototype.OnFocus = function(event) {
  // - when user tabs into a component, the component does not get "keydown" event, since the keydown happened outside of the component.
  //Then the focus is transfered to the component and the component gets the "focus" and the "keyup" events.
  //As the result of the skipped "keydown" event, the first focus is set on the outer div, but the keyboard focus is not set/shown on the navigable object.
  //As a fix for this bug the _handleExternalKeyboardFocus flag is going to be used. When we detect that "keydown" is skipped, the flag is set to true.
  //Then if the focus was set by keyboard tabbing, the flag will be checked by the KeyUp event - the fake "keydown" is going to be generated in order to set the keyboard focus.
  //Otherwise the flag will be reset by the timer.
  this._handleExternalKeyboardFocus = false;

  if (!this._bKeyDown && !event.isPropagationStopped()) {
    this._handleExternalKeyboardFocus = true;
    if (!this._keyboardFocusTimer) {
      this._keyboardFocusTimer = new DvtTimer(this._context, 200, this._resetExternalKeyboardFocus, this, 1);
    }
    this._keyboardFocusTimer.reset();
    this._keyboardFocusTimer.start();
    event.stopPropagation();
  }
};


/**
 * Blur event handler.
 * @param {DvtFocusEvent} event focus event
 * @protected
 */
DvtEventManager.prototype.OnBlur = function(event) {
  //clean up the keyboard focus
  this._bKeyDown = false;
  var currentNavigable = this.getFocus();
  if (currentNavigable && currentNavigable.isShowingKeyboardFocusEffect()) {
    currentNavigable.hideKeyboardFocusEffect();
  }
};

/**
 * Processes a rollover action on the specified logical object.
 * @param {DvtBaseEvent} event The event that caused the rollover.
 * @param {DvtLogicalObject} obj The logical object that was the target of the event.
 * @param {boolean} bOver True if this is a rollover, false if this is a rollout.
 */
DvtEventManager.prototype.ProcessRolloverEvent = function(event, obj, bOver) {
  // subclasses must override if hoverBehavior is supported
};

/**
 * Creates category rollover handler
 * @param {function} callback A function that responds to component events.
 * @param {object} callbackObj The optional object instance that the callback function is defined on.
 * @return {DvtCategoryRolloverHandler} category rollover handler
 */
DvtEventManager.prototype.CreateCategoryRolloverHandler = function(callback, callbackObj) {
  return new DvtCategoryRolloverHandler(callback, callbackObj);
};

/**
 * Returns the touch response for the component
 * @return {string}
 * @protected
 */
DvtEventManager.prototype.GetTouchResponse = function() {
  return DvtEventManager.TOUCH_RESPONSE_TOUCH_START;
};

/**
 * Returns true if touch response should be on touchStart event
 * @return {boolean}
 * @private
 */
DvtEventManager.prototype._isTouchResponseTouchStart = function() {
  var touchResponse = this.GetTouchResponse();
  if (touchResponse === DvtEventManager.TOUCH_RESPONSE_TOUCH_START)
    return true;
  else if (touchResponse === DvtEventManager.TOUCH_RESPONSE_TOUCH_HOLD)
    return false;
  else {
    // start with the parent of the container div
    var root = this.getCtx().getSvgDocument().parentElement.parentElement;
    while (root && root.nodeName !== 'HTML') {
      var style = window.getComputedStyle(root);
      if (style.overflow !== 'hidden' &&
          ((root.scrollWidth > root.clientWidth + DvtEventManager._TOUCH_RESPONSE_PADDING_CHECK && style['overflow-x'] !== 'hidden') ||
          (root.scrollHeight > root.clientHeight + DvtEventManager._TOUCH_RESPONSE_PADDING_CHECK && style['overflow-y'] !== 'hidden'))) {
        return false;
      }
      root = root.parentElement;
    }
    return true;
  }
};

/**
 * Handles touch start actions like marquee select, tooltips, and category rollover.
 * @param {DvtTouchEvent} event Touch event to handle
 * @param {DvtTouch} touch Touch object for the event
 * @private
 */
DvtEventManager.prototype._saveTouchStart = function(event, touch) {
  var touchIds = this.TouchManager.getTouchIdsForObj(DvtEventManager.TOUCH_RESPONSE_TOUCH_START);
  if (touchIds.length <= 1) {
    // Use HOVER_TOUCH_KEY so that tooltips aren't canceled when touch hold is triggered in DvtTouchManager
    this.TouchManager.saveProcessedTouch(touch.identifier, DvtTouchManager.HOVER_TOUCH_KEY, null, DvtTouchManager.HOVER_TOUCH_KEY, DvtTouchManager.HOVER_TOUCH_KEY, this.HandleTouchActionsMove, this.HandleTouchActionsEnd, this);
    this.HandleTouchActionsStart(event);
  }
};

/**
 * Handles touch start and touch hold actions like marquee select, tooltips, and category rollover.
 * @param {DvtTouchEvent|DvtComponentTouchEvent} event
 * @protected
 */
DvtEventManager.prototype.HandleTouchActionsStart = function(event) {
  var targetObj = this.GetCurrentTargetForEvent(event);
  var obj = this.GetLogicalObject(targetObj);
  var touch = event instanceof DvtComponentTouchEvent ? event.touch : event.touches[0];
  var touchX = touch.pageX;
  var touchY = touch.pageY;

  // Logic copied from DvtTouchManager._onTouchHoldHover
  if (!(event instanceof DvtComponentTouchEvent)) {
    if (!this._touchMap[touch.identifier])
      this._touchMap[touch.identifier] = {};

    this._touchMap[touch.identifier][DvtTouchManager.PREV_HOVER_OBJ] = null;
    if (obj)
      this.HandleTouchActionsOver(event);
    this._touchMap[touch.identifier][DvtTouchManager.PREV_HOVER_OBJ] = obj;
  }

  // Chart marquee selection
  if (this._marqueeHandler) {
    var relPos = this._context.pageToStageCoords(touchX, touchY);
    var marqueeEvent = this._marqueeHandler.processDragStart(relPos);
    if (marqueeEvent) {
      event.preventDefault();
      this._callback.call(this._callbackObj, marqueeEvent);
    }
  }

  // Category rollover support
  if (obj)
    this.ProcessRolloverEvent(event, obj, true);

  // Tooltips
  this._processTouchTooltip(event);

  this._prevActionClear = false;

  // Popups
  if (!this.GetEventInfo(event, DvtEventManager._EVENT_INFO_POPUP_DISPLAYED_KEY)) {
    var position = new DvtPoint(touchX, touchY);
    var targetObj = this.GetCurrentTargetForEvent(event);
    var logObjAndDisp = this.GetLogicalObjectAndDisplayable(targetObj);
    if (logObjAndDisp) {
      if (this.PopupHandler.processMousePopup(obj, this._getShowPopupBehaviors(obj), position, logObjAndDisp.displayable, event, DvtShowPopupBehavior.TRIGGER_TYPE_MOUSE_DOWN)) {
        this.SetEventInfo(event, DvtEventManager._EVENT_INFO_POPUP_DISPLAYED_KEY, true);
      }
    }
  }
};

/**
 * Handles touch move actions.
 * @param {DvtTouchEvent|DvtComponentTouchEvent} event Touch event to handle
 * @protected
*/
DvtEventManager.prototype.HandleTouchActionsMove = function(event) {
  var touch = event instanceof DvtComponentTouchEvent ? event.touch : event.touches[0];

  var targetObj;
  var obj;
  if (!(event instanceof DvtComponentTouchEvent)) {
    // Cancel the browser default behavior to pan.
    event.preventDefault();

    // The target for a touch event is always the touchstart target. DvtTouchManager already handles updating the
    // target based on the current x/y coordinates, but we need to handle it as well if we are dealing with the browser
    // touch events.
    targetObj = DvtSvgDocumentUtils.elementFromTouch(touch);
    obj = this.GetLogicalObject(targetObj);
    var prevObj = this._touchMap[touch.identifier][DvtTouchManager.PREV_HOVER_OBJ];
    if (prevObj != obj) {
      // Handle hover out/over events. Logic copied from DvtTouchManager._onTouchHoldHover
      if (prevObj) {
        var target;
        if (prevObj.getDisplayable)
          target = prevObj.getDisplayable();
        else if (prevObj.getDisplayables)
          target = prevObj.getDisplayables()[0];

        if (target) {
          event.target = target;
          this.HandleTouchActionsOut(event, touch);
        }
      }

      event.target = targetObj;
      if (obj)
        this.HandleTouchActionsOver(event);
    }

    this._touchMap[touch.identifier][DvtTouchManager.PREV_HOVER_OBJ] = obj;
  } else {
    targetObj = this.GetCurrentTargetForEvent(event);
    obj = this.GetLogicalObject(targetObj);
  }

  var touchX = touch.pageX;
  var touchY = touch.pageY;
  var relPos = this._context.pageToStageCoords(touchX, touchY);

  if (this._marqueeHandler) {
    var marqueeEvent = this._marqueeHandler.processDragMove(relPos, event.ctrlKey);
    if (marqueeEvent) {
      event.preventDefault();
      this._callback.call(this._callbackObj, marqueeEvent);
    }
  }

  // Category rollover support
  if (obj)
    this.ProcessRolloverEvent(event, obj, true);

  var position = new DvtPoint(touch.pageX, touch.pageY);
  // Notify the popup handler of the mouse move
  this.PopupHandler.processMouseMove(position);

  if (!this.GetEventInfo(event, DvtEventManager._EVENT_INFO_POPUP_DISPLAYED_KEY)) {
    var logObjAndDisp = this.GetLogicalObjectAndDisplayable(targetObj);
    if (logObjAndDisp) {
      if (this.PopupHandler.processMousePopup(obj, this._getShowPopupBehaviors(obj), position, logObjAndDisp.displayable, event, DvtShowPopupBehavior.TRIGGER_TYPE_MOUSE_MOVE)) {
        this.SetEventInfo(event, DvtEventManager._EVENT_INFO_POPUP_DISPLAYED_KEY, true);
      }
    }
  }
};


/**
 * Handles touch end actions.
 * @param {DvtTouchEvent|DvtComponentTouchEvent} event Touch event to handle
 * @param {DvtTouch=} touch Touch object for the event
 * @protected
 */
DvtEventManager.prototype.HandleTouchActionsEnd = function(event, touch) {
  var targetObj;
  var obj;

  // Logic copied from DvtTouchManager._onTouchHoldHover
  if (!(event instanceof DvtComponentTouchEvent)) {
    // Cancel the browser default behavior to pan.
    event.preventDefault();

    // The target for a touch event is always the touchstart target. DvtTouchManager already handles updating the
    // target based on the current x/y coordinates, but we need to handle it as well if we are dealing with the browser
    // touch events.
    targetObj = DvtSvgDocumentUtils.elementFromTouch(touch);
    obj = this.GetLogicalObject(targetObj);

    var target;
    if (obj) {
      if (obj.getDisplayable)
        target = obj.getDisplayable();
      else if (obj.getDisplayables)
        target = obj.getDisplayables()[0];
    }

    if (target) {
      event.target = target;
      this.HandleTouchActionsOut(event, touch);
    }

    this._touchMap[touch.identifier][DvtTouchManager.PREV_HOVER_OBJ] = null;
  } else {
    // DvtComponentTouchEvent should use its stored touch, else at this point touch event has been passed in and removed from event
    targetObj = this.GetCurrentTargetForEvent(event);
    obj = this.GetLogicalObject(targetObj);
    touch = event.touch;
  }

  var touchX = touch.pageX;
  var touchY = touch.pageY;
  var relPos = this._context.pageToStageCoords(touchX, touchY);

  if (this._marqueeHandler) {
    var marqueeEvent = this._marqueeHandler.processDragEnd(relPos, event.ctrlKey);
    if (marqueeEvent) {
      event.preventDefault();
      this._callback.call(this._callbackObj, marqueeEvent);
    }
  }

  this._processTouchSelection(obj);

  this._processActionPopup(targetObj, new DvtPoint(touchX, touchY));

  if (!this.GetEventInfo(event, DvtEventManager._EVENT_INFO_POPUP_DISPLAYED_KEY)) {
    var position = new DvtPoint(touchX, touchY);
    var logObjAndDisp = this.GetLogicalObjectAndDisplayable(targetObj);
    if (logObjAndDisp) {
      if (this.PopupHandler.processMousePopup(obj, this._getShowPopupBehaviors(obj), position, logObjAndDisp.displayable, event, DvtShowPopupBehavior.TRIGGER_TYPE_MOUSE_UP)) {
        this.SetEventInfo(event, DvtEventManager._EVENT_INFO_POPUP_DISPLAYED_KEY, true);
      }
    }
  }
};

/**
 * Handles touch over actions.
 * @param {DvtTouchEvent|DvtComponentTouchEvent} event Touch event to handle
 * @protected
*/
DvtEventManager.prototype.HandleTouchActionsOver = function(event) {
  var targetObj = this.GetCurrentTargetForEvent(event);
  var obj = this.GetLogicalObject(targetObj);

  var touch = event instanceof DvtComponentTouchEvent ? event.touch : event.touches[0];
  var position = new DvtPoint(touch.pageX, touch.pageY);

  // Category Rollover Support
  if (obj)
    this.ProcessRolloverEvent(event, obj, true);

  var selectionHandler = this.getSelectionHandler(obj);
  if (selectionHandler)
    selectionHandler.processMouseOver(obj);

  // Popup Support for triggerType="hover"
  var logObjAndDisp = this.GetLogicalObjectAndDisplayable(targetObj);
  if (logObjAndDisp) {
    if (this.PopupHandler.processMousePopup(obj, this._getShowPopupBehaviors(obj), position, logObjAndDisp.displayable, event, DvtShowPopupBehavior.TRIGGER_TYPE_MOUSE_OVER)) {
      this.SetEventInfo(event, DvtEventManager._EVENT_INFO_POPUP_DISPLAYED_KEY, true);
    }
  }
};

/**
 * Handles touch move actions.
 * @param {DvtTouchEvent|DvtComponentTouchEvent} event Touch event to handle
 * @param {DvtTouch=} touch Touch object for the event
 * @protected
*/
DvtEventManager.prototype.HandleTouchActionsOut = function(event, touch) {
  var targetObj = this.GetCurrentTargetForEvent(event);
  var obj = this.GetLogicalObject(targetObj);

  // DvtComponentTouchEvent should use its stored touch, else at this point touch event has been passed in and removed from event
  if (event instanceof DvtComponentTouchEvent)
    touch = event.touch;

  // Category Rollover Support
  if (obj)
    this.ProcessRolloverEvent(event, obj, false);

  var selectionHandler = this.getSelectionHandler(obj);
  if (selectionHandler)
    selectionHandler.processMouseOut(obj);

  if (!this.GetEventInfo(event, DvtEventManager._EVENT_INFO_POPUP_DISPLAYED_KEY)) {
    var position = new DvtPoint(touch.pageX, touch.pageY);
    var logObjAndDisp = this.GetLogicalObjectAndDisplayable(targetObj);
    if (logObjAndDisp) {
      if (this.PopupHandler.processMousePopup(obj, this._getShowPopupBehaviors(obj), position, logObjAndDisp.displayable, event, DvtShowPopupBehavior.TRIGGER_TYPE_MOUSE_OUT)) {
        this.SetEventInfo(event, DvtEventManager._EVENT_INFO_POPUP_DISPLAYED_KEY, true);
      }
    }
  }
};
/**
 * Interactivity manager for custom tooltips and menus.  The two can be visually combined.
 * @class DvtCustomTooltipManager
 * @constructor
 */
var DvtCustomTooltipManager = function(context, id) {
  this.Init(context, id);
};

DvtObj.createSubclass(DvtCustomTooltipManager, DvtObj, 'DvtCustomTooltipManager');

DvtCustomTooltipManager.prototype.Init = function(context, id) {
  this._context = context;
  this._id = id;
  this._actionTooltip = new DvtCustomTooltip(this._context, this._id + 'ActionPopup');
};

/*
 * For rendering a rich tooltip
 */
DvtCustomTooltipManager.prototype.GetRichTooltipManager = function() {
  if (!this._RichTooltipManager) {
    var tooltipId = this._id + 'Tooltip';
    // TODO: may want to change tooltip managers to have their own impl
    this._RichTooltipManager = this._context.getImplFactory().newRichTooltipManager(tooltipId);
    this._RichTooltipManager.InitializeTooltipElem();

    // Attach listeners to action tooltip displayable
    var tooltipContext = this._RichTooltipManager.GetStoredContext();
    if (tooltipContext) {
      var eh = new DvtCustomTooltipEventHandler(tooltipContext, this, null, null);
      eh.addListeners(this._actionTooltip);
    }
  }
  return this._RichTooltipManager;
};

// Clear settings on old action tooltip
DvtCustomTooltipManager.prototype.clearActionTooltip = function() {
  if (this._actionTooltip)
    this._actionTooltip.clearContent();
};

// Retrieve current action tooltip
DvtCustomTooltipManager.prototype.getActionTooltip = function() {
  return this._actionTooltip;
};

// Hide a tooltip that is currently showing
DvtCustomTooltipManager.prototype.hideTooltip = function() {
  this.clearActionTooltip();
  if (this._RichTooltipManager)
    this._RichTooltipManager.hideTooltip();
};

// Closes an action tooltip that was left on screen
DvtCustomTooltipManager.prototype.closeActionTooltip = function() {
  var closedEvent = new DvtActionTooltipEvent(DvtActionTooltipEvent.TOOLTIP_CLOSED_TYPE, this._actionPopupObj);
  this.FireListener(closedEvent);
  this._actionPopupObj = null;
  this.hideTooltip();
};

DvtCustomTooltipManager.prototype.showDatatip = function(x, y, text, borderColor) {
  var actionTooltip = this.getActionTooltip();
  text = DvtCustomTooltipManager._formatTextString(text);
  actionTooltip.setTooltipText(text);
  if (borderColor != null)
    actionTooltip.setTooltipBorderColor(borderColor);
  this.GetRichTooltipManager().showRichElement(x, y, actionTooltip, true);
};

DvtCustomTooltipManager.prototype.showTextAtPosition = function(x, y, text, borderColor, useOffset, popupClass) {
  var actionTooltip = this.getActionTooltip();
  text = DvtCustomTooltipManager._formatTextString(text);
  actionTooltip.setTooltipText(text);
  if (borderColor != null)
    actionTooltip.setTooltipBorderColor(borderColor);
  this.GetRichTooltipManager().showRichElement(x, y, actionTooltip, useOffset);
};

DvtCustomTooltipManager.prototype.displayActionPopup = function() {
  var actionTooltip = this.getActionTooltip();
  // If no action tooltip initialized with actions (not just tooltips), don't show one
  if (!actionTooltip || !actionTooltip.hasMenuItems())
    return false;
  return true;
};

DvtCustomTooltipManager.prototype.startActionPopupAtPosition = function(pageX, pageY, targetObj, alignment) {
  var actionTooltip = this.getActionTooltip();
  if (!actionTooltip)
    return;

  this.GetRichTooltipManager().showRichElementAtPosition(pageX, pageY, actionTooltip, true, false);

  // Clear the text
  var startEvent = new DvtActionTooltipEvent(DvtActionTooltipEvent.TOOLTIP_STARTED_TYPE, targetObj);
  this.FireListener(startEvent);

  this._actionPopupObj = targetObj;

};


/**
 * Adds an event listener.
 **/
DvtCustomTooltipManager.prototype.addTooltipEventListener = function(type, listener, obj) {
  // Store a reference to the listener
  var listenersArray = this._getListeners(type, true);
  listenersArray.push(listener);
  listenersArray.push(obj);
};


/**
 * Removes an event listener.
 **/
DvtCustomTooltipManager.prototype.removeTooltipEventListener = function(type, listener, obj) {
  // Remove the listener
  var listenersArray = this._getListeners(type, false);
  if (listenersArray !== null) {
    for (var i = 0; i < listenersArray.length; i += 2) {
      if (listenersArray[i] === listener &&
          listenersArray[i + 1] === obj) {
        listenersArray.splice(i, 2);
        break;
      }
    }
  }
};


/**
 * Returns the listeners of the given event type
 **/
DvtCustomTooltipManager.prototype._getListeners = function(type, createNew) {
  // First find the object where the listener arrays are stored
  if (!this._listenerObj) {
    if (createNew) {
      this._listenerObj = {
      };
    }
    else {
      return null;
    }
  }

  // Then find the array for this event type, creating if necessary
  var eventKey = type;
  var listenersArray = this._listenerObj[eventKey];
  if (!listenersArray && createNew) {
    listenersArray = [];
    this._listenerObj[eventKey] = listenersArray;
  }

  return listenersArray;
};


/**
 * Notifies all applicable event listeners of the given event.
 **/
DvtCustomTooltipManager.prototype.FireListener = function(event) {
  var listenersArray = this._getListeners(event.getType(), false);
  if (listenersArray) {
    for (var i = 0; i < listenersArray.length; i += 2) {
      var obj = listenersArray[i + 1];
      listenersArray[i].call(obj, event);
    }
  }
};

/**
 * Returns a formatted version of the tooltip.
 * @param {string} tooltip
 * @return {string}
 * @private
 */
DvtCustomTooltipManager._formatTextString = function(tooltip)
{
  var fullText = '';
  if (!tooltip)
    return fullText;

  tooltip = tooltip.replace(/\n/g, '<br>'); // replace logical newlines sequences
  var tooltipTextArray = tooltip.split('<br>');
  if (tooltipTextArray) {
    var shortArray = new Array();
    for (var i = 0; i < tooltipTextArray.length; i++) {
      var txt = tooltipTextArray[i];
      if (txt != null && txt != '') {
        shortArray.push(txt);
      }
    }
    for (var i = 0; i < shortArray.length; i++) {
      fullText += shortArray[i];
      if (i < shortArray.length - 1) {
        fullText += '\n';
      }
    }
  }
  return fullText;
};
// Custom tooltip event handler
/**
 * @constructor
 */
var DvtCustomTooltipEventHandler = function(context, customTooltipManager, callback, callbackObj)
{
  this._customTooltipManager = customTooltipManager;
  this.Init(context, callback, callbackObj);

};

DvtObj.createSubclass(DvtCustomTooltipEventHandler, DvtEventManager, 'DvtCustomTooltipEventHandler');

DvtCustomTooltipEventHandler.prototype.OnClickInternal = function(event) {
  var target = event.target;
  this._handleMenuClick(target);
};

DvtCustomTooltipEventHandler.prototype.HandleImmediateTouchStartInternal = function(event, touch) {
  event.blockTouchHold();
  this._handleMenuClick(event.target);
};

DvtCustomTooltipEventHandler.prototype.HandleTouchClickInternal = function(evt) {
  var target = evt.target;
  this._handleMenuClick(target);
};

DvtCustomTooltipEventHandler.prototype._handleMenuClick = function(targetObj) {
  var actionObj = this._customTooltipManager._actionPopupObj;
  var menuItem = targetObj._menu;
  if (menuItem) {
    var fireAction = true;
    if (menuItem instanceof DvtContextMenuTooltipItem && menuItem._menuItem.isDisabled()) {
      fireAction = false;
    }
    if (fireAction) {
      // Close before menu item event fired since listener may need restored component visual state
      this._customTooltipManager.closeActionTooltip();
      menuItem.FireActionTooltipItem(actionObj);
    }
  }
};
/*--------------------------------------------------------------------*/
/*   DvtCustomTooltip              Action tooltip Component           */
/*--------------------------------------------------------------------*/
/**
  * @constructor
  *  Action tooltip component.
  *  @extends {DvtObj}
  *  @class DvtCustomTooltip  Creates an action tooltip component.
  */
var DvtCustomTooltip = function(context, id)
{
  this._Init(context, id);
};

DvtObj.createSubclass(DvtCustomTooltip, DvtContainer, 'DvtCustomTooltip');

DvtCustomTooltip.DEFAULT_BORDER_COLOR = 'gray';
DvtCustomTooltip.DEFAULT_BACKGROUND_COLOR = '#ffffff';

DvtCustomTooltip.TOOLTIP_ONLY = 'tooltipOnly';
DvtCustomTooltip.MENU_ONLY = 'menuOnly';
DvtCustomTooltip.MENU_AND_TOOLTIP = 'menuAndTooltip';
DvtCustomTooltip.EMPTY = 'empty';

DvtCustomTooltip.MENU_PADDING_LEFT = 21;
DvtCustomTooltip.MENU_PADDING_RIGHT = 10;

DvtCustomTooltip.prototype._Init = function(context, id)
{

  this._context = context;
  if (! this.getImpl()) {
    this.setImpl(context.getImplFactory().newContainer('customTT'));
  }
  DvtCustomTooltip.superclass.Init.call(this, context);

  this._tooltipText = null;
  this._tooltipBorderColor = null;
  this._menuFontSize = 11;
  this._tooltipFill = new DvtSolidFill(DvtCustomTooltip.DEFAULT_BACKGROUND_COLOR);
  this._fontSize = 11; // TODO: This shouldn't be hard coded, but this maintains the existing behavior
  this._includePointer = false;//true;
  this._pointerLocation = new DvtPoint(0, 0);
};

DvtCustomTooltip.prototype.setIncludePointer = function(includePointer)
{
  this._includePointer = includePointer;
};

DvtCustomTooltip.prototype.getRootDisplayable = function()
{
  return this;
};

DvtCustomTooltip.prototype.UpdateTooltipSize = function(width, height)
{
  this._displayWidth = width;
  this._displayHeight = height;
};

DvtCustomTooltip.prototype.getDisplayWidth = function() {
  return this._displayWidth;
};

DvtCustomTooltip.prototype.getDisplayHeight = function() {
  return this._displayHeight;
};

DvtCustomTooltip.prototype.clearContent = function() {
  this.clearMenuItems();
  this.setTooltipBorderColor(null);
  this.setTooltipText(null);
};

DvtCustomTooltip.prototype.setMenuFontSize = function(font) {
  this._menuFontSize = font;
};

DvtCustomTooltip.prototype.setTooltipBorderColor = function(color) {
  this._tooltipBorderColor = color;
};

DvtCustomTooltip.prototype.getTooltipBorderColor = function() {
  return this._tooltipBorderColor;
};

DvtCustomTooltip.prototype.setTooltipFill = function(tooltipFill) {
  this._tooltipFill = tooltipFill;
};

DvtCustomTooltip.prototype.setTooltipText = function(text) {
  this._tooltipText = text;
};

DvtCustomTooltip.prototype.getTooltipText = function() {
  return this._tooltipText;
};

DvtCustomTooltip.prototype.addMenuItem = function(menuItem) {
  this.getMenuItems().push(menuItem);
};

DvtCustomTooltip.prototype.hasMenuItems = function() {
  var menuItems = this.getMenuItems();
  return menuItems && menuItems.length > 0;
};

DvtCustomTooltip.prototype.clearMenuItems = function() {
  if (this._menuItems) {
    this._menuItems = [];
  }
};

DvtCustomTooltip.prototype.getMenuItems = function() {
  if (!this._menuItems)
    this._menuItems = new Array();
  return this._menuItems;
};

DvtCustomTooltip.prototype.containsMenuId = function(id) {
  var menuItems = this.getMenuItems();
  for (var i = 0; i < menuItems.length; i++) {
    var menuItem = menuItems[i];
    if (menuItem.getId() == id) {
      return true;
    }
  }
  return false;
};

DvtCustomTooltip.prototype.getTooltipType = function() {
  var hasMenuItems = this.hasMenuItems();
  if (hasMenuItems) {
    return DvtCustomTooltip.MENU_ONLY;
  }
  return DvtCustomTooltip.EMPTY;
};


/**
 * Renders this action tooltip.
 */
DvtCustomTooltip.prototype.Render = function() {

  var parent = this.getRootDisplayable();
  //parent.setPixelHinting(true);
  // First clear old drawables
  parent.removeChildren();

  var type = this.getTooltipType();
  if (type == DvtCustomTooltip.EMPTY) {
    return;
  }

  // Constants
  var padding = 4;
  var menuItemPadding = 5;
  var tooltipBorderWidth = 2;

  if (this._includePointer) {
    tooltipBorderWidth = 3;
    padding = 10;
  }

  // Temp variables
  var hasMenuItems = this.hasMenuItems();
  var topTextY = padding + tooltipBorderWidth / 2;
  var runningHeight = 0;
  var maxWidth = 0;

  if (type == DvtCustomTooltip.TOOLTIP_ONLY) {
    parent.setAlpha(0.9);
  } else {
    parent.setAlpha(1);
  }

  var textItems = new Array();
  var textWidths = new Array();

  if (type == DvtCustomTooltip.MENU_AND_TOOLTIP) {
    runningHeight += menuItemPadding;
  } else if (type == DvtCustomTooltip.MENU_ONLY) {
    runningHeight += menuItemPadding / 2;
  }

  if (hasMenuItems) {


    var menuItems = this.getMenuItems();
    for (var i = 0; i < menuItems.length; i++) {
      var menuItem = menuItems[i];

      var text = new DvtOutputText(this._context, menuItem.getText(), 0, 0, null);
      text.alignBottom();
      text.setFontSize(this._menuFontSize);

      if (menuItem instanceof DvtContextMenuTooltipItem) {
        if (menuItem._menuItem.isDisabled()) {
          text.setAlpha(0.5);
        }
      }

      text._menu = menuItem;

      var dimensions = text.measureDimensions();
      dimensions.y = topTextY + runningHeight;
      var textWidth = dimensions.w;
      textWidths.push(dimensions);
      maxWidth = Math.max(textWidth + DvtCustomTooltip.MENU_PADDING_LEFT + DvtCustomTooltip.MENU_PADDING_RIGHT, maxWidth);
      text.setY(dimensions.y);
      runningHeight += dimensions.h;

      if (i < menuItems.length - 1) {
        runningHeight += menuItemPadding;
      }

      textItems.push(text);
      text.alignLeft();
      text.alignTop();
    }

  }
  if (type == DvtCustomTooltip.MENU_ONLY || type == DvtCustomTooltip.MENU_AND_TOOLTIP) {
    runningHeight += menuItemPadding / 2;
  }

  var contentWidth = maxWidth + 2 * padding;
  var tooltipWidth = contentWidth + tooltipBorderWidth;
  var tooltipHeight = topTextY + runningHeight + padding + tooltipBorderWidth / 2;

  if (this._cursorText)
    this._cursorText.setTranslateX(padding + tooltipBorderWidth / 2);

  var pointerWidth = 12;
  var isRightPointer = (this._pointerLocation.x > tooltipWidth);
  var pointerOffsetX = -this._pointerLocation.x;
  var pointerOffsetY = this._pointerLocation.y;

  if (this._includePointer) {

    if (tooltipHeight / 2 < pointerWidth)
      pointerWidth = tooltipHeight / 3;

    var newTooltipHeight = tooltipHeight + tooltipBorderWidth;
    newTooltipHeight = Math.max(pointerOffsetY + tooltipBorderWidth, newTooltipHeight);
    var transX;
    if (isRightPointer) {
      this.UpdateTooltipSize(this._pointerLocation.x, newTooltipHeight);
      transX = tooltipBorderWidth / 2;
    } else {
      this.UpdateTooltipSize(tooltipWidth + pointerOffsetX + tooltipBorderWidth, newTooltipHeight);
      transX = tooltipBorderWidth / 2 + pointerOffsetX;
    }
    parent.setTranslate(transX, tooltipBorderWidth / 2);
  } else {
    this.UpdateTooltipSize(tooltipWidth + tooltipBorderWidth, tooltipHeight + tooltipBorderWidth);
    parent.setTranslate(tooltipBorderWidth / 2, tooltipBorderWidth / 2);
  }


  // Add background panels
  var backgroundPanel = new DvtRect(this._context, 0, 0, tooltipWidth, tooltipHeight);
  if (this._includePointer) {

    var radius = 5;
    var beginArrowY = tooltipHeight / 2;

    if (isRightPointer) {
      //this._pointerStartOffset;
      var p1 = new DvtPoint(0, 0);
      var p2 = new DvtPoint(tooltipWidth, 0);
      var p3 = new DvtPoint(tooltipWidth, beginArrowY);
      var p4 = new DvtPoint(this._pointerLocation.x, pointerOffsetY);
      var p5 = new DvtPoint(tooltipWidth, beginArrowY + pointerWidth);
      var p6 = new DvtPoint(tooltipWidth, tooltipHeight);
      var p7 = new DvtPoint(0, tooltipHeight);

      var cmd = DvtPathUtils.moveTo(p1.x + radius, p1.y) +
                DvtPathUtils.lineTo(p2.x - radius, p2.y) +
                DvtPathUtils.arcTo(radius, radius, Math.PI / 2, 1, p2.x, p2.y + radius) +
                DvtPathUtils.lineTo(p3.x, p3.y) +
                DvtPathUtils.lineTo(p4.x, p4.y) +
                DvtPathUtils.lineTo(p5.x, p5.y) +
                DvtPathUtils.lineTo(p6.x, p6.y - radius) +
                DvtPathUtils.arcTo(radius, radius, Math.PI / 2, 1, p6.x - radius, p6.y) +
                DvtPathUtils.lineTo(p7.x + radius, p7.y) +
                DvtPathUtils.arcTo(radius, radius, Math.PI / 2, 1, p7.x, p7.y - radius) +
                DvtPathUtils.lineTo(0, radius) +
                DvtPathUtils.arcTo(radius, radius, Math.PI / 2, 1, radius, 0) +
                DvtPathUtils.closePath();
      backgroundPanel = new DvtPath(this._context, cmd, null);
    } else {
      //this._pointerStartOffset;
      var p1 = new DvtPoint(0, 0);
      var p2 = new DvtPoint(tooltipWidth, 0);
      var p3 = new DvtPoint(tooltipWidth, tooltipHeight);
      var p4 = new DvtPoint(0, tooltipHeight);
      var p5 = new DvtPoint(0, beginArrowY + pointerWidth);
      var p6 = new DvtPoint(-pointerOffsetX, pointerOffsetY);
      var p7 = new DvtPoint(0, beginArrowY);

      var cmd = DvtPathUtils.moveTo(p1.x + radius, p1.y) +
                DvtPathUtils.lineTo(p2.x - radius, p2.y) +
                DvtPathUtils.arcTo(radius, radius, Math.PI / 2, 1, p2.x, p2.y + radius) +
                DvtPathUtils.lineTo(p3.x, p3.y - radius) +
                DvtPathUtils.arcTo(radius, radius, Math.PI / 2, 1, p3.x - radius, p3.y) +
                DvtPathUtils.lineTo(p4.x + radius, p4.y) +
                DvtPathUtils.arcTo(radius, radius, Math.PI / 2, 1, p4.x, p4.y - radius) +
                DvtPathUtils.lineTo(p5.x, p5.y) +
                DvtPathUtils.lineTo(p6.x, p6.y) +
                DvtPathUtils.lineTo(p7.x, p7.y) +
                DvtPathUtils.lineTo(0, radius) +
                DvtPathUtils.arcTo(radius, radius, Math.PI / 2, 1, radius, 0) +
                DvtPathUtils.closePath();
      backgroundPanel = new DvtPath(this._context, cmd, null);
    }
  }

  backgroundPanel.setSolidStroke('rgb(229,232,238)');

  if (!this._tooltipFill)
    this._tooltipFill = new DvtSolidFill(DvtCustomTooltip.DEFAULT_BACKGROUND_COLOR);
  backgroundPanel.setFill(this._tooltipFill);
  parent.addChildAt(backgroundPanel, 0);

  var dividerWidth = contentWidth * 0.95;
  var dividerX = (tooltipWidth - dividerWidth) / 2;
  // Add text items
  for (var i = 0; i < textItems.length; i++) {
    var textItem = textItems[i];
    parent.addChild(textItem);
    var textWidth = textWidths[i].w;
    if (textItem._menu) {
      // Menus have target areas
      var hitAreaRect = new DvtRectangle(0, textWidths[i].y - menuItemPadding / 2, tooltipWidth, textWidths[i].h + menuItemPadding);
      //hitAreaRect = DvtGeomUtils.getSpecificPaddedRectangle(hitAreaRect, 4, 4, 10, 10);
      var hitTarget = new DvtRect(this._context, hitAreaRect.x, hitAreaRect.y, hitAreaRect.w, hitAreaRect.h);
      hitTarget.setInvisibleFill();

      hitTarget._menu = textItem._menu;
      parent.addChild(hitTarget);

      if (i > 0) {
        var menuItemObj = textItem._menu._menuItem;

        var prevItem = textItems[i - 1];

        if (prevItem._menu instanceof DvtContextMenuTooltipItem) {
          //Separators between context menu items
          if (menuItemObj.hasSeparatorBefore()) {
            var fill = new DvtSolidFill('gray', 0.5);
            this.renderDivider(parent, dividerX, textWidths[i].y - menuItemPadding / 2, dividerWidth, fill);
          }
        } else {
          // First context menu item, show a division between this and built in actions
          //var fill = new DvtSolidFill("gray", 1);
          //this.renderDivider(parent, dividerX, textWidths[i].y - menuItemPadding/2, dividerWidth, fill);
        }
      }
    }
    textItem.setTranslateX(DvtCustomTooltip.MENU_PADDING_LEFT);
  }
};

DvtCustomTooltip.prototype.renderDivider = function(parent, x, y, width, fill) {
  var divider = new DvtRect(this._context, x, y, width, 1);
  divider.setFill(fill);
  parent.addChild(divider);
};



/*--------------------------------------------------------------------*/
/*   DvtCustomTooltipItem              Action tooltip item            */
/*--------------------------------------------------------------------*/
/**
  *  Logical action tooltip item.  No dependency on drawables
  *  @extends {DvtObj}
  *  @class DvtCustomTooltipItem  Creates an action tooltip item.
  *  @constructor
  */
var DvtCustomTooltipItem = function(context, id, text, listener, listenerObj)
{
  this.Init(context, id, text, listener, listenerObj);
};

DvtObj.createSubclass(DvtCustomTooltipItem, DvtObj, 'DvtCustomTooltipItem');

DvtCustomTooltipItem.prototype.Init = function(context, id, text, listener, listenerObj) {
  this._context = context;
  this._id = id;
  this._text = text;
  this._listener = listener;
  this._listenerObj = listenerObj;
};

DvtCustomTooltipItem.prototype.getId = function() {
  return this._id;
};

DvtCustomTooltipItem.prototype.getText = function() {
  return this._text;
};

DvtCustomTooltipItem.prototype.FireActionTooltipItem = function(target) {
  if (this._listenerObj && this._listener) {
    var evt = new Object();
    evt.target = target;
    evt.menuItem = this._menuItem;
    this._menuItemTimer = new DvtTimer(this._context, 1, this._handleMenuTimer, this);
    // store event on timer temporarily
    this._menuItemTimer.evt = evt;
    this._menuItemTimer.start();
  }
};

// Timer handler for menu item listener
DvtCustomTooltipItem.prototype._handleMenuTimer = function() {
  if (this._menuItemTimer) {
    this._menuItemTimer.stop();
  }
  this._listener.call(this._listenerObj, this._menuItemTimer.evt);
};



/**
 * @constructor
 */
var DvtContextMenuTooltipItem = function(context, id, listener, listenerObj, menuItem)
{
  this.Init(context, id, listener, listenerObj, menuItem);
};

DvtObj.createSubclass(DvtContextMenuTooltipItem, DvtCustomTooltipItem, 'DvtContextMenuTooltipItem');

DvtContextMenuTooltipItem.prototype.Init = function(context, id, listener, listenerObj, menuItem) {
  DvtContextMenuTooltipItem.superclass.Init.call(this, context, id, menuItem.getText(), listener, listenerObj);
  this._menuItem = menuItem;
};
/**
 *  A static class for DnD support.
 *  @class DvtDnDUtils
 */
var DvtDnDUtils = function() {
};

DvtObj.createSubclass(DvtDnDUtils, DvtObj, 'DvtDnDUtils');


/**
 * Returns a {DvtRectangle} representing the drag feedback bounds.
 * @param {object} displayables The DvtDisplayable or array of DvtDisplayables to display for drag feedback.
 * @param {DvtDisplayable} targetCoordinateSpace The displayable defining the coordinate space of the resulting bounds.  The
 *                                               parent coordinate space is used if none is provided.
 */
DvtDnDUtils.getDragFeedbackBounds = function(displayables, targetCoordinateSpace) {
  if (!displayables)
    return null;

  var bounds = null;
  if (!(displayables instanceof Array)) {
    // for simple objects, just return the object bounds
    // TODO: eventually should ensure that bounds are in container coordinates
    bounds = displayables.getDimensions(targetCoordinateSpace ? targetCoordinateSpace : displayables.getParent());
  }
  else if (displayables.length > 0) {
    // TODO: eventually should ensure that bounds are in container coordinates
    // for arrays, initialize bounds based on the first object
    bounds = displayables[0].getDimensions(targetCoordinateSpace ? targetCoordinateSpace : displayables[0].getParent());

    // ... and adjust it to acommodate other objects in the collection
    for (var i = 1; i < displayables.length; i++) {
      var obj = displayables[i];
      var objBounds = obj.getDimensions(targetCoordinateSpace ? targetCoordinateSpace : obj.getParent());

      if (objBounds.x < bounds.x) {
        bounds.w += (bounds.x - objBounds.x);
        bounds.x = objBounds.x;
      }
      if (objBounds.y < bounds.y) {
        bounds.h += (bounds.y - objBounds.y);
        bounds.y = objBounds.y;
      }
      if ((objBounds.x + objBounds.w) > (bounds.x + bounds.w)) {
        bounds.w = objBounds.x + objBounds.w - bounds.x;
      }
      if ((objBounds.y + objBounds.h) > (bounds.y + bounds.h)) {
        bounds.h = objBounds.y + objBounds.h - bounds.y;
      }
    }
  }
  return bounds;
};
/**
 * Abstract class for XML parser.
 * @extends {DvtObj}
 * @class DvtXmlParser
 * @constructor
 *
 * @param {DvtContext}  context  platform specific context object
 */
var DvtXmlParser = function(context) {
  if (!this._impl) {
    this._impl = context.getImplFactory().newParser();
  }
};

DvtObj.createSubclass(DvtXmlParser, DvtObj, 'DvtXmlParser');


/**
 * Parses the XML string and returns the root node.
 * @param {string} xmlString the XML string to parse
 * @return {DvtXmlNode} the root node of the XML document
 */
DvtXmlParser.prototype.parse = function(xmlString) {
  if (this._impl && this._impl.parse) {
    return this._impl.parse(xmlString);
  }

  return null;
};
/**
 * Abstract class for XML node.  Subclasses should override to provide support
 * for different platforms.
 * @extends {DvtObj}
 * @class DvtXmlNode
 * @constructor
 */
var DvtXmlNode = function() {};

DvtObj.createSubclass(DvtXmlNode, DvtObj, 'DvtXmlNode');


/**
 * Returns the value for the given attribute in this XML node.
 * @param {string} attr the attribute to look for
 * @return {string} the value of the attribute, if available
 */
DvtXmlNode.prototype.getAttr = function(attr) {
  return null; // subclasses should override
};


/**
 * Returns an Array containing the child elements of this node.  Only nodes that
 * are XML elements are returned.  Text nodes are ignored.
 * @return {array} an Array containing all child elements of this node.
 */
DvtXmlNode.prototype.getChildNodes = function() {
  return new Array(); // subclasses shoudl override
};


/**
 * Returns the child element of this node. Only nodes that
 * are XML elements are returned.  Text nodes are ignored.
 * @return {DvtXmlNode} the first child element
 */
DvtXmlNode.prototype.getChild = function(i) {
  var children = this.getChildNodes();
  if (children != null && children.length > i)
    return children[i];
  else
    return null;
};


/**
 * Returns the first child element of this node. Only nodes that
 * are XML elements are returned.  Text nodes are ignored.
 * @return {DvtXmlNode} the first child element
 */
DvtXmlNode.prototype.getFirstChild = function() {
  return this.getChild(0);
};


/**
 * Returns the name of this node.
 * @return {string} the name of the node
 */
DvtXmlNode.prototype.getName = function() {
  return null; //subclasses should override
};


/**
 * Returns the attributes of this node as an array of
 * {name:, value:} pairs.
 * @return {array} the attributes of the node
 */
DvtXmlNode.prototype.getAttributes = function() {
  return null; //subclasses should override
};


/**
 * Returns an Array containing the children of this node.
 * @return {array} an Array containing all child elements and text nodes of this node.
 */
DvtXmlNode.prototype.getAllChildNodes = function() {
  return new Array(); // subclasses shoudl override
};


/**
 * Returns the value of this node.
 * @return {string} the value of the node
 */
DvtXmlNode.prototype.getNodeValue = function() {
  return null; //subclasses should override
};


/**
 * Returns the textContent of this node.
 * @return {string} the textContent of the node
 */
DvtXmlNode.prototype.getTextContent = function() {
  return null; //subclasses should override
};


/**
 * Returns a node list of all child element nodes whose tagName match the speccified name.
 * @return {string} the name of the node
 */
DvtXmlNode.prototype.getElementsByTagName = function(name) {
  return null; //subclasses should override
};

/**
 * @param {DvtContext} context
 * @param {string} domElementId
 * @constructor
 * @extends {DvtTooltipManager}
 * @class DvtHtmlTooltipManager
 */
var DvtHtmlTooltipManager = function(context, domElementId) {
  this.Init(context, domElementId);
};

DvtObj.createSubclass(DvtHtmlTooltipManager, DvtTooltipManager, 'DvtHtmlTooltipManager');

/** @private @const */
DvtHtmlTooltipManager._TOOLTIP_DIV_ID = '_dvtTooltip';

/** @private @const */
DvtHtmlTooltipManager._SHOW_DELAY = 500;  // in ms

/** @private @const */
DvtHtmlTooltipManager._BORDER_COLOR = '#9ba2b0';
/** @private @const */
DvtHtmlTooltipManager._FONT_COLOR = '#383a47';

/** @private @const */
DvtHtmlTooltipManager._VIEWPORT_BUFFER = 15;

/**
 * @param {DvtContext} context
 * @param {string} domElementId
 */
DvtHtmlTooltipManager.prototype.Init = function(context, domElementId) 
{
  this._context = context;

  // if a dom element is specified, it will override the default tooltip div
  this._domElementId = (domElementId ? domElementId : DvtHtmlTooltipManager._TOOLTIP_DIV_ID);
  this._isTooltip = true;
};


/**
 * Displays a datatip.
 * @param {number} x The pageX coordinate at which to display the datatip.
 * @param {number} y The pageY coordinate at which to display the datatip.
 * @param {string} text The string to show in the datatip.
 * @param {string} borderColor The border color for the datatip.
 * @param {boolean=} useOffset false to prevent offsets from being applied. Offsets will be applied otherwise.
 */
DvtHtmlTooltipManager.prototype.showDatatip = function(x, y, text, borderColor, useOffset)
{
  // If useOffset not specified, then apply offsets
  if (useOffset == null)
    useOffset = true;

  this._isTooltip = false;
  this._showTextAtPosition(x, y, text, borderColor, useOffset, this._context.getDatatipStyleClass());
};


/**
 * Helper to display a datatip or tooltip.
 * @param {number} x The pageX coordinate at which to display the tooltip.
 * @param {number} y The pageY coordinate at which to display the tooltip.
 * @param {string} text The string to show in the tooltip.
 * @param {string} borderColor The border color for the tooltip.
 * @param {boolean} useOffset True if offsets should be applied to the coordinates.
 * @param {string} popupClass The style class to use for the outer tooltip div.
 * @private
 */
DvtHtmlTooltipManager.prototype._showTextAtPosition = function(x, y, text, borderColor, useOffset, popupClass)
{
  var tooltipElem;
  var outerElem = this.getTooltipElem();

  // Make replacements on the text string as needed
  if (typeof text == 'string') {
    // Clear out the previous tooltip to make room for the new one. This is done in getCustomTooltip for the custom case
    while (outerElem.hasChildNodes())
      outerElem.removeChild(outerElem.firstChild);

    // For security, turn HTML brackets into strings to disable tags.
    text = text.replace(/(<|&#60;)/g, '&lt;');
    text = text.replace(/(>|&#62;)/g, '&gt;');

    // Support a subset of HTML tags, including bold, italic, and table tags.
    text = DvtHtmlTooltipManager._restoreTag(text, 'b');
    text = DvtHtmlTooltipManager._restoreTag(text, 'i');
    text = DvtHtmlTooltipManager._restoreTag(text, 'table');
    text = DvtHtmlTooltipManager._restoreTag(text, 'tr');
    text = DvtHtmlTooltipManager._restoreTag(text, 'td');

    // Replace logical newlines sequences
    text = text.replace(/\n/g, '<br>');
    text = text.replace(/\\n/g, '<br>');
    text = text.replace(/&#92;n/g, '<br>');
    text = DvtHtmlTooltipManager._restoreTag(text, 'br');

    // Prevent text from wrapping by replacing spaces with non-breaking spaces
    text = text.replace(/ /g, '&nbsp;');

    // Convert spaces inside HTML tags (represented by ~ ~) into real spaces
    text = text.replace(/~&nbsp;~/g, ' ');

    // Create the tooltip element
    tooltipElem = document.createElement('span');
    tooltipElem.style.visibility = 'inherit';
    tooltipElem.style.width = null;
    tooltipElem.style.height = null;

    // Set the text
    tooltipElem.innerHTML = text;//@HtmlUpdateOk
  }
  // true means that we are not to modify the tooltip contents
  else if (text != true)
    tooltipElem = text; // the text is an element to be appended directly

  // Apply default class and border color on the outer element only if the user hasn't specified them ( + 21150376)
  if (!this._isCustomClassName)
    outerElem.className = popupClass;
  this._isCustomClassName = false;

  if (!borderColor)
    borderColor = DvtHtmlTooltipManager._BORDER_COLOR;

  if (!this._isCustomBorderColor)
    outerElem.style.borderColor = borderColor;
  this._isCustomBorderColor = false;

  // Position the outer element
  outerElem.style.position = 'absolute';
  outerElem.style.zIndex = 2147483647;

  if (tooltipElem != null)  // only add content if the elem has not already been populated
    outerElem.appendChild(tooltipElem);//@HTMLUpdateOK

  this.PostElement(outerElem, x, y, true, useOffset);
};


/**
 * Performs a bunch of processing for an assembled tooltip or datatip.
 * @param {object} tooltip The outer DOM element of the tooltip.
 * @param {number} x The pageX coordinate at which to display the tooltip.
 * @param {number} y The pageY coordinate at which to display the tooltip.
 * @param {boolean} noEvents True if this tooltip should not recieve mouse events.
 * @param {boolean} useOffset True if this tooltip should be offset from the x and y coordinates.
 * @protected
 */
DvtHtmlTooltipManager.prototype.PostElement = function(tooltip, x, y, noEvents, useOffset) {
  // Block mouse events if the tip is not interactive
  tooltip.style['pointer-events'] = noEvents ? 'none' : 'auto';

  // Clear the width and height. This allows _positionTip to get the accurate tooltip size
  tooltip.style.width = null;
  tooltip.style.height = null;

  // Add offsets to the tip position as needed
  if (useOffset) {
    var offsets = this._getOffsets(tooltip);
    this.positionTip(x + offsets.x, y + offsets.y, x, y);
  }
  else
    this.positionTip(x, y, x, y);

  // Make the tooltip visible
  tooltip.style.visibility = 'visible';

  // Invoke the tooltip attached callback if one is available.
  var callback = this._context.getTooltipAttachedCallback();
  if (callback)
    callback(tooltip);
};


/**
 * @override
 */
DvtHtmlTooltipManager.prototype.hideTooltip = function()
{
  this.clearTooltip();
  this._tooltipDisplayed = false;
  this._timerIsRunning = false;

  var tooltip = document.getElementById(this._domElementId);
  if (tooltip) {
    tooltip.style.visibility = 'hidden';
    tooltip.style.width = '0px';
    tooltip.style.height = '0px';
    if (!DvtAgent.isRightToLeft(this._context))
      tooltip.style.left = '0px';
    else
      tooltip.style.left = tooltip.style.right;
    tooltip.style.top = '0px';
  }
};


/**
 * Retrieves the outer DOM element of the tooltip.
 * @return {object}
 * @protected
 */
DvtHtmlTooltipManager.prototype.getTooltipElem = function() {
  // Retrieve the tooltip element and create if it doesn't exist.
  var tooltip = document.getElementById(this._domElementId);
  if (!tooltip)
    tooltip = this.InitializeTooltipElem();

  return tooltip;
};


/**
 * Initializes the outer DOM element of the tooltip.
 * @return {object} The outer DOM element.
 * @protected
 */
DvtHtmlTooltipManager.prototype.InitializeTooltipElem = function() {
  var tooltip = document.createElement('div');
  tooltip.id = this._domElementId;
  tooltip.style.visibility = 'hidden';
  document.body.appendChild(tooltip);//@HTMLUpdateOK
  this.InitContent(tooltip);
  return tooltip;
};


/**
 * TODO JSDoc
 * @param {string} tooltip
 * @protected
 */
DvtHtmlTooltipManager.prototype.InitContent = function(tooltip) {
};


/**
 * @override
 */
DvtHtmlTooltipManager.prototype.showTooltip = function(x, y, text, shape, bTrackMouse, borderColor)
{
  if (!text || text.length == 0)
    return;

  this._x = x;
  this._y = y;
  this._text = text;

  //TODO: trackMouse is not working!
  this._trackMouse = bTrackMouse;

  if (this._timerIsRunning)
    return;

  var tooltipElem = document.createElement('span');
  tooltipElem.className = 'OraDVTTooltipText';
  tooltipElem.innerHTML = text;//@HtmlUpdateOK
  tooltipElem.style.color = DvtHtmlTooltipManager._FONT_COLOR;

  if (!borderColor) {
    borderColor = DvtHtmlTooltipManager._BORDER_COLOR;
  }
  var outerElem = this.getTooltipElem();
  outerElem.style.borderColor = borderColor;

  if (DvtAgent.isTouchDevice() || (this._tooltipDisplayed && this._trackMouse)) {
    this._displayTooltip(this._x, this._y, this._text, this._borderColor);
  } else {
    // Tooltips fade-in and remove themselves after a delay.
    this._timerIsRunning = true;
    this._showTimerId = window.setTimeout(DvtObj.createCallback(this, this._handleShowTimer), DvtHtmlTooltipManager._SHOW_DELAY);//@HTMLUpdateOK
  }
};


/**
 * Clears the currently displayed tooltip.
 * @export
 */
DvtHtmlTooltipManager.prototype.clearTooltip = function()
{
  if (this._showTimerId) {
    window.clearTimeout(this._showTimerId);

    this._showTimerId = undefined;
    this._x = undefined;
    this._y = undefined;
    this._text = undefined;

    this._trackMouse = undefined;
  }
  if (this._hideTimerId) {
    window.clearTimeout(this._hideTimerId);
    this._hideTimerId = undefined;
  }
};


/**
 * TODO JSDoc
 * @param {object} event
 * @private
 */
DvtHtmlTooltipManager.prototype._handleShowTimer = function(event)
{
  this._timerIsRunning = false;
  this._displayTooltip(this._x, this._y, this._text, this._borderColor);
  this._tooltipDisplayed = true;
};


/**
 * TODO JSDoc
 * @param {number} x
 * @param {number} y
 * @param {string} text
 * @param {string} borderColor
 * @private
 */
DvtHtmlTooltipManager.prototype._displayTooltip = function(x, y, text, borderColor) 
{
  this._isTooltip = true;
  this._showTextAtPosition(x, y, text, borderColor, true, this._context.getTooltipStyleClass());
};


/**
 * TODO JSDoc
 * TODO This should return DvtDimension, not DvtPoint
 * @param {string} tooltip
 * @private
 * @return {DvtPoint}
 */
DvtHtmlTooltipManager.prototype._getOffsets = function(tooltip)
{
  var tooltipBounds = this.getTooltipBounds(tooltip);
  if (DvtAgent.isTouchDevice()) {
    return new DvtPoint(0 - tooltipBounds.w / 2, -30 - tooltipBounds.h);
  }
  else {
    var yOffset = -8 - tooltipBounds.h;
    var xOffset = 8;
    if (this._isTooltip) {
      yOffset = 22;
      xOffset = 0;
    }
    var bBidi = DvtAgent.isRightToLeft(this._context);
    if (bBidi) {
      xOffset = -xOffset - tooltipBounds.w;
    }

    return new DvtPoint(xOffset, yOffset);
  }
};


/**
 * Returns an approximation of the tooltip bounds.
 * @return {DvtRectangle}
 */
DvtHtmlTooltipManager.prototype.getTooltipBounds = function()
{
  var tooltip = this.getTooltipElem();

  // Fix for 17898759: The offset height can be incorrect if the tooltip div inherits from the HTML body.  Set to auto
  // temporarily to prevent this.
  tooltip.style.height = 'auto';
  return new DvtRectangle(parseInt(tooltip.style.left), parseInt(tooltip.style.top), tooltip.offsetWidth, tooltip.offsetHeight);
};


/**
 * Positions the tip based on the mouse position in relation to the tooltip size.
 * @param {number} x The coordinate at which to display the tooltip with offsets.
 * @param {number} y The coordinate at which to display the tooltip with offsets.
 */
DvtHtmlTooltipManager.prototype.positionTip = function(x, y)
{
  var tooltip = this.getTooltipElem();
  var tooltipDimensions = this.getTooltipBounds();
  var tooltipWidth = tooltipDimensions.w;
  var tooltipHeight = tooltipDimensions.h;

  // Calculate the bounds of the browser viewport, within which we'll position the tooltip
  var viewportBounds = new DvtRectangle(window.pageXOffset + DvtHtmlTooltipManager._VIEWPORT_BUFFER,
                                        window.pageYOffset + DvtHtmlTooltipManager._VIEWPORT_BUFFER,
                                        window.innerWidth - 2 * DvtHtmlTooltipManager._VIEWPORT_BUFFER,
                                        window.innerHeight - 2 * DvtHtmlTooltipManager._VIEWPORT_BUFFER);

  // X Position
  var tooltipX = x;
  if (x + tooltipWidth > viewportBounds.x + viewportBounds.w)
    tooltipX = viewportBounds.x + viewportBounds.w - tooltipWidth - tooltip.clientLeft;
  else if (x < viewportBounds.x)
    tooltipX = viewportBounds.x;

  // Y Position
  var tooltipY = y;
  if (y < viewportBounds.y)
    tooltipY = viewportBounds.y;
  else if (y + tooltipHeight > viewportBounds.y + viewportBounds.h)
    tooltipY = viewportBounds.y + viewportBounds.h - tooltipHeight;

  // Apply the calculated positions
  tooltip.style.left = tooltipX + 'px';
  tooltip.style.top = tooltipY + 'px';
};


/**
 * Returns a custom tooltip based on the tooltip function and the data context.
 * @param {function} tooltipFunc
 * @param {object} dataContext
 * @return {object} The custom tooltip, which is either a string or a DOM element.
 */
DvtHtmlTooltipManager.prototype.getCustomTooltip = function(tooltipFunc, dataContext) {
  var tooltipElem = this.getTooltipElem();

  // Clearing out the previous tooltip content in case the app wants to modify the tooltip element themselves
  while (tooltipElem.hasChildNodes())
    tooltipElem.removeChild(tooltipElem.firstChild);

  dataContext['parentElement'] = tooltipElem;

  // reset class and border color each time so that we can tell if the user specifies custom ones ( + 21150376)
  tooltipElem.className = '';
  tooltipElem.style.borderColor = '';

  var tooltip = tooltipFunc(dataContext);

  // if custom class or border color are specified, set flags so we don't override them with the default values
  if (tooltipElem.className)
    this._isCustomClassName = true;

  if (tooltipElem.style.borderColor)
    this._isCustomBorderColor = true;

  // If the tooltipElem has been populated by the app and a null returned, don't overwrite it.
  if (!tooltip && tooltipElem.hasChildNodes())
    return true;

  return tooltip;
};


/**
 * Restores a supported HTML tag.
 * All HTML brackets are converted into &gt; and &lt; for security reasons, to prevent people from adding unsupported
 * elements. This method restores the brackets for the supported element only.
 * @param {string} text The HTML string.
 * @param {string} tag The tag name to be restored.
 * @return {string} The updated HTML string.
 * @private
 */
DvtHtmlTooltipManager._restoreTag = function(text, tag) {
  // Match the following: <tag...>, </tag...>, and <tag.../>
  var regExp = new RegExp('&lt;(\/?)' + tag + '([^&]*)(\/?)&gt;', 'g');
  return text.replace(regExp, '<$1' + tag + '$2$3>');
};


/**
 * Creates an HTML start tag with the specified tag name and inline style.
 * @param {string} tag Tag name.
 * @param {DvtCSSStyle} style CSS style to be added as the inline style.
 * @return {string} The HTML start tag.
 */
DvtHtmlTooltipManager.createStartTag = function(tag, style) {
  // The spaces inside the start tag has to be converted into ~ ~ so that they're not converted into nbsp
  // in _showTextAtPosition. The ~ ~ will be reconverted into regular spaces after the nbsp conversion.
  return ('<' + tag + ' style=\"' + style.toString() + '\">').replace(/ /g, '~ ~');
};
/**
 * Utility class for providing keyboard listeners to add to HTML divs
 * @class DvtHtmlKeyboardListenerUtils
 */
var DvtHtmlKeyboardListenerUtils = function() {};

DvtObj.createSubclass(DvtHtmlKeyboardListenerUtils, DvtObj, 'DvtHtmlKeyboardListenerUtils');


//: for editable DvtText, ignore events from the HTML textArea
/**
 * Field to look for on event target to see if events from that target should be ignored.
 */
DvtHtmlKeyboardListenerUtils.ATTR_IGNORE_EVENTS_FROM_TARGET = '_dvtIgnoreEventsFromTarget';


/**
 * @param {Boolean} useCapture True if the listener is to be used in the event capture phase,
 *                             false if the listener is to be used in the event bubble phase
 * @return {function} A function that can be used as an event listener during the bubble or capture phase
 */
DvtHtmlKeyboardListenerUtils.getListener = function(useCapture)
{
  if (useCapture)
    return DvtHtmlKeyboardListenerUtils._captureListener;
  else
    return DvtHtmlKeyboardListenerUtils._bubbleListener;
};


/**
 * The event listener that is called by the implementation object's bubble phase listeners.
 * This function will wrap the event and delegate to the real event listeners.
 * @param {object} event the DOM event object
 * @this {object} the platform object actively processing the event object with an event listener
 * @private
 */
DvtHtmlKeyboardListenerUtils._bubbleListener = function(event)
{
  //: for editable DvtText, ignore events from the HTML textArea
  if (DvtHtmlKeyboardListenerUtils._checkIgnoreTarget(event)) {
    return;
  }

  var dvtEvent;
  if (this._currentObj) { // fire to the current listener only
    dvtEvent = DvtEventFactory.newEvent(event, this._currentObj.getObj().getCtx());
    this._currentObj.getObj().FireListener(dvtEvent, false);
  }
  else if (this._obj && this._obj instanceof Array) { // fire to all listeners
    var i;
    var svgObj;
    var length = this._obj.length;
    for (i = 0; i < length; i++) {
      svgObj = this._obj[i];
      dvtEvent = DvtEventFactory.newEvent(event, svgObj.getObj().getCtx());
      svgObj.getObj().FireListener(dvtEvent, false);
    }
  }
};


/**
 * The event listener that is called by the implementation object's capture phase listeners.
 * This function will wrap the event and delegate to the real event listeners.
 * @param {object} event the DOM event object
 * @this {object} the platform object actively processing the event object with an event listener
 * @private
 */
DvtHtmlKeyboardListenerUtils._captureListener = function(event)
{
  //: for editable DvtText, ignore events from the HTML textArea
  if (DvtHtmlKeyboardListenerUtils._checkIgnoreTarget(event)) {
    return;
  }

  var dvtEvent;
  if (this._currentObj) { // fire to the current listener only
    dvtEvent = DvtEventFactory.newEvent(event, this._currentObj.getObj().getCtx());
    this._currentObj.getObj().FireListener(dvtEvent, true);
  }
  if (this._obj && this._obj instanceof Array) { // fire to all listeners
    var i;
    var svgObj;
    var length = this._obj.length;
    for (i = 0; i < length; i++) {
      svgObj = this._obj[i];
      dvtEvent = DvtEventFactory.newEvent(event, svgObj.getObj().getCtx());
      svgObj.getObj().FireListener(dvtEvent, true);
    }
  }
};


/**
 * Check whether the event should be ignored by the toolkit.
 * @param {object} event the DOM event object
 * @return {boolean}
 * @private
 */
DvtHtmlKeyboardListenerUtils._checkIgnoreTarget = function(event) {
  //: for editable DvtText, ignore events from the HTML textArea
  if (event && event.target && event.target[DvtHtmlKeyboardListenerUtils.ATTR_IGNORE_EVENTS_FROM_TARGET]) {
    return true;
  }
  return false;
};
/**
 * Wrapper class providing XML parsing functionality using the DOM.
 * @class DvtDomXmlParser
 * @extends {DvtXmlParser}
 * @constructor
 */
var DvtDomXmlParser = function() {
  this._parser = new DOMParser();
};

DvtObj.createSubclass(DvtDomXmlParser, DvtObj, 'DvtDomXmlParser');


/**
 * Parses the XML string and returns the root node.
 * @param {string} xmlString the XML string to parse
 * @return {DvtDomXmlNode} the root node of the XML document
 */
DvtDomXmlParser.prototype.parse = function(xmlString) {
  var xmlDoc = this._parser.parseFromString(xmlString, 'text/xml');
  var root = xmlDoc.documentElement;
  return new DvtDomXmlNode(root);
};
/**
 * Wrapper class providing access to DOM XML Nodes.
 * @extends {DvtXmlNode}
 * @class DvtDomXmlNode
 * @constructor
 * @param {Node} node the DOM Node object
 */
var DvtDomXmlNode = function(node) {
  this._node = node;
};

// Make DvtDomXmlNode a subclass of DvtXmlNode
DvtObj.createSubclass(DvtDomXmlNode, DvtXmlNode, 'DvtDomXmlNode');


/**
 * @override
 */
DvtDomXmlNode.prototype.getAttr = function(attr) {
  return this._node.getAttribute(attr);
};


/**
 * @override
 */
DvtDomXmlNode.prototype.getChildNodes = function() {
  var ret = new Array();

  // Loop through the children of this node.
  // Note: Using nextSibling because w3schools.com says it's faster than
  //       childNodes for looping through the children.
  var child = this._node.firstChild;
  while (child != null) {
    if (child.nodeType == 1) // Element
      ret.push(new DvtDomXmlNode(child));

    child = child.nextSibling;
  }

  return ret;
};


/**
  * @override
  */
DvtDomXmlNode.prototype.getName = function() {
  return this._node.nodeName;
};


/**
  * @override
  */
DvtDomXmlNode.prototype.getAttributes = function() {
  var array = [];
  var numAttrs = this._node.attributes.length;
  for (var i = 0; i < numAttrs; i++)
  {
    var attr = this._node.attributes[i];
    if (attr.name && typeof attr.value != 'undefined' && attr.value != null)
    {
      array.push({name: attr.name, value: attr.value});
    }
  }
  return array;
};


/**
 * @override
 * @return {array} an Array containing all child elements and text nodes of this node.
 */
DvtDomXmlNode.prototype.getAllChildNodes = function() {
  var ret = new Array();

  // Loop through the children of this node.
  // Note: Using nextSibling because w3schools.com says it's faster than
  //       childNodes for looping through the children.
  var child = this._node.firstChild;
  while (child != null) {
    ret.push(new DvtDomXmlNode(child));
    child = child.nextSibling;
  }

  return ret;
};


/**
  * @override
  */
DvtDomXmlNode.prototype.getNodeValue = function() {
  return this._node.nodeValue;
};


/**
  * @override
  */
DvtDomXmlNode.prototype.getTextContent = function() {
  return this._node.textContent;
};


/**
  * @override
  */
DvtDomXmlNode.prototype.getElementsByTagName = function(name) {
  var ret = [];
  var nodes = this._node.getElementsByTagName(name);
  if (nodes) {
    for (var i = 0; i < nodes.length; i++) {
      ret.push(new DvtDomXmlNode(nodes[i]));
    }
  }
  return ret;
};

/**
 * Option change event.
 * @param {string} key The name of the option to set.
 * @param {Object} value The value to set for the option.
 * @param {Object} optionMetadata (optional) The option metadata for the event.
 * @class
 * @constructor
 * @export
 */
var DvtOptionChangeEvent = function(key, value, optionMetadata) {
  this.Init(DvtOptionChangeEvent.TYPE);
  this['key'] = key;
  this['value'] = value;
  this['optionMetadata'] = optionMetadata;
};

DvtObj.createSubclass(DvtOptionChangeEvent, DvtBaseComponentEvent, 'DvtOptionChangeEvent');

/**
 * @export
 */
DvtOptionChangeEvent.TYPE = 'optionChange';
/**
 * A component level selection event.
 * @param {array} selection The array of currently selected ids for the component.
 * @class
 * @constructor
 * @export
 */
var DvtSelectionEvent = function(selection) {
  this.Init(selection);
};

DvtObj.createSubclass(DvtSelectionEvent, DvtBaseComponentEvent, 'DvtSelectionEvent');

/**
 * @export
 */
DvtSelectionEvent.TYPE = 'selection';

/**
 * @export
 */
DvtSelectionEvent.TYPE_INPUT = 'selectionInput';

/**
 * @param {array} selection The array of currently selected ids for the component.
 * @param {string=} type DvtSelectionEvent.TYPE if none specified.
 * @override
 */
DvtSelectionEvent.prototype.Init = function(selection, type) {
  DvtSelectionEvent.superclass.Init.call(this, type ? type : DvtSelectionEvent.TYPE);
  this._selection = selection;
};

/**
 * Returns the array of currently selected ids for the component.
 * @return {array} The array of currently selected ids for the component.
 * @export
 */
DvtSelectionEvent.prototype.getSelection = function() {
  return this._selection;
};
/**
 * A component level value change event.
 * @param {object} oldValue The old value.
 * @param {object} newValue The old value.
 * @param {boolean} bComplete True if the value change interaction is complete.
 * @class
 * @constructor
 * @export
 */
var DvtValueChangeEvent = function(oldValue, newValue, bComplete) {
  var type = (bComplete === false) ? DvtValueChangeEvent.TYPE_INPUT : DvtValueChangeEvent.TYPE;
  this.Init(type);
  this._oldValue = oldValue;
  this._newValue = newValue;
};

DvtObj.createSubclass(DvtValueChangeEvent, DvtBaseComponentEvent, 'DvtValueChangeEvent');


/**
 * @export
 * Event type for completion of a value change interaction.
 */
DvtValueChangeEvent.TYPE = 'valueChange';


/**
 * @export
 * Event type for an intermediate value change interaction.
 */
DvtValueChangeEvent.TYPE_INPUT = 'valueChangeInput';


/**
 * Returns the old value.
 * @return {object} The old value.
 * @export
 */
DvtValueChangeEvent.prototype.getOldValue = function() {
  return this._oldValue;
};


/**
 * Returns the new value.
 * @return {object} The new value.
 * @export
 */
DvtValueChangeEvent.prototype.getNewValue = function() {
  return this._newValue;
};
/**
 * A component level selection event.
 * @param {object} context Component specific context about this event, such as the clientRowKey.
 * @param {DvtShowPopupBehavior} showPopupBehavior The showPopupBehavior that was triggered.
 * @param {DvtRectangle} launcherBounds The bounding box of the object that triggered the popup,
 *                                      relative to the component's top left coordinates.
 * @param {string} launcherId The component that launched the popup.  This may be different
 *                            than the component that owns the showPopupBehavior.
 * @param {string} triggerType The event that triggered the show popup action.
 *
 * @class
 * @constructor
 * @export
 */
var DvtShowPopupEvent = function(showPopupBehavior, launcherBounds, launcherId, triggerType) {
  this.Init(DvtShowPopupEvent.TYPE);
  this._showPopupBehavior = showPopupBehavior;
  this._launcherBounds = launcherBounds;
  this._launcherId = launcherId;
  this['triggerType'] = triggerType;
};

DvtObj.createSubclass(DvtShowPopupEvent, DvtBaseComponentEvent, 'DvtShowPopupEvent');


/**
 * @export
 */
DvtShowPopupEvent.TYPE = 'showPopup';


/**
 * Returns the showPopupBehavior that was triggered.
 * @return {DvtShowPopupBehavior} The showPopupBehavior that was triggered.
 * @export
 */
DvtShowPopupEvent.prototype.getShowPopupBehavior = function() {
  return this._showPopupBehavior;
};


/**
 * Returns the bounding box of the object that triggered the popup, relative to the component's
 * top left coordinates.
 * @return {DvtRectangle} The bounding box of the object that triggered the popup, relative
 *                        to the component's top left coordinates.
 * @export
 */
DvtShowPopupEvent.prototype.getLauncherBounds = function() {
  return this._launcherBounds;
};


/**
 * Returns the component that launched the popup.  This may be different than the component
 * that owns the showPopupBehavior.
 * @return {string} The component that launched the popup.
 * @export
 */
DvtShowPopupEvent.prototype.getLauncherId = function() {
  return this._launcherId;
};


/**
 * Set the component that launched the popup.  This may be different than the component
 * that owns the showPopupBehavior.
 * @param {string} The component that launched the popup.
 * @export
 */
DvtShowPopupEvent.prototype.setLauncherId = function(launcherId) {
  this._launcherId = launcherId;
};
/**
 * A component level hide popup event.
 * @param {string} popupId The id of the popup to be hidden.
 * @param {Object} relatedTarget The related target of the event that triggered the hide popup event.
 * @class
 * @constructor
 * @export
 */
var DvtHidePopupEvent = function(popupId, relatedTarget) {
  this.Init(DvtHidePopupEvent.TYPE);
  this._popupId = popupId;
  this._relatedTarget = relatedTarget;
};

DvtObj.createSubclass(DvtHidePopupEvent, DvtBaseComponentEvent, 'DvtHidePopupEvent');


/**
 * @export
 */
DvtHidePopupEvent.TYPE = 'hidePopup';


/**
 * Returns the id of the popup to be hidden.
 * @return {string} popupId The id of the popup to be hidden.
 * @export
 */
DvtHidePopupEvent.prototype.getPopupId = function() {
  return this._popupId;
};


/**
 * Returns the related target of the event that triggered the hide popup event.
 * @return {Object} The related target
 */
DvtHidePopupEvent.prototype.getRelatedTarget = function() {
  return this._relatedTarget;
};
/**
 * A component client behavior event.
 * @param {DvtClientBehavior} clientHeavior The clientBehavior that was triggered.
 *
 * @class
 * @constructor
 * @export
 */
var DvtClientBehaviorEvent = function(clientBehavior) {
  this.Init(DvtClientBehaviorEvent.TYPE);
  this._clientBehavior = clientBehavior;
};

DvtObj.createSubclass(DvtClientBehaviorEvent, DvtBaseComponentEvent, 'DvtClientBehaviorEvent');


/**
 * @export
 */
DvtClientBehaviorEvent.TYPE = 'clientBehavior';


/**
 * Returns the clientBehavior that was triggered.
 * @return {DvtClientBehavior} The clientBehavior that was triggered.
 * @export
 */
DvtClientBehaviorEvent.prototype.getClientBehavior = function() {
  return this._clientBehavior;
};
/**
 * A component level context menu event.
 * @param {object} nativeEvent The native event that triggered the context menu.
 * @param {string} menuId The client id of the context menu that is being requested.
 * @class
 * @constructor
 * @export
 */
var DvtContextMenuEvent = function(nativeEvent, menuId) {
  this.Init(DvtContextMenuEvent.TYPE);
  this._nativeEvent = nativeEvent;
  this._menuId = menuId;
};

DvtObj.createSubclass(DvtContextMenuEvent, DvtBaseComponentEvent, 'DvtContextMenuEvent');


/**
 * @export
 */
DvtContextMenuEvent.TYPE = 'contextMenu';


/**
 * Returns the native event that triggered the context menu.
 * @return {object} The native event that triggered the context menu.
 * @export
 */
DvtContextMenuEvent.prototype.getNativeEvent = function() {
  return this._nativeEvent;
};


/**
 * Returns the client id of the context menu that is being requested.
 * @return {string} The client id of the context menu that is being requested.
 * @export
 */
DvtContextMenuEvent.prototype.getMenuId = function() {
  return this._menuId;
};
/**
 * A component level event for selection of a context menu item.
 * @param {string} menuType The type of context menu being requested, such as bodyContextMenu.
 * @param {string} clientId The id for a commandMenuItem.
 * @param {string} destination The destination for a goMenuItem.
 * @param {string} targetFrame The targetFrame for a goMenuItem.
 * @class
 * @constructor
 * @export
 */
var DvtContextMenuSelectEvent = function(menuType, clientId, destination, targetFrame) {
  this.Init(DvtContextMenuSelectEvent.TYPE);
  this._menuType = menuType;
  this._clientId = clientId;
  this._destination = destination;
  this._targetFrame = targetFrame;
};

DvtObj.createSubclass(DvtContextMenuSelectEvent, DvtBaseComponentEvent, 'DvtContextMenuSelectEvent');


/**
 * @export
 */
DvtContextMenuSelectEvent.TYPE = 'contextMenuSelect';


/**
 * Returns the type of context menu being requested, such as bodyContextMenu.
 * @return {string} The type of context menu being requested, such as bodyContextMenu.
 * @export
 */
DvtContextMenuSelectEvent.prototype.getMenuType = function() {
  return this._menuType;
};


/**
 * Returns the id for a commandMenuItem.
 * @return {string} The id for a commandMenuItem.
 * @export
 */
DvtContextMenuSelectEvent.prototype.getClientId = function() {
  return this._clientId;
};


/**
 * Returns the destination for a goMenuItem.
 * @return {string} The destination for a goMenuItem.
 * @export
 */
DvtContextMenuSelectEvent.prototype.getDestination = function() {
  return this._destination;
};


/**
 * Returns the targetFrame for a goMenuItem.
 * @return {string} The targetFrame for a goMenuItem.
 * @export
 */
DvtContextMenuSelectEvent.prototype.getTargetFrame = function() {
  return this._targetFrame;
};
/**
 * A component level drill replace event.
 * @param {string} id The id of the data item that was drilled.
 * @class
 * @constructor
 * @export
 */
var DvtDrillReplaceEvent = function(id) {
  this.Init(DvtDrillReplaceEvent.TYPE);
  this._id = id;
};

DvtObj.createSubclass(DvtDrillReplaceEvent, DvtBaseComponentEvent, 'DvtDrillReplaceEvent');


/**
 * @export
 */
DvtDrillReplaceEvent.TYPE = 'drillReplace';


/**
 * Returns the id of the data item that was drilled.
 * @return {string} The id of the data item that was drilled.
 * @export
 */
DvtDrillReplaceEvent.prototype.getId = function() {
  return this._id;
};
/**
 * @constructor
 * A component level rollover behavior event.
 * @type {string} type The type of event, either roll over or roll out.
 * @type {object} categories The category or array of categories that are the target of the event.
 * @class
 * @constructor
 * @extends {DvtBaseComponentEvent}
 * @export
 */
var DvtCategoryRolloverEvent = function(type, categories) {
  this.Init(type);
  this._category = categories;

  // : Easier to deal with empty arrays than null values.
  categories = categories || [];
  this['categories'] = !(categories instanceof Array) ? [categories] : categories;
};

DvtObj.createSubclass(DvtCategoryRolloverEvent, DvtBaseComponentEvent, 'DvtCategoryRolloverEvent');

/**
 * @export
 */
DvtCategoryRolloverEvent.TYPE_OVER = 'categoryRollOver';


/**
 * @export
 */
DvtCategoryRolloverEvent.TYPE_OUT = 'categoryRollOut';

/**
 * Returns the category that is target of the event.
 * @return {string}
 * @export
 * @deprecated use event['categories'] instead
 */
DvtCategoryRolloverEvent.prototype.getCategory = function() {
  return this._category;
};
/**
 * A component level hide and show behavior event.
 * @type {string} type The type of event, either hide or show.
 * @type {string} category The category that is the target of the event.
 * @constructor
 * @class
 * @extends {DvtBaseComponentEvent}
 * @export
 */
var DvtCategoryHideShowEvent = function(type, category) {
  this.Init(type);
  this._category = category;
};

DvtObj.createSubclass(DvtCategoryHideShowEvent, DvtBaseComponentEvent, 'DvtCategoryHideShowEvent');


/**
 * @export
 */
DvtCategoryHideShowEvent.TYPE_HIDE = 'hideCategory';


/**
 * @export
 */
DvtCategoryHideShowEvent.TYPE_SHOW = 'showCategory';


/**
 * Returns the category that is target of the event.
 * @return {string}
 * @export
 */
DvtCategoryHideShowEvent.prototype.getCategory = function() {
  return this._category;
};
/**
 * A pan event.
 * @param {string}  subType  subtype of the event; one of the constants
 *        defined in this class
 * @param {number}  newX  new x-coord
 * @param {number}  newY  new y-coord
 * @param {number}  oldX  old x-coord
 * @param {number}  oldY  old y-coord
 * @param {DvtAnimator}  animator  optional animator used to animate the zoom
 * @class
 * @constructor
 */
var DvtPanEvent = function(subType, newX, newY, oldX, oldY, animator) {
  this.Init(DvtPanEvent.TYPE);
  this.type = this.getType();
  this._subtype = subType;
  this._newX = newX;
  this._newY = newY;
  this._oldX = oldX;
  this._oldY = oldY;
  this._animator = animator;
};

DvtObj.createSubclass(DvtPanEvent, DvtBaseComponentEvent, 'DvtPanEvent');

DvtPanEvent.TYPE = 'dvtPan';

DvtPanEvent.SUBTYPE_DRAG_PAN_BEGIN = 'dragPanBegin';
DvtPanEvent.SUBTYPE_DRAG_PAN_END = 'dragPanEnd';
DvtPanEvent.SUBTYPE_PANNED = 'panned';
DvtPanEvent.SUBTYPE_PANNING = 'panning';
DvtPanEvent.SUBTYPE_ELASTIC_ANIM_BEGIN = 'elasticAnimBegin';
DvtPanEvent.SUBTYPE_ELASTIC_ANIM_END = 'elasticAnimEnd';


/**
 *
 */
DvtPanEvent.prototype.getSubType = function() {
  return this._subtype;
};


/**
 *
 */
DvtPanEvent.prototype.getNewX = function() {
  return this._newX;
};


/**
 *
 */
DvtPanEvent.prototype.getNewY = function() {
  return this._newY;
};


/**
 *
 */
DvtPanEvent.prototype.getOldX = function() {
  return this._oldX;
};


/**
 *
 */
DvtPanEvent.prototype.getOldY = function() {
  return this._oldY;
};


/**
 *
 */
DvtPanEvent.prototype.getAnimator = function() {
  return this._animator;
};
/**
 * A zoom event.
 * @param {string}  subType  subtype of the event; one of the constants
 *        defined in this class
 * @param {number}  newZoom  new zoom factor
 * @param {number}  oldZoom  old zoom factor
 * @param {DvtAnimator}  animator  optional animator used to animate the zoom
 * @param {DvtRectangle}  zoomToFitBounds  bounds to use for zoom-to-fit
 * @param {DvtPoint}  centerPoint  center of zoom
 * @param {number}  tx  the horizontal translation applied after the zoom
 * @param {number}  ty  the vertical translation applied after the zoom
 * @class
 * @constructor
 */
var DvtZoomEvent = function(subType, newZoom, oldZoom, animator, zoomToFitBounds, centerPoint, tx, ty) {
  this.Init(DvtZoomEvent.TYPE);
  this.type = this.getType();
  this._subtype = subType;
  this._newZoom = newZoom;
  this._oldZoom = oldZoom;
  this._animator = animator;
  this._zoomToFitBounds = zoomToFitBounds;
  this._centerPoint = centerPoint;
  this._tx = tx;
  this._ty = ty;
};

DvtObj.createSubclass(DvtZoomEvent, DvtBaseComponentEvent, 'DvtZoomEvent');

DvtZoomEvent.TYPE = 'dvtZoom';


/**
 * Zoomed event - component might need to rerender on this event
 * @const
 */
DvtZoomEvent.SUBTYPE_ZOOMED = 'zoomed';


/**
 * Zooming event - used to notify a component of zooming event
 * @const
 */
DvtZoomEvent.SUBTYPE_ZOOMING = 'zooming';


/**
 * ZoomEnd event - it is the end of the zoom event. The difference between "zoomed" and "zoomEnd" is on touch device.
 * A component gets "zoomed" events for appropriate "touchmove" events. When all touches are released on "touchend"  the component will get "zoomEnd" notification.
 * @const
 */
DvtZoomEvent.SUBTYPE_ZOOM_END = 'zoomEnd';
DvtZoomEvent.SUBTYPE_DRAG_ZOOM_BEGIN = 'dragZoomBegin';
DvtZoomEvent.SUBTYPE_DRAG_ZOOM_END = 'dragZoomEnd';
DvtZoomEvent.SUBTYPE_ZOOM_AND_CENTER = 'zoomAndCenter';
DvtZoomEvent.SUBTYPE_ZOOM_TO_FIT_CALC_BOUNDS = 'zoomToFitCalcBounds';
DvtZoomEvent.SUBTYPE_ZOOM_TO_FIT_BEGIN = 'zoomToFitBegin';
DvtZoomEvent.SUBTYPE_ZOOM_TO_FIT_END = 'zoomToFitEnd';
DvtZoomEvent.SUBTYPE_ELASTIC_ANIM_BEGIN = 'elasticAnimBegin';
DvtZoomEvent.SUBTYPE_ELASTIC_ANIM_END = 'elasticAnimEnd';


/**
 * Subtype representing a zoom event fired before the SUBTYPE_ZOOMING event to give components a chance adjust the
 * pan constraints
 *
 * @const
 */
DvtZoomEvent.SUBTYPE_ADJUST_PAN_CONSTRAINTS = 'adjustPanConstraints';


/**
 *
 */
DvtZoomEvent.prototype.getSubType = function() {
  return this._subtype;
};


/**
 *
 */
DvtZoomEvent.prototype.getNewZoom = function() {
  return this._newZoom;
};


/**
 *
 */
DvtZoomEvent.prototype.getOldZoom = function() {
  return this._oldZoom;
};


/**
 *
 */
DvtZoomEvent.prototype.getAnimator = function() {
  return this._animator;
};


/**
 *
 */
DvtZoomEvent.prototype.setZoomToFitBounds = function(bounds) {
  this._zoomToFitBounds = bounds;
};


/**
 *
 */
DvtZoomEvent.prototype.getZoomToFitBounds = function() {
  return this._zoomToFitBounds;
};


/**
 *
 */
DvtZoomEvent.prototype.getCenterPoint = function() {
  return this._centerPoint;
};


/**
 * Gets the horizontal translation applied after the zoom
 *
 * @return {number} the horizontal translation applied after the zoom
 */
DvtZoomEvent.prototype.getTx = function() {
  return this._tx;
};


/**
 * Gets the vertical translation applied after the zoom
 *
 * @return {number} the vertical translation applied after the zoom
 */
DvtZoomEvent.prototype.getTy = function() {
  return this._ty;
};
/**
 * An action event.
 * ActionEvent is generated by a AfCommandButton, AfCommandLink,  AfCommandImageLink or
 * AfCommandMenuItem when it is clicked
 * @param {string}  commandId
 * @param {string}  clientId
 * @class
 * @constructor
 * @export
 */
var DvtActionEvent = function(actionEventType, commandId, clientId) {
  this.Init(DvtActionEvent.TYPE);
  this.type = this.getType();
  this._subtype = actionEventType;
  this._commandId = commandId;
  this._clientId = clientId;
};

DvtObj.createSubclass(DvtActionEvent, DvtBaseComponentEvent, 'DvtActionEvent');


/**
 * @export
 */
DvtActionEvent.TYPE = 'dvtAct';


/**
 * @export
 */
DvtActionEvent.SUBTYPE_ACTION = 'action';
//DvtActionEvent.SUBTYPE_NAVIGATE_UP = "navigateUp";
DvtActionEvent.SUBTYPE_SET_ANCHOR = 'setAnchor';


DvtActionEvent.prototype.getSubType = function() {
  return this._subtype;
};

DvtActionEvent.prototype.getCommandId = function() {
  return this._commandId;
};


/**
 * @export
 */
DvtActionEvent.prototype.getClientId = function() {
  return this._clientId;
};

DvtActionEvent.prototype.setClientId = function(clientId) {
  this._clientId = clientId;
};

/**
 * An drill event.
 * @param {string} id
 * @param {string} series
 * @param {string} group
 * @class
 * @constructor
 * @export
 */
var DvtDrillEvent = function(id, series, group) {
  this.Init(DvtDrillEvent.TYPE);
  this._id = id;
  this._series = series;
  this._group = group;
};

DvtObj.createSubclass(DvtDrillEvent, DvtBaseComponentEvent, 'DvtDrillEvent');

/**
 * @export
 */
DvtDrillEvent.TYPE = 'dvtDrill';

/**
 * @return {string} ID of drilled object.
 * @export
 */
DvtDrillEvent.prototype.getId = function() {
  return this._id;
};

/**
 * @return {string} Series name of drilled object.
 * @export
 */
DvtDrillEvent.prototype.getSeries = function() {
  return this._series;
};

/**
 * @return {string} Group name of drilled object.
 * @export
 */
DvtDrillEvent.prototype.getGroup = function() {
  return this._group;
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
var DvtEventDispatcher = {};

DvtObj.createSubclass(DvtEventDispatcher, DvtObj, 'DvtEventDispatcher');


/**
 * Dispatches the event to the callback function.
 * @param {object} callback The function that should be called to dispatch component events.
 * @param {object} callbackObj The object context for the callback function
 * @param {object} component The component firing the event
 * @param {object} event The event to be dispatched.
 * @protected
 */
DvtEventDispatcher.dispatchEvent = function(callback, callbackObj, component, event) {
  if (!callback)
    return;
  else if (callback && callback.call)
    callback.call(callbackObj, event, component);
};
/**
 * A component level isolate event.
 * @param {array} isolatedRows The array of currently disclosed ids for the component.
 * @class
 * @constructor
 * @export
 */
var DvtIsolateEvent = function(isolatedRows) {
  this.Init(DvtIsolateEvent.TYPE);
  this._isolatedRows = isolatedRows;
};

DvtObj.createSubclass(DvtIsolateEvent, DvtBaseComponentEvent, 'DvtIsolateEvent');


/**
 * @export
 */
DvtIsolateEvent.TYPE = 'isolate';


/**
 * Returns the array of currently isolated ids for the component.
 * @return {array} The array of currently isolated ids for the component.
 * @export
 */
DvtIsolateEvent.prototype.getIsolatedRows = function() {
  return this._isolatedRows;
};
/**
 * A component level log event.
 * @param {string} logType the type of this log event: either DvtLogEvent.PERFORMANCE or DvtLogEvent.LOG
 * @param {int} level the level of this log event
 * @param {string} message the message to be logged
 * @class
 * @constructor
 * @export
 */
var DvtLogEvent = function(logType, level, message) {
  this.Init(DvtLogEvent.TYPE);
  this._logType = logType;
  this._level = level;
  this._message = message;
};

DvtObj.createSubclass(DvtLogEvent, DvtBaseComponentEvent, 'DvtLogEvent');


/**
 * @export
 */
DvtLogEvent.TYPE = 'log';


/**
 * @export
 */
DvtLogEvent.PERFORMANCE = 'performance';


/**
 * @export
 */
DvtLogEvent.LOG = 'log';


/**
 * Returns the type of this log event: either DvtLogEvent.PERFORMANCE or DvtLogEvent.LOG
 * @return {string} the type of this log event
 * @export
 */
DvtLogEvent.prototype.getLogType = function() {
  return this._logType;
};


/**
 * Returns the level of this log event
 * @return {int} the level of this log event
 * @export
 */
DvtLogEvent.prototype.getLevel = function() {
  return this._level;
};


/**
 * Returns the message to be logged
 * @return {string} the message to be logged
 * @export
 */
DvtLogEvent.prototype.getMessage = function() {
  return this._message;
};
/**
 * A component level ready event.
 * @class
 * @constructor
 * @export
 */
var DvtReadyEvent = function() {
  this.Init(DvtReadyEvent.TYPE);
};

DvtObj.createSubclass(DvtReadyEvent, DvtBaseComponentEvent, 'DvtReadyEvent');

/**
 * @export
 */
DvtReadyEvent.TYPE = 'ready';
/**
 * A component level set property event.
 * @class
 * @constructor
 * @export
 */
var DvtSetPropertyEvent = function() {
  this.Init(DvtSetPropertyEvent.TYPE);
};

DvtObj.createSubclass(DvtSetPropertyEvent, DvtBaseComponentEvent, 'DvtSetPropertyEvent');


/**
 * @export
 */
DvtSetPropertyEvent.TYPE = 'dvtSetPropertyEvent';
// Copyright (c) 2008, 2016, Oracle and/or its affiliates. All rights reserved.
/*-------------------------------------------------------------------------*/
/*  DvtToolkitUtils()                                                          */
/*-------------------------------------------------------------------------*/

// SVG Utilities for Drawing


/**
 * @class
 * @export
 */
var DvtToolkitUtils = new Object();

DvtObj.createSubclass(DvtToolkitUtils, DvtObj, 'DvtToolkitUtils');
/** @const **/
DvtToolkitUtils.SVG_NS = 'http://www.w3.org/2000/svg';
/** @const **/
DvtToolkitUtils.XLINK_NS = 'http://www.w3.org/1999/xlink';


/**
 * Creates and returns a new SVG document with the specified id.
 * @param {string} id The id for the new SVG document.
 * @return {object} A new SVG document.
 * @export
 */
DvtToolkitUtils.createSvgDocument = function(id) {
  var svg = document.createElementNS(DvtToolkitUtils.SVG_NS, 'svg');

  if (id != null)
    DvtToolkitUtils.setAttrNullNS(svg, 'id', id);

  DvtToolkitUtils.setAttrNullNS(svg, 'width', '100%');
  DvtToolkitUtils.setAttrNullNS(svg, 'height', '100%');

  //  - IE allows tabbing into svg element
  if (DvtAgent.isPlatformIE())
    DvtToolkitUtils.setAttrNullNS(svg, 'focusable', 'false');
  return svg;
};


/**
 * Returns the drag feedback for the specified objects.
 * @param {object} displayables The DvtDisplayable or array of DvtDisplayables to display for drag feedback.
 * @param {DvtDisplayable} targetCoordinateSpace The displayable defining the coordinate space of the resulting bounds.  The
 *                                               parent coordinate space is used if none is provided.
 * @return {object} An object containing drag feedback information.
 */
DvtToolkitUtils.getDragFeedback = function(displayables, targetCoordinateSpace) {
  // Wrap in an array if not already wrapped.
  if (!(displayables instanceof Array)) {
    displayables = [displayables];
  }
  var bounds = DvtDnDUtils.getDragFeedbackBounds(displayables, targetCoordinateSpace);
  var svg = DvtToolkitUtils._getDragFeedbackSVG(displayables, bounds);

  var feedback = new Object();
  feedback.width = bounds.w + DvtDragSource.DRAG_FEEDBACK_MARGIN * 2;
  feedback.height = bounds.h + DvtDragSource.DRAG_FEEDBACK_MARGIN * 2;
  if (svg)
    feedback.svg = svg;

  return feedback;
};


/**
 * Returns an svg string representing the drag over feedback.
 * @param {object} displayables The DvtDisplayable or array of DvtDisplayables to display for drag feedback.
 * @param {DvtRectangle} bounds The bounds for the drag feedback displayables, used to translate the feedback to 0.
 * @return {string} and svg string representing the drag over feedback
 * @private
 */
DvtToolkitUtils._getDragFeedbackSVG = function(displayables, bounds) {
  // : A new svg document must be created programmatically and appended to the wrapping div later on.
  //  This is necessary for Safari 5.0 and earlier, as well as iOS.  innerHTML should not be used.
  var svgElem = DvtToolkitUtils.createSvgDocument('dnd');

  // Create a group element to apply the top level translate to show the drag feedback at (0, 0)
  var tx = DvtDragSource.DRAG_FEEDBACK_MARGIN - bounds.x;
  var ty = DvtDragSource.DRAG_FEEDBACK_MARGIN - bounds.y;
  var translate = 'translate(' + tx + ',' + ty + ')';
  var container = DvtSvgShapeUtils.createElement('g');
  DvtToolkitUtils.setAttrNullNS(container, 'transform', translate);
  DvtToolkitUtils.appendChildElem(svgElem, container);

  // Loop through and add the displayables
  for (var i = 0; i < displayables.length; i++) {

    var src = displayables[i];
    // Clone the selected node and add
    var elem = src.getImpl().getElem();
    var clone = elem.cloneNode(true);

    // Remove filters if present, since these effects overflow the bounds and look broken
    if (DvtToolkitUtils.getAttrNullNS(clone, 'filter'))
      DvtToolkitUtils.setAttrNullNS(clone, 'filter', null);

    var cloneContainer = DvtSvgShapeUtils.createElement('g');
    DvtToolkitUtils.appendChildElem(container, cloneContainer);
    var pathToStage = src.getPathToStage();
    var mat = null;
    for (var j = 1; j < pathToStage.length; j++) {
      if (!mat)
        mat = pathToStage[j].getMatrix();
      else {
        mat = mat.clone();
        mat.concat(pathToStage[j].getMatrix());
      }
    }
    if (mat) {
      var sMat = 'matrix(' + mat.getA() + ',' + mat.getC() + ',' + mat.getB() + ',' + mat.getD() + ',' + mat.getTx() + ',' + mat.getTy() + ')';
      DvtToolkitUtils.setAttrNullNS(cloneContainer, 'transform', sMat);
    }
    DvtToolkitUtils.appendChildElem(cloneContainer, clone);
  }

  return svgElem;
};


/**
 * Add an event listener to a DOM element.
 * @param {object} elem DOM element
 * @param {string} type type of event
 * @param {function} listener the listener function
 * @param {boolean} useCapture true if the listener operates in the capture phase, false otherwise
 */
DvtToolkitUtils.addDomEventListener = function(elem, type, listener, useCapture) {
  if (elem && elem.addEventListener) {
    elem.addEventListener(type, listener, useCapture);
  }
};


/**
 * Remove an event listener from a DOM element.
 * @param {object} elem DOM element
 * @param {string} type type of event
 * @param {function} listener the listener function
 * @param {boolean} useCapture true if the listener operates in the capture phase, false otherwise
 */
DvtToolkitUtils.removeDomEventListener = function(elem, type, listener, useCapture) {
  if (elem && elem.removeEventListener) {
    elem.removeEventListener(type, listener, useCapture);
  }
};


/**
 * Wrapper for appendChild method
 * @param {object} parent DOM element
 * @param {object} child DOM element added to parent
 * @return {object} the appended element (child)
 */
DvtToolkitUtils.appendChildElem = function(parent, child) {
  return parent.appendChild(child);//@HTMLUpdateOk
};


/**
 * Wrapper for getAttributeNS method
 * @param {object} elem DOM element
 * @param {string} namespace Namespace to use
 * @param {string} name Attribute name to get
 * @return {string} Value associated with given name
 */
DvtToolkitUtils.getAttrNS = function(elem, namespace, name) {
  return elem.getAttributeNS(namespace, name);
};


/**
 * Wrapper for getAttributeNS method
 * @param {object} elem DOM element
 * @param {string} name Attribute name to get
 * @return {string} Value associated with given name
 */
DvtToolkitUtils.getAttrNullNS = function(elem, name) {
  return elem.getAttributeNS(null, name);
};


/**
 * Wrapper for hasAttributeNS method
 * @param {object} elem DOM element
 * @param {string} namespace The namespace of the attribute.
 * @param {string} name the name of the attribute.
 * @return {boolean} true if the element has the specified attribute.
 */
DvtToolkitUtils.hasAttrNS = function(elem, namespace, name) {
  return elem.hasAttributeNS(namespace, name);
};


/**
 * Wrapper for hasAttributeNS method
 * @param {object} elem DOM element
 * @param {string} name the name of the attribute.
 * @return {boolean} true if the element has the specified attribute.
 */
DvtToolkitUtils.hasAttrNullNS = function(elem, name) {
  return DvtToolkitUtils.hasAttrNS(elem, null, name);
};


/**
 * Wrapper for setAttributeNS method.  When the value of the attribute matches the default value, the DOM will not be
 * updated unless the attribute has already been set to a different value.
 * @param {object} elem DOM element
 * @param {string} namespace The namespace of the attribute.
 * @param {string} name the name of the attribute.
 * @param {string} value The value of the attribute.
 * @param {string=} defaultValue The default value of the attribute, which can be provided to optimize performance.
 */
DvtToolkitUtils.setAttrNS = function(elem, namespace, name, value, defaultValue) {
  // Note: We're not strict about value or defaultValue being String types, since browser implementations are not. The
  //       code in this function should always assume that users may pass objects that would be converted to Strings.

  // If defaultValue specified and value matches default, optimize the DOM calls
  // removeAttrNS fails for IE9 and IE10 and x,y attributes of text elements in Chrome version 34, so exclude it here. (when not in test environment)
  if (defaultValue != null && value == defaultValue) {
    if (DvtToolkitUtils.hasAttrNS(elem, namespace, name)) {
      if ((DvtAgent.isPlatformIE() && DvtAgent.getVersion() <= 10) || (DvtAgent.isBrowserChrome() && !DvtAgent.isEnvironmentTest() && DvtAgent.getVersion() >= 34 && elem.nodeName == 'text' && (name == 'x' || name == 'y')))
        elem.setAttributeNS(namespace, name, value);
      else
        DvtToolkitUtils.removeAttrNS(elem, namespace, name);
    }
    return;
  }

  // Otherwise set the attribute
  elem.setAttributeNS(namespace, name, value);
};


/**
 * Wrapper for setAttributeNS method.  When the value of the attribute matches the default value, the DOM will not be
 * updated unless the attribute has already been set to a different value.
 * @param {object} elem DOM element
 * @param {string} name the name of the attribute.
 * @param {string} value The value of the attribute.
 * @param {string=} defaultValue The default value of the attribute, which can be provided to optimize performance.
 */
DvtToolkitUtils.setAttrNullNS = function(elem, name, value, defaultValue) {
  DvtToolkitUtils.setAttrNS(elem, null, name, value, defaultValue);
};


/**
 * Remove an attribute from a DOM element.
 * @param {object} elem DOM element
 * @param {string} namespace Namespace to use
 * @param {string} name Attribute name to remove
 */
DvtToolkitUtils.removeAttrNS = function(elem, namespace, name) {
  //  This might be an over-optimization, but we know that hasAttrNS is cheap
  if (DvtToolkitUtils.hasAttrNS(elem, namespace, name))
    elem.removeAttributeNS(namespace, name);
};


/**
 * Remove an attribute from a DOM element, using a null namespace.
 * @param {object} elem DOM element
 * @param {string} name Attribute name to remove
 */
DvtToolkitUtils.removeAttrNullNS = function(elem, name) {
  DvtToolkitUtils.removeAttrNS(elem, null, name);
};

/**
 * Get a pseudo link callback that loads a document into the existing or a new window.
 * The callback can be used as an onclick callback for DvtButton.
 * @param {string} target a target frame or a name of the window for the link
 * @param {string} dest a URL to be loaded for the link
 * @return {function} callback function
 */
DvtToolkitUtils.getLinkCallback = function(target, dest) {
  if ((target || dest)) {
    var callback = function() {
      if (target == null) {
        self.location = dest;
      }
      else {
        var newWindow = window.open(dest, target);
        if (newWindow)
          newWindow.focus();
      }
    };
    return callback;
  }
  return null;
};

/**
 * Rounds decimal values to the 3rd decimal for junit tests
 * @param {number} value The value to round
 * @return {number}
 */
DvtToolkitUtils.roundDecimal = function(value) {
  if (DvtAgent.isEnvironmentTest())
    return Math.round(value * 1000) / 1000;
  else
    return value;
};

/**
 * Constructs a URL attribute value based on the ID in the SVG definition.
 * @param {string} id The ID in the SVG definition.
 * @return {string} URL attribute value.
 */
DvtToolkitUtils.getUrlById = function(id) {
  // If <base> is defined on the document, we have to use the full URL.
  // document.baseURI is not supported in IE, so we have to check if the <base> tag exists in the document.
  var hasBase = DvtAgent.isPlatformIE() ? document.querySelector('base') != null : document.URL != document.baseURI;
  var root = hasBase ? document.URL + '#' : '#';
  return 'url(' + root + id + ')';
};

/**
 * Sets the width and height of the component SVG.
 * @param {DvtContext} context
 * @param {number} width
 * @param {number} height
 */
DvtToolkitUtils.setSvgSize = function(context, width, height) {
  var svg = context.getSvgDocument();
  DvtToolkitUtils.setAttrNullNS(svg, 'width', width + 'px');
  DvtToolkitUtils.setAttrNullNS(svg, 'height', height + 'px');
};

/**
 * Returns the width and height of the component outer div.
 * @param {DvtContext} context
 * @return {DvtDimension}
 */
DvtToolkitUtils.getOuterDivSize = function(context) {
  var outerDiv = context.getSvgDocument().parentNode;
  var computedStyle = window.getComputedStyle(outerDiv);
  return new DvtDimension(parseFloat(computedStyle.width), parseFloat(computedStyle.height));
};


DvtBundle.addDefaultStrings(DvtBundle.UTIL_PREFIX, {
  'SCALING_SUFFIX_THOUSAND': 'K',
  'SCALING_SUFFIX_MILLION': 'M',
  'SCALING_SUFFIX_BILLION': 'B',
  'SCALING_SUFFIX_TRILLION': 'T',
  'SCALING_SUFFIX_QUADRILLION': 'Q',

  'NUMBER_FORMAT_DECIMAL_SEPARATOR': '.',
  'NUMBER_FORMAT_GROUPING_SEPARATOR': ',',
  'NUMBER_FORMAT_GROUPING_SIZE': 3,

  'MONTH_JANUARY': 'January',
  'MONTH_FEBRUARY': 'February',
  'MONTH_MARCH': 'March',
  'MONTH_APRIL': 'April',
  'MONTH_MAY': 'May',
  'MONTH_JUNE': 'June',
  'MONTH_JULY': 'July',
  'MONTH_AUGUST': 'August',
  'MONTH_SEPTEMBER': 'September',
  'MONTH_OCTOBER': 'October',
  'MONTH_NOVEMBER': 'November',
  'MONTH_DECEMBER': 'December',
  'MONTH_SHORT_JANUARY': 'Jan',
  'MONTH_SHORT_FEBRUARY': 'Feb',
  'MONTH_SHORT_MARCH': 'Mar',
  'MONTH_SHORT_APRIL': 'Apr',
  'MONTH_SHORT_MAY': 'May',
  'MONTH_SHORT_JUNE': 'Jun',
  'MONTH_SHORT_JULY': 'Jul',
  'MONTH_SHORT_AUGUST': 'Aug',
  'MONTH_SHORT_SEPTEMBER': 'Sep',
  'MONTH_SHORT_OCTOBER': 'Oct',
  'MONTH_SHORT_NOVEMBER': 'Nov',
  'MONTH_SHORT_DECEMBER': 'Dec',
  'DAY_MONDAY': 'Monday',
  'DAY_TUESDAY': 'Tuesday',
  'DAY_WEDNESDAY': 'Wednesday',
  'DAY_THURSDAY': 'Thursday',
  'DAY_FRIDAY': 'Friday',
  'DAY_SATURDAY': 'Saturday',
  'DAY_SUNDAY': 'Sunday',
  'DAY_SHORT_MONDAY': 'Mon',
  'DAY_SHORT_TUESDAY': 'Tue',
  'DAY_SHORT_WEDNESDAY': 'Wed',
  'DAY_SHORT_THURSDAY': 'Thu',
  'DAY_SHORT_FRIDAY': 'Fri',
  'DAY_SHORT_SATURDAY': 'Sat',
  'DAY_SHORT_SUNDAY': 'Sun',
  'TIME_AM': 'AM',
  'TIME_PM': 'PM',

  'INVALID_DATA': 'Invalid data',
  'NO_DATA': 'No data to display',

  'CLEAR_SELECTION': 'Clear Selection',
  'EXPAND': 'Expand',
  'COLLAPSE': 'Collapse',

  'DATA_VISUALIZATION': 'Data Visualization',
  'STATE_SELECTED': 'Selected',
  'STATE_UNSELECTED': 'Unselected',
  'STATE_MAXIMIZED': 'Maximized',
  'STATE_MINIMIZED': 'Minimized',
  'STATE_EXPANDED': 'Expanded',
  'STATE_COLLAPSED': 'Collapsed',
  'STATE_ISOLATED': 'Isolated',
  'STATE_HIDDEN': 'Hidden',
  'STATE_VISIBLE': 'Visible',
  'STATE_DRILLABLE': 'Drillable',
  'ARIA_LABEL_STATE_DELIMITER': ', ',
  'ARIA_LABEL_DESC_DELIMITER': '. ',

  'COLON_SEP_LIST': '{0}: {1}',
  'COUNT_WITH_TOTAL': '{0} of {1}',

  'ZOOM_IN': 'Zoom In',
  'ZOOM_OUT': 'Zoom Out',

  'CHART': 'Chart',
  'DIAGRAM': 'Diagram',
  'GAUGE': 'Gauge',
  'HIERARCHY_VIEWER': 'Hierarchy Viewer',
  'LEGEND': 'Legend',
  'NBOX': '{0} Box',
  'PICTOCHART': 'Picture Chart',
  'SUNBURST': 'Sunburst',
  'TAG_CLOUD': 'Tag Cloud',
  'THEMATIC_MAP': 'Thematic Map',
  'TIMELINE': 'Timeline',
  'TIMELINE_SERIES': 'Series',
  'TREEMAP': 'Treemap'
});
// Copyright (c) 2008, 2016, Oracle and/or its affiliates. All rights reserved.
/**
 * Document APIs.
 * @class DvtSvgDocumentUtils
 */
var DvtSvgDocumentUtils = function() {};

DvtObj.createSubclass(DvtSvgDocumentUtils, DvtObj, 'DvtSvgDocumentUtils');

// TODO JSDoc
// Return displayable
DvtSvgDocumentUtils.elementFromPoint = function(posX, posY) {
  var domObj = document.elementFromPoint(posX, posY);
  while (domObj) {
    if (domObj._obj && domObj._obj.getObj && domObj._obj.getObj()) {
      return domObj._obj.getObj();
    }
    domObj = domObj.parentNode;
  }
  return null;
};


/**
 * Wrapper for the elementFromPoint function that uses clientX and clientY coordinates
 * from the touch to find a corresponding displayable object
 * @param {DvtTouch} touch The touch being passed in to evaluate the element it corresponds to
 * @return {DvtDisplayable} displayable The dom object the touch corresponds to
 */
DvtSvgDocumentUtils.elementFromTouch = function(touch) {
  return this.elementFromPoint(touch.clientX, touch.clientY);
};


/**
 * Returns true if SVG filters are supported.
 * @return {boolean}
 */
DvtSvgDocumentUtils.isFilterSupported = function(stage) {
  // Filters not supported in IE < 10, Safari < 6, Android
  return !(DvtAgent.isPlatformIE() && DvtAgent.getVersion() < 10) &&
         !(DvtAgent.isBrowserSafari() && DvtAgent.getVersion() < 536) &&
         !(DvtAgent.isTouchDevice() && !DvtAgent.isBrowserSafari());
};

/*
 * Whether or not events in SVG are received on regions that are visually clipped such that they are not visible
 */
DvtSvgDocumentUtils.isEventAvailableOutsideClip = function() {
  return DvtAgent.isBrowserSafari();
};

/*
 * : In Firefox 4, horizontal/vertical polylines must be bent by 0.01 pixes to show up when fitlers are used
 */
DvtSvgDocumentUtils.isFilterStraightLineAdjustmentNeeded = function() {
  return DvtAgent.isPlatformGecko();
};


/**
 * Work around , where removing filters from children or
 * removing children that have filters can leave behind rendering artifacts
 * in Firefox.
 * @param displayable The displayable to refresh.
 */
DvtSvgDocumentUtils.fixGeckoContainerForFilter = function(displayable) {
  if (displayable && DvtAgent.isPlatformGecko()) {
    var elem = displayable.getImpl().getElem();
    if (elem) {
      var transformAttr = DvtToolkitUtils.getAttrNullNS(elem, 'transform');
      //error message logged to Firefox console if transformAttr is null,
      //so initialize it to identity matrix instead
      if (!transformAttr) {
        transformAttr = 'matrix(1 0 0 1 0 0)';
      }
      DvtToolkitUtils.setAttrNullNS(elem, 'transform', transformAttr);
    }
  }
};


/**
 * Cancel a DOM event.
 *
 * @param {object}  e  event object to cancel
 */
DvtSvgDocumentUtils.cancelDomEvent = function(e)
{
  //if (!e)
  //{
  //  e = window.event;
  //}
  if (e)
  {
    if (e.stopPropagation)
      e.stopPropagation();
    if (e.preventDefault)
      e.preventDefault();
    e.cancelBubble = true;
    e.cancel = true;
    e.returnValue = false;
  }
};


/**
 * Adds drag listeners to an object. The drag will have to start from the object, but the following mouse/touch
 * gestures will be captured even if it goes outside the object. The move and end listeners are added to the document
 * when the drag starts, and will be cleaned up when the drag ends.
 * @param {DvtDisplayable} displayable The draggable displayable.
 * @param {function} dragStartCallback The callback function that is called on drag start. It should return a boolean
 *     indicating if the drag is initiated.
 * @param {function} dragMoveCallback The callback function that is called on drag move.
 * @param {function} dragEndCallback The callback function that is called on drag end.
 * @param {object} callbackObj The object of the callback functions.
 * @param {boolean} bPreventClick (optional) Whether click should be prevented at the end of drag.
 * @return {function} A callback function to remove all listeners
 */
DvtSvgDocumentUtils.addDragListeners = function(displayable, dragStartCallback, dragMoveCallback, dragEndCallback, callbackObj, bPreventClick) {
  var isTouch = DvtAgent.isTouchDevice();
  var context = displayable.getCtx();
  var bodyStyle = DvtAgent.isEnvironmentBrowser() ? document.body.style : {};

  var dragStartStaticCallback = function(dvtEvent) {
    if (dragStartCallback.call(callbackObj, dvtEvent)) {
      // Add dragMove and dragEnd event listeners to the document so that the gestures that follow can be captured
      // outside the component.
      if (isTouch) {
        document.addEventListener('touchmove', dragMoveStaticCallback, true);
        document.addEventListener('touchend', dragEndStaticCallback, true);
      }
      else {
        document.addEventListener('mousemove', dragMoveStaticCallback, true);
        document.addEventListener('mouseup', dragEndStaticCallback, true);

        if (bPreventClick)
          document.addEventListener('click', clickStaticCallback, true);
      }

      // Save the original CSS values
      DvtSvgDocumentUtils._webkitUserSelect = bodyStyle.webkitUserSelect;
      DvtSvgDocumentUtils._mozUserSelect = bodyStyle.MozUserSelect;

      // Disable selection during drag
      bodyStyle.webkitUserSelect = 'none';
      bodyStyle.MozUserSelect = 'none';
    }
  };

  var dragMoveStaticCallback = function(event) {
    // Convert the native event and call the callback
    var dvtEvent = DvtEventFactory.newEvent(event, context);
    dragMoveCallback.call(callbackObj, dvtEvent);
  };

  var dragEndStaticCallback = function(event) {
    // Clean up the dragMove and dragEnd event listeners
    if (isTouch) {
      document.removeEventListener('touchmove', dragMoveStaticCallback, true);
      document.removeEventListener('touchend', dragEndStaticCallback, true);
    }
    else {
      document.removeEventListener('mousemove', dragMoveStaticCallback, true);
      document.removeEventListener('mouseup', dragEndStaticCallback, true);

      if (!isTouch)
        // Use timeout because the click event is fired after mouseup. We can't remove the listener in the
        // clickCallback because the click event may not be fired depending on where the mouseup happens.
        setTimeout(function() {
          document.removeEventListener('click', clickStaticCallback, true);
        }, 50);
    }

    // Restore selection
    bodyStyle.webkitUserSelect = DvtSvgDocumentUtils._webkitUserSelect;
    bodyStyle.MozUserSelect = DvtSvgDocumentUtils._mozUserSelect;

    // Convert the native event and call the callback
    var dvtEvent = DvtEventFactory.newEvent(event, context);
    dragEndCallback.call(callbackObj, dvtEvent);
  };

  var clickStaticCallback = function(event) {
    // Prevent click from occurring (e.g. to prevent clearing selection)
    event.stopPropagation();
  };

  // Add the dragStart listener to the object.
  if (isTouch) {
    displayable.addEvtListener(DvtTouchEvent.TOUCHSTART, dragStartStaticCallback);
  } else {
    displayable.addEvtListener(DvtMouseEvent.MOUSEDOWN, dragStartStaticCallback);
  }

  // return function to cleanup listeners
  return function() {
    // Clean up the dragMove and dragEnd event listeners
    if (isTouch) {
      document.removeEventListener('touchmove', dragMoveStaticCallback, true);
      document.removeEventListener('touchend', dragEndStaticCallback, true);
    }
    else {
      document.removeEventListener('mousemove', dragMoveStaticCallback, true);
      document.removeEventListener('mouseup', dragEndStaticCallback, true);
      document.removeEventListener('click', clickStaticCallback, true);
    }

    // Restore selection
    bodyStyle.webkitUserSelect = DvtSvgDocumentUtils._webkitUserSelect;
    bodyStyle.MozUserSelect = DvtSvgDocumentUtils._mozUserSelect;
  };
};
/**
 * DvtSvgImageLoader.loadImage("pic.png", function(image) {
 *   alert(image.width);
 *   alert(image.height);
 * });
 *
 */

/*
 * DvtSvgImageLoader
 */
var DvtSvgImageLoader = { _cache: {} };

DvtObj.createSubclass(DvtSvgImageLoader, DvtObj, 'DvtSvgImageLoader');


/**
 * Copied from AdfIEAgent and AdfAgent
 * Adds an event listener that fires in the non-Capture phases for the specified
 * eventType.  There is no ordering guaranteee, nor is there a guarantee
 * regarding the number of times that an event listener will be called if
 * it is added to the same element multiple times.
 */
DvtSvgImageLoader.addBubbleEventListener = function(element, type, listener) 
{
  if (window.addEventListener) {
    DvtToolkitUtils.addDomEventListener(element, type, listener, false);
    return true;
  }
  // Internet Explorer
  else if (window.attachEvent) {
    element.attachEvent('on' + type, listener);
    return true;
  }
  else {
    return false;
  }
};


/**
 * @this {DvtSvgImageLoader}
 * Load an image.
 *
 * @param src URL of the image to load
 * @param onComplete function to call when the image is loaded
 *
 * @return image if image is already loaded
 *         otherwise null
 */
DvtSvgImageLoader.loadImage = function(src, onComplete) {
  //first look for a cached copy of the image
  var entry = this._cache[src];

  //if cached image found, use it
  if (entry) {
    // if image is loading, add listener to queue
    if (entry._image) {
      DvtSvgImageLoader._addListenerToQueue(entry._listeners, onComplete);
    }
    // if image is loaded, call onComplete function
    else {
      if (onComplete) {
        onComplete(entry);
      }
      // no handler, just return image width and height
      return entry;
    }
  }
  //if cached image not found, load the new image
  else {
    this.loadNewImage(src, onComplete);
  }
  return null;
};


/**
 * @this {DvtSvgImageLoader}
 * Load a new image.
 *
 * @param src URL of the image to load
 * @param onComplete function to call when the image is loaded
 */
DvtSvgImageLoader.loadNewImage = function(src, onComplete) {

  // create img element
  var image = document.createElement('img');

  // add a new entry to the image cached
  // depending on the state, entry value contains different attributes
  // when image is loading, entry contains image element and listeners
  // when image is loaded, entry contains image width and height
  var newEntry = {
    _listeners: [],
    url: src,
    _image: image
  };
  if (onComplete) {
    //    newEntry._listeners.push(onComplete);
    DvtSvgImageLoader._addListenerToQueue(newEntry._listeners, onComplete);
  }

  this._cache[src] = newEntry;

  DvtSvgImageLoader.addBubbleEventListener(image, 'load', function(e) {
    // copy width and height to entry and delete image element
    newEntry.width = image.width;
    newEntry.height = image.height;
    delete newEntry._image;

    // notify all listeners image loaded and delete all listeners
    var i;
    var len = newEntry._listeners.length;
    for (i = 0; i < len; i++) {
      // if there is a listener
      if (newEntry._listeners[i]) {
        newEntry._listeners[i](newEntry);
      }
    }
    delete newEntry._listeners;
  });

  image.src = src;

};


// add a listener to the queue only if it doesn't already exist
DvtSvgImageLoader._addListenerToQueue = function(queue, listener) {
  if (listener) {
    for (var i = 0; i < queue.length; i++) {
      if (queue[i] === listener)
        return;
    }
    queue.push(listener);
  }
};

// Used for rendering SVG content in to an HTML div wrapper
/**
 * @param {DvtContext} context
 * @param {string} domElementId
 * @constructor
 */
var DvtHtmlRichTooltipManager = function(context, domElementId) {
  this.Init(context, domElementId);
};

DvtObj.createSubclass(DvtHtmlRichTooltipManager, DvtHtmlTooltipManager, 'DvtHtmlRichTooltipManager');


/**
 * @param {DvtContext} context
 * @param {string} domElementId
 */
DvtHtmlRichTooltipManager.prototype.Init = function(context, domElementId) 
{
  this._storedContexts = new Object();
  DvtHtmlRichTooltipManager.superclass.Init.call(this, context, domElementId);
};

DvtHtmlRichTooltipManager.prototype.InitContent = function(tooltip) {
  // For an svg custom tooltip, the context is the new svg context for the svg document overlay.
  tooltip.innerHTML = '';
  var context = new DvtContext(tooltip, 'DvtCustomTooltip');
  this._storedContexts[this._domElementId] = context;
};

DvtHtmlRichTooltipManager.prototype.GetStoredContext = function() {
  return this._storedContexts[this._domElementId];
};

DvtHtmlRichTooltipManager.prototype.showRichElement = function(x, y, renderable, useOffset)
{
  this.showRichElementAtPosition(x, y, renderable, useOffset, false);
};

DvtHtmlRichTooltipManager.prototype.showRichElementAtPosition = function(x, y, renderable, useOffset, noEvents) {

  var tooltip = this.getTooltipElem();
  tooltip.style.position = 'absolute';
  tooltip.style.zIndex = 2147483647;

  var context = this.GetStoredContext();
  if (context) {
    var stage = context.getStage();
    stage.removeChildren();
    var rootDisplayable = renderable.getRootDisplayable();
    stage.addChild(rootDisplayable);

    if (renderable && renderable.Render) {
      renderable.Render();
    }

    var svg = stage.getImpl().getSVGRoot();
    DvtToolkitUtils.setAttrNullNS(svg, 'width', renderable.getDisplayWidth());
    DvtToolkitUtils.setAttrNullNS(svg, 'height', renderable.getDisplayHeight());

    this.PostElement(tooltip, x, y, noEvents, useOffset);
  }
};

DvtHtmlRichTooltipManager.prototype.hideTooltip = function()
{
  DvtHtmlRichTooltipManager.superclass.hideTooltip.call(this);
  var context = this.GetStoredContext();
  if (context) {
    var stage = context.getStage();
    stage.removeChildren();
  }
};
// Copyright (c) 2008, 2015, Oracle and/or its affiliates. All rights reserved.
/**
  * A factory class for SVG to create object implementations.
  * @extends {DvtObj}
  * @class DvtSvgImplFactory  A factory class to create SVG implementation objects.
  * @constructor  Creates SVG implementation objects.
  */
var DvtSvgImplFactory = function(context) {
  this._context = context;
};

DvtObj.createSubclass(DvtSvgImplFactory, DvtObj, 'DvtSvgImplFactory');


/**
 *  Returns a new SVG <defs> element
 *  @private
 */
DvtSvgImplFactory.prototype.newDefs = function() {
  return DvtSvgShapeUtils.createElement('defs');
};


/**
 * Obtain imageLoader singleton
 * @override
 */
DvtSvgImplFactory.prototype.getImageLoader = function() {
  if (DvtAgent.isEnvironmentBrowser())
    return DvtSvgImageLoader;
  else
    return DvtJavaImageLoader;
};


/**
 * @override
 */
DvtSvgImplFactory.prototype.getDocumentUtils = function() {
  return DvtSvgDocumentUtils;
};


/**
 * @override
 */
DvtSvgImplFactory.prototype.newParser = function() {
  if (DvtAgent.isEnvironmentBrowser())
    return new DvtDomXmlParser();
  else
    return new DvtJavaXmlParser();
};


/**
 * @override
 */
DvtSvgImplFactory.prototype.newTooltipManager = function(id) {
  return new DvtHtmlTooltipManager(this._context, id);
};


/**
 * @override
 */
DvtSvgImplFactory.prototype.newRichTooltipManager = function(id) {
  return new DvtHtmlRichTooltipManager(this._context, id);
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/**
 * @constructor
 */
var DvtSvgFilterContext = function()
{
  this.Init();
};

DvtObj.createSubclass(DvtSvgFilterContext, DvtObj, 'DvtSvgFilterContext');

DvtSvgFilterContext.prototype.Init = function()
{
  this._regionPctRect = new DvtRectangle(-10, -10, 120, 120);
  this._counter = 0;
  this._resultIdsUnder = [];
  this._resultIdsOver = [];
};

DvtSvgFilterContext.prototype.getRegionPctRect = function()
{
  return this._regionPctRect;
};

DvtSvgFilterContext.prototype.getResultIdsUnder = function()
{
  return this._resultIdsUnder;
};

DvtSvgFilterContext.prototype.getResultIdsOver = function()
{
  return this._resultIdsOver;
};

DvtSvgFilterContext.prototype.createResultId = function(id)
{
  if (!id)
  {
    id = 'filtRes';
  }
  return (id + (this._counter++));
};
// Copyright (c) 2011, 2015, Oracle and/or its affiliates. All rights reserved.



/**
  *   Static SVG filter routines.
  *   @class DvtSvgFilterUtils
  *   @constructor
  */
var DvtSvgFilterUtils = function()
{};

DvtObj.createSubclass(DvtSvgFilterUtils, DvtObj, 'DvtSvgFilterUtils');

DvtSvgFilterUtils._counter = 0;

DvtSvgFilterUtils.createFilter = function(effects, svgDisplayable)
{
  var filt = DvtSvgShapeUtils.createElement('filter', DvtSvgFilterUtils.CreateFilterId());
  var filtContext = new DvtSvgFilterContext();
  for (var i = 0; i < effects.length; i++)
  {
    var effect = effects[i];
    if (effect)
    {
      DvtSvgFilterUtils.CreateFilterPrimitives(filt, effect, svgDisplayable, filtContext);
    }
  }

  // : When bounding box of svg element has zero height or width, userSpaceOnUse must be used
  // Otherwise, the element will disappear
  var userSpaceOnUse = false;
  if (svgDisplayable) {
    var boundsRect = svgDisplayable.getElem().getBBox();
    if (boundsRect) {
      var width = boundsRect.width;
      var height = boundsRect.height;
      if (height == 0 || width == 0) {
        var stroke;
        //if displayable is not a shape, for example a container, then it doesn't have a stroke
        if (svgDisplayable.getStroke) {
          stroke = svgDisplayable.getStroke();
        }
        var adjustWidth = 10;
        if (stroke) {
          adjustWidth = stroke.getWidth();
        }
        var x = boundsRect.x;
        var y = boundsRect.y;

        // Firefox 4 requires the line to be bend slightly when feColorMatrix is used
        if (DvtSvgDocumentUtils.isFilterStraightLineAdjustmentNeeded()) {
          if (svgDisplayable instanceof DvtPolyline) {
            var points = DvtArrayUtils.copy(svgDisplayable.getPoints());
            if (width == 0) {
              points[0] = points[0] + 0.01;
            }
            if (height == 0) {
              points[1] = points[1] + 0.01;
            }

            var bentPoints = DvtSvgShapeUtils.convertPointsArray(points);
            DvtToolkitUtils.setAttrNullNS(svgDisplayable.getElem(), 'points', bentPoints);
          }
        }

        if (height == 0) {
          height = 2 * adjustWidth;
          y -= adjustWidth;
        }
        if (width == 0) {
          width = 2 * adjustWidth;
          x -= adjustWidth;
        }

        DvtToolkitUtils.setAttrNullNS(filt, 'x', x);
        DvtToolkitUtils.setAttrNullNS(filt, 'y', y);
        DvtToolkitUtils.setAttrNullNS(filt, 'width', width);
        DvtToolkitUtils.setAttrNullNS(filt, 'height', height);
        DvtToolkitUtils.setAttrNullNS(filt, 'filterUnits', 'userSpaceOnUse');
        userSpaceOnUse = true;
      }
    }
  }
  if (!userSpaceOnUse) {
    if (filtContext.getRegionPctRect().x != -10 && filtContext.getRegionPctRect().x != 'Infinity' && filtContext.getRegionPctRect().x != '-Infinity')
    {
      DvtToolkitUtils.setAttrNullNS(filt, 'x', filtContext.getRegionPctRect().x + '%');
    }
    if (filtContext.getRegionPctRect().y != -10 && filtContext.getRegionPctRect().y != 'Infinity' && filtContext.getRegionPctRect().y != '-Infinity')
    {
      DvtToolkitUtils.setAttrNullNS(filt, 'y', filtContext.getRegionPctRect().y + '%');
    }
    if (filtContext.getRegionPctRect().w != 120 && filtContext.getRegionPctRect().w != 'Infinity' && filtContext.getRegionPctRect().w != '-Infinity')
    {
      DvtToolkitUtils.setAttrNullNS(filt, 'width', filtContext.getRegionPctRect().w + '%');
    }
    if (filtContext.getRegionPctRect().h != 120 && filtContext.getRegionPctRect().h != 'Infinity' && filtContext.getRegionPctRect().h != '-Infinity')
    {
      DvtToolkitUtils.setAttrNullNS(filt, 'height', filtContext.getRegionPctRect().h + '%');
    }

  }


  var numResultsUnder = filtContext.getResultIdsUnder().length;
  var numResultsOver = filtContext.getResultIdsOver().length;
  var elemMN;
  var j;

  var elemM = DvtSvgShapeUtils.createElement('feMerge');
  if (numResultsUnder > 0)
  {
    for (j = 0; j < numResultsUnder; j++)
    {
      elemMN = DvtSvgShapeUtils.createElement('feMergeNode');
      DvtToolkitUtils.setAttrNullNS(elemMN, 'in', filtContext.getResultIdsUnder()[j]);
      DvtToolkitUtils.appendChildElem(elemM, elemMN);
    }
  }
  elemMN = DvtSvgShapeUtils.createElement('feMergeNode');
  DvtToolkitUtils.setAttrNullNS(elemMN, 'in', 'SourceGraphic');
  DvtToolkitUtils.appendChildElem(elemM, elemMN);
  if (numResultsOver > 0)
  {
    for (j = 0; j < numResultsOver; j++)
    {
      elemMN = DvtSvgShapeUtils.createElement('feMergeNode');
      DvtToolkitUtils.setAttrNullNS(elemMN, 'in', filtContext.getResultIdsOver()[j]);
      DvtToolkitUtils.appendChildElem(elemM, elemMN);
    }
  }
  DvtToolkitUtils.appendChildElem(filt, elemM);

  return filt;
};

DvtSvgFilterUtils.CreateFilterPrimitives = function(filter, effect, svgDisplayable, filtContext)
{
  if (effect instanceof DvtShadow)
  {
    DvtSvgShadowUtils.createFilterPrimitives(filter, effect, svgDisplayable, filtContext);
  }
  return null;
};

DvtSvgFilterUtils.CreateFilterId = function()
{
  return ('filt' + (DvtSvgFilterUtils._counter++));
};
// Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.
/*---------------------------------------------------------------------------*/
/*    DvtSvgGradientUtils    A static class for SVG gradient property manip- */
/*                           ulation.                                        */
/*---------------------------------------------------------------------------*/
/**
  *   DvtSvgGradientUtils    A static class for SVG gradient property manipulation.
  *   @class DvtSvgGradientUtils
  *   @constructor
  */
var DvtSvgGradientUtils = function()
{};

DvtObj.createSubclass(DvtSvgGradientUtils, DvtObj, 'DvtSvgGradientUtils');


/**
  *  Static method to create an SVG element and apply gradient properties to it.
  *  @param {Object}  Either a DvtGradientFill or DvtGradientStroke derivative to apply.
  */
DvtSvgGradientUtils.createElem = function(grad, id)
{
  var bLinear = ((grad instanceof DvtLinearGradientFill) || (grad instanceof DvtLinearGradientStroke));
  var elemGrad = DvtSvgShapeUtils.createElement((bLinear ? 'linearGradient' : 'radialGradient'), id);

  var i;
  var arColors = grad.getColors();
  var arAlphas = grad.getAlphas();
  var arStops = grad.getStops();
  var arBounds = grad.getBounds();
  var len = arColors.length;

  for (i = 0; i < len; i++) {
    var elem = DvtSvgShapeUtils.createElement('stop');
    DvtToolkitUtils.setAttrNullNS(elem, 'offset', '' + (arStops[i] * 100) + '%');
    var color = arColors[i];
    if (color) {
      var alpha = arAlphas[i];
      // Workaround for Safari where versions < 5.1 show rgba values as black
      if ((DvtAgent.isEnvironmentBatik() || DvtAgent.isBrowserSafari()) && color.indexOf('rgba') !== - 1) {
        DvtToolkitUtils.setAttrNullNS(elem, 'stop-color', DvtColorUtils.getRGB(color));
        // Use alpa in rgba value as a multiplier to the alpha set on the object as this is what svg does.
        if (alpha != null)
          DvtToolkitUtils.setAttrNullNS(elem, 'stop-opacity', DvtColorUtils.getAlpha(color) * alpha, 1);
        else
          DvtToolkitUtils.setAttrNullNS(elem, 'stop-opacity', DvtColorUtils.getAlpha(color), 1);
      }
      else {
        DvtToolkitUtils.setAttrNullNS(elem, 'stop-color', color);
        if (alpha != null)
          DvtToolkitUtils.setAttrNullNS(elem, 'stop-opacity', alpha, 1);
      }
    }
    DvtToolkitUtils.appendChildElem(elemGrad, elem);
  }

  //  If no gradient bounding box specified, will use the object's boundary box.

  var bUseObjBBox = (! arBounds ||
      ((arBounds[0] == 0) && (arBounds[1] == 0) && (arBounds[2] == 0) && (arBounds[3] == 0)));

  //  The angle of rotation for SVG is clockwise, so must convert from the standard
  //  anti-clockwise convention used by the middle-tier xml. Rotation is
  //  at the mid-point of the bounding box.

  if (bLinear) {
    var angle = grad.getAngle();

    var x1 = '0%';
    var y1 = '0%';
    var x2 = '100%';
    var y2 = '0%';

    var setGradientVector = true;

    if (bUseObjBBox) {

      // Set gradient vector for gradientUnits = "objectBoundingBox"
      // (the default value for gradientUnits).

      if (angle === 45) {
        y1 = '100%';
        x2 = '100%';
      }
      else if (angle === 90) {
        y1 = '100%';
        x2 = '0%';
      }
      else if (angle === 135) {
        x1 = '100%';
        x2 = '0%';
        y2 = '100%';
      }
      else if (angle === 270) {
        x2 = '0%';
        y2 = '100%';
      }
      else if (angle !== 0) {
        angle = -angle;
        DvtToolkitUtils.setAttrNullNS(elemGrad, 'gradientTransform', 'rotate(' + DvtToolkitUtils.roundDecimal(angle) + ' ' + '.5 .5)');
        setGradientVector = false;  // no need to change the default gradient vector, since we are rotating the
        // gradient via gradientTransform
      }
    }
    else {

      //  Apply specified bounding box

      // use gradientUnits = "userSpaceOnUse"; for when we want to account for bounding box
      // first rotate the gradient by the specified angle
      // then scale this gradient to the width and bounds specifed in arBounds
      // then translate the gradient
      // note that if the width and height of the gradient are not equal, then the actual angle of the
      // gradient is different from the specified angle argument
      // However, this is the same behavior as how Flash processes the bounding box argument
      // Finally, note that in SVG, the order of transform operations is right to left

      DvtToolkitUtils.setAttrNullNS(elemGrad, 'gradientUnits', 'userSpaceOnUse');

      // set gradient vector to span the middle of the unit square
      x1 = '0';
      y1 = '0.5';
      x2 = '1';
      y2 = '0.5';

      var scaleX = arBounds[2];
      var scaleY = arBounds[3];
      var translateX = arBounds[0];
      var translateY = arBounds[1];

      angle = -angle;
      var rotateTransformStr = 'rotate(' + DvtToolkitUtils.roundDecimal(angle) + ' ' + '.5 .5)';
      var scaleTransformStr = 'scale(' + DvtToolkitUtils.roundDecimal(scaleX) + ' ' + DvtToolkitUtils.roundDecimal(scaleY) + ')';
      var translateTransformStr = 'translate(' + DvtToolkitUtils.roundDecimal(translateX) + ' ' + DvtToolkitUtils.roundDecimal(translateY) + ')';
      var boundingBoxTransformStr = scaleTransformStr + ' ' + rotateTransformStr;

      if (translateX != 0 || translateY != 0) {
        boundingBoxTransformStr = translateTransformStr + ' ' + boundingBoxTransformStr;
      }

      // in the case of a bounding box, to set up the gradient, we need both gradientTransform and
      // a gradient vector centered in the unit square

      DvtToolkitUtils.setAttrNullNS(elemGrad, 'gradientTransform', boundingBoxTransformStr);
    }

    if (setGradientVector) {
      DvtToolkitUtils.setAttrNullNS(elemGrad, 'x1', x1);
      DvtToolkitUtils.setAttrNullNS(elemGrad, 'y1', y1);
      DvtToolkitUtils.setAttrNullNS(elemGrad, 'x2', x2);
      DvtToolkitUtils.setAttrNullNS(elemGrad, 'y2', y2);
    }
  }
  else {    //  Radial gradient

    if (! bUseObjBBox) {

      DvtToolkitUtils.setAttrNullNS(elemGrad, 'gradientUnits', 'userSpaceOnUse');

      DvtToolkitUtils.setAttrNullNS(elemGrad, 'cx', grad.getCx());
      DvtToolkitUtils.setAttrNullNS(elemGrad, 'cy', grad.getCy());
      DvtToolkitUtils.setAttrNullNS(elemGrad, 'fx', grad.getCx());
      DvtToolkitUtils.setAttrNullNS(elemGrad, 'fy', grad.getCy());
      DvtToolkitUtils.setAttrNullNS(elemGrad, 'r', grad.getRadius());
    }
  }
  return elemGrad;
};
// Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.
/*---------------------------------------------------------------------------*/
/*    DvtSvgImageFillUtils    A static class for SVG image fill property     */
/*                           manipulation.                                   */
/*---------------------------------------------------------------------------*/
/**
  *   A static class for SVG image fill property manipulation.
  *   @class DvtSvgImageFillUtils
  *   @constructor
  */
var DvtSvgImageFillUtils = function()
{};

DvtObj.createSubclass(DvtSvgImageFillUtils, DvtObj, 'DvtSvgImageFillUtils');


/**
  *  Static method to create an SVG element and apply image fill properties
  *  to it.
  *  @param {DvtImageFill}
  */
DvtSvgImageFillUtils.createElem = function(imageFill, id)
{
  /* Example:
      <defs>
        <pattern id="img1" patternUnits="userSpaceOnUse" width="20" height="20" >
          <image xlink:href="400.png" x="0" y="0"  width="20" height="20" />
        </pattern>
      </defs>

      <rect x="0" y="0" height="100" width="100" fill="url(#img1)"/>
   */

  var elemPat = DvtSvgShapeUtils.createElement('pattern', id);
  var elemImg = DvtSvgShapeUtils.createElement('image', id);

  var src = imageFill.getSrc();
  var bound = imageFill.getBound();
  var repeat = imageFill.getRepeat();

  if (bound) {
    DvtToolkitUtils.setAttrNullNS(elemPat, 'x', bound.x);
    DvtToolkitUtils.setAttrNullNS(elemPat, 'y', bound.y);

    DvtToolkitUtils.setAttrNullNS(elemImg, 'x', bound.x);
    DvtToolkitUtils.setAttrNullNS(elemImg, 'y', bound.y);

    DvtToolkitUtils.setAttrNullNS(elemPat, 'width', bound.w);
    DvtToolkitUtils.setAttrNullNS(elemPat, 'height', bound.h);

    DvtToolkitUtils.setAttrNullNS(elemImg, 'width', bound.w);
    DvtToolkitUtils.setAttrNullNS(elemImg, 'height', bound.h);
    DvtToolkitUtils.setAttrNullNS(elemPat, 'patternUnits', 'userSpaceOnUse');

    /*
      // tile the background image
      if (! repeat || repeat != "no-repeat") {
      }
      // stretch out the background image
      else {
        DvtToolkitUtils.setAttrNullNS(elemPat, "patternUnits", "objectBoundingBox");
        DvtToolkitUtils.setAttrNullNS(elemPat, 'width', "100%");
        DvtToolkitUtils.setAttrNullNS(elemPat, 'height', "100%");
      }
      */

    if (src) {
      DvtToolkitUtils.setAttrNS(elemImg, DvtImage.XLINK_NS, 'xlink:href', src);
    }
  }

  DvtToolkitUtils.appendChildElem(elemPat, elemImg);

  return elemPat;
};
// Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
/*---------------------------------------------------------------------------*/
/*    DvtSvgPatternFillUtils    A static class for SVG pattern fill property */
/*                              manipulation.                                */
/*---------------------------------------------------------------------------*/
/**
  *   A static class for creating SVG pattern fills.
  *   @class DvtSvgPatternFillUtils
  *   @constructor
  */
var DvtSvgPatternFillUtils = function()
{};

DvtObj.createSubclass(DvtSvgPatternFillUtils, DvtObj, 'DvtSvgPatternFillUtils');


/**   @private @final @type {String}  */
DvtSvgPatternFillUtils._SM_WIDTH = 8;


/**   @private @final @type {String}  */
DvtSvgPatternFillUtils._SM_HEIGHT = 8;


/**   @private @final @type {String}  */
DvtSvgPatternFillUtils._LG_WIDTH = 16;


/**   @private @final @type {String}  */
DvtSvgPatternFillUtils._LG_HEIGHT = 16;


/**
  *  Static method to create an SVG pattern element.
  *  @param {DvtPatternFill}  patternFill  pattern fill object
  *  @param {string}  id  pattern identifier
  */
DvtSvgPatternFillUtils.createElem = function(patternFill, id)
{
  var elemPat = DvtSvgShapeUtils.createElement('pattern', id);

  var pattern = patternFill.getPattern();
  var bSmall = DvtSvgPatternFillUtils.IsSmallPattern(pattern);
  var ww;
  var hh;
  if (bSmall)
  {
    ww = DvtSvgPatternFillUtils._SM_WIDTH;
    hh = DvtSvgPatternFillUtils._SM_HEIGHT;
  }
  else
  {
    ww = DvtSvgPatternFillUtils._LG_WIDTH;
    hh = DvtSvgPatternFillUtils._LG_HEIGHT;
  }

  DvtToolkitUtils.setAttrNullNS(elemPat, 'x', 0);
  DvtToolkitUtils.setAttrNullNS(elemPat, 'y', 0);
  DvtToolkitUtils.setAttrNullNS(elemPat, 'width', ww);
  DvtToolkitUtils.setAttrNullNS(elemPat, 'height', hh);
  DvtToolkitUtils.setAttrNullNS(elemPat, 'patternUnits', 'userSpaceOnUse');
  var mat = patternFill.getMatrix();
  if (mat) {
    var sMat = 'matrix(' + mat.getA() + ',' + mat.getC() + ',' + mat.getB() + ',' + mat.getD() + ',' + mat.getTx() + ',' + mat.getTy() + ')';
    DvtToolkitUtils.setAttrNullNS(elemPat, 'patternTransform', sMat);
  }

  DvtSvgPatternFillUtils.CreatePatternElems(patternFill, elemPat);

  return elemPat;
};


/**
  * Determine if the pattern is large or small.
  *
  * @param {string}  pattern  constant representing the pattern
  * @protected
  */
DvtSvgPatternFillUtils.IsSmallPattern = function(pattern)
{
  return (pattern.charAt(0) === 's');
};


/**
  * Determine if the pattern is large or small.
  *
  * @param {DvtPatternFill}  patternFill  pattern fill object
  * @param {object}  parentElem  parent pattern DOM element
  * @protected
  */
DvtSvgPatternFillUtils.CreatePatternElems = function(patternFill, parentElem)
{
  var rightX;
  var bottomY;
  var w;
  var h;
  var halfW;
  var halfH;
  var elem;

  var pattern = patternFill.getPattern();
  var sColor = patternFill.getColor();
  var color = DvtColorUtils.getRGB(sColor);
  var alpha = DvtColorUtils.getAlpha(sColor);
  var sBackgroundColor = patternFill.getBackgroundColor();
  var backgroundColor = DvtColorUtils.getRGB(sBackgroundColor);
  var backgroundAlpha = DvtColorUtils.getAlpha(sBackgroundColor);

  var bSmall = DvtSvgPatternFillUtils.IsSmallPattern(pattern);
  if (bSmall)
  {
    rightX = DvtSvgPatternFillUtils._SM_WIDTH;
    bottomY = DvtSvgPatternFillUtils._SM_HEIGHT;
    w = DvtSvgPatternFillUtils._SM_WIDTH;
    h = DvtSvgPatternFillUtils._SM_HEIGHT;
  }
  else
  {
    rightX = DvtSvgPatternFillUtils._LG_WIDTH;
    bottomY = DvtSvgPatternFillUtils._LG_HEIGHT;
    w = DvtSvgPatternFillUtils._LG_WIDTH;
    h = DvtSvgPatternFillUtils._LG_HEIGHT;
  }

  //if a background color is specified, then fill a rect with that color
  //before drawing the pattern elements on top of it
  if (backgroundColor && (backgroundAlpha > 0))
  {
    elem = DvtSvgShapeUtils.createElement('rect');

    DvtToolkitUtils.setAttrNullNS(elem, 'stroke', backgroundColor);
    DvtToolkitUtils.setAttrNullNS(elem, 'stroke-opacity', backgroundAlpha);
    DvtToolkitUtils.setAttrNullNS(elem, 'stroke-width', 1);
    DvtToolkitUtils.setAttrNullNS(elem, 'fill', backgroundColor);
    DvtToolkitUtils.setAttrNullNS(elem, 'fill-opacity', backgroundAlpha);

    DvtToolkitUtils.setAttrNullNS(elem, 'x', 0);
    DvtToolkitUtils.setAttrNullNS(elem, 'y', 0);
    DvtToolkitUtils.setAttrNullNS(elem, 'width', rightX);
    DvtToolkitUtils.setAttrNullNS(elem, 'height', bottomY);

    DvtToolkitUtils.appendChildElem(parentElem, elem);
  }

  if (pattern === DvtPatternFill.SM_DIAG_UP_LT ||
      pattern === DvtPatternFill.LG_DIAG_UP_LT)
  {
    elem = DvtSvgShapeUtils.createElement('path');
    DvtToolkitUtils.setAttrNullNS(elem, 'stroke', color);
    DvtToolkitUtils.setAttrNullNS(elem, 'stroke-opacity', alpha);
    DvtToolkitUtils.setAttrNullNS(elem, 'stroke-width', 1);
    DvtToolkitUtils.setAttrNullNS(elem, 'stroke-linecap', 'square');

    DvtToolkitUtils.setAttrNullNS(elem, 'd', DvtPathUtils.moveTo(0, -h / 2) + DvtPathUtils.lineTo(3 * w / 2, h) +
        DvtPathUtils.moveTo(-w / 2, 0) + DvtPathUtils.lineTo(w / 2, h));

    DvtToolkitUtils.appendChildElem(parentElem, elem);
  }
  else if (pattern === DvtPatternFill.SM_DIAG_UP_RT ||
           pattern === DvtPatternFill.LG_DIAG_UP_RT)
  {
    elem = DvtSvgShapeUtils.createElement('path');
    DvtToolkitUtils.setAttrNullNS(elem, 'stroke', color);
    DvtToolkitUtils.setAttrNullNS(elem, 'stroke-opacity', alpha);
    DvtToolkitUtils.setAttrNullNS(elem, 'stroke-width', 1);
    DvtToolkitUtils.setAttrNullNS(elem, 'stroke-linecap', 'square');

    DvtToolkitUtils.setAttrNullNS(elem, 'd', DvtPathUtils.moveTo(-w / 2, h) + DvtPathUtils.lineTo(w, -h / 2) +
        DvtPathUtils.moveTo(0, 3 * h / 2) + DvtPathUtils.lineTo(3 * w / 2, 0));

    DvtToolkitUtils.appendChildElem(parentElem, elem);
  }
  else if (pattern === DvtPatternFill.SM_CROSSHATCH ||
           pattern === DvtPatternFill.LG_CROSSHATCH)
  {
    //use path instead of two lines because it's more compact (uses one
    //DOM element instead of two)
    elem = DvtSvgShapeUtils.createElement('path');

    //  g.lineStyle((bSmall? 1 : 2), color) ;
    DvtToolkitUtils.setAttrNullNS(elem, 'stroke', color);
    DvtToolkitUtils.setAttrNullNS(elem, 'stroke-opacity', alpha);
    DvtToolkitUtils.setAttrNullNS(elem, 'stroke-width', 1);

    DvtToolkitUtils.setAttrNullNS(elem, 'd', 'M0,0' +
        'L' + rightX + ',' + bottomY +
        'M' + rightX + ',0' +
        'L0,' + bottomY);

    DvtToolkitUtils.appendChildElem(parentElem, elem);
  }
  else if (pattern === DvtPatternFill.SM_CHECK ||
           pattern === DvtPatternFill.LG_CHECK)
  {
    halfW = w / 2;
    halfH = h / 2;

    //use path instead of two rects because it's more compact (uses one
    //DOM element instead of two)
    elem = DvtSvgShapeUtils.createElement('path');

    DvtToolkitUtils.setAttrNullNS(elem, 'stroke', color);
    DvtToolkitUtils.setAttrNullNS(elem, 'stroke-opacity', alpha);
    DvtToolkitUtils.setAttrNullNS(elem, 'stroke-width', 1);
    DvtToolkitUtils.setAttrNullNS(elem, 'fill', color);
    DvtToolkitUtils.setAttrNullNS(elem, 'fill-opacity', alpha);

    DvtToolkitUtils.setAttrNullNS(elem, 'd', 'M' + halfW + ',0' +
        'L' + w + ',0' +
        'L' + w + ',' + halfH +
        'L' + halfW + ',' + halfH + 'Z' +
        'M0,' + halfH +
        'L' + halfW + ',' + halfH +
        'L' + halfW + ',' + h +
        'L0,' + h + 'Z');

    DvtToolkitUtils.appendChildElem(parentElem, elem);
  }
  else if (pattern === DvtPatternFill.SM_TRIANGLE_CHECK ||
           pattern === DvtPatternFill.LG_TRIANGLE_CHECK)
  {
    elem = DvtSvgShapeUtils.createElement('polygon');

    DvtToolkitUtils.setAttrNullNS(elem, 'stroke', color);
    DvtToolkitUtils.setAttrNullNS(elem, 'stroke-opacity', alpha);
    DvtToolkitUtils.setAttrNullNS(elem, 'stroke-width', 1);
    DvtToolkitUtils.setAttrNullNS(elem, 'fill', color);
    DvtToolkitUtils.setAttrNullNS(elem, 'fill-opacity', alpha);

    DvtToolkitUtils.setAttrNullNS(elem, 'points', '0,' + bottomY + ' ' +
        rightX + ',0 ' +
        rightX + ',' + bottomY);

    DvtToolkitUtils.appendChildElem(parentElem, elem);
  }
  else if (pattern === DvtPatternFill.SM_DIAMOND_CHECK ||
           pattern === DvtPatternFill.LG_DIAMOND_CHECK)
  {
    halfW = w / 2;
    halfH = h / 2;

    elem = DvtSvgShapeUtils.createElement('polygon');

    DvtToolkitUtils.setAttrNullNS(elem, 'stroke', color);
    DvtToolkitUtils.setAttrNullNS(elem, 'stroke-opacity', alpha);
    DvtToolkitUtils.setAttrNullNS(elem, 'stroke-width', 1);
    DvtToolkitUtils.setAttrNullNS(elem, 'fill', color);
    DvtToolkitUtils.setAttrNullNS(elem, 'fill-opacity', alpha);

    DvtToolkitUtils.setAttrNullNS(elem, 'points', '0,' + halfH + ' ' +
        halfW + ',0 ' +
        rightX + ',' + halfW + ' ' +
        halfW + ',' + bottomY);

    DvtToolkitUtils.appendChildElem(parentElem, elem);
  }
};
// Copyright (c) 2008, 2015, Oracle and/or its affiliates. All rights reserved.
/*---------------------------------------------------------------------------*/
/*   DvtSvgShadowUtils    A static class for SVG drop shadow property manip- */
/*                        ulation.                                           */
/*---------------------------------------------------------------------------*/
/**
  *  A static class for SVG drop shadow property manipulation.
  *  @class DvtSvgShadowUtils
  *  @constructor
  */
var DvtSvgShadowUtils = function()
{};

DvtObj.createSubclass(DvtSvgShadowUtils, DvtObj, 'DvtSvgShadowUtils');


/**
 * @private
 * @final
 */
DvtSvgShadowUtils.RADS_PER_DEGREE = (Math.PI / 180);


/**
  *  Static method to create an SVG filter element and apply shadow properties to it.
  *  @param {DvtShadow}
  *  @return {DOM_Element}  An SVG  &lt;filter&gt; element
  */
DvtSvgShadowUtils.createFilter = function(shadow, displayable)
{
  //  The following filter is created:

  //   <filter id="ds1">
  //     <feColorMatrix type="matrix" values="0 0 0 red 0
  //                                          0 0 0 green 0
  //                                          0 0 0 blue 0
  //                                          0 0 0 alpha 0">
  //     </feColorMatrix>
  //     <feGaussianBlur stdDeviation="5.166666666666666" result="blur1"></feGaussianBlur>
  //     <feOffset dx="5.75" dy="5.75" in="blur1" result="offset"></feOffset>
  //     <feMerge>
  //       <feMergeNode in="offset"></feMergeNode>
  //       <feMergeNode in="SourceGraphic"></feMergeNode>
  //     </feMerge>
  //   </filter>

  var filt;

  if (! shadow.isLocked()) {
    var filtContext = new DvtSvgFilterContext();
    filt = DvtSvgShapeUtils.createElement('filter', shadow._Id);
    DvtSvgShadowUtils.createFilterPrimitives(filt, shadow, displayable, filtContext);

    var elemM = DvtSvgShapeUtils.createElement('feMerge');
    var elemMN1 = DvtSvgShapeUtils.createElement('feMergeNode');
    DvtToolkitUtils.setAttrNullNS(elemMN1, 'in', filtContext.getResultIdsUnder()[0]);
    var elemMN2 = DvtSvgShapeUtils.createElement('feMergeNode');
    DvtToolkitUtils.setAttrNullNS(elemMN2, 'in', 'SourceGraphic');

    DvtToolkitUtils.appendChildElem(filt, elemM);
    DvtToolkitUtils.appendChildElem(elemM, elemMN1);
    DvtToolkitUtils.appendChildElem(elemM, elemMN2);
  }

  return filt;
};

DvtSvgShadowUtils.createFilterPrimitives = function(filt, shadow, svgDisplayable, filtContext)
{
  //: create inner shadow if necessary
  if (shadow._bInner)
  {
    DvtSvgShadowUtils.CreateInnerFilterPrimitives(filt, shadow, svgDisplayable, filtContext);
  }
  else
  {
    DvtSvgShadowUtils.CreateOuterFilterPrimitives(filt, shadow, svgDisplayable, filtContext);
  }
};


/**
 * @protected
 */
DvtSvgShadowUtils.CreateOuterFilterPrimitives = function(filt, shadow, svgDisplayable, filtContext)
{
  //if (! shadow.isLocked()) {

  var rgba = shadow._rgba;
  var red = DvtColorUtils.getRed(rgba) / 255;
  var green = DvtColorUtils.getGreen(rgba) / 255;
  var blue = DvtColorUtils.getBlue(rgba) / 255;
  var alpha = DvtColorUtils.getAlpha(rgba);
  var strength = shadow._strength;

  var origBlurX = shadow._blurX;
  var origBlurY = shadow._blurY;
  //adjust blur values so that SVG behaves more like Flash
  //: only calculate blur if blur is not set to 0
  var blurX = 0;
  var blurY = 0;
  if (shadow._blurX > 0)
  {
    blurX = Math.max(shadow._blurX / 3, 1);
  }
  if (shadow._blurY > 0)
  {
    blurY = Math.max(shadow._blurY / 3, 1);
  }
  var distance = shadow._distance;
  var angleDegs = shadow._angle;

  var angleRads = angleDegs * DvtSvgShadowUtils.RADS_PER_DEGREE;
  var dx = Math.cos(angleRads) * distance;
  var dy = Math.sin(angleRads) * distance;

  //:
  //if we have a boundsRect, increase the size of the filter so
  //that the shadow has room to display outside the shape
  var boundsRect = svgDisplayable.getDimensions(svgDisplayable.getParent());
  if (boundsRect)
  {
    //try to optimize based on how much of the shadow falls
    //on each side of the bounding box
    var absDistance = Math.abs(distance);
    //use two times the blur by default, because using it directly
    //still clips the shadow
    var padLeft = 2 * origBlurX;
    var padRight = 2 * origBlurX;
    var padTop = 2 * origBlurY;
    var padBottom = 2 * origBlurY;
    if (distance > 0)
    {
      padLeft -= absDistance;
      padTop -= absDistance;
      padRight += absDistance;
      padBottom += absDistance;
    }
    else if (distance < 0)
    {
      padLeft += absDistance;
      padTop += absDistance;
      padRight -= absDistance;
      padBottom -= absDistance;
    }
    if (padLeft < 0)
    {
      padLeft = 0;
    }
    if (padTop < 0)
    {
      padTop = 0;
    }
    if (padRight < 0)
    {
      padRight = 0;
    }
    if (padBottom < 0)
    {
      padBottom = 0;
    }
    var ratioLeft = (padLeft / boundsRect.w) * 100;
    var ratioRight = (padRight / boundsRect.w) * 100;
    var ratioTop = (padTop / boundsRect.h) * 100;
    var ratioBottom = (padBottom / boundsRect.h) * 100;
    if (filtContext.getRegionPctRect().x > -ratioLeft)
    {
      filtContext.getRegionPctRect().x = -ratioLeft;
    }
    if (filtContext.getRegionPctRect().y > -ratioTop)
    {
      filtContext.getRegionPctRect().y = -ratioTop;
    }
    if (filtContext.getRegionPctRect().w < (100 + ratioLeft + ratioRight))
    {
      filtContext.getRegionPctRect().w = (100 + ratioLeft + ratioRight);
    }
    if (filtContext.getRegionPctRect().h < (100 + ratioTop + ratioBottom))
    {
      filtContext.getRegionPctRect().h = (100 + ratioTop + ratioBottom);
    }
  }
  // The bounding box does not take into accoutn stroke-width. Need to adjust for DvtLine objects
  if (svgDisplayable instanceof DvtPolyline) {
    var strokeWidth = svgDisplayable.getStroke().getWidth();
    // If stroke is wider than 1 pixel, adjust y coordinate and height of shadow bounding box
    if (strokeWidth > 1) {
      filtContext.getRegionPctRect().h = filtContext.getRegionPctRect().h + strokeWidth;
      filtContext.getRegionPctRect().y = filtContext.getRegionPctRect().y - strokeWidth;
    }
  }

  var elemCM = DvtSvgShapeUtils.createElement('feColorMatrix');
  DvtToolkitUtils.setAttrNullNS(elemCM, 'in', 'SourceGraphic');
  DvtToolkitUtils.setAttrNullNS(elemCM, 'type', 'matrix');
  DvtToolkitUtils.setAttrNullNS(elemCM, 'values', '0 0 0 ' + red + ' 0 ' +
      '0 0 0 ' + green + ' 0 ' +
      '0 0 0 ' + blue + ' 0 ' +
      '0 0 0 ' + alpha * strength + ' 0');
  //var elemCMResult = filtContext.createResultId('colorMatrix');
  //DvtToolkitUtils.setAttrNullNS(elemCM, 'result', elemCMResult) ;

  var elemGB = DvtSvgShapeUtils.createElement('feGaussianBlur');
  //include both numbers for stdDev when necessary
  var stdDev = blurX;
  if (blurX !== blurY)
  {
    stdDev += ' ' + blurY;
  }
  DvtToolkitUtils.setAttrNullNS(elemGB, 'stdDeviation', stdDev);
  var elemGBResult = filtContext.createResultId('blur');
  DvtToolkitUtils.setAttrNullNS(elemGB, 'result', elemGBResult);

  var elemO = DvtSvgShapeUtils.createElement('feOffset');
  DvtToolkitUtils.setAttrNullNS(elemO, 'dx', dx);
  DvtToolkitUtils.setAttrNullNS(elemO, 'dy', dy);
  DvtToolkitUtils.setAttrNullNS(elemO, 'in', elemGBResult);
  var elemOResult = filtContext.createResultId('offset');
  DvtToolkitUtils.setAttrNullNS(elemO, 'result', elemOResult);

  filtContext.getResultIdsUnder().push(elemOResult);

  DvtToolkitUtils.appendChildElem(filt, elemCM);
  DvtToolkitUtils.appendChildElem(filt, elemGB);
  DvtToolkitUtils.appendChildElem(filt, elemO);


  // TDO <feMorphology operator="erode" in="blurred" radius="3" result="eroded"/>
  //}
};


/**
 * @protected
 */
DvtSvgShadowUtils.CreateInnerFilterPrimitives = function(filt, shadow, svgDisplayable, filtContext)
{
  var rgba = shadow._rgba;
  var red = DvtColorUtils.getRed(rgba) / 255;
  var green = DvtColorUtils.getGreen(rgba) / 255;
  var blue = DvtColorUtils.getBlue(rgba) / 255;
  var rgb = DvtColorUtils.makeRGB(red, green, blue);
  var alpha = DvtColorUtils.getAlpha(rgba);

  var origBlurX = shadow._blurX;
  var origBlurY = shadow._blurY;
  //adjust blur values so that SVG behaves more like Flash
  var blurX = Math.max(shadow._blurX / 2, 1);
  var blurY = Math.max(shadow._blurY / 2, 1);
  var distance = shadow._distance;
  var angleDegs = shadow._angle;
  var strength = shadow._strength;

  var angleRads = angleDegs * DvtSvgShadowUtils.RADS_PER_DEGREE;
  var dx = Math.cos(angleRads) * distance;
  var dy = Math.sin(angleRads) * distance;

  var elemF1 = DvtSvgShapeUtils.createElement('feFlood');
  DvtToolkitUtils.setAttrNullNS(elemF1, 'in', 'SourceGraphic');
  DvtToolkitUtils.setAttrNullNS(elemF1, 'flood-opacity', alpha);
  DvtToolkitUtils.setAttrNullNS(elemF1, 'flood-color', rgb);
  var elemF1Result = filtContext.createResultId('flood');
  DvtToolkitUtils.setAttrNullNS(elemF1, 'result', elemF1Result);

  var elemC1 = DvtSvgShapeUtils.createElement('feComposite');
  DvtToolkitUtils.setAttrNullNS(elemC1, 'operator', 'out');
  DvtToolkitUtils.setAttrNullNS(elemC1, 'in', elemF1Result);
  DvtToolkitUtils.setAttrNullNS(elemC1, 'in2', 'SourceGraphic');
  //var elemC1Result = filtContext.createResultId('comp');
  //DvtToolkitUtils.setAttrNullNS(elemC1, 'result', elemC1Result) ;

  /*
   var elemCM  = DvtSvgShapeUtils.createElement('feColorMatrix') ;
   DvtToolkitUtils.setAttrNullNS(elemCM, 'in', 'SourceGraphic') ;
   DvtToolkitUtils.setAttrNullNS(elemCM, 'type', 'matrix') ;
   DvtToolkitUtils.setAttrNullNS(elemCM, 'values', '0 0 0 ' + red   + ' 0 ' +
                                        '0 0 0 ' + green + ' 0 ' +
                                        '0 0 0 ' + blue  + ' 0 ' +
                                        '0 0 0 ' + alpha + ' 0') ;
   //var elemCMResult = filtContext.createResultId('colorMatrix');
   //DvtToolkitUtils.setAttrNullNS(elemCM, 'result', elemCMResult) ;
  */

  var elemGB = DvtSvgShapeUtils.createElement('feGaussianBlur');
  //include both numbers for stdDev when necessary
  var stdDev = blurX;
  if (blurX !== blurY)
  {
    stdDev += ' ' + blurY;
  }
  DvtToolkitUtils.setAttrNullNS(elemGB, 'stdDeviation', stdDev);
  var elemGBResult = filtContext.createResultId('blur');
  DvtToolkitUtils.setAttrNullNS(elemGB, 'result', elemGBResult);

  //attempt to use the shadow strength as multiplier for alpha
  //value in blur filter
  var elemCM2 = DvtSvgShapeUtils.createElement('feColorMatrix');
  DvtToolkitUtils.setAttrNullNS(elemCM2, 'in', elemGBResult);
  DvtToolkitUtils.setAttrNullNS(elemCM2, 'type', 'matrix');
  DvtToolkitUtils.setAttrNullNS(elemCM2, 'values', '1 0 0 0 0 ' +
      '0 1 0 0 0 ' +
                                        '0 0 1 0 0 ' +
                                        '0 0 0 ' + strength + ' 0');
  var elemCM2Result = filtContext.createResultId('colMat');
  DvtToolkitUtils.setAttrNullNS(elemCM2, 'result', elemCM2Result);

  var elemO = DvtSvgShapeUtils.createElement('feOffset');
  DvtToolkitUtils.setAttrNullNS(elemO, 'dx', dx);
  DvtToolkitUtils.setAttrNullNS(elemO, 'dy', dy);
  DvtToolkitUtils.setAttrNullNS(elemO, 'in', elemCM2Result);
  var elemOResult = filtContext.createResultId('offset');
  DvtToolkitUtils.setAttrNullNS(elemO, 'result', elemOResult);

  var elemC2 = DvtSvgShapeUtils.createElement('feComposite');
  DvtToolkitUtils.setAttrNullNS(elemC2, 'operator', 'in');
  DvtToolkitUtils.setAttrNullNS(elemC2, 'in', elemOResult);
  DvtToolkitUtils.setAttrNullNS(elemC2, 'in2', 'SourceGraphic');
  var elemC2Result = filtContext.createResultId('comp');
  DvtToolkitUtils.setAttrNullNS(elemC2, 'result', elemC2Result);

  filtContext.getResultIdsOver().push(elemC2Result);

  DvtToolkitUtils.appendChildElem(filt, elemF1);
  DvtToolkitUtils.appendChildElem(filt, elemC1);
  //DvtToolkitUtils.appendChildElem(filt, elemCM) ;
  DvtToolkitUtils.appendChildElem(filt, elemGB);
  DvtToolkitUtils.appendChildElem(filt, elemCM2);
  DvtToolkitUtils.appendChildElem(filt, elemO);
  DvtToolkitUtils.appendChildElem(filt, elemC2);
};

  return D;
});